<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julio Merino</title>
    <link>http://julio.meroh.net/</link>
    <description>Recent content on Julio Merino</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Feb 2018 06:00:00 -0400</lastBuildDate>
    
	<atom:link href="http://julio.meroh.net/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>From Jekyll to Hugo</title>
      <link>http://julio.meroh.net/2018/02/from-jekyll-to-hugo.html</link>
      <pubDate>Sat, 24 Feb 2018 06:00:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/02/from-jekyll-to-hugo.html</guid>
      <description>It is done. This site is now powered by Hugo instead of Jekyll. It took me a full week&amp;rsquo;s worth of early mornings to achieve, but the results are great&amp;hellip; internally, that is, because as a reader you should notice no changes other than minor style tweaks.
Performance differences As of today, this site hosts 711 posts totaling 3.4MB of text. The style sheet is based on Bootstrap and is built from scratch using SASS.</description>
    </item>
    
    <item>
      <title>Looking to replace Jekyll</title>
      <link>http://julio.meroh.net/2018/02/looking-to-replace-jekyll.html</link>
      <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://julio.meroh.net/2018/02/looking-to-replace-jekyll.html</guid>
      <description>&lt;p&gt;Back in &lt;a href=&#34;http://julio.meroh.net/2015/05/hello-medium.html&#34;&gt;May 2015&lt;/a&gt;, I was lured to Medium by its simplicity and growing community, which resulted in me posting a bunch of articles there and enjoying every moment of it. But, eventually, I noticed that &lt;a href=&#34;http://julio.meroh.net/2016/01/medium-experiment-wrapup.html&#34;&gt;I was losing control of my content&lt;/a&gt;. So &lt;a href=&#34;http://julio.meroh.net/2016/05/homepage-v3.html&#34;&gt;a year later&lt;/a&gt;, my experiments to create static homepage resulted in me moving from Blogger and Medium to a &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;-managed site.&lt;/p&gt;

&lt;p&gt;Almost two years have passed since that migration and I can only count 7 miserable new posts. This ridiculously-low number, unfortunately, doesn&amp;rsquo;t track my willingness to writeâ€”but &lt;strong&gt;the friction to posting has become so high&lt;/strong&gt; that I fear composing new essays.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fighting execs via sandboxfs on macOS</title>
      <link>http://julio.meroh.net/2017/10/fighting-execs-sandboxfs-macos.html</link>
      <pubDate>Fri, 06 Oct 2017 16:27:34 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2017/10/fighting-execs-sandboxfs-macos.html</guid>
      <description>A few weeks ago, we announced sandboxfs: a FUSE file system to expose an arbitrary view of the host&amp;rsquo;s file system. We intend to use this file system in Bazel to provide a faster and more correct sandboxing technique for build actions.
Since then, I&amp;rsquo;ve been actively working on stabilizing sandboxfs per se and its integration with Bazel. The first milestone, which we haven&amp;rsquo;t reached yet, is to get Bazel to self-build on macOS with sandboxfs.</description>
    </item>
    
    <item>
      <title>Introducing sandboxfs</title>
      <link>http://julio.meroh.net/2017/08/introducing-sandboxfs.html</link>
      <pubDate>Fri, 25 Aug 2017 16:25:18 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2017/08/introducing-sandboxfs.html</guid>
      <description>sandboxfs is a FUSE-based file system that exposes an arbitrary view of the host&amp;rsquo;s file system under the mount point, and offers access controls that differ from those of the host. You can think of sandboxfs as an advanced version of bindfs (or mount --bind or mount_null(8) depending on your system) in which you can combine and nest directories under an arbitrary layout.
The primary use case for this project is to provide a better file system sandboxing technique for the Bazel build system.</description>
    </item>
    
    <item>
      <title>Introducing sourcachefs</title>
      <link>http://julio.meroh.net/2017/07/introducing-sourcachefs.html</link>
      <pubDate>Sun, 30 Jul 2017 20:30:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2017/07/introducing-sourcachefs.html</guid>
      <description>You may remember a post from over a year ago titled Analysis of SSHFS performance for large builds, in which I outlined how Google exposes its gigantic source monorepo via a FUSE file system and in which I analyzed the performance of large builds using SSHFS to access such file system.
As part of those experiments, I played with pCacheFS, a Python-based FUSE file system that provides a persistent caching layer on to top of a slow mount point.</description>
    </item>
    
    <item>
      <title>Easy pkgsrc on macOS with pkg_comp 2.0</title>
      <link>http://julio.meroh.net/2017/02/pkg_comp-2.0-tutorial-macos.html</link>
      <pubDate>Thu, 23 Feb 2017 17:36:54 -0500</pubDate>
      
      <guid>http://julio.meroh.net/2017/02/pkg_comp-2.0-tutorial-macos.html</guid>
      <description>&lt;p&gt;This is a tutorial to guide you through the &lt;a href=&#34;http://julio.meroh.net/2017/02/introducing-pkg_comp-2.0.html&#34;&gt;shiny new pkg_comp 2.0&lt;/a&gt; on macOS &lt;a href=&#34;https://github.com/jmmv/pkg_comp/blob/master/INSTALL.md#using-the-macos-installer&#34;&gt;using the macOS-specific self-installer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goals:&lt;/strong&gt; to use pkg_comp 2.0 to build a binary repository of all the packages you are interested in; to keep the repository fresh on a daily basis; and to use that repository with pkgin to maintain your macOS system up-to-date and secure.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Keeping NetBSD up-to-date with pkg_comp 2.0</title>
      <link>http://julio.meroh.net/2017/02/pkg_comp-2.0-tutorial-netbsd.html</link>
      <pubDate>Sat, 18 Feb 2017 11:51:55 -0500</pubDate>
      
      <guid>http://julio.meroh.net/2017/02/pkg_comp-2.0-tutorial-netbsd.html</guid>
      <description>&lt;p&gt;This is a tutorial to guide you through the &lt;a href=&#34;http://julio.meroh.net/2017/02/introducing-pkg_comp-2.0.html&#34;&gt;shiny new pkg_comp 2.0&lt;/a&gt; on NetBSD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goals:&lt;/strong&gt; to use pkg_comp 2.0 to build a binary repository of all the packages you are interested in; to keep the repository fresh on a daily basis; and to use that repository with pkgin to maintain your NetBSD system up-to-date and secure.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing pkg_comp 2.0 (and sandboxctl 1.0)</title>
      <link>http://julio.meroh.net/2017/02/introducing-pkg_comp-2.0.html</link>
      <pubDate>Fri, 17 Feb 2017 16:37:06 -0500</pubDate>
      
      <guid>http://julio.meroh.net/2017/02/introducing-pkg_comp-2.0.html</guid>
      <description>After many (many) years in the making, pkg_comp 2.0 and its companion sandboxctl 1.0 are finally here!
Read below for more details on this launch. I will publish detailed step-by-step tutorials on setting up periodic package rebuilds in separate posts.
What are these tools? pkg_comp is an automation tool to build pkgsrc binary packages inside a chroot-based sandbox. The main goal is to fully automate the process and to produce clean and reproducible packages.</description>
    </item>
    
    <item>
      <title>#! /usr/bin/env considered harmful</title>
      <link>http://julio.meroh.net/2016/09/env-considered-harmful.html</link>
      <pubDate>Wed, 14 Sep 2016 07:07:46 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2016/09/env-considered-harmful.html</guid>
      <description>Many programming guides recommend to begin scripts with the #! /usr/bin/env shebang in order to to automatically locate the necessary interpreter. For example, for a Python script you would use #! /usr/bin/env python, and then the saying goes, the script would &amp;ldquo;just work&amp;rdquo; on any machine with Python installed.
The reason for this recommendation is that /usr/bin/env python will search the PATH for a program called python and execute the first one found&amp;hellip; and that usually works fine on one&amp;rsquo;s own machine.</description>
    </item>
    
    <item>
      <title>Welcome to my homepage, version 3.0</title>
      <link>http://julio.meroh.net/2016/05/homepage-v3.html</link>
      <pubDate>Sun, 29 May 2016 17:00:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2016/05/homepage-v3.html</guid>
      <description>Welcome to my updated homepage, this time at its third major version!
First iteration &amp;mdash; a year ago The first iteration of this site, which went live exactly a year ago, was a single static page that leveraged Twitter&amp;rsquo;s Bootstrap. I created that page for two reasons: to serve as the target for all the &amp;ldquo;homepage&amp;rdquo; links that online profiles require, and to learn Bootstrap. Due to the site&amp;rsquo;s simplicity and goals, its contents were not very interesting nor dynamic.</description>
    </item>
    
    <item>
      <title>Visual Studio Code: A modern editor</title>
      <link>http://julio.meroh.net/2016/04/vscode.html</link>
      <pubDate>Tue, 19 Apr 2016 11:30:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2016/04/vscode.html</guid>
      <description>On April 14th, 2016, Microsoft announced the 1.0 release of their open-source Visual Studio Code (VSCode) editor. I&amp;rsquo;ve been drive-testing it for a few months and have been quite pleased with it, so here go my impressions.
How did I get here? Let&amp;rsquo;s backtrack a bit first. I&amp;rsquo;ve been a Vim and Emacs user for many years. Yes, I use both regularly depending on what I have to achieve. For me, Vim shines in doing quick single-file changes and repetitive edits through many files, while Emacs shines in long-lived coding sessions that involve numerous open buffers.</description>
    </item>
    
    <item>
      <title>A look at Go from a newbie&#39;s perspective</title>
      <link>http://julio.meroh.net/2016/03/golang-review.html</link>
      <pubDate>Tue, 22 Mar 2016 17:00:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2016/03/golang-review.html</guid>
      <description>I confess I am late to the game: the Go programming language came out in 2009 and I had not had the chance to go all in for a real project until two weeks ago. Here is a summary of my experience. Spoiler alert: I&amp;rsquo;m truly pleased.
The project What I set out to build is a read-only caching file system to try to solve the problems I presented in my previous analysis of large builds on SSHFS.</description>
    </item>
    
    <item>
      <title>Those pesky Makefiles</title>
      <link>http://julio.meroh.net/2016/03/those-pesky-makefiles.html</link>
      <pubDate>Wed, 02 Mar 2016 09:45:00 -0500</pubDate>
      
      <guid>http://julio.meroh.net/2016/03/those-pesky-makefiles.html</guid>
      <description>&lt;p&gt;As a software developer, you have probably disregarded the build system of your project&amp;mdash;those pesky &lt;code&gt;Makefile&lt;/code&gt;s&amp;mdash;as unimportant. You have probably &amp;ldquo;chosen&amp;rdquo; to use the de-facto build tool &lt;code&gt;make(1)&lt;/code&gt;. And you have probably hacked your way around until things &amp;ldquo;seemingly worked&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;But hang on a second. Those build files are way more important than you may think and deserve a wee bit more attention.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Analysis of SSHFS performance for large builds</title>
      <link>http://julio.meroh.net/2016/02/sshfs-performance-analysis-for-builds.html</link>
      <pubDate>Wed, 17 Feb 2016 08:30:00 -0500</pubDate>
      
      <guid>http://julio.meroh.net/2016/02/sshfs-performance-analysis-for-builds.html</guid>
      <description>&lt;p&gt;Last week, I spent some time looking at the &lt;strong&gt;feasibility of using SSHFS on OS X to access Google&amp;rsquo;s centralized source tree for the purpose of issuing local builds&lt;/strong&gt;. My goals were two-fold: first, to &lt;strong&gt;avoid having to &amp;ldquo;clone&amp;rdquo; the large source code&lt;/strong&gt; of the apps I wanted to build; and, second, to &lt;strong&gt;avoid having to port&lt;/strong&gt; the source file system (a FUSE module) to the Mac.&lt;/p&gt;

&lt;p&gt;What I found highlights that &lt;strong&gt;SSHFS is not the right choice for locally building a remote source tree&lt;/strong&gt;. That said, the overall study process was interesting, fun, and I am now tempted to make SSHFS viable for this use case. Read on for the details.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Medium experiment wrap-up</title>
      <link>http://julio.meroh.net/2016/01/medium-experiment-wrapup.html</link>
      <pubDate>Thu, 28 Jan 2016 22:30:00 -0500</pubDate>
      
      <guid>http://julio.meroh.net/2016/01/medium-experiment-wrapup.html</guid>
      <description>Eight months ago, I decided to try Medium as the platform on which to post my essays. Over this time I have published a handful of posts in there&amp;mdash;8, to be precise, which is&amp;hellip; a very shy number&amp;mdash;but the results have been quite satisfactory: the WYSIWYG composer is excellent, the analytics tools are simple but to the point, the looks are great, and the community is nice (though I haven&amp;rsquo;t been able to tap into it just yet).</description>
    </item>
    
  </channel>
</rss>