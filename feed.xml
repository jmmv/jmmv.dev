<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julio Merino</title>
    <description>This is Julio Merino's homepage.  This site is primarily my personal blog and, secondarily, a gateway to my presence in the web.
</description>
    <link>http://julio.meroh.net/</link>
    <atom:link href="http://julio.meroh.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 31 Jul 2017 00:53:06 +0000</pubDate>
    <lastBuildDate>Mon, 31 Jul 2017 00:53:06 +0000</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Introducing sourcachefs</title>
        
        <description>
          Announcing the launch of sourcachefs, a FUSE-based persistent caching layer.
          &lt;a href=&quot;http://julio.meroh.net/2017/07/introducing-sourcachefs.html&quot;&gt;[Continue reading]&lt;/a&gt;
        </description>
        
        <pubDate>Mon, 31 Jul 2017 00:30:00 +0000</pubDate>
        <link>http://julio.meroh.net/2017/07/introducing-sourcachefs.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2017/07/introducing-sourcachefs.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Easy pkgsrc on macOS with pkg_comp 2.0</title>
        
        <description>
          This is a tutorial to guide you through the shiny new pkg_comp 2.0 on macOS using the macOS-specific self-installer.

Goals: to use pkg_comp 2.0 to build a binary repository of all the packages you are interested in; to keep the repository fresh on a daily basis; and to use that repository with pkgin to maintain your macOS system up-to-date and secure.


          &lt;a href=&quot;http://julio.meroh.net/2017/02/pkg_comp-2.0-tutorial-macos.html&quot;&gt;[Continue reading]&lt;/a&gt;
        </description>
        
        <pubDate>Thu, 23 Feb 2017 22:36:54 +0000</pubDate>
        <link>http://julio.meroh.net/2017/02/pkg_comp-2.0-tutorial-macos.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2017/02/pkg_comp-2.0-tutorial-macos.html</guid>
        
        
        <category>macos</category>
        
        <category>software</category>
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Keeping NetBSD up-to-date with pkg_comp 2.0</title>
        
        <description>
          This is a tutorial to guide you through the shiny new pkg_comp 2.0 on NetBSD.

Goals: to use pkg_comp 2.0 to build a binary repository of all the packages you are interested in; to keep the repository fresh on a daily basis; and to use that repository with pkgin to maintain your NetBSD system up-to-date and secure.


          &lt;a href=&quot;http://julio.meroh.net/2017/02/pkg_comp-2.0-tutorial-netbsd.html&quot;&gt;[Continue reading]&lt;/a&gt;
        </description>
        
        <pubDate>Sat, 18 Feb 2017 16:51:55 +0000</pubDate>
        <link>http://julio.meroh.net/2017/02/pkg_comp-2.0-tutorial-netbsd.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2017/02/pkg_comp-2.0-tutorial-netbsd.html</guid>
        
        
        <category>netbsd</category>
        
        <category>software</category>
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Introducing pkg_comp 2.0 (and sandboxctl 1.0)</title>
        
        <description>
          Announcing the launch of pkg_comp 2.0, how this differs from the 1.x series, why there was a rewrite, what sandboxctl 1.0 is, and more.
          &lt;a href=&quot;http://julio.meroh.net/2017/02/introducing-pkg_comp-2.0.html&quot;&gt;[Continue reading]&lt;/a&gt;
        </description>
        
        <pubDate>Fri, 17 Feb 2017 21:37:06 +0000</pubDate>
        <link>http://julio.meroh.net/2017/02/introducing-pkg_comp-2.0.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2017/02/introducing-pkg_comp-2.0.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>#! /usr/bin/env considered harmful</title>
        
        <description>
          Many programming guides recommend to begin scripts with the #! /usr/bin/env shebang in order to to automatically locate the necessary interpreter. For example, for a Python script you would use #! /usr/bin/env python, and then the saying goes, the script would “just work” on any machine with Python installed.


          &lt;a href=&quot;http://julio.meroh.net/2016/09/env-considered-harmful.html&quot;&gt;[Continue reading]&lt;/a&gt;
        </description>
        
        <pubDate>Wed, 14 Sep 2016 11:07:46 +0000</pubDate>
        <link>http://julio.meroh.net/2016/09/env-considered-harmful.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2016/09/env-considered-harmful.html</guid>
        
        
        <category>portability</category>
        
        <category>programming</category>
        
        <category>scripts</category>
        
        <category>unix</category>
        
      </item>
    
      <item>
        <title>Welcome to my homepage, version 3.0</title>
        
        <description>
          Welcome to my updated homepage, this time at its third major version!


          &lt;a href=&quot;http://julio.meroh.net/2016/05/homepage-v3.html&quot;&gt;[Continue reading]&lt;/a&gt;
        </description>
        
        <pubDate>Sun, 29 May 2016 21:00:00 +0000</pubDate>
        <link>http://julio.meroh.net/2016/05/homepage-v3.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2016/05/homepage-v3.html</guid>
        
        
        <category>website</category>
        
      </item>
    
      <item>
        <title>Visual Studio Code: A modern editor</title>
        
        <description>
          On April 14th, 2016, Microsoft announced the 1.0 release of their open-source Visual Studio Code (VSCode) editor. I’ve been drive-testing it for a few months and have been quite pleased with it, so here go my impressions.


          &lt;a href=&quot;http://julio.meroh.net/2016/04/vscode.html&quot;&gt;[Continue reading]&lt;/a&gt;
        </description>
        
        <pubDate>Tue, 19 Apr 2016 15:30:00 +0000</pubDate>
        <link>http://julio.meroh.net/2016/04/vscode.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2016/04/vscode.html</guid>
        
        
        <category>development</category>
        
        <category>software</category>
        
        <category>workflow</category>
        
      </item>
    
      <item>
        <title>A look at Go from a newbie's perspective</title>
        
        <description>
          I confess I am late to the game: the Go programming language came out in 2009 and I had not had the chance to go all in for a real project until two weeks ago. Here is a summary of my experience. Spoiler alert: I’m truly pleased.


          &lt;a href=&quot;http://julio.meroh.net/2016/03/golang-review.html&quot;&gt;[Continue reading]&lt;/a&gt;
        </description>
        
        <pubDate>Tue, 22 Mar 2016 21:00:00 +0000</pubDate>
        <link>http://julio.meroh.net/2016/03/golang-review.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2016/03/golang-review.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Those pesky Makefiles</title>
        
        <description>
          As a software developer, you have probably disregarded the build system of your project—those pesky Makefiles—as unimportant. You have probably “chosen” to use the de-facto build tool make(1). And you have probably hacked your way around until things “seemingly worked”.

But hang on a second. Those build files are way more important than you may think and deserve a wee bit more attention.


          &lt;a href=&quot;http://julio.meroh.net/2016/03/those-pesky-makefiles.html&quot;&gt;[Continue reading]&lt;/a&gt;
        </description>
        
        <pubDate>Wed, 02 Mar 2016 14:45:00 +0000</pubDate>
        <link>http://julio.meroh.net/2016/03/those-pesky-makefiles.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2016/03/those-pesky-makefiles.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Analysis of SSHFS performance for large builds</title>
        
        <description>
          Last week, I spent some time looking at the feasibility of using SSHFS on OS X to access Google’s centralized source tree for the purpose of issuing local builds. My goals were two-fold: first, to avoid having to “clone” the large source code of the apps I wanted to build; and, second, to avoid having to port the source file system (a FUSE module) to the Mac.

What I found highlights that SSHFS is not the right choice for locally building a remote source tree. That said, the overall study process was interesting, fun, and I am now tempted to make SSHFS viable for this use case. Read on for the details.


          &lt;a href=&quot;http://julio.meroh.net/2016/02/sshfs-performance-analysis-for-builds.html&quot;&gt;[Continue reading]&lt;/a&gt;
        </description>
        
        <pubDate>Wed, 17 Feb 2016 13:30:00 +0000</pubDate>
        <link>http://julio.meroh.net/2016/02/sshfs-performance-analysis-for-builds.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2016/02/sshfs-performance-analysis-for-builds.html</guid>
        
        
        <category>software</category>
        
      </item>
    
  </channel>
</rss>
