<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julio Merino (jmmv.dev)</title>
    <link>https://jmmv.dev/</link>
    <description>Recent content on Julio Merino (jmmv.dev)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Aug 2021 09:10:00 -0700</lastBuildDate>
    
	<atom:link href="https://jmmv.dev/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Useless use of GNU</title>
      <link>https://jmmv.dev/2021/08/useless-use-of-gnu.html</link>
      <pubDate>Wed, 25 Aug 2021 09:10:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2021/08/useless-use-of-gnu.html</guid>
      <description>The GNU project is the source of the Unix userland utilities used on most Linux distributions. Its compatibility with standards and other Unix systems, or lack thereof, directly impacts the overall portability of any piece of software developed from GNU/Linux1 installations.
Given that GNU/Linux has &amp;ldquo;triumphed&amp;rdquo; over pretty much every other Unix-like system, it is likely that you are developing from a GNU/Linux system, and it is also likely that you have no or little exposure to other Unix systems.</description>
    </item>
    
    <item>
      <title>Should the browser use all available memory?</title>
      <link>https://jmmv.dev/2021/08/using-all-memory-as-a-cache.html</link>
      <pubDate>Thu, 12 Aug 2021 09:30:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2021/08/using-all-memory-as-a-cache.html</guid>
      <description>We have all seen discussions go like this: someone first complains that an application like Google Chrome is wasteful because it uses multiple GBs of memory. Someone else comes along and says that memory is there to be used for speed and therefore this is the correct behavior: if the computer has multiple GBs of free memory, an application such as Chrome should make use of all the available memory in the form of a cache to be as responsive as possible. Makes sense, right? Yes, it does makes sense&amp;mdash;as long as Chrome is the only application running. Let&amp;rsquo;s explore why this is not a great idea.</description>
    </item>
    
    <item>
      <title>Principal engineers should be on-call</title>
      <link>https://jmmv.dev/2021/07/principal-engineers-oncall.html</link>
      <pubDate>Wed, 14 Jul 2021 06:30:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2021/07/principal-engineers-oncall.html</guid>
      <description>&lt;p&gt;A recent tweet that caught my attention read: &amp;ldquo;principal engineers should be on-call&amp;rdquo;. Of course they should be! I&amp;rsquo;m &amp;ldquo;surprised&amp;rdquo; they aren&amp;rsquo;t everywhere, but I can imagine some reasons to justify their situation. Let&amp;rsquo;s change that in this thread. ðŸ§µ ðŸ‘‡&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Definitions and initializations in C&#43;&#43;</title>
      <link>https://jmmv.dev/2021/07/cpp-definition-initialization.html</link>
      <pubDate>Mon, 12 Jul 2021 06:20:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2021/07/cpp-definition-initialization.html</guid>
      <description>When reviewing an incoming C++ PR last week, I left a comment along the lines: &amp;ldquo;merge local variable declaration with its initialization&amp;rdquo;. But why? Is this just a stylistic issue or is there something deeper to warrant making the change? Let&amp;rsquo;s look at stack frames, C, and then C++ to answer these questions.</description>
    </item>
    
    <item>
      <title>macOS keyboard shortcuts for Windows</title>
      <link>https://jmmv.dev/2021/07/macos-ahk.html</link>
      <pubDate>Wed, 07 Jul 2021 09:00:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2021/07/macos-ahk.html</guid>
      <description>&lt;p&gt;Are you a macOS user occasionally dealing with Windows systems or trying to switch platforms? Are you a Windows user that believes that the Windows-native keyboard shortcuts are objectively bad? Are you annoyed by something as simple as copy/pasting text not working consistently across apps?&lt;/p&gt;
&lt;p&gt;If so, this post will equip you with an &lt;a href=&#34;https://www.autohotkey.com/&#34;&gt;AutoHotkey&lt;/a&gt; configuration file that brings macOS keyboard shortcuts to Windows. Read on.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EndBASIC 0.7: Hello, cloud!</title>
      <link>https://jmmv.dev/2021/07/endbasic-0.7.html</link>
      <pubDate>Sat, 03 Jul 2021 16:45:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2021/07/endbasic-0.7.html</guid>
      <description>&lt;p&gt;Several months have passed since the last EndBASIC release and, since then, you might have seen me talk nonstop about an &amp;ldquo;EndBASIC service&amp;rdquo; in social media&amp;hellip; which has sounded like vaporware. That changes today.&lt;/p&gt;
&lt;p&gt;After about four months of work, I am ecstatic to announce that EndBASIC 0.7 is here. And these haven&amp;rsquo;t been four months of idle time. No, no, no. It has taken four months of my scarce free time to deliver this because 0.7 is a humongous release on various fronts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>From FeedBurner to follow.it</title>
      <link>https://jmmv.dev/2021/07/feedburner-to-follow-it-migration.html</link>
      <pubDate>Fri, 02 Jul 2021 21:10:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2021/07/feedburner-to-follow-it-migration.html</guid>
      <description>An announcement that explains why this blog has had to migrate from FeedBurner-based email subscriptions to a new service offered by follow.it. If you were subscribed before, please read this; and if you weren&amp;rsquo;t, please consider subscribing now.</description>
    </item>
    
    <item>
      <title>Running a healthy production service</title>
      <link>https://jmmv.dev/2021/06/service-health.html</link>
      <pubDate>Fri, 18 Jun 2021 06:25:00 -1000</pubDate>
      
      <guid>https://jmmv.dev/2021/06/service-health.html</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://jmmv.dev/2021/03/oncall-wellbeing.html&#34;&gt;a previous thread&lt;/a&gt;, I covered some techniques to approach on-call shifts and maintain &lt;em&gt;your own&lt;/em&gt; well-being. In this thread, I will touch upon the things you can do, as a team, to make &lt;em&gt;your service&lt;/em&gt; more sustainable. ðŸ§µ ðŸ‘‡&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On software deadlines</title>
      <link>https://jmmv.dev/2021/04/on-software-deadlines.html</link>
      <pubDate>Tue, 20 Apr 2021 09:40:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2021/04/on-software-deadlines.html</guid>
      <description>&lt;p&gt;In my career so far (which isn&amp;rsquo;t that long&amp;hellip; but also not that short ðŸ˜‰), I&amp;rsquo;ve been lucky enough to not be subject to strict deadlines. That&amp;rsquo;s why I&amp;rsquo;m always in awe every time I talk to fellow long-time Microsoft employees. A thread! ðŸ§µ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Always be quitting</title>
      <link>https://jmmv.dev/2021/04/always-be-quitting.html</link>
      <pubDate>Mon, 12 Apr 2021 09:00:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2021/04/always-be-quitting.html</guid>
      <description>&lt;p&gt;A good philosophy to live by at work is to &amp;ldquo;always be quitting&amp;rdquo;. No, don&amp;rsquo;t be constantly thinking of leaving your job ðŸ˜±. But act as if you might leave on short notice ðŸ˜Ž. Counterintuitively, this will make you a better engineer and open up growth opportunities. A thread ðŸ‘‡.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Defining build time SLIs and SLOs</title>
      <link>https://jmmv.dev/2021/03/build-time-slis-slos.html</link>
      <pubDate>Fri, 12 Mar 2021 06:30:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/03/build-time-slis-slos.html</guid>
      <description>Companies grow, and with them do the software projects that support them. It should be no surprise that larger programs require longer build times. And, if I had to guess, you have seen how those build times eventually grow to unbearable levels, reducing productivity and degrading quality. In this post, I examine how we can leverage the common techniques we use for production services&amp;mdash;namely SLIs and SLOs&amp;mdash;to keep build times on track.</description>
    </item>
    
    <item>
      <title>Tips on well-being while on-call</title>
      <link>https://jmmv.dev/2021/03/oncall-wellbeing.html</link>
      <pubDate>Wed, 10 Mar 2021 09:30:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/03/oncall-wellbeing.html</guid>
      <description>&lt;p&gt;Last week, I was first-time on-call for a part of Azure Storage. My previous background as an SRE at Google helped me remain calm despite my inexperience. And as we have more first-time on-callers joining soon, I couldn&amp;rsquo;t resist writing some advice for them. Let&amp;rsquo;s start! ðŸ§µ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How does Google keep build times low?</title>
      <link>https://jmmv.dev/2021/02/google-monorepos-and-caching.html</link>
      <pubDate>Fri, 26 Feb 2021 09:50:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/02/google-monorepos-and-caching.html</guid>
      <description>Monorepos are an interesting beast. If mended properly, they enable a level of uniformity and code quality that is hard to achieve otherwise. If left unattended, however, they become unmanageable monsters of tangled dependencies, slow builds, and frustrating developer experiences. Whether you have a good or bad experience directly depends on the level of engineering support behind the monorepo. Simply put, monorepos require dedicated teams and tools to run nicely. In this post, I will look at how almost-perfect caching plays a key role in keeping build times manageable under such an environment.</description>
    </item>
    
    <item>
      <title>EndBASIC 0.6 release announcement</title>
      <link>https://jmmv.dev/2021/02/endbasic-0.6.html</link>
      <pubDate>Fri, 19 Feb 2021 06:30:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/02/endbasic-0.6.html</guid>
      <description>After a very active month of development since the 0.5 announcement, it is time to welcome EndBASIC 0.6!
This new 0.6 release is super-exciting for three reasons:
 preliminary GPIO support in the standard library specifically tailored to the Raspberry Pi; multidimensional array support in the language; and availability of binary releases for the most common platforms.  You can dive right in by:
 visiting https://repl.endbasic.dev/ for an interactive session, reading more about the project at https://www.</description>
    </item>
    
    <item>
      <title>Seeding a file server quickly</title>
      <link>https://jmmv.dev/2021/02/seeding-a-file-server.html</link>
      <pubDate>Fri, 05 Feb 2021 10:00:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/02/seeding-a-file-server.html</guid>
      <description>Say you want to copy a large collection of files to a file server on your same network. What&amp;rsquo;s the fastest way to do this initial copy? Physically attaching the drive to the server? Maybe, but will the file systems be compatible? What about using the network? If so, which protocol? Read on for more details and how tar plus Netcat delivered the best results.</description>
    </item>
    
  </channel>
</rss>