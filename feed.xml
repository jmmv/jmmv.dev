<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julio Merino</title>
    <link>http://julio.meroh.net/</link>
    <description>Recent content on Julio Merino</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Jun 2018 09:00:00 -0400</lastBuildDate>
    
	<atom:link href="http://julio.meroh.net/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust review: The borrow checker</title>
      <link>http://julio.meroh.net/2018/06/rust-review-borrow-checker.html</link>
      <pubDate>Fri, 01 Jun 2018 09:00:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/06/rust-review-borrow-checker.html</guid>
      <description>Aaaah, the borrow checker: the dreaded enemy lurking within the Rust compiler, ready to make its move to bring pain to your life by preventing your code from compiling. Or that&amp;rsquo;s what everyone seems to say, which is one of the reasons I put off learning Rust for so long. In reality&amp;hellip; the borrow checker is a blessing, but it is true that getting past its gates is difficult at first.</description>
    </item>
    
    <item>
      <title>Rust review: Immutable by default</title>
      <link>http://julio.meroh.net/2018/05/rust-review-immutable-by-default.html</link>
      <pubDate>Tue, 29 May 2018 09:00:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/05/rust-review-immutable-by-default.html</guid>
      <description>Let&amp;rsquo;s start the deep dive by looking into a powerful feature of Rust: all variables and references are immutable by default unless qualified with mut.
To understand why this is important, let&amp;rsquo;s cover some context first. One of my pet peeves when reviewing C++ code is to ask authors to sprinkle the const qualifier everywhere: if something ain&amp;rsquo;t mutated, say so explicitly. This includes marking local variables, function arguments, function return values, class attributes, etc.</description>
    </item>
    
    <item>
      <title>Rust review: Introduction</title>
      <link>http://julio.meroh.net/2018/05/rust-review-introduction.html</link>
      <pubDate>Fri, 25 May 2018 09:00:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/05/rust-review-introduction.html</guid>
      <description>I had been meaning to learn Rust since I first toyed with Go a couple of years ago. During this period, I&amp;rsquo;ve written a non-trivial amount of Go code both inside and outside Google, but never found the chance to sit back and learn Rust.
This changed a month ago during my yearly family trip to Korea. This time around, I decided upfront that I would not work on any personal or work projects for the 2-week long vacation.</description>
    </item>
    
    <item>
      <title>A few extra system calls... and you lose 1% build time</title>
      <link>http://julio.meroh.net/2018/04/bazel-xcode-locations-cache.html</link>
      <pubDate>Mon, 30 Apr 2018 13:45:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/04/bazel-xcode-locations-cache.html</guid>
      <description>Blaze—the variant of Bazel used internally at Google—was originally designed to build the Google monorepo. One of the beauties of sticking to a monorepo is code reuse, but this has the unfortunate side-effect of dependency bloat. As a result, Bazel and Blaze have evolved to support ever-increasingly-bigger pieces of software.
The growth of the projects built by Bazel and Blaze has had the unsurprising consequence that our engineers all now have high-end workstations with access to massive amounts of distributed resources.</description>
    </item>
    
    <item>
      <title>Preliminary sandboxfs support in Bazel</title>
      <link>http://julio.meroh.net/2018/04/preliminary-sandboxfs-support-in-bazel.html</link>
      <pubDate>Fri, 13 Apr 2018 15:30:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/04/preliminary-sandboxfs-support-in-bazel.html</guid>
      <description>During the summer of last year, I hosted an intern who implemented sandboxfs: a FUSE-based file system that exposes an arbitrary view of the host&amp;rsquo;s file system under the mount point. At the end of his internship, we had a functional sandboxfs implementation and some draft patches for integration in Bazel.
The goal of sandboxfs in the context of Bazel is to improve the performance of builds when action sandboxing is enabled.</description>
    </item>
    
    <item>
      <title>Stick to your project&#39;s core language in your tests</title>
      <link>http://julio.meroh.net/2018/03/stick-to-projects-core-language-in-tests.html</link>
      <pubDate>Tue, 27 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>http://julio.meroh.net/2018/03/stick-to-projects-core-language-in-tests.html</guid>
      <description>&lt;p&gt;&lt;em&gt;This post is a short, generalized summary of the preceeding two. I believe those two posts put readers off due to their massive length and the fact that they were seemingly tied to Bazel and Java, thus failing to communicate the larger point I wanted to make. Let&amp;rsquo;s try to distill their key points here in a language- and project-agnostic manner.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A case for writing Bazel&#39;s integration tests in Java, part 2</title>
      <link>http://julio.meroh.net/2018/03/bazel-tests-in-java-part-2.html</link>
      <pubDate>Mon, 19 Mar 2018 08:00:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/03/bazel-tests-in-java-part-2.html</guid>
      <description>In part 1 of this series, I made the case that you should run away from the shell when writing integration tests for your software and that you should embrace the primary language of your project to write those.
Depending on the language you are using, doing this will mean significant more work upfront to lay out the foundations for your tests, but this work will pay off. You may also feel that the tests could be more verbose than if they were in shell, though that&amp;rsquo;s not necessarily the case.</description>
    </item>
    
    <item>
      <title>A case for writing Bazel&#39;s integration tests in Java, part 1</title>
      <link>http://julio.meroh.net/2018/03/bazel-tests-in-java-part-1.html</link>
      <pubDate>Fri, 16 Mar 2018 14:00:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/03/bazel-tests-in-java-part-1.html</guid>
      <description>My latest developer productivity rant thesis is that integration tests should be written in the exact same language as the thing they test. Specifically, not shell.
This theory applies mostly to tests that verify infrastructure software like servers or command line tools. It is too easy to fall into the trap of using the shell because it feels like the natural choice to interact with tools. But I argue that this is a big mistake that hurts the long-term health of the project, and once trapped, it&amp;rsquo;s hard to escape.</description>
    </item>
    
    <item>
      <title>Shell readability: local</title>
      <link>http://julio.meroh.net/2018/03/shell-readability-local.html</link>
      <pubDate>Tue, 13 Mar 2018 11:43:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/03/shell-readability-local.html</guid>
      <description>&lt;p&gt;As most programming languages with support for functions, the shell offers locally-scoped variables. Unfortunately, &lt;em&gt;local variables are not the default&lt;/em&gt;. &lt;strong&gt;You must explicitly declare variables as &lt;code&gt;local&lt;/code&gt;&lt;/strong&gt; and you should &lt;strong&gt;be very strict about doing this&lt;/strong&gt; to prevent subtle but hard-to-diagnose bugs.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it! What else is there to say about this trivial keyword? As it turns out, more than you might think.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shell readability: strict mode</title>
      <link>http://julio.meroh.net/2018/03/shell-readability-strict-mode.html</link>
      <pubDate>Fri, 09 Mar 2018 09:40:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/03/shell-readability-strict-mode.html</guid>
      <description>Some programming languages have a feature known as strict mode: a setting that makes the language interpreter disallow certain obviously-broken code that would otherwise work. The simplest examples are JavaScript and Perl but, as it turns out, the shell also has something akin to this feature. The &amp;ldquo;strict mode&amp;rdquo; name, however, is unofficial, so you won&amp;rsquo;t find many references to it online.
You can enable the shell&amp;rsquo;s strict mode by doing one of the following:</description>
    </item>
    
    <item>
      <title>Don&#39;t rollback rollbacks</title>
      <link>http://julio.meroh.net/2018/03/dont-rollback-rollbacks.html</link>
      <pubDate>Mon, 05 Mar 2018 06:45:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/03/dont-rollback-rollbacks.html</guid>
      <description>In a version control system, a rollback is a type of change that undoes the effects of a previous commit. In essence, a rollback is a commit that applies the inverse diff of another commit.
At Google, our tools make it trivial to create rollbacks for a given changelist or CL. (A CL is similar to a commit but can be either pending—in review—or submitted.) Making it trivial to create rollback CLs is important in a culture where the standard upon encountering a problem is &amp;ldquo;rollback first, ask questions later&amp;rdquo; because it removes friction from the process of backing out problematic changes.</description>
    </item>
    
    <item>
      <title>My self-powered commute</title>
      <link>http://julio.meroh.net/2018/03/my-self-powered-commute.html</link>
      <pubDate>Sat, 03 Mar 2018 12:10:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/03/my-self-powered-commute.html</guid>
      <description>&lt;p&gt;People tell me I&amp;rsquo;m crazy. Maybe. But this is the only way I&amp;rsquo;ve found to consistently fit exercise into the hectic schedule of my daily life with two young kids.&lt;/p&gt;

&lt;p&gt;I live in Brooklyn about 10 kilometers (6 miles) away from the Google office in Manhattan. Here is my commute:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shell readability: function parameters</title>
      <link>http://julio.meroh.net/2018/03/shell-readability-function-parameters.html</link>
      <pubDate>Fri, 02 Mar 2018 06:35:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/03/shell-readability-function-parameters.html</guid>
      <description>&lt;p&gt;The shell supports defining functions, which, &lt;a href=&#34;http://julio.meroh.net/2018/02/shell-readability-main.html&#34;&gt;as we learned in the previous post&lt;/a&gt;, you should embrace and use. Unfortunately, they are fairly primitive and their use can, paradoxically, introduce other readability problems.&lt;/p&gt;

&lt;p&gt;One specific problem is that &lt;strong&gt;function parameters are numbered, not named&lt;/strong&gt;, so the risk of cryptic code is high. Let&amp;rsquo;s see why this is a problem.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shell readability: main</title>
      <link>http://julio.meroh.net/2018/02/shell-readability-main.html</link>
      <pubDate>Mon, 26 Feb 2018 05:15:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/02/shell-readability-main.html</guid>
      <description>Our team develops Bazel, a Java-based tool. We do have, however, a significant amount of shell scripting. The percentage is small at only 3.6% of our codebase&amp;hellip; but given the size of our project, that&amp;rsquo;s about 130,000 lines—a lot, really.
Pretty much nobody likes writing these integration tests in shell. Leaving aside that our infrastructure is clunky, the real problem is that the team at large is not familiar with writing shell per se.</description>
    </item>
    
    <item>
      <title>From Jekyll to Hugo</title>
      <link>http://julio.meroh.net/2018/02/from-jekyll-to-hugo.html</link>
      <pubDate>Sat, 24 Feb 2018 06:00:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/02/from-jekyll-to-hugo.html</guid>
      <description>It is done. This site is now powered by Hugo instead of Jekyll. It took me a full week&amp;rsquo;s worth of early mornings to achieve, but the results are great&amp;hellip; internally, that is, because as a reader you should notice no changes other than minor style tweaks.
Performance differences As of today, this site hosts 711 posts totaling 3.4MB of text. The style sheet is based on Bootstrap and is built from scratch using SASS.</description>
    </item>
    
  </channel>
</rss>