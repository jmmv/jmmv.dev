<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/</link><description>Recent content on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 17 Jun 2022 06:30:00 -0700</lastBuildDate><atom:link href="https://jmmv.dev/feed.xml" rel="self" type="application/rss+xml"/><item><title>Speeding up autoconf with caching</title><link>https://jmmv.dev/2022/06/autoconf-caching.html</link><pubDate>Fri, 17 Jun 2022 06:30:00 -0700</pubDate><guid>https://jmmv.dev/2022/06/autoconf-caching.html</guid><description>&lt;p>In the recent &lt;a href="https://jmmv.dev/2022/05/remembering-buildtool.html">Remembering Buildtool&lt;/a> post, I described how setting up a cache of configuration checks was an important step in Buildtool&amp;rsquo;s installation process. The goal was to avoid pointless repetitive work on every build by performing such common checks once.&lt;/p>
&lt;p>&lt;a href="https://www.bsdnow.tv/457">Episode 457 of BSD Now&lt;/a> featured my post and Allan Jude wondered how much time would be saved in a bulk build of all FreeBSD packages if we could just do that same kind of caching with GNU Autoconf. And, you know what? It is indeed possible to do so. I had mentioned it en passing in my post but I guess I wasn&amp;rsquo;t clear enough, so let&amp;rsquo;s elaborate!&lt;/p></description></item><item><title>EndBASIC 0.9: Run shared demos easily</title><link>https://jmmv.dev/2022/06/endbasic-0.9.html</link><pubDate>Sun, 05 Jun 2022 17:20:00 -0700</pubDate><guid>https://jmmv.dev/2022/06/endbasic-0.9.html</guid><description>&lt;p>It is with great pleasure that I announce the release of EndBASIC 0.9.0 😎️.&lt;/p>
&lt;p>The major feature in this new release is the ability to &lt;strong>launch publicly-shared files via a click of a URL&lt;/strong> without having to create an account first. Here, try running my &lt;a href="https://repl.endbasic.dev/?run=jmmv/bounce.bas">&lt;code>jmmv/bounce.bas&lt;/code>&lt;/a> or &lt;a href="https://repl.endbasic.dev/?run=jmmv/paint.bas">&lt;code>jmmv/paint.bas&lt;/code>&lt;/a> demos in your browser, now!&lt;/p></description></item><item><title>Remembering Buildtool</title><link>https://jmmv.dev/2022/05/remembering-buildtool.html</link><pubDate>Fri, 13 May 2022 09:50:00 -0700</pubDate><guid>https://jmmv.dev/2022/05/remembering-buildtool.html</guid><description>Build systems are one of my favorite topics in software engineering. If I recall correctly, my interest in this area started when I got into NetBSD in 2002&amp;mdash;20 years ago&amp;mdash;and became a pkgsrc contributor. Packaging software for NetBSD made me fight various build systems and, in particular, experience the pains of debugging the GNU Autotools.
Around that same time, I was also writing small tools here and there. Out of inertia, I used the GNU Autotools for these and, the more I used them, the more I saw an opportunity for improvement.</description></item><item><title>Rust is hard, yes, but does it matter?</title><link>https://jmmv.dev/2022/05/rust-is-hard-but-does-it-matter.html</link><pubDate>Fri, 06 May 2022 06:45:00 -0700</pubDate><guid>https://jmmv.dev/2022/05/rust-is-hard-but-does-it-matter.html</guid><description>Rust is infamous for having a steep learning curve. The borrow checker, preferred idioms and design patterns, the meaning of core traits&amp;hellip; these are all things one must learn before being proficient with the language and able to write code with ease. So, yes, Rust is hard, but does it matter in practical terms? Can we expect large-ish teams to succeed when adopting the language? I&amp;rsquo;d like to think that it does not matter much and that some initial difficulties in bringing people up to speed can pay off in the medium term.</description></item><item><title>Do Rust devs hate Go devs?</title><link>https://jmmv.dev/2022/04/do-rust-devs-hate-go-devs.html</link><pubDate>Fri, 29 Apr 2022 09:50:00 -0700</pubDate><guid>https://jmmv.dev/2022/04/do-rust-devs-hate-go-devs.html</guid><description>&lt;p>Earlier this week, a 2-year old post titled &lt;a href="https://fasterthanli.me/articles/i-want-off-mr-golangs-wild-ride">I want off Mr. Golang&amp;rsquo;s wild ride&lt;/a> by &lt;a href="https://fasterthanli.me/">@fasterthanlime&lt;/a> made the news rounds &lt;em>again&lt;/em>. This post raises a bunch of concerns on the Go language and is posted from the perspective of someone who prefers Rust. And, just yesterday, I noticed &lt;a href="https://fasterthanli.me/articles/lies-we-tell-ourselves-to-keep-using-golang">a comment on Twitter by @FiloSottile&lt;/a> that, paraphrased, reads &amp;ldquo;&lt;em>Why is there so much hatred towards Go, especially from Rust developers?&lt;/em>&amp;rdquo;.&lt;/p>
&lt;p>I wish I could answer this question with a &amp;ldquo;no, there isn&amp;rsquo;t&amp;rdquo;, but that would be a lie: in any large community, there will certainly be hateful people/opinions. If you have encountered such flamebait, I&amp;rsquo;m sorry, and I&amp;rsquo;m not here to defend it. What I&amp;rsquo;m here to do is look at the possible truth behind the claim that Rust developers dislike Go, and I wanted to elaborate on this based on my personal experience.&lt;/p></description></item><item><title>Rust traits and dependency injection</title><link>https://jmmv.dev/2022/04/rust-traits-and-dependency-injection.html</link><pubDate>Fri, 22 Apr 2022 09:30:00 -0700</pubDate><guid>https://jmmv.dev/2022/04/rust-traits-and-dependency-injection.html</guid><description>Dependency injection is one of my favorite design patterns to develop highly-testable and modular code. Unfortunately, applying this pattern by taking Rust traits as arguments to public functions has unintended consequences on the visibility of private symbols. If you are not careful, most of your crate-internal APIs might need to become public just because you needed to parameterize a function with a trait. Let&amp;rsquo;s look at why this happens and what we can do about it.</description></item><item><title>QB64 Super Dark Blue color theme</title><link>https://jmmv.dev/2022/04/qb64-super-dark-blue.html</link><pubDate>Wed, 20 Apr 2022 19:00:00 -0700</pubDate><guid>https://jmmv.dev/2022/04/qb64-super-dark-blue.html</guid><description>Towards the end of 2021, I was playing with QB64 and thought that its default color scheme&amp;mdash;called Super Dark Blue&amp;mdash;was quite neat. It reminded me of QuickBASIC, which is what the whole program is supposed to do, but the colors felt vivid and modern. Take a look:
QB64 with its default color configuration. &amp;ldquo;Naturally,&amp;rdquo; I wondered if I could adopt those colors in VSCode and Windows Terminal, as these are the apps I look at the most throughout a work day.</description></item><item><title>Introducing db_logger</title><link>https://jmmv.dev/2022/04/introducing-db-logger.html</link><pubDate>Tue, 12 Apr 2022 08:30:00 -0700</pubDate><guid>https://jmmv.dev/2022/04/introducing-db-logger.html</guid><description>Over the last couple of weeks, I have been modernizing the codebase of the EndBASIC cloud service by applying many of the learnings I got from the development of EndTRACKER. The latter was a fork of the former and thus the foundations were the same, but as I iterated on the latter more recently, I got to refine my approach to writing a REST API in Rust.
During this refactoring process, there was a small piece of the system that routinely got in the way for various reasons.</description></item><item><title>Abandoning GAFYD</title><link>https://jmmv.dev/2022/03/abandoning-gafyd.html</link><pubDate>Mon, 28 Mar 2022 09:00:00 -0700</pubDate><guid>https://jmmv.dev/2022/03/abandoning-gafyd.html</guid><description>&lt;p>If you know what GAFYD stands for and have felt that signing up for a free account years ago was a mistake, you know you are in trouble right now. Those accounts are shutting down. The time has come to either pay up or move out, and you should decide what to do ASAP. It took me weeks of active effort to move my and my family&amp;rsquo;s data out of GAFYD and put it back into Google consumer accounts and other non-Google services.&lt;/p>
&lt;p>This post is essentially a recollection of my lab notes on what I did. The text is long and haphazard due to the many things to cover. I&amp;rsquo;ll start with a brief explanation of what GAFYD was, what&amp;rsquo;s happening now, and what&amp;rsquo;s wrong with it. After that, I&amp;rsquo;ll sketch what my new setup is and how I succeeded in moving some of the more complex services. Here is the outline:&lt;/p></description></item><item><title>A year on Windows: Finale</title><link>https://jmmv.dev/2022/03/a-year-on-windows-finale.html</link><pubDate>Sat, 19 Mar 2022 07:20:00 -0700</pubDate><guid>https://jmmv.dev/2022/03/a-year-on-windows-finale.html</guid><description>&lt;p>We have reached the end of this daily 2-week long series so it&amp;rsquo;s time to close with some parting thoughts. Before drafting some conclusions on how this whole year has gone, there is just one more topic I have to touch on&amp;hellip; and that&amp;rsquo;s the much dreaded telemetry.&lt;/p></description></item><item><title>A year on Windows: Software installation</title><link>https://jmmv.dev/2022/03/a-year-on-windows-winget.html</link><pubDate>Fri, 18 Mar 2022 06:30:00 -0700</pubDate><guid>https://jmmv.dev/2022/03/a-year-on-windows-winget.html</guid><description>&lt;p>Can you believe that Windows ships with something that looks like a package manager? By default since Windows 11? I know, right? Let&amp;rsquo;s take a look.&lt;/p></description></item><item><title>A year on Windows: System debugging</title><link>https://jmmv.dev/2022/03/a-year-on-windows-debugging.html</link><pubDate>Thu, 17 Mar 2022 06:30:00 -0700</pubDate><guid>https://jmmv.dev/2022/03/a-year-on-windows-debugging.html</guid><description>&lt;p>As you are well-aware, Windows is a closed-source operating system. That, however, does &lt;em>not&lt;/em> mean that it is &lt;em>opaque&lt;/em>. In fact, it feels quite the opposite in many areas, which might be a surprise to you&amp;mdash;especially if you develop on/for open-source operating systems.&lt;/p></description></item><item><title>A year on Windows: Networked file systems</title><link>https://jmmv.dev/2022/03/a-year-on-windows-networked-fs.html</link><pubDate>Wed, 16 Mar 2022 06:30:00 -0700</pubDate><guid>https://jmmv.dev/2022/03/a-year-on-windows-networked-fs.html</guid><description>&lt;p>I briefly mentioned in the &lt;a href="https://jmmv.dev/2022/03/a-year-on-windows-intro.html">intro to this series&lt;/a> that, as part of the transition to Windows, I recently built my most powerful home server ever. The server in question is a machine from 2011 so it&amp;rsquo;s not &amp;ldquo;powerful&amp;rdquo;, but it&amp;rsquo;s the best I have ever had as a home server! And it is running FreeBSD 13.&lt;/p>
&lt;p>Wait, wait, wait. What does this have to do with Windows?&lt;/p></description></item><item><title>A year on Windows: PowerShell</title><link>https://jmmv.dev/2022/03/a-year-on-windows-powershell.html</link><pubDate>Tue, 15 Mar 2022 07:20:00 -0700</pubDate><guid>https://jmmv.dev/2022/03/a-year-on-windows-powershell.html</guid><description>&lt;p>The native Windows command line, the one derived from DOS, is objectively painful.&lt;/p>
&lt;p>On the one hand, the batch language is &lt;a href="https://devblogs.microsoft.com/oldnewthing/20050909-24/?p=34263">full of hacks&lt;/a> that have cropped up over the years. These hacks exist to offer new features while maintaining strict backwards compatibility, a heroic effort with nasty consequences. On the other hand, the interactive editing features of &lt;code>cmd.exe&lt;/code> are rudimentary&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Fortunately, PowerShell exists as a first-party, built-into-Windows alternative to &lt;code>cmd.exe&lt;/code>.&lt;/p></description></item><item><title>A year on Windows: Development experience</title><link>https://jmmv.dev/2022/03/a-year-on-windows-devel.html</link><pubDate>Mon, 14 Mar 2022 06:30:00 -0700</pubDate><guid>https://jmmv.dev/2022/03/a-year-on-windows-devel.html</guid><description>&lt;p>We are finally entering the final part of this one-year retrospective by shifting gears into developer-oriented topics.&lt;/p>
&lt;p>I hadn&amp;rsquo;t touched Windows to write code since 2006 and the development experience has massively changed for the better during the last 6 years. So let&amp;rsquo;s start this part by talking about the crown jewel of development on modern Windows: the WSL + Windows Terminal + VSCode trifecta.&lt;/p></description></item></channel></rss>