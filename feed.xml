<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jmmv.dev</title>
    <link>https://jmmv.dev/</link>
    <description>Recent content on jmmv.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Nov 2020 06:30:00 -0800</lastBuildDate><atom:link href="https://jmmv.dev/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Argument processing in Unix and Windows</title>
      <link>https://jmmv.dev/2020/11/cmdline-args-unix-vs-windows.html</link>
      <pubDate>Mon, 02 Nov 2020 06:30:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/11/cmdline-args-unix-vs-windows.html</guid>
      <description>Let&amp;rsquo;s continue our dive into the very interesting topic of how Unix (or Linux or what have you) and Windows differ regarding argument processing. And by that I mean: how a program (the caller) communicates the set of arguments to pass to another program (the callee) at execution time, how the callee receives such arguments, and what are the consequences of each design.
NOTE: Pay attention to this post because this is interview-level material for a systems internals session!</description>
    </item>
    
    <item>
      <title>Configuring Windows for key-based SSH access</title>
      <link>https://jmmv.dev/2020/10/windows-ssh-access.html</link>
      <pubDate>Fri, 30 Oct 2020 05:45:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2020/10/windows-ssh-access.html</guid>
      <description>I despise remote desktop access. The way it breaks keybindings is something that messes with my muscle memory pretty badly. That&amp;rsquo;s why I ended up working on Bazel&amp;rsquo;s macOS port at Google: I wanted to expand the ability to develop on Macs natively instead of relying on remote Linux workstations. But I now have to use remote Windows VMs for Azure development because that&amp;rsquo;s the way it is, so I&amp;rsquo;ll have to cope.</description>
    </item>
    
    <item>
      <title>Flags parsing in PowerShell (vs. Unix)</title>
      <link>https://jmmv.dev/2020/10/powershell-cmdlet-params.html</link>
      <pubDate>Wed, 28 Oct 2020 06:45:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2020/10/powershell-cmdlet-params.html</guid>
      <description>One of my personal goals with my new position at Microsoft is to learn more about Windows and its ecosystem. As you know, I&amp;rsquo;m a systems person and I&amp;rsquo;ve been in the Unix and macOS realm for the last&amp;hellip; 22 years or so. During this time, I&amp;rsquo;ve certainly touched Windows here and there but, for the most part, a lot of it remains a mystery to me.
Yesterday already, I uncovered a couple of interesting things worth discussing.</description>
    </item>
    
    <item>
      <title>My interviews with Facebook, Twitter, and Microsoft</title>
      <link>https://jmmv.dev/2020/10/facebook-twitter-microsoft-interviews.html</link>
      <pubDate>Fri, 23 Oct 2020 05:30:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2020/10/facebook-twitter-microsoft-interviews.html</guid>
      <description>Welcome back! Let&amp;rsquo;s continue the previous post on my reasons for moving from Google to Microsoft by looking at my whole interviewing process. I&amp;rsquo;ve been asked by a few peers to narrate this story because they are curious to know how this process looked like for a person with 10+ years of professional experience. And, well, it&amp;rsquo;s just a topic I wanted to write about anyway üòâ.
As a reminder, and to pique your interest, I applied for:</description>
    </item>
    
    <item>
      <title>Farewell, Google; hello, Microsoft!</title>
      <link>https://jmmv.dev/2020/10/bye-google-hi-microsoft.html</link>
      <pubDate>Mon, 19 Oct 2020 06:00:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2020/10/bye-google-hi-microsoft.html</guid>
      <description>After a little over 11 years, it&amp;rsquo;s time for a much longed change: I&amp;rsquo;m leaving Google and I&amp;rsquo;m joining Microsoft as a Principal Software Engineer üòä for Azure ‚òÅ. These job changes are effective as of this week, but my family and I already moved from New York City to Redmond, WA about three weeks ago.
Read on for a recap on my tenure at Google, the whys behind my departure, and how I ended up choosing the position in Microsoft Azure after mulling over offers from Facebook, Twitter, and Microsoft.</description>
    </item>
    
    <item>
      <title>The final boss: Bazel&#39;s own JNI code</title>
      <link>https://jmmv.dev/2020/10/bazel-jni.html</link>
      <pubDate>Fri, 09 Oct 2020 05:40:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2020/10/bazel-jni.html</guid>
      <description>As you might have read elsewhere, I&amp;rsquo;m leaving the Bazel team and Google in about a week. My plan for these last few weeks was to hand things off as cleanly as possible&amp;hellip; but I was also nerd-sniped by a bug that came my way a fortnight ago. Fixing it has been my self-inflicted punishment for leaving, and oh my, it has been painful. Very painful.
Let me tell you the story of this final boss.</description>
    </item>
    
    <item>
      <title>Bazel output streaming, Ctrl&#43;C, and test flakiness</title>
      <link>https://jmmv.dev/2020/09/bazel-test-streaming-bug.html</link>
      <pubDate>Fri, 18 Sep 2020 07:10:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/09/bazel-test-streaming-bug.html</guid>
      <description>About two weeks ago, I found a very interesting bug in Bazel&amp;rsquo;s test output streaming functionality while writing tests for a new feature related to Ctrl+C interrupts. I fixed the bug, wrote a test for it, and&amp;hellip; the test itself came back as flaky, which made me find another very subtle bug in the test that needed a one-line fix. This is the story of both.
 Bazel has a feature known as test output streaming: by default, Bazel captures the outputs (stdout and stderr) of the tests it runs, saves those in local log files, and tells the user where they are when a test fails.</description>
    </item>
    
    <item>
      <title>Bazel UI locking and file downloads</title>
      <link>https://jmmv.dev/2020/09/bazel-ui-locking.html</link>
      <pubDate>Tue, 01 Sep 2020 16:40:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/09/bazel-ui-locking.html</guid>
      <description>&lt;p&gt;About a month ago, I was benchmarking the impact of a new Bazel feature and I noticed that a test build that should have taken only a few seconds took almost 10 minutes. My Internet connection was flaking out indeed, but something else didn&amp;rsquo;t seem right. So I looked and found that Bazel was doing network calls within a critical section, and these were the root cause behind the massive slowdown. But how did we get such an obvious no-no into the codebase? Read on to see how this happened and how gnarly it was to fix!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pkgdb belongs in libdata, not var</title>
      <link>https://jmmv.dev/2020/08/pkgdb-libdata-var.html</link>
      <pubDate>Wed, 26 Aug 2020 08:55:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/08/pkgdb-libdata-var.html</guid>
      <description>Right after discussing where rc.d should live, it&amp;rsquo;s time to tackle a different but related pet peeve of mine: the location of the installed packages database. For this, I&amp;rsquo;m going to focus on the system I know best, pkgsrc, which keeps its database under /var/db/pkg/ by default. I think this location is wrong and the database should move to /usr/pkg/libdata/pkgdb/.
From a cursory look, it seems that FreeBSD&amp;rsquo;s and OpenBSD&amp;rsquo;s ports databases, as well as dpkg&amp;rsquo;s and rpm&amp;rsquo;s, are also affected by this &amp;ldquo;problem&amp;rdquo;&amp;mdash;but I do not know enough about their internals to say with certainty.</description>
    </item>
    
    <item>
      <title>rc.d belongs in libexec, not etc</title>
      <link>https://jmmv.dev/2020/08/rcd-libexec-etc.html</link>
      <pubDate>Mon, 24 Aug 2020 06:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/08/rcd-libexec-etc.html</guid>
      <description>Let&amp;rsquo;s open with the controversy: the scripts that live under /etc/rc.d/ in FreeBSD, NetBSD, and OpenBSD are in the wrong place. They all should live in /libexec/rc.d/ because they are code, not configuration.
This misplacement is something that has bugged me for ages but I never had the energy to open this can of worms back when I was very involved in NetBSD. I suspect it would have been a draining discussion and a very difficult thing to change.</description>
    </item>
    
    <item>
      <title>A tour of directories as system-wide databases</title>
      <link>https://jmmv.dev/2020/08/database-directories.html</link>
      <pubDate>Fri, 21 Aug 2020 07:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/08/database-directories.html</guid>
      <description>In &amp;ldquo;[Configuration files and .d directories]({{ relref &amp;ldquo;config-files-vs-directories.md&amp;rdquo; }})&amp;rdquo;, we learned how .d directories permit programmatic edits to system-wide configuration with ease. But this same concept&amp;mdash;using directories with many individual files within instead of a single gigantic file&amp;mdash;can be applied to other kinds of system-wide tracking.
I know it&amp;rsquo;s a stretch, but if it helps you in these modern times, you can think of a directory as a NoSQL database or a key/value store where each file represents a row/key and its contents represent the value of that entity.</description>
    </item>
    
    <item>
      <title>Configuration files and .d directories</title>
      <link>https://jmmv.dev/2020/08/config-files-vs-directories.html</link>
      <pubDate>Mon, 17 Aug 2020 07:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/08/config-files-vs-directories.html</guid>
      <description>Have you ever wondered why an increasing number of programs are configured by placing small files in .d directories instead of by just editing a single file?
Have you ever wondered why these .d directories seem to proliferate in UnixLinux installations? Because a pretty bare-bones Debian installation (WSL) shows&amp;hellip; a ton of them:
debian:/etc&amp;gt; ls -ld *.d */*.d drwxr-xr-x 1 root root 4096 Aug 14 22:23 apparmor.d drwxr-xr-x 1 root root 4096 Aug 9 08:10 apt/apt.</description>
    </item>
    
    <item>
      <title>Internships para estudiantes espa√±oles</title>
      <link>https://jmmv.dev/2020/08/internships-de-verano.html</link>
      <pubDate>Thu, 13 Aug 2020 07:20:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/08/internships-de-verano.html</guid>
      <description>This post is in Spanish because I intentionally want to target the students in Spain, who I think are often unaware of what internships are and how they would benefit from taking one abroad. Or, if they are aware that they do exist, that getting into one is actually feasible for them.
 Este art√≠culo es una rareza en este blog ya que es el primero que escribo en espa√±ol en 16 a√±os.</description>
    </item>
    
    <item>
      <title>Down the memory lane with OS/2</title>
      <link>https://jmmv.dev/2020/08/os2-memory-lane.html</link>
      <pubDate>Tue, 04 Aug 2020 17:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/08/os2-memory-lane.html</guid>
      <description>OS/2 Warp 3 was the operating system that led me into an adventure back in 1994. This OS made me escape MS-DOS and Windows, and then made me enter the Linux world when I couldn&amp;rsquo;t afford Warp 4. Let&amp;rsquo;s walk down the memory lane! üßµ
The thing I find most interesting about OS/2&amp;rsquo;s history is that it was a joint project between IBM and Microsoft (https://en.wikipedia.org/wiki/OS/2) and that, until some point, it shared the same GUI with Windows.</description>
    </item>
    
    <item>
      <title>My 18 steps to prepare a great presentation</title>
      <link>https://jmmv.dev/2020/07/presentation-preparation.html</link>
      <pubDate>Fri, 17 Jul 2020 07:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/07/presentation-preparation.html</guid>
      <description>A few days ago, I shared my tips to give great presentations. But how do I prepare to give one? That&amp;rsquo;s a different story so let&amp;rsquo;s take a look in this thread üßµ!
  üò¥ Procrastinate. No, really. It&amp;rsquo;s not something I do intentionally, but it happens. And all the time I spend not working on the presentation is time I spend thinking about its structure. And it works.</description>
    </item>
    
  </channel>
</rss>
