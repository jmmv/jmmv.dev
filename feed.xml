<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jmmv.dev</title>
    <link>https://jmmv.dev/</link>
    <description>Recent content on jmmv.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Dec 2020 10:00:00 -0800</lastBuildDate><atom:link href="https://jmmv.dev/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unit-testing a console app (a text editor)</title>
      <link>https://jmmv.dev/2020/12/unit-testing-a-console-app.html</link>
      <pubDate>Tue, 08 Dec 2020 10:00:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/12/unit-testing-a-console-app.html</guid>
      <description>The most notable feature in EndBASIC 0.3 is its new full-screen console-based text editor. It took longer than I wanted to start developing this, in part because I was busy moving, and in part because I dreaded the thought of having to unit test the text editor. (Yes, EndBASIC is a personal project and I develop it in my free time, but that doesn&amp;rsquo;t mean I don&amp;rsquo;t want it to be properly engineered!</description>
    </item>
    
    <item>
      <title>Using the builder pattern to define test scenarios</title>
      <link>https://jmmv.dev/2020/12/builder-pattern-for-tests.html</link>
      <pubDate>Fri, 04 Dec 2020 09:40:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/12/builder-pattern-for-tests.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been playing with the builder patter to express test scenarios in a succinct and declarative manner. I&amp;rsquo;ve liked the outcome and feel that this design can yield to pretty good test code, so I&amp;rsquo;ll dig through this idea here. Note that, while this post and the associated code talk about Rust, &lt;strong&gt;the ideas presented here apply to any language&lt;/strong&gt;. So don&amp;rsquo;t leave just because I said Rust!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EndBASIC 0.3 is here</title>
      <link>https://jmmv.dev/2020/11/endbasic-0.3.html</link>
      <pubDate>Sun, 29 Nov 2020 12:30:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/11/endbasic-0.3.html</guid>
      <description>After a 6-month long hiatus caused by me hunting and changing jobs and cities, I am pleased to announce the release of EndBASIC 0.3! The Thanksgiving break has been as fruitful as I had hoped üòÅ
There are two major changes in this release.
  The first is the official debut of the web-based interface. I introduced this months ago and have had it running on a &amp;ldquo;push on green&amp;rdquo; model, which means that the web deployment of EndBASIC is always tracking Git HEAD.</description>
    </item>
    
    <item>
      <title>What makes an article succeed (or not)?</title>
      <link>https://jmmv.dev/2020/11/successful-articles.html</link>
      <pubDate>Mon, 23 Nov 2020 09:45:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/11/successful-articles.html</guid>
      <description>This is what landing on the Hacker News front page does to your usually-dormant site:
 Number of total daily visitors of this site over the last few days.  In other words, this is what the Windows Subsystem for Linux: The lost potential post caused:
 a ridiculous jump from the usual ~80 visits per day to 6,000 on day one, 9,000 on day two, and 1,000 on day three; 200 comments on Hacker News in less than 24 hours and a ripple of discussions in Reddit and OSnews; a very insightful chat with a long-term NTFS engineer on general system performance; and an incredibly poor conversion rate with only 5 new Twitter followers and 3 new email subscribers.</description>
    </item>
    
    <item>
      <title>Windows Subsystem for Linux: The lost potential</title>
      <link>https://jmmv.dev/2020/11/wsl-lost-potential.html</link>
      <pubDate>Fri, 13 Nov 2020 07:50:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/11/wsl-lost-potential.html</guid>
      <description>If you have followed Windows 10 at all during the last few years, you know that the Windows Subsystem for Linux, or WSL for short, is the hot topic among developers. You can finally run your Linux tooling on Windows as a first class citizen, which means you no longer have to learn PowerShell or, god forbid, suffer through the ancient CMD.EXE console.
Unfortunately, not everything is as rosy as it sounds.</description>
    </item>
    
    <item>
      <title>Updating Google Domains from DD-WRT</title>
      <link>https://jmmv.dev/2020/11/dd-wrt-google-domains.html</link>
      <pubDate>Sat, 07 Nov 2020 07:20:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/11/dd-wrt-google-domains.html</guid>
      <description>I have had a Netgear WNDR3700v2 router for a few years already and I bought this model specifically because I could flash it with the open-source DD-WRT firmware. The reasons remain the same as the ones I had in 2006&amp;mdash;the key ones being: the ability to run a Dnsmasq DNS/DHCP server for my local network; and the ability to update a single Dynamic DNS address so that I can access my home network when I&amp;rsquo;m on the go.</description>
    </item>
    
    <item>
      <title>Argument processing in Unix and Windows</title>
      <link>https://jmmv.dev/2020/11/cmdline-args-unix-vs-windows.html</link>
      <pubDate>Mon, 02 Nov 2020 06:30:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/11/cmdline-args-unix-vs-windows.html</guid>
      <description>Let&amp;rsquo;s continue our dive into the very interesting topic of how Unix (or Linux or what have you) and Windows differ regarding argument processing. And by that I mean: how a program (the caller) communicates the set of arguments to pass to another program (the callee) at execution time, how the callee receives such arguments, and what are the consequences of each design.
NOTE: Pay attention to this post because this is interview-level material for a systems internals session!</description>
    </item>
    
    <item>
      <title>Configuring Windows for key-based SSH access</title>
      <link>https://jmmv.dev/2020/10/windows-ssh-access.html</link>
      <pubDate>Fri, 30 Oct 2020 05:45:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2020/10/windows-ssh-access.html</guid>
      <description>I despise remote desktop access. The way it breaks keybindings is something that messes with my muscle memory pretty badly. That&amp;rsquo;s why I ended up working on Bazel&amp;rsquo;s macOS port at Google: I wanted to expand the ability to develop on Macs natively instead of relying on remote Linux workstations. But I now have to use remote Windows VMs for Azure development because that&amp;rsquo;s the way it is, so I&amp;rsquo;ll have to cope.</description>
    </item>
    
    <item>
      <title>Flags parsing in PowerShell (vs. Unix)</title>
      <link>https://jmmv.dev/2020/10/powershell-cmdlet-params.html</link>
      <pubDate>Wed, 28 Oct 2020 06:45:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2020/10/powershell-cmdlet-params.html</guid>
      <description>One of my personal goals with my new position at Microsoft is to learn more about Windows and its ecosystem. As you know, I&amp;rsquo;m a systems person and I&amp;rsquo;ve been in the Unix and macOS realm for the last&amp;hellip; 22 years or so. During this time, I&amp;rsquo;ve certainly touched Windows here and there but, for the most part, a lot of it remains a mystery to me.
Yesterday already, I uncovered a couple of interesting things worth discussing.</description>
    </item>
    
    <item>
      <title>My interviews with Facebook, Twitter, and Microsoft</title>
      <link>https://jmmv.dev/2020/10/facebook-twitter-microsoft-interviews.html</link>
      <pubDate>Fri, 23 Oct 2020 05:30:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2020/10/facebook-twitter-microsoft-interviews.html</guid>
      <description>Welcome back! Let&amp;rsquo;s continue the previous post on my reasons for moving from Google to Microsoft by looking at my whole interviewing process. I&amp;rsquo;ve been asked by a few peers to narrate this story because they are curious to know how this process looked like for a person with 10+ years of professional experience. And, well, it&amp;rsquo;s just a topic I wanted to write about anyway üòâ.
As a reminder, and to pique your interest, I applied for:</description>
    </item>
    
    <item>
      <title>Farewell, Google; hello, Microsoft!</title>
      <link>https://jmmv.dev/2020/10/bye-google-hi-microsoft.html</link>
      <pubDate>Mon, 19 Oct 2020 06:00:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2020/10/bye-google-hi-microsoft.html</guid>
      <description>After a little over 11 years, it&amp;rsquo;s time for a much longed change: I&amp;rsquo;m leaving Google and I&amp;rsquo;m joining Microsoft as a Principal Software Engineer üòä for Azure ‚òÅ. These job changes are effective as of this week, but my family and I already moved from New York City to Redmond, WA about three weeks ago.
 Me next to the Microsoft logo in front of the Visitor Center in Building 92 on a cloudy Saturday evening.</description>
    </item>
    
    <item>
      <title>The final boss: Bazel&#39;s own JNI code</title>
      <link>https://jmmv.dev/2020/10/bazel-jni.html</link>
      <pubDate>Fri, 09 Oct 2020 05:40:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2020/10/bazel-jni.html</guid>
      <description>As you might have read elsewhere, I&amp;rsquo;m leaving the Bazel team and Google in about a week. My plan for these last few weeks was to hand things off as cleanly as possible&amp;hellip; but I was also nerd-sniped by a bug that came my way a fortnight ago. Fixing it has been my self-inflicted punishment for leaving, and oh my, it has been painful. Very painful.
Let me tell you the story of this final boss.</description>
    </item>
    
    <item>
      <title>Bazel output streaming, Ctrl&#43;C, and test flakiness</title>
      <link>https://jmmv.dev/2020/09/bazel-test-streaming-bug.html</link>
      <pubDate>Fri, 18 Sep 2020 07:10:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/09/bazel-test-streaming-bug.html</guid>
      <description>About two weeks ago, I found a very interesting bug in Bazel&amp;rsquo;s test output streaming functionality while writing tests for a new feature related to Ctrl+C interrupts. I fixed the bug, wrote a test for it, and&amp;hellip; the test itself came back as flaky, which made me find another very subtle bug in the test that needed a one-line fix. This is the story of both.
 Bazel has a feature known as test output streaming: by default, Bazel captures the outputs (stdout and stderr) of the tests it runs, saves those in local log files, and tells the user where they are when a test fails.</description>
    </item>
    
    <item>
      <title>Bazel UI locking and file downloads</title>
      <link>https://jmmv.dev/2020/09/bazel-ui-locking.html</link>
      <pubDate>Tue, 01 Sep 2020 16:40:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/09/bazel-ui-locking.html</guid>
      <description>&lt;p&gt;About a month ago, I was benchmarking the impact of a new Bazel feature and I noticed that a test build that should have taken only a few seconds took almost 10 minutes. My Internet connection was flaking out indeed, but something else didn&amp;rsquo;t seem right. So I looked and found that Bazel was doing network calls within a critical section, and these were the root cause behind the massive slowdown. But how did we get such an obvious no-no into the codebase? Read on to see how this happened and how gnarly it was to fix!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pkgdb belongs in libdata, not var</title>
      <link>https://jmmv.dev/2020/08/pkgdb-libdata-var.html</link>
      <pubDate>Wed, 26 Aug 2020 08:55:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/08/pkgdb-libdata-var.html</guid>
      <description>Right after discussing where rc.d should live, it&amp;rsquo;s time to tackle a different but related pet peeve of mine: the location of the installed packages database. For this, I&amp;rsquo;m going to focus on the system I know best, pkgsrc, which keeps its database under /var/db/pkg/ by default. I think this location is wrong and the database should move to /usr/pkg/libdata/pkgdb/.
From a cursory look, it seems that FreeBSD&amp;rsquo;s and OpenBSD&amp;rsquo;s ports databases, as well as dpkg&amp;rsquo;s and rpm&amp;rsquo;s, are also affected by this &amp;ldquo;problem&amp;rdquo;&amp;mdash;but I do not know enough about their internals to say with certainty.</description>
    </item>
    
  </channel>
</rss>
