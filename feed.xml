<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jmmv.dev</title>
    <link>https://jmmv.dev/</link>
    <description>Recent content on jmmv.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Jan 2021 07:20:00 -0800</lastBuildDate><atom:link href="https://jmmv.dev/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Embedding EndBASIC into a (Rust) program</title>
      <link>https://jmmv.dev/2021/01/embedding-endbasic.html</link>
      <pubDate>Tue, 26 Jan 2021 07:20:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/01/embedding-endbasic.html</guid>
      <description>One thing that bothers me quite a lot about various language implementations is that the core of their interpreter isn&amp;rsquo;t clearly separate from their standard library. This makes it hard to embed those interpreters into other programs because it&amp;rsquo;s not obvious how to limit their side-effects and because the interpreter dependency can be heavy. In this post, we will see how EndBASIC&amp;rsquo;s design tries hard to keep the core as small as possible, and we will see some examples on how to use EndBASIC from Rust and vice versa.</description>
    </item>
    
    <item>
      <title>EndBASIC 0.5 release announcement</title>
      <link>https://jmmv.dev/2021/01/endbasic-0.5.html</link>
      <pubDate>Sun, 24 Jan 2021 08:00:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/01/endbasic-0.5.html</guid>
      <description>A month has passed since the 0.4.0 announcement so it is about time to say hello to yet another EndBASIC release because 0.5.0 is here! So, what&amp;rsquo;s new? Not much&amp;hellip; unless you look under the covers, in which case a &lt;em&gt;ton&lt;/em&gt; has changed. About 30% of the codebase has been affected in one way or another to improve general quality, so read on to see how.</description>
    </item>
    
    <item>
      <title>Why am I wasting time on EndBASIC?</title>
      <link>https://jmmv.dev/2021/01/why-endbasic.html</link>
      <pubDate>Tue, 19 Jan 2021 07:10:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/01/why-endbasic.html</guid>
      <description>If you have been following this blog or my social profiles for the last year, you are probably aware that I have been working on something called EndBASIC. You also probably know that this is a retro-looking BASIC interpreter written in Rust that happens to run on the web. And if you know those two things, you are probably wondering, like some of my friends do: why am I wasting time developing such a useless project?</description>
    </item>
    
    <item>
      <title>Prevent accidental commits with DO NOT SUBMIT</title>
      <link>https://jmmv.dev/2021/01/do-not-submit.html</link>
      <pubDate>Mon, 11 Jan 2021 09:20:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/01/do-not-submit.html</guid>
      <description>&lt;p&gt;One of the teeny tiny features I miss from the Google development stack is something called &lt;code&gt;DO NOT SUBMIT&lt;/code&gt;. Here is what it is and how to replicate it in your projects.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Enforcing code health via GitHub Actions</title>
      <link>https://jmmv.dev/2021/01/github-actions-code-health.html</link>
      <pubDate>Fri, 08 Jan 2021 09:50:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/01/github-actions-code-health.html</guid>
      <description>It is no secret that, in software development, the edit+build+test cycle must be as short as possible. The delay between saving a file and seeing the results has to be minimal and in the order of a few seconds, or else developers lose focus and productivity suffers.
It&amp;rsquo;s equally important to ensure that the code is held to certain quality standards. Compiler warnings, for example, are part of any compilation and catch a set of common problems.</description>
    </item>
    
    <item>
      <title>How does Google avoid clean builds?</title>
      <link>https://jmmv.dev/2020/12/google-no-clean-builds.html</link>
      <pubDate>Thu, 31 Dec 2020 09:30:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/12/google-no-clean-builds.html</guid>
      <description>During my 11 years at Google, I can confidently count the number of times I had to do a &amp;ldquo;clean build&amp;rdquo; with one hand: their build system is so robust that incremental builds always work. Phrases like &amp;ldquo;clean everything and try building from scratch&amp;rdquo; are unheard of. So&amp;hellip; you can color me skeptical when someone says that incremental build problems are due to bugs in the build files and not due to a suboptimal build system. The answer lies in having a robust build system, and in this post I&amp;rsquo;ll examine the common causes behind incremental build breakages, what the build system can do to avoid them, and how Bazel accomplishes most of them.</description>
    </item>
    
    <item>
      <title>EndBASIC 0.4 release announcement</title>
      <link>https://jmmv.dev/2020/12/endbasic-0.4.html</link>
      <pubDate>Fri, 25 Dec 2020 19:30:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/12/endbasic-0.4.html</guid>
      <description>About a month ago and after a long hiatus, I published EndBASIC 0.3 and the adrenaline rush that came with it got my wheels spinning again full-steam ahead. So here I am today, ready to announce the 0.4 release. But&amp;hellip; &amp;ldquo;what could have possibly changed in just a month of someone&amp;rsquo;s free time&amp;rdquo;, you wonder? Enough, actually!
EndBASIC 0.4 is the release that fulfills my original goal of being able to run a &amp;ldquo;guess the number&amp;rdquo; game.</description>
    </item>
    
    <item>
      <title>Unit-testing a console app (a text editor)</title>
      <link>https://jmmv.dev/2020/12/unit-testing-a-console-app.html</link>
      <pubDate>Tue, 08 Dec 2020 10:00:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/12/unit-testing-a-console-app.html</guid>
      <description>The most notable feature in EndBASIC 0.3 is its new full-screen console-based text editor. In this post, I describe why it is important and useful to unit-test a console app like this, and I will dive into how to implement unit tests that catch regressions and inefficiencies. Code samples are in Rust, but the concepts presented here are applicable to any language with minimal data abstraction facilities.</description>
    </item>
    
    <item>
      <title>Using the builder pattern to define test scenarios</title>
      <link>https://jmmv.dev/2020/12/builder-pattern-for-tests.html</link>
      <pubDate>Fri, 04 Dec 2020 09:40:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/12/builder-pattern-for-tests.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been playing with the builder patter to express test scenarios in a succinct and declarative manner. I&amp;rsquo;ve liked the outcome and feel that this design can yield to pretty good test code, so I&amp;rsquo;ll dig through this idea here. Note that, while this post and the associated code talk about Rust, &lt;strong&gt;the ideas presented here apply to any language&lt;/strong&gt;. So don&amp;rsquo;t leave just because I said Rust!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EndBASIC 0.3 is here</title>
      <link>https://jmmv.dev/2020/11/endbasic-0.3.html</link>
      <pubDate>Sun, 29 Nov 2020 12:30:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/11/endbasic-0.3.html</guid>
      <description>After a 6-month long hiatus caused by me hunting and changing jobs and cities, I am pleased to announce the release of EndBASIC 0.3! The Thanksgiving break has been as fruitful as I had hoped üòÅ
There are two major changes in this release.
  The first is the official debut of the web-based interface. I introduced this months ago and have had it running on a &amp;ldquo;push on green&amp;rdquo; model, which means that the web deployment of EndBASIC is always tracking Git HEAD.</description>
    </item>
    
    <item>
      <title>What makes an article succeed (or not)?</title>
      <link>https://jmmv.dev/2020/11/successful-articles.html</link>
      <pubDate>Mon, 23 Nov 2020 09:45:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/11/successful-articles.html</guid>
      <description>This is what landing on the Hacker News front page does to your usually-dormant site:
 Number of total daily visitors of this site over the last few days.  In other words, this is what the Windows Subsystem for Linux: The lost potential post caused:
 a ridiculous jump from the usual ~80 visits per day to 6,000 on day one, 9,000 on day two, and 1,000 on day three; 200 comments on Hacker News in less than 24 hours and a ripple of discussions in Reddit and OSnews; a very insightful chat with a long-term NTFS engineer on general system performance; and an incredibly poor conversion rate with only 5 new Twitter followers and 3 new email subscribers.</description>
    </item>
    
    <item>
      <title>Windows Subsystem for Linux: The lost potential</title>
      <link>https://jmmv.dev/2020/11/wsl-lost-potential.html</link>
      <pubDate>Fri, 13 Nov 2020 07:50:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/11/wsl-lost-potential.html</guid>
      <description>If you have followed Windows 10 at all during the last few years, you know that the Windows Subsystem for Linux, or WSL for short, is the hot topic among developers. You can finally run your Linux tooling on Windows as a first class citizen, which means you no longer have to learn PowerShell or, god forbid, suffer through the ancient CMD.EXE console.
Unfortunately, not everything is as rosy as it sounds.</description>
    </item>
    
    <item>
      <title>Updating Google Domains from DD-WRT</title>
      <link>https://jmmv.dev/2020/11/dd-wrt-google-domains.html</link>
      <pubDate>Sat, 07 Nov 2020 07:20:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/11/dd-wrt-google-domains.html</guid>
      <description>I have had a Netgear WNDR3700v2 router for a few years already and I bought this model specifically because I could flash it with the open-source DD-WRT firmware. The reasons remain the same as the ones I had in 2006&amp;mdash;the key ones being: the ability to run a Dnsmasq DNS/DHCP server for my local network; and the ability to update a single Dynamic DNS address so that I can access my home network when I&amp;rsquo;m on the go.</description>
    </item>
    
    <item>
      <title>Argument processing in Unix and Windows</title>
      <link>https://jmmv.dev/2020/11/cmdline-args-unix-vs-windows.html</link>
      <pubDate>Mon, 02 Nov 2020 06:30:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/11/cmdline-args-unix-vs-windows.html</guid>
      <description>Let&amp;rsquo;s continue our dive into the very interesting topic of how Unix (or Linux or what have you) and Windows differ regarding argument processing. And by that I mean: how a program (the caller) communicates the set of arguments to pass to another program (the callee) at execution time, how the callee receives such arguments, and what are the consequences of each design.</description>
    </item>
    
    <item>
      <title>Configuring Windows for key-based SSH access</title>
      <link>https://jmmv.dev/2020/10/windows-ssh-access.html</link>
      <pubDate>Fri, 30 Oct 2020 05:45:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2020/10/windows-ssh-access.html</guid>
      <description>Windows Server 2019 and Windows 10 both ship with OpenSSH (server and client). Installing these components is a breeze, but the official documentation to set everything up is either wrong or incomplete. I wanted to set up key-based authentication and this took quite a bit of poking until I figured out all the right knobs. Here are the lab notes from my adventure.</description>
    </item>
    
  </channel>
</rss>
