<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tmpfs on Julio Merino (jmmv.dev)</title>
    <link>https://jmmv.dev/tags/tmpfs/index/</link>
    <description>Recent content in tmpfs on Julio Merino (jmmv.dev)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Jul 2007 04:07:00 -0400</lastBuildDate>
    
	<atom:link href="https://jmmv.dev/tags/tmpfs/index/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SoC: Status report</title>
      <link>https://jmmv.dev/2007/07/soc-status-report_28.html</link>
      <pubDate>Sat, 28 Jul 2007 04:07:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2007/07/soc-status-report_28.html</guid>
      <description>It has already been a week since the last SoC-related post, so I owe you an status report.
Development has continued at a constant rate and, despite I work a lot on the project, it may seem to advance slowly from an external point of view. The thing is that getting the ATF core components complete and right is a tough job! Just look at the current and incomplete TODO list to see what I mean.</description>
    </item>
    
    <item>
      <title>tmpfs added to FreeBSD</title>
      <link>https://jmmv.dev/2007/06/tmpfs-added-to-freebsd.html</link>
      <pubDate>Fri, 22 Jun 2007 10:59:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2007/06/tmpfs-added-to-freebsd.html</guid>
      <description>A bit more than a year ago, I reported that tmpfs was being ported to FreeBSD from NetBSD (remember that tmpfs was my Google SoC 2005 project and was integrated into NetBSD soon after the program ended). And Juan Romero Pardines has just brought to my attention that tmpfs is already part of FreeBSD-current! This is really cool :-)
The code was imported to FreeBSD-current on the 16th as seen in the commit mail, so I suppose it will be part of the next major version (7.</description>
    </item>
    
    <item>
      <title>tmpfs marked non-experimental</title>
      <link>https://jmmv.dev/2006/11/tmpfs-marked-non-experimental.html</link>
      <pubDate>Sat, 11 Nov 2006 14:16:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2006/11/tmpfs-marked-non-experimental.html</guid>
      <description>The implementation of an efficient memory-based file system (tmpfs) for NetBSD was my Google Summer of Code 2005 project. After the program was over, the code was committed to the repository and some other developers (specially YAMAMOTO Takashi) did several fixes and improvements in it. However, several problems remained in it that prevented tagging it release quality (see this thread).
Finally I found some time to deal with most of them, something that has kept me busy for around three weeks (and which I should have done much, much earlier).</description>
    </item>
    
    <item>
      <title>Making vnd(4) work with tmpfs</title>
      <link>https://jmmv.dev/2006/11/making-vnd4-work-with-tmpfs.html</link>
      <pubDate>Thu, 09 Nov 2006 10:49:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2006/11/making-vnd4-work-with-tmpfs.html</guid>
      <description>vnd(4) is the virtual disk driver found in NetBSD. It provides a disk-like interface to files which allows you to treat them as if they were disks. This is useful, for example, when a file holds a file system image (e.g. the typical ISO-9660 files) and you want to inspect its contents.
Up until now vnd(4) used the vnode&#39;s bmap and strategy operations to access the backing file. These operate at the block-level and therefore do not involve any system-wide caches; this is why they were used (see below).</description>
    </item>
    
    <item>
      <title>NetBSD&#39;s KNF: Prefixes for struct members</title>
      <link>https://jmmv.dev/2006/04/netbsds-knf-prefixes-for-struct.html</link>
      <pubDate>Tue, 18 Apr 2006 14:59:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2006/04/netbsds-knf-prefixes-for-struct.html</guid>
      <description>The NetBSD coding style guide, also known as Kernel Normal Form (KNF), suggests to prefix a struct&#39;s members with a string that represents the structure they belong to. For example: all struct tmpfs_node members are prefixed by tn_ and all struct wsdisplay_softc members start with sc_. But why there is such a rule? After all, the style guide does not mention the reasons behind this.
The first reason is clarity. When accessing a structure instance, whose name may be anything, seeing a known prefix in the attribute helps in determining the variable&#39;s type.</description>
    </item>
    
    <item>
      <title>tmpfs on FreeBSD</title>
      <link>https://jmmv.dev/2006/04/tmpfs-on-freebsd.html</link>
      <pubDate>Fri, 14 Apr 2006 10:45:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2006/04/tmpfs-on-freebsd.html</guid>
      <description>It has just been brought to my attention that tmpfs is being ported to FreeBSD by Rohit Jalan. These are good news: more eyes looking at the code (even if it has been modified to work on another OS) means that more bugs can be catched. </description>
    </item>
    
    <item>
      <title>SoC: Introductory article to tmpfs</title>
      <link>https://jmmv.dev/2006/02/soc-introductory-article-to-tmpfs.html</link>
      <pubDate>Sat, 11 Feb 2006 05:21:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2006/02/soc-introductory-article-to-tmpfs.html</guid>
      <description>Dr. Dobb&#39;s Journal is running a set of mini-articles promoting Summer of Code projects. Next month&#39;s issue includes the tmpfs&#39; introductory article, written by me and William Studenmund, the project&#39;s mentor.
Looks like you have to register to access the full article; previous issues used to have them publically available. Personally, I&#39;m going to wait for the printed version :-) </description>
    </item>
    
    <item>
      <title>File systems documentation for review</title>
      <link>https://jmmv.dev/2006/01/file-systems-documentation-for-review.html</link>
      <pubDate>Fri, 27 Jan 2006 06:42:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2006/01/file-systems-documentation-for-review.html</guid>
      <description>My Summer of Code project, tmpfs, promised that I would write documentation describing how file systems work in NetBSD (and frankly, I think this point had to do a lot with my proposal being picked up). I wrote such documentation during August but I failed to make it public &amp;mdash; my mentor and I first thought about making it an article (which would have delayed it anyway) but soon after it became apparent that that structure was inappropriate.</description>
    </item>
    
    <item>
      <title>NetBSD: File system directories, part 2</title>
      <link>https://jmmv.dev/2005/11/netbsd-file-system-directories-part-2.html</link>
      <pubDate>Fri, 18 Nov 2005 10:17:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2005/11/netbsd-file-system-directories-part-2.html</guid>
      <description>In the first part, we saw what a directory is and gave some fuzzy ideas on how it is implemented. Let&#39;s now outline the most common operations run on directories: lookup and readdir.
The lookup operation receives a path component name (a string without slashes) and returns the node pointed to by this name within the directory, assuming, of course, that the entry exists. Otherwise, it tells the caller that the entry is missing or incorrect (i.</description>
    </item>
    
    <item>
      <title>NetBSD: File system directories, part 1</title>
      <link>https://jmmv.dev/2005/11/netbsd-file-system-directories-part-1.html</link>
      <pubDate>Thu, 17 Nov 2005 06:41:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2005/11/netbsd-file-system-directories-part-1.html</guid>
      <description>A file-system directory is an object that maps file names to nodes (i-nodes in UFS terminology). When given a file name, the directory must be able to tell whether it has that name or not and return the node number attached to it. File names are not stored in the nodes themselves as this allows for hard link creation flawlessly: you can have multiple directory entries pointing to the same file with no extra cost.</description>
    </item>
    
    <item>
      <title>SoC: Payment received</title>
      <link>https://jmmv.dev/2005/10/soc-payment-received.html</link>
      <pubDate>Mon, 24 Oct 2005 07:07:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2005/10/soc-payment-received.html</guid>
      <description>Being part of Planet SoC, I think it is a good idea to post this: I&#39;ve just received Google&#39;s cheque for my Summer of Code 2005 tmpfs project! I&#39;m happy :-)
Unfortunately, due to some tax issues, Google has withhold a 30% of the original payment. I hope to be able to ask for a refund the next year... </description>
    </item>
    
    <item>
      <title>NFS exports lists rototill</title>
      <link>https://jmmv.dev/2005/09/nfs-exports-lists-rototill.html</link>
      <pubDate>Fri, 23 Sep 2005 08:35:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2005/09/nfs-exports-lists-rototill.html</guid>
      <description>After two weeks of work, the NFS exports lists rototill that I briefly outlined in this past post is finished and committed into NetBSD&#39;s source tree. Believe it or not, the whole set of changes was triggered by a XXX mark in mountd(8)&#39;s code (in other words, fixing code marked as such is not always trivial).
In the past, when a file system wanted to support NFS, it had to include two fields in a fixed position of its mount arguments structure due to the broken way in which mountd(8) handled the mount(2) calls.</description>
    </item>
    
    <item>
      <title>Linker&#39;s link sets</title>
      <link>https://jmmv.dev/2005/09/linkers-link-sets.html</link>
      <pubDate>Sun, 18 Sep 2005 08:19:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2005/09/linkers-link-sets.html</guid>
      <description>I don&#39;t know about other linkers, but GNU ld provides a very useful feature: link sets. A link set is a list of symbols constructed during link time which can then be inspected in regular code. This is very interesting in situations when you want to initialize several subsystems from a centralized place but don&#39;t know which of these will be available; that is, you don&#39;t know which ones will be in the final binary.</description>
    </item>
    
    <item>
      <title>Interface to change NFS exports</title>
      <link>https://jmmv.dev/2005/09/interface-to-change-nfs-exports.html</link>
      <pubDate>Sun, 11 Sep 2005 07:48:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2005/09/interface-to-change-nfs-exports.html</guid>
      <description>While adding NFS support to tmpfs, I found how NetBSD currently manages NFS exports from userland. The interface is, IMHO, scary. As NetBSD aims for clean code and design, it must be fixed.
See my mail to the tech-kern@ mailing list for more details on the issue and a preliminary patch.</description>
    </item>
    
    <item>
      <title>tmpfs: Project merged into NetBSD</title>
      <link>https://jmmv.dev/2005/09/tmpfs-project-merged-into-netbsd.html</link>
      <pubDate>Sat, 10 Sep 2005 17:13:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2005/09/tmpfs-project-merged-into-netbsd.html</guid>
      <description>After listening to many queries from developers asking when tmpfs could be integrated into NetBSD, I finally imported the code into the CVS repository. I&#39;m really happy about this :-) Development will be simplified from now on and it will be a lot easier for interested parties to test the code. Please read the announcement for more information.
I&#39;d like to comment now some of the improvements I&#39;ve been doing during the past days, which mostly addressed optimization.</description>
    </item>
    
  </channel>
</rss>