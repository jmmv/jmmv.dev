<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kyua on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/kyua/index.html</link><description>Recent content in Kyua on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2025 Julio Merino</copyright><lastBuildDate>Fri, 02 Aug 2024 08:45:00 -0700</lastBuildDate><atom:link href="https://jmmv.dev/tags/kyua/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Kyua graduates</title><link>https://jmmv.dev/2024/08/kyua-graduates.html</link><pubDate>Fri, 02 Aug 2024 08:45:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2024/08/kyua-graduates.html</guid><description>&lt;p>After years of inactivity, the Kyua project has graduated as an open source citizen and has &lt;a href="https://github.com/freebsd/kyua/">a new home&lt;/a> under the FreeBSD umbrella!&lt;/p>
&lt;p>But uh&amp;hellip; wait, what is Kyua and why is this exciting? To resolve confusion and celebrate this milestone, I&amp;rsquo;d like to revisit what Kyua is, how it came to be, why I stopped working on it for a while, why that was a problem for FreeBSD&amp;mdash;and, indirectly, NetBSD&amp;mdash;and how Kyua being free software has helped keep it alive.&lt;/p></description><enclosure url="https://jmmv.dev/images/2024-08-02-kyua-graduates.jpg" length="367311" type="image/jpeg"/></item><item><title>Offloading maintenance tasks to Travis CI</title><link>https://jmmv.dev/2015/05/offloading-maintenance-tasks-to-travis.html</link><pubDate>Thu, 21 May 2015 17:00:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2015/05/offloading-maintenance-tasks-to-travis.html</guid><description>&lt;p>From day one, the &lt;a href="https://github.com/jmmv/kyua/">Kyua&lt;/a> source tree has had docstring annotations for all of its symbols. The goal of such docstrings is to &lt;em>document the code for the developers of Kyua&lt;/em>: these docstrings were never intended to turn into pre-generated HTML documentation because Kyua does not offer an API once installed.&lt;/p>
&lt;p>As you might have noticed, &lt;a href="https://github.com/jmmv/kyua/blob/c2527eee5471b2fde4aeb2e63121d91cc8aba723/m4/doxygen.m4#L30">Doxygen is an optional component of the build&lt;/a> and it used to run on each &lt;code>make&lt;/code> invocation. This changed &amp;ldquo;recently&amp;rdquo;. Nowadays, &lt;a href="http://www.doxygen.org/">Doxygen&lt;/a> is only run asynchronously on Travis CI to report docstring inconsistencies post-submission (&lt;a href="https://travis-ci.org/jmmv/kyua/builds/63535926">see the &lt;code>DO=apidocs&lt;/code> matrix entry&lt;/a> if you are impatient). Combined with feature branches that are only merged into master when green, this is as good as the previous approach of running Doxygen along the build. Scratch that: this is even better because running Doxygen locally on each build took significant resources and penalized edit/build/test cycles.&lt;/p></description></item><item><title>Kyua turns parallel</title><link>https://jmmv.dev/2015/02/kyua-turns-parallel.html</link><pubDate>Sat, 28 Feb 2015 15:06:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2015/02/kyua-turns-parallel.html</guid><description>&lt;p>After three months of intensive work on &lt;a href="http://github.com/jmmv/kyua/">Kyua&lt;/a>'s &lt;tt>executor&lt;/tt> Git branch, I am happy to announce that the new execution engine, whose crown feature is the &lt;i>ability to run test cases in parallel&lt;/i>, has just &lt;a href="https://github.com/jmmv/kyua/commit/7197e51b8a86b8f2a031b50f8486b0cd3e952460">landed in &lt;tt>master&lt;/tt>&lt;/a> and &lt;a href="https://travis-ci.org/jmmv/kyua/builds/52557397">passes all self-tests&lt;/a>!&lt;/p> &lt;p>You can head over to &lt;a href="https://github.com/jmmv/kyua/commit/7197e51b8a86b8f2a031b50f8486b0cd3e952460">the commit message&lt;/a> for more details on the merge, read &lt;a href="https://github.com/jmmv/kyua/blob/7197e51b8a86b8f2a031b50f8486b0cd3e952460/NEWS">the NEWS entries&lt;/a>, and skim throught the history of the &lt;tt>executor&lt;/tt> branch to understand how this feature has been built.&lt;/p></description></item><item><title>Refocusing Kyua maybe?</title><link>https://jmmv.dev/2014/05/refocusing-kyua-maybe.html</link><pubDate>Fri, 23 May 2014 10:00:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2014/05/refocusing-kyua-maybe.html</guid><description>&lt;p>The FreeBSD devsummit that just passed by gave me enough insight into Jenkins to question the long-term plans for Kyua. Uh, &lt;i>WHAT&lt;/i>?! Let me explain.&lt;/p> &lt;p>&lt;b>In the beginning...&lt;/b>&lt;/p> &lt;p>One of the original but unstated goals of Kyua was to fix the "mess" that is the &lt;a href="http://releng.netbsd.org/test-results.html">NetBSD releng test run logs&lt;/a> site: if you pay close attention, you will notice that various individuals have reinvented the wheel over and over again in an attempt to &lt;i>automate release builds and test suite runs&lt;/i>. In other words: different parties have implemented independent continuous integration systems several times with more or less success.&lt;/p></description></item><item><title>How to merge multiple Git repositories into one</title><link>https://jmmv.dev/2014/02/how-to-merge-multiple-git-repositories.html</link><pubDate>Sat, 15 Feb 2014 16:08:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2014/02/how-to-merge-multiple-git-repositories.html</guid><description>&lt;p>Are you looking for a method to merge multiple Git repositories into a
single one? If so, you have reached the right tutorial!&lt;/p>
&lt;p>Please bear with me for a second while I provide you with background
information and introduce the subject of our experiments. We&amp;rsquo;ll get to
the actual procedure soon and you will be able to apply it to any
repository of your choice.&lt;/p>
&lt;hr>
&lt;p>In the &lt;a href="http://code.google.com/p/kyua/">Kyua project&lt;/a>, and with the
introduction of the &lt;code>kyua-atf-compat&lt;/code> component in the Summer of 2012, I
decided to create independent Git repositories for each component. The
rationale was that, because each component would be shipped as a
standalone distfile, they ought to live in their own repositories.&lt;/p></description></item><item><title>FreeBSD Test Suite tutorial at AsiaBSDCon 2014</title><link>https://jmmv.dev/2014/01/freebsd-test-suite-tutorial-at.html</link><pubDate>Wed, 08 Jan 2014 07:00:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2014/01/freebsd-test-suite-tutorial-at.html</guid><description>&lt;p>I am pleased to announce that the tutorial on the &lt;a href="http://wiki.freebsd.org/TestSuite">FreeBSD Test Suite&lt;/a> that I proposed for &lt;a href="http://2014.asiabsdcon.org/">AsiaBSDCon 2014&lt;/a> has been accepted!&lt;/p> &lt;p>The conference website will soon include more details, but allow me to spoil your wait:&lt;/p> &lt;ul> &lt;li>Goals: Learn how to use the test suite, how it is internally organized and how new tests can be written.&lt;/li> &lt;li>Stretch goal: Get attendees to contribute one or more tests to the project.&lt;/li> &lt;li>Audience: Mostly developers of FreeBSD that want to learn how the new test suite plugs into the system. That said, and because a major part of the tutorial will revolve around &lt;i>using&lt;/i> the test suite for one's own benefit, everyone is welcome really. In particular, system administrators may get a useful tool out of this.&lt;/li> &lt;/ul> &lt;p>The main surprise in the acceptance confirmation email is that materials are due by January 20th... which is around the corner! Time to rush in getting things ready. In the meantime, you can find more details on the tutorial by &lt;a href="https://docs.google.com/a/meroh.net/document/d/1OYZR3Sc4Xr4IpVPyIyyiFpCpVSCLjEU4dt0Iwp_SS7o/edit">reading the proposal itself&lt;/a>.&lt;/p></description></item><item><title>FreeBSD Test Suite goals and planning</title><link>https://jmmv.dev/2014/01/freebsd-test-suite-goals-and-planning.html</link><pubDate>Sun, 05 Jan 2014 11:30:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2014/01/freebsd-test-suite-goals-and-planning.html</guid><description>&lt;p>I was really impressed and delighted to see how popular my previous (and first) post on FreeBSD testing, titled &lt;a href="https://jmmv.dev/2013/12/introducing-freebsd-test-suite.html">Introducing the FreeBSD Test Suite&lt;/a>, was. Looks like this project may be of great interest to developers and users out there (not unsurprisingly) so I'll try to keep you all up-to-date with any key developments.&lt;/p> &lt;p>A first question that arises from the announcement is: &lt;b>where are the test suite and infrastructure headed?&lt;/b> After all, the continuous testing machines for amd64 are already up and running, so what else is there to do?&lt;/p></description></item><item><title>Introducing the FreeBSD Test Suite</title><link>https://jmmv.dev/2013/12/introducing-freebsd-test-suite.html</link><pubDate>Tue, 31 Dec 2013 08:00:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2013/12/introducing-freebsd-test-suite.html</guid><description>&lt;p>&lt;a href="https://jmmv.dev/2013/11/joining-freebsd-committer-ranks.html">I joined the FreeBSD committer
ranks&lt;/a>
a couple of months ago with the intention to equip FreeBSD with an
out-of-the-box test suite and with a testing infrastructure. The time
until now has been quite fruitful and I have been rushing to get
something ready for you before the year end.&lt;/p>
&lt;p>With that, I am very pleased to announce that the first mockup of the
FreeBSD testing cluster is up and running! Point your browser at:&lt;/p></description></item><item><title>lutok-0.3, kyua-testers-0.2 and kyua-cli-0.8</title><link>https://jmmv.dev/2013/12/lutok-03-kyua-testers-02-and-kyua-cli-08.html</link><pubDate>Sun, 08 Dec 2013 07:25:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2013/12/lutok-03-kyua-testers-02-and-kyua-cli-08.html</guid><description>&lt;p>Yesterday was release day: I pushed out &lt;a href="https://code.google.com/p/lutok/downloads/detail?name=lutok-0.4.tar.g">Lutok 0.3&lt;/a>, &lt;a href="https://code.google.com/p/kyua/downloads/detail?name=kyua-testers-0.2.tar.gz">Kyua Testers 0.2&lt;/a> and &lt;a href="https://code.google.com/p/kyua/downloads/detail?name=kyua-cli-0.8.tar.gz">Kyua CLI 0.8&lt;/a>.&lt;/p> &lt;p>There are not a lot of changes in these new releases. The reason I cut them was to publish the new TAP-compliant tester and make it available for use in FreeBSD as soon as possible. I will be using this new feature as part of the &lt;a href="http://wiki.freebsd.org/TestSuite">FreeBSD Test Suite&lt;/a> in order to &lt;a href="http://lists.freebsd.org/pipermail/freebsd-testing/2013-November/000095.html">hook existing test programs without having to rewrite&lt;/a> them to use the ATF libraries (or at least not as a first step).&lt;/p></description></item><item><title>Three productive days on the Kyua front</title><link>https://jmmv.dev/2013/11/three-productive-days-on-kyua-front.html</link><pubDate>Thu, 28 Nov 2013 09:00:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2013/11/three-productive-days-on-kyua-front.html</guid><description>&lt;p>This being Thanksgiving week in the U.S. and Google giving us Thursday and Friday off, I decided to take Monday to Wednesday off as well to spend some time hacking on Kyua &amp;mdash; yes, finally, after months of being inactive. And what a three productive days!&lt;/p> &lt;p>Here comes a little briefing on the three fronts in which I made progress. (This puts on hold the &lt;a href="http://julipedia.meroh.net/search/label/header-files">header files&lt;/a> series until next Monday... but most of you are probably away anyway. Enjoy the holidays if they apply to you!)&lt;/p></description></item><item><title>EuroBSDCon 2013 takeaways</title><link>https://jmmv.dev/2013/09/eurobsdcon-2013-takeaways.html</link><pubDate>Mon, 30 Sep 2013 08:03:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2013/09/eurobsdcon-2013-takeaways.html</guid><description>&lt;p>EuroBSDCon 2013 is done. If you have been following my daily posts over the last 4 days (&lt;a href="https://jmmv.dev/2013/09/live-from-eurobsdcon-2013-day-1.html">day 1&lt;/a>, &lt;a href="https://jmmv.dev/2013/09/live-from-eurobsdcon-2013-day-2.html">day 2&lt;/a>, &lt;a href="https://jmmv.dev/2013/09/live-from-eurobsdcon-2013-day-3.html">day 3&lt;/a> and &lt;a href="https://jmmv.dev/2013/09/live-from-eurobsdcon-2013-day-4.html">day 4&lt;/a>) as well as &lt;a href="https://twitter.com/search?q=%23EuroBSDcon&amp;src=hash">#EuroBSDCon updates in Twitter&lt;/a>, you may already have a pretty good idea of what went on here. However, with the conference over, it is now a good time to recap the whole event and present the takeaways of these four days which, overall, were quite interesting and productive.&lt;/p></description></item><item><title>Live from EuroBSDCon 2013, day 4</title><link>https://jmmv.dev/2013/09/live-from-eurobsdcon-2013-day-4.html</link><pubDate>Sun, 29 Sep 2013 14:16:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2013/09/live-from-eurobsdcon-2013-day-4.html</guid><description>&lt;p>Live from Malta today attending the EuroBSDCon 2013 conference. The conference is over; today was the second and last day and it has just finished.&lt;/p> &lt;p>&lt;b>Hardware and virtualization&lt;/b>&lt;/p> &lt;p>One of the three tracks today included a lot of talks on hardware, porting of BSDs to new hardware and virtualization techniques. Of all these, the few talks I attended covered the topics in great detail and proved to be very interesting.&lt;/p></description></item><item><title>Live from EuroBSDCon 2013, day 3</title><link>https://jmmv.dev/2013/09/live-from-eurobsdcon-2013-day-3.html</link><pubDate>Sat, 28 Sep 2013 12:28:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2013/09/live-from-eurobsdcon-2013-day-3.html</guid><description>&lt;p>Live from Malta today attending the EuroBSDCon 2013 conference. Today is the first day of the conference itself. Many more people have shown up as expected and there have been tons of very interesting talks all the time. It is both good and bad that there are several tracks: you can select the topic you are most interested in, but sometimes great talks overlap!&lt;/p> &lt;p>&lt;b>Keynote&lt;/b>&lt;/p> &lt;p>Today's opening session was led by &lt;a href="http://en.wikipedia.org/wiki/Theo_de_Raadt">Theo de Raadt&lt;/a>, the founder of OpenBSD. His keynote focused on explaining how there is no real research happening on operating systems any more and how new, risky technological changes can be tested in a real-world system like OpenBSD.&lt;/p></description></item><item><title>Setting up my old Mac Mini G4 as a development machine</title><link>https://jmmv.dev/2012/10/setting-up-my-old-mac-mini-g4-as.html</link><pubDate>Mon, 22 Oct 2012 15:31:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2012/10/setting-up-my-old-mac-mini-g4-as.html</guid><description>I've spent quite a few time last week setting up my old Mac Mini G4 — a PPC 1.2GHz with 1GB of RAM running NetBSD/macppc current — as a "workstation" for the development of Kyua and other tools for NetBSD. Yes, this machine is very slow, but that's the whole point of the exercise I'm going to narrate below.&lt;br />&lt;br />I recently got approval from the NetBSD core team to import Kyua into the NetBSD source tree and replace ATF with it... which is great, but when thinking about it objectively, I am reluctant to unnecessarily "punish" all NetBSD users by increasing the build time of the system significantly. Don't get me wrong: Kyua itself &lt;i>runs&lt;/i>&amp;nbsp;efficiently on old machines, but &lt;i>building&lt;/i> the code — particularly the hundreds of tests that come with it — takes just too long. This slowdown is not too noticeable on a relatively-modern machine, but it's unacceptable on not-so-old machines.&lt;br />&lt;br />Of course, I could proceed with the import right now (with the code disabled by default) and make it leaner later, but this would cause quite a first bad impression on our users. So it's better to delay the import a little bit until, at least, I have had a chance to simplify some core parts of the code. Mind you, this simplification work is already in progress and quite advanced: it consists on modularizing (as separate processes) some critical parts of the code and writing these with a much simpler style and in plain C.&lt;br />&lt;br />But back to the original point of my post.&lt;br />&lt;br />The first thing to mention about this experience is that with some effort and long waits, I've got a pretty decent setup for development even on this old machine. From time to time, I miss having a real Unix desktop at hand for development (no OS X, you are not one of those). The GUI behaves relatively well with a 1920x1200 display, running Fluxbox, traditional xterms, Mutt for GMail access and a bunch of other applications.&lt;br />&lt;br />Unfortunately, too many things feel really sluggish. A few specific examples:&lt;br />&lt;br />&lt;ul>&lt;li>Firefox 16 is barely usable. I'm not sure there are many alternatives to decent web browsing for such an old non-Intel platform. Dillo is blazing fast and allows me to access online documentation and mailing list archives (just enough for development), but it's pretty much useless for any other purpose given the "Web 2.0".&lt;/li>&lt;li>Any operation that involves pkgsrc takes ages. Even when building the simplest packages, one can notice the system crawl through all of the pkgsrc infrastructure. Sometimes this is the fault of&amp;nbsp;&lt;a href="http://mail-index.netbsd.org/pkgsrc-changes/2012/10/13/msg079664.html">a bad algorithm&lt;/a>; other times it's just sh(1) being the wrong tool for something as complex as pkgsrc internals.&lt;/li>&lt;li>Things like basic code editing in Emacs 24 are slow at responding to typing. Disabling font lock mode makes it feel fast again, but it's just surprising to see that even color coding is slow.&lt;/li>&lt;/ul>I still remember my old and trusty machine from 10 years ago (a Pentium II 233 MHz): with a similar setup, it was significantly snappier. Yes, software has evolved and these packages now have many more features... but really, does editing a text file have to be sluggish?&lt;div>&lt;div>&lt;br />&lt;/div>&lt;div>Leaving aside sluggishness, there is also the problem of instability. NetBSD/macppc is a &lt;a href="http://www.netbsd.org/ports/#ports-tier2">tier 2 port&lt;/a>, and things don't work as well as one would like. I personally would enjoy bringing this port to tier 1... but I currently lack the time (and basic knowledge of the architecture) to do so :-/&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>Anyway, the result of this exercise: the new code I'm writing to modularize Kyua builds damn fast in this machine, and keeping it this way is &lt;a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/01/02/10252333.aspx">the whole point of having such an old machine as a build environment&lt;/a>. So I'll try to keep using it to develop these new components of Kyua.&lt;/div>&lt;/div></description></item><item><title>Kyua gets its own blog</title><link>https://jmmv.dev/2012/06/kyua-gets-its-own-blog.html</link><pubDate>Mon, 04 Jun 2012 18:25:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2012/06/kyua-gets-its-own-blog.html</guid><description>For the last couple of weeks, I have been pondering the creation of a Kyua-specific blog. And, after a lot of consideration, I have finally taken the plunge. &lt;b>Say hello to &lt;a href="http://engineering-kyua.blogspot.com/">Engineering Kyua&lt;/a>!&lt;/b>&lt;div>&lt;br />&lt;/div>&lt;div>From now on, all Kyua-related posts (as well as ATF posts) will go to the new blog.&amp;nbsp;I recommend you to &lt;b>subscribe to&amp;nbsp;&lt;a href="http://engineering-kyua.blogspot.com/feeds/posts/default">Engineering Kyua's Atom feed&lt;/a>&amp;nbsp;right now&lt;/b> to not miss a beat! &amp;nbsp;If you care enough about Kyua, that is...&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>I may still post Kyua-related stuff in here once in a while, but you should assume that all news and, in particular, weekly status reports will be sent to the new blog.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;/div>&lt;div>"Why?" Well, The Julipedia is supposed to be (and always has) my personal blog. Looking back at all the recent posts, they almost univocally are about Kyua and there is no personal content in them. In respect for the readers of this blog (who may not care about Kyua at all) and in order to attempt to give Kyua a more definite identity, it makes sense to move the posts to their own blog.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>Also, by having a blog dedicated to Kyua, I will not feel uncomfortable about publishing weekly status reports again. I previously felt that they were adding too much noise to this blog, and is the main reason behind why I stopped posting them at some point. Weekly reports have their value, mostly to keep myself focused and to allow outsiders to know what the project is up to (particularly in a world of DVCSs, where code changes may be kept private for weeks at a time).&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>And you may wonder: "will you continue to post content here?" Sure I will, but I need ideas (suggestions welcome)! Today's social ecosystem makes it difficult for me to decide whether a post belongs in a blog, in Google+, in Twitter... and updating them all at once to provide the same content is pointless.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>Here is my take: for most of the irrelevant stuff that one may want to share at a personal level (photos, videos, arbitrary thoughts), social networks seem to provide a better platform. The blog seems a place more suited for short essays that should be indexable and be accessible by users across the web; for example, these include how-tos, technical explanations for a particular concept, or opinion articles. And, finally, Twitter seems like the place to throw pointers to longer articles elsewhere and very short opinion comments. I think this summarizes pretty well what my current "practices" around these systems follow. And, as you can deduce, this also explains (as you have experienced) why the blog gets fewer content than ever because most things are better suited for a social network.&lt;/div></description></item></channel></rss>