<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vcs on jmmv.dev</title>
    <link>https://jmmv.dev/tags/vcs/</link>
    <description>Recent content in Vcs on jmmv.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Nov 2013 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://jmmv.dev/tags/vcs/index/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Patch management with Quilt</title>
      <link>https://jmmv.dev/2013/11/patch-management-with-quilt.html</link>
      <pubDate>Thu, 14 Nov 2013 12:00:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2013/11/patch-management-with-quilt.html</guid>
      <description>Creating and managing patches on top of a source tree maintained in a non-distributed VCS needn&#39;t be hard. Some people handle this with Git, but I use a tool that seems to have fallen in disuse but was once very popular to create patchsets against the Linux kernel: Quilt.
What is Quilt? As the quilt(1) manual page says:
quilt - tool to manage series of patches
Quilt is a tool to manage large sets of patches by keeping track of the changes each patch makes.</description>
    </item>
    
    <item>
      <title>Writing good release notes</title>
      <link>https://jmmv.dev/2013/08/writing-good-release-notes.html</link>
      <pubDate>Thu, 08 Aug 2013 12:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2013/08/writing-good-release-notes.html</guid>
      <description>As the developer of a software package, you have just finished preparing a shiny new release. No matter how big the release is, you obviously want your users to upgrade so that they can experience all the new features and bug fixes &amp;mdash; or, rather, witness the results of your hard work. But how do you convince them to do so?
One of the first things to do is ensure that your release notes are of great quality.</description>
    </item>
    
    <item>
      <title>Top 5 tips to write great commit log messages</title>
      <link>https://jmmv.dev/2013/08/top-5-tips-to-write-great-commit-log.html</link>
      <pubDate>Mon, 05 Aug 2013 12:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2013/08/top-5-tips-to-write-great-commit-log.html</guid>
      <description>Writing commit messages is something that every programmer has to face at some point. It may be as early as when starting to contribute to an open source project from home or it can be as late as when joining a job where the development team uses a Version Control System (VCS for short). (Off topic tip: if an open source project or a job you join do not use any VCS, consider twice thrice if you want to do so.</description>
    </item>
    
    <item>
      <title>Switching projects to Git</title>
      <link>https://jmmv.dev/2012/02/switching-projects-to-git.html</link>
      <pubDate>Sat, 11 Feb 2012 14:48:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2012/02/switching-projects-to-git.html</guid>
      <description>The purpose of this post is to tell you the story of the Version Control System (VCS) choices I have made while maintaining my open source projects ATF, Kyua and Lutok. It also details where my thoughts are headed to these days.
This is not a description of centralized vs. distributed VCSs, and it does not intend to be one. This does not intend to compare Monotone to Git either, although you&#39;ll probably feel like it while reading the text.</description>
    </item>
    
    <item>
      <title>Back to Stone Age</title>
      <link>https://jmmv.dev/2008/04/back-to-stone-age.html</link>
      <pubDate>Sat, 12 Apr 2008 15:15:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2008/04/back-to-stone-age.html</guid>
      <description>For a rather long while I had been able to avoid the use of the Subversion services offered by my research group even if they were omnipresent. But today, this lucky trend vanished. I have been &#34;forced&#34; to use one of these devilish repositories to add some of my stuff. Using this goes against my &#34;principles&#34;, as a colleague said.
If you don&#39;t know it, Subversion is a centralized version control system.</description>
    </item>
    
  </channel>
</rss>