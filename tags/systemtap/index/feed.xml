<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Systemtap on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/systemtap/index.html</link><description>Recent content in Systemtap on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 02 Dec 2007 09:52:00 -0500</lastBuildDate><atom:link href="https://jmmv.dev/tags/systemtap/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Thanks, SystemTap!</title><link>https://jmmv.dev/2007/12/thanks-systemtap.html</link><pubDate>Sun, 02 Dec 2007 09:52:00 -0500</pubDate><guid>https://jmmv.dev/2007/12/thanks-systemtap.html</guid><description>I started this week's work with the idea of instrumenting the spufs module found in Linux/Cell to be able to take some traces of the execution of Cell applications. At first, I modified that module to emit events at certain key points, which were later registered in a circular queue. Then, I implemented a file in &lt;tt>/proc&lt;/tt> so that a user-space application could read from it and free space from the queue to prevent the loss of events when it was full.&lt;br />&lt;br />That first implementation never worked well, but as I liked how it was evolving, I thought it could be a neat idea to make this "framework" more generic so that other parts of the kernel could use it. I rewrote everything with this idea in mind and then also modified the regular scheduler and the process-management system calls to also rise events for my trace. And got it working.&lt;br />&lt;br />But then, I was talking to &lt;a href="http://blogs.nopcode.org/brainstorm/">Brainstorm&lt;/a> about his new "Sun Campus Ambassador" position at the University, and during the conversation he mentioned DTrace. So I asked... "Mmm, that tool could probably simplify all my work; is it there something similar for Linux?". And yes; yes it is! Its name, &lt;a href="http://sourceware.org/systemtap/">SystemTap&lt;/a>.&lt;br />&lt;br />As the web page says, SystemTap "provides an infrastructure to simplify the gathering of information about the running Linux system". You do this by writing small scripts that hook into specific points of the kernel — at the function level, at specific mark points, etc. — and which get executed when the script is processed and installed into the live kernel as a loadable kernel module.&lt;br />&lt;br />With this tool I can discard my several-hundred-long changes to gather traces and replace them with some very, very simple SystemTap scripts. No need to rebuild the kernel, no need to deal with custom changes to it, no need to rebuild every now and then... neat!&lt;br />&lt;br />Now I'm having problems using the feature that allows to instrument kernel markers, and I need them because otherwise some private functions cannot be instrumented due to compiler optimizations (I think). OK, I'd expose those functions, but while I'm at it, I think it'd be a good idea to write a decent tapset for spufs that could later be published. And that prevents me from doing such hacks.&lt;br />&lt;br />But anyway, kudos to the SystemTap developers. I now understand why everybody is so excited about DTrace.</description></item></channel></rss>