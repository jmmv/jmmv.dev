<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/git/index/</link><description>Recent content in git on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 15 Feb 2014 16:08:00 -0500</lastBuildDate><atom:link href="https://jmmv.dev/tags/git/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>How to merge multiple Git repositories into one</title><link>https://jmmv.dev/2014/02/how-to-merge-multiple-git-repositories.html</link><pubDate>Sat, 15 Feb 2014 16:08:00 -0500</pubDate><guid>https://jmmv.dev/2014/02/how-to-merge-multiple-git-repositories.html</guid><description>Are you looking for a method to merge multiple Git repositories into a single one? If so, you have reached the right tutorial!
Please bear with me for a second while I provide you with background information and introduce the subject of our experiments. We&amp;rsquo;ll get to the actual procedure soon and you will be able to apply it to any repository of your choice.
In the Kyua project, and with the introduction of the kyua-atf-compat component in the Summer of 2012, I decided to create independent Git repositories for each component.</description></item><item><title>Projects migrated to Git</title><link>https://jmmv.dev/2012/02/projects-migrated-to-git.html</link><pubDate>Sun, 26 Feb 2012 20:34:00 -0500</pubDate><guid>https://jmmv.dev/2012/02/projects-migrated-to-git.html</guid><description>I finally took the plunge. Yesterday night, I migrated the Kyua and Lutok repositories from Subversion to Git. And this morning I migrated ATF from Monotone and custom hosting to Git and Google Code; oh, and this took way longer than expected.
Migration of Kyua and Lutok
Migrating these two projects was straightforward. After preparing a fresh local Git repository following the instructions posted yesterday, pushing to Google Code is a simple matter:</description></item><item><title>Converting a Subversion repository to Git</title><link>https://jmmv.dev/2012/02/converting-subversion-repository-to-git.html</link><pubDate>Sat, 25 Feb 2012 17:54:00 -0500</pubDate><guid>https://jmmv.dev/2012/02/converting-subversion-repository-to-git.html</guid><description>As discussed over a week ago, I have been pondering the idea of migrating my projects from Subversion to Git. One of the prerequisites of such a migration is the preparation of a process to cleanly migrate the revision history from the old system to the new one. Of course, such process should attempt to preserve the revision history as close to reality as possible (regardless of what some other big projects have done by just throwing away their history; shrug).</description></item><item><title>Switching projects to Git</title><link>https://jmmv.dev/2012/02/switching-projects-to-git.html</link><pubDate>Sat, 11 Feb 2012 14:48:00 -0500</pubDate><guid>https://jmmv.dev/2012/02/switching-projects-to-git.html</guid><description>The purpose of this post is to tell you the story of the Version Control System (VCS) choices I have made while maintaining my open source projects ATF, Kyua and Lutok. It also details where my thoughts are headed to these days.
This is not a description of centralized vs. distributed VCSs, and it does not intend to be one. This does not intend to compare Monotone to Git either, although you'll probably feel like it while reading the text.</description></item><item><title>Talk about Git</title><link>https://jmmv.dev/2007/05/talk-about-git.html</link><pubDate>Sat, 19 May 2007 10:58:00 -0400</pubDate><guid>https://jmmv.dev/2007/05/talk-about-git.html</guid><description>I've been using Git (or better said Cogito) recently as part of my PFC and, although I don't like the way Git was started, I must confess I like it a lot. In some ways it is very similar to Monotone (the version control system I prefer now) but it has its own features that make it very interesting. One of these is the difference between local and remote branches, something I'll talk about in a future post.</description></item></channel></rss>