<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>macos on Julio Merino (jmmv.dev)</title>
    <link>https://jmmv.dev/tags/macos/index/</link>
    <description>Recent content in macos on Julio Merino (jmmv.dev)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 May 2020 15:30:00 -0400</lastBuildDate><atom:link href="https://jmmv.dev/tags/macos/index/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Running codesign over SSH with a new key</title>
      <link>https://jmmv.dev/2020/05/codesign-and-ssh.html</link>
      <pubDate>Fri, 29 May 2020 15:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/05/codesign-and-ssh.html</guid>
      <description>I just spent sometime between 30 minutes and 1 hour convincing the Mac Pro that sits in my office to successfully codesign an iOS app via Bazel. This was after having to update the signing key to a newer one and after rebooting the machine due to the macOS 10.15.5 upgradeâ€”all remotely thanks to COVID-19.
The build of the app was failing with an errSecInternalComponent error printed by codesign. It is not the first time I face this, but in all previous cases, I had either been at the computer to click through security popups, had had functional Chrome Remote Desktop access, or did not have to install a new signing key remotely.</description>
    </item>
    
    <item>
      <title>macOS terminal stalls running a binary</title>
      <link>https://jmmv.dev/2020/03/macos-stuck-terminal-fuse-exec.html</link>
      <pubDate>Mon, 23 Mar 2020 21:20:00 +0500</pubDate>
      
      <guid>https://jmmv.dev/2020/03/macos-stuck-terminal-fuse-exec.html</guid>
      <description>Here I am, confined to my apartment due to the COVID-19 pandemic and without having posted anything for almost two months. Fortunately, my family and I are still are in good condition, and I&amp;rsquo;m even more fortunate to have a job that can employ me remotely without problems. Or can they?
For over a year, my team and I have been working on allowing our mobile engineers to work from their laptops (as opposed to from their powerful workstations).</description>
    </item>
    
    <item>
      <title>The /bin/bash baggage of macOS</title>
      <link>https://jmmv.dev/2019/11/macos-bash-baggage.html</link>
      <pubDate>Wed, 20 Nov 2019 23:00:00 +0000</pubDate>
      
      <guid>https://jmmv.dev/2019/11/macos-bash-baggage.html</guid>
      <description>As you may know, macOS ships with an ancient version of the Bash shell interpreter, 3.2.57. Let&amp;rsquo;s see why that is and why this is a problem.</description>
    </item>
    
    <item>
      <title>Waiting for process groups, macOS edition</title>
      <link>https://jmmv.dev/2019/11/wait-for-process-group-darwin.html</link>
      <pubDate>Fri, 15 Nov 2019 11:00:00 +0000</pubDate>
      
      <guid>https://jmmv.dev/2019/11/wait-for-process-group-darwin.html</guid>
      <description>In the previous posts, we saw why waiting for a process group is complicated and we covered a specific, bullet-proof mechanism to accomplish this on Linux. Now is the time to investigate this same topic on macOS. Remember that the problem we are trying to solve (#10245) is the following: given a process group, wait for all of its processes to fully terminate.
macOS has a bunch of fancy features that other systems do not have, but process control is not among them.</description>
    </item>
    
    <item>
      <title>A quick glance at macOS&#39; sandbox-exec</title>
      <link>https://jmmv.dev/2019/11/macos-sandbox-exec.html</link>
      <pubDate>Fri, 01 Nov 2019 20:10:00 +0000</pubDate>
      
      <guid>https://jmmv.dev/2019/11/macos-sandbox-exec.html</guid>
      <description>macOS includes a sandboxing mechanism to closely control what processes can do on the system. Sandboxing can restrict file system accesses on a path level, control which host/port pairs can be reached over the network, limit which binaries can be executed, and much more. All applications installed via the App Store are subject to sandboxing.
This sandboxing functionality is exposed via the sandbox-exec(1) command-line utility, which unfortunately has been listed as deprecated for at least the last two major versions of macOS.</description>
    </item>
    
    <item>
      <title>Optimizing tree deletions in Bazel</title>
      <link>https://jmmv.dev/2019/03/optimizing-tree-deletions.html</link>
      <pubDate>Fri, 22 Mar 2019 15:00:00 +0100</pubDate>
      
      <guid>https://jmmv.dev/2019/03/optimizing-tree-deletions.html</guid>
      <description>Bazel likes creating very deep and large trees on disk during a build. One example is the output tree, which naturally contains all the artifacts of your build. Another, more problematic example is the symlink forest trees created for every action when sandboxing is enabled. As garbage gets created, it must be deleted.
It turns out, however, that deleting file system trees can be very expensive&amp;mdash;and especially so on macOS. In fact, calls to our deleteTree algorithm routinely showed up in my profiling runs when trying to diagnose slowdowns using the dynamic scheduler.</description>
    </item>
    
    <item>
      <title>Darwin&#39;s QoS service classes and performance</title>
      <link>https://jmmv.dev/2019/03/macos-threads-qos-and-bazel.html</link>
      <pubDate>Wed, 06 Mar 2019 17:30:00 +0100</pubDate>
      
      <guid>https://jmmv.dev/2019/03/macos-threads-qos-and-bazel.html</guid>
      <description>Since the publication of Bazel a few years ago, users have reported (and I myself have experienced) general slowdowns when Bazel is running on Macs: things like the window manager stutter and others like the web browser cannot load new pages. Similarly, after the introduction of the dynamic spawn scheduler, some users reported slower builds than pure remote or pure local builds, which made no sense.
All along we guessed that these problems were caused by Bazel&amp;rsquo;s abuse of system threads, as it used to spawn 200 runnable threads during analysis and used to run 200 concurrent compiler subprocesses.</description>
    </item>
    
    <item>
      <title>Open files limit, macOS, and the JVM</title>
      <link>https://jmmv.dev/2019/01/open-files-limit-macos-and-jvm.html</link>
      <pubDate>Tue, 29 Jan 2019 17:15:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2019/01/open-files-limit-macos-and-jvm.html</guid>
      <description>Bazel&amp;rsquo;s original raison d&amp;rsquo;etre was to support Google&amp;rsquo;s monorepo. A consequence of using a monorepo is that some builds will become very large. And large builds can be very resource hungry, especially when using a tool like Bazel that tries to parallelize as many actions as possible for efficiency reasons. There are many resource types in a system, but today I&amp;rsquo;d like to focus on the number of open files at any given time (nofiles).</description>
    </item>
    
    <item>
      <title>Easy pkgsrc on macOS with pkg_comp 2.0</title>
      <link>https://jmmv.dev/2017/02/pkg_comp-2.0-tutorial-macos.html</link>
      <pubDate>Thu, 23 Feb 2017 17:36:54 -0500</pubDate>
      
      <guid>https://jmmv.dev/2017/02/pkg_comp-2.0-tutorial-macos.html</guid>
      <description>&lt;p&gt;This is a tutorial to guide you through the &lt;a href=&#34;https://jmmv.dev/2017/02/introducing-pkg_comp-2.0.html&#34;&gt;shiny new pkg_comp 2.0&lt;/a&gt; on macOS &lt;a href=&#34;https://github.com/jmmv/pkg_comp/blob/master/INSTALL.md#using-the-macos-installer&#34;&gt;using the macOS-specific self-installer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Goals:&lt;/strong&gt; to use pkg_comp 2.0 to build a binary repository of all the packages you are interested in; to keep the repository fresh on a daily basis; and to use that repository with pkgin to maintain your macOS system up-to-date and secure.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to add the Mac OS X screensaver to the dock</title>
      <link>https://jmmv.dev/2013/11/how-to-add-mac-os-x-screensaver-to-dock.html</link>
      <pubDate>Thu, 07 Nov 2013 12:00:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2013/11/how-to-add-mac-os-x-screensaver-to-dock.html</guid>
      <description>For various reasons, I have trained myself to lock my computer&#39;s screen as soon as I vacate my seat every single time. This may seem annoying to some, but once you get used to it it becomes second nature. The reason I do this is to prevent the chance of a malicious coworker (or &#34;guest&#34;) to steal my credentials at work.
However, Mac OS X has traditionally not made this simple.</description>
    </item>
    
    <item>
      <title>Reinstalled Mac OS X in multiple partitions, again</title>
      <link>https://jmmv.dev/2008/07/reinstalled-mac-os-x-in-multiple.html</link>
      <pubDate>Sat, 05 Jul 2008 06:31:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2008/07/reinstalled-mac-os-x-in-multiple.html</guid>
      <description>Past weekend, for some strange reason, I decided to dump all the MBP&#39;s hard disk contents and start again from scratch. But this time I decided to split the disk into multiple partitions for Mac OS X, to avoid external fragmentation slowdowns as much as possible.
I already did such a thing back when the MBP was new. At that time, I created a partition for the system files and another for the user data.</description>
    </item>
    
    <item>
      <title>Getting started with Cocoa</title>
      <link>https://jmmv.dev/2007/09/getting-started-with-cocoa.html</link>
      <pubDate>Tue, 11 Sep 2007 13:53:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2007/09/getting-started-with-cocoa.html</guid>
      <description>I recently subscribed to the Planet Cocoa aggregator and it has already brought me some interesting articles. Today, there was an excellent one titled Getting started with Cocoa: a friendlier approach posted at Andy Matuschak&#39;s blog: Square Signals.
This post guides you through your first steps with Cocoa. Its basic aim is making you gain enough intuition to let you guide yourself through Cocoa documentation in the future. If you have ever programmed in, e.</description>
    </item>
    
    <item>
      <title>Hibernating a Mac</title>
      <link>https://jmmv.dev/2007/07/hibernating-mac.html</link>
      <pubDate>Sat, 28 Jul 2007 08:35:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2007/07/hibernating-mac.html</guid>
      <description>Mac OS X has supported for a very long time putting Macs to sleep. This is a must-have feature for laptops, but is also convenient for desktop machines. However, it hasn&#39;t been since the transition to Intel-based Macs that it also supports hibernation, also called deep sleep. When entering the hibernation mode, the system stores all memory contents to disk as well as the status of the devices. It then powers off the machine completely.</description>
    </item>
    
    <item>
      <title>New Processor preferences panel in Mac OS X</title>
      <link>https://jmmv.dev/2007/07/new-processor-preferences-panel-in-mac.html</link>
      <pubDate>Sun, 01 Jul 2007 07:45:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2007/07/new-processor-preferences-panel-in-mac.html</guid>
      <description>Some days ago I updated my system to the latest version of Mac OS X Tiger, 10.4.10. It hasn&#39;t been until today that I realized that there is a new cool preferences panel called Processor:
It looks like this:
As you can see, it gives information about each processor in the machine and also lets you disable any processor you want.
There is also another &#34;hidden&#34; window, accessible from the menu bar control after you have enabled it.</description>
    </item>
    
    <item>
      <title>Six months with the MacBook Pro</title>
      <link>https://jmmv.dev/2007/06/six-months-with-macbook-pro.html</link>
      <pubDate>Thu, 21 Jun 2007 07:47:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2007/06/six-months-with-macbook-pro.html</guid>
      <description>If memory serves well, today makes the sixth month since I have got my MacBook Pro and, during this period, have been using it as my sole computer. I feel it is a good time for another mini-review.
Well... to get started: this machine is great; I probably haven&#39;t been happier with any other computer before. I have been able to work on real stuff &amp;mdash; instead of maintaining the machine &amp;mdash; during these months without a hitch.</description>
    </item>
    
  </channel>
</rss>
