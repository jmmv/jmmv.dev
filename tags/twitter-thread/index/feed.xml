<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Twitter-Thread on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/twitter-thread/index.html</link><description>Recent content in Twitter-Thread on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2024 Julio Merino</copyright><lastBuildDate>Sat, 09 Mar 2024 09:50:00 -0700</lastBuildDate><atom:link href="https://jmmv.dev/tags/twitter-thread/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>How "new type" helps avoid production outages</title><link>https://jmmv.dev/2024/03/new-type-and-production-outages.html</link><pubDate>Sat, 09 Mar 2024 09:50:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2024/03/new-type-and-production-outages.html</guid><description>&lt;p>My &lt;a href="https://jmmv.dev/2024/01/links-january-2024-edition.html">January links recap&lt;/a> included the &lt;a href="https://experimentalworks.net/posts/2024-01-22-simple-phantom-types/">&amp;ldquo;Phantom Types&amp;rdquo;&lt;/a> article by David Soria Parra. In it, the author briefly touches upon the &amp;ldquo;new type&amp;rdquo; idiom, its typical implementation in Rust, and then proceeds to propose a better alternative. But the question arises: why should you care?&lt;/p>
&lt;p>To answer why this idiom is useful, I want to present you with a real production problem we faced in the Storage Infrastructure team at Google circa 2010. That issue made me a convert and I&amp;rsquo;ve kept it in mind when designing APIs since then.&lt;/p></description><enclosure url="https://jmmv.dev/images/2024-03-09-new-types-store.jpg" length="552435" type="image/jpeg"/></item><item><title>To C or not to C</title><link>https://jmmv.dev/2024/02/to-c-or-not-to-c.html</link><pubDate>Wed, 21 Feb 2024 06:00:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2024/02/to-c-or-not-to-c.html</guid><description>&lt;p>Over the last few days, there has been this&amp;hellip; debate over at Twitter sparked by a claim that you cannot be a good programmer without knowing C. You obviously can be one, but there is some nuance in what &amp;ldquo;knowing&amp;rdquo; C is truly about. Here is my take on the matter.&lt;/p>
&lt;p>Let me repeat this first: of course you can be a perfectly good programmer without knowing C. Knowing &lt;em>a language&lt;/em> doesn&amp;rsquo;t make or break a programmer, and there are great programmers out there that don&amp;rsquo;t touch C. &lt;em>However&lt;/em>, knowing C says something about your &lt;em>journey&lt;/em>.&lt;/p></description><enclosure url="https://jmmv.dev/images/2024-02-21-to-c-or-not-to-c.png" length="326255" type="image/jpeg"/></item><item><title>Hard disk LEDs and noisy machines</title><link>https://jmmv.dev/2023/12/hard-disk-leds-and-noisy-machines.html</link><pubDate>Fri, 15 Dec 2023 09:20:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2023/12/hard-disk-leds-and-noisy-machines.html</guid><description>&lt;p>The computers of yesteryear had this little feature known as blinking LED lights 🔆. They also had this other feature called noisy disks 💾 and loud fans 🪭. Uh wait. Features? Why &amp;ldquo;features&amp;rdquo; and not &amp;ldquo;annoyances&amp;rdquo;?! 🧵👇&lt;/p>
&lt;figure>
&lt;img src="https://jmmv.dev/images/2023-12-15-retro-pc-leds.jpg" class="with-border">
&lt;figcaption>Front panel of a common PC case in the late 1990s. My Pentium MMX 166 was hosted in one of these.&lt;/figcaption>
&lt;/figure>
&lt;p>You see, these bright lights and loud noises acted as canaries 🐦 in a performance mine. They gave developers a chance to notice when things were off performance-wise. If your code abused the CPU or the hard disk by mistake, you could tell right away.&lt;/p></description></item><item><title>Code reviews: A success story</title><link>https://jmmv.dev/2023/11/code-reviews-a-success-story.html</link><pubDate>Tue, 21 Nov 2023 13:50:00 -0800</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2023/11/code-reviews-a-success-story.html</guid><description>&lt;p>Code reviews have a bad rep: they are antagonistic in nature and, sometimes, pure red tape. Some argue that they are bad practice; others say that peer programming is better. And while these &lt;em>may&lt;/em> be true, I want to tell you a story about a case where code reviews worked well!&lt;/p>
&lt;p>Meet X: a junior engineer in the Bazel team circa 2018, tasked to implement two features: A and B. As you may know, Google is big into code reviews&amp;mdash;and their tooling for this is awesome; believe me&amp;mdash;so this was the standard process for X to get his code checked in.&lt;/p></description><enclosure url="https://jmmv.dev/images/2023-11-21-code-review.png" length="134980" type="image/jpeg"/></item><item><title>Good performance is not just big O</title><link>https://jmmv.dev/2023/09/performance-is-not-big-o.html</link><pubDate>Fri, 08 Sep 2023 10:00:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2023/09/performance-is-not-big-o.html</guid><description>&lt;p>Having a fast and responsive app is orthogonal to &amp;ldquo;knowing your big &lt;i>O&lt;/i>s&amp;rdquo;. Unfortunately, most tech companies over-emphasize algorithms in interviews and downplay systems knowledge, and I believe that&amp;rsquo;s one reason behind sluggish apps and bloated systems.&lt;/p>
&lt;p>I&amp;rsquo;ve seen this play out repeatedly. Interviewers ask a LeetCode-style coding question, which is then followed by the ritual of discussing time and memory complexity. Candidates ace the answers. But then&amp;hellip; their &amp;ldquo;real&amp;rdquo; code suffers from subtle yet impactful performance problems.&lt;/p>
&lt;p>Focusing on big &lt;em>O&lt;/em> complexity rarely matters in most apps. Sure, it&amp;rsquo;s important to think about your algorithmic choices, but there are so many more details to worry about that have a direct impact on app performance and responsiveness. Let&amp;rsquo;s look at a bunch of them!&lt;/p></description><enclosure url="https://jmmv.dev/images/2023-09-08-speed-bumps-limit.jpg" length="372231" type="image/jpeg"/></item><item><title>Fast machines, slow machines</title><link>https://jmmv.dev/2023/06/fast-machines-slow-machines.html</link><pubDate>Tue, 27 Jun 2023 06:50:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2023/06/fast-machines-slow-machines.html</guid><description>&lt;p>Well, &lt;em>that&lt;/em> was unexpected. I recorded a couple of crappy videos in 5 minutes, &lt;a href="https://twitter.com/jmmv/status/1671670996921896960">posted them on a Twitter thread&lt;/a>, and went viral with 8.8K likes at this point. I really could not have predicted that, given that I&amp;rsquo;ve been posting what-I-believe-is interesting content for years and&amp;hellip; nothing, almost-zero interest. Now that things have cooled down, it&amp;rsquo;s time to stir the pot and elaborate on those thoughts a bit more rationally.&lt;/p>
&lt;p>To summarize, the Twitter thread shows two videos: one of an old computer running Windows NT 3.51 and one of a new computer running Windows 11. In each video, I opened and closed a command prompt, File Explorer, Notepad, and Paint. You can clearly see how apps on the old computer open up instantly whereas apps on the new computer show significant lag as they load. I questioned how computers are actually getting better when trivial things like this have regressed. And boom, the likes and reshares started coming in. Obviously some people had issues with my claims, but there seems to be an overwhelming majority of people that agree we have a problem.&lt;/p>
&lt;p>To open up, I&amp;rsquo;ll stand my ground: latency in modern computer interfaces, with modern OSes and modern applications, is terrible and getting worse. This applies to smartphones as well. At the same time, while UIs were much more responsible on computers of the past, those computers were also awful in many ways: new systems have changed our lives substantially. So, what gives?&lt;/p></description></item><item><title>Principal engineers should be on-call</title><link>https://jmmv.dev/2021/07/principal-engineers-oncall.html</link><pubDate>Wed, 14 Jul 2021 06:30:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2021/07/principal-engineers-oncall.html</guid><description>&lt;p>A recent tweet that caught my attention read: &amp;ldquo;principal engineers should be on-call&amp;rdquo;. Of course they should be! I&amp;rsquo;m &amp;ldquo;surprised&amp;rdquo; they aren&amp;rsquo;t everywhere, but I can imagine some reasons to justify their situation. Let&amp;rsquo;s change that in this thread. 🧵 👇&lt;/p></description></item><item><title>Running a healthy production service</title><link>https://jmmv.dev/2021/06/service-health.html</link><pubDate>Fri, 18 Jun 2021 06:25:00 -1000</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2021/06/service-health.html</guid><description>&lt;p>In &lt;a href="https://jmmv.dev/2021/03/oncall-wellbeing.html">a previous thread&lt;/a>, I covered some techniques to approach on-call shifts and maintain &lt;em>your own&lt;/em> well-being. In this thread, I will touch upon the things you can do, as a team, to make &lt;em>your service&lt;/em> more sustainable. 🧵 👇&lt;/p></description></item><item><title>On software deadlines</title><link>https://jmmv.dev/2021/04/on-software-deadlines.html</link><pubDate>Tue, 20 Apr 2021 09:40:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2021/04/on-software-deadlines.html</guid><description>&lt;p>In my career so far (which isn&amp;rsquo;t that long&amp;hellip; but also not that short 😉), I&amp;rsquo;ve been lucky enough to not be subject to strict deadlines. That&amp;rsquo;s why I&amp;rsquo;m always in awe every time I talk to fellow long-time Microsoft employees. A thread! 🧵&lt;/p></description></item><item><title>Always be quitting</title><link>https://jmmv.dev/2021/04/always-be-quitting.html</link><pubDate>Mon, 12 Apr 2021 09:00:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2021/04/always-be-quitting.html</guid><description>&lt;p>A good philosophy to live by at work is to &amp;ldquo;always be quitting&amp;rdquo;. No, don&amp;rsquo;t be constantly thinking of leaving your job 😱. But act as if you might leave on short notice 😎. Counterintuitively, this will make you a better engineer and open up growth opportunities. A thread 👇.&lt;/p></description></item><item><title>Tips on well-being while on-call</title><link>https://jmmv.dev/2021/03/oncall-wellbeing.html</link><pubDate>Wed, 10 Mar 2021 09:30:00 -0800</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2021/03/oncall-wellbeing.html</guid><description>&lt;p>Last week, I was first-time on-call for a part of Azure Storage. My previous background as an SRE at Google helped me remain calm despite my inexperience. And as we have more first-time on-callers joining soon, I couldn&amp;rsquo;t resist writing some advice for them. Let&amp;rsquo;s start! 🧵&lt;/p></description></item><item><title>Down the memory lane with OS/2</title><link>https://jmmv.dev/2020/08/os2-memory-lane.html</link><pubDate>Tue, 04 Aug 2020 17:00:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2020/08/os2-memory-lane.html</guid><description>OS/2 Warp 3 was the operating system that led me into an adventure back in 1994. This OS made me escape MS-DOS and Windows, and then made me enter the Linux world when I couldn&amp;rsquo;t afford Warp 4. Let&amp;rsquo;s walk down the memory lane!</description></item><item><title>My 18 steps to prepare a great presentation</title><link>https://jmmv.dev/2020/07/presentation-preparation.html</link><pubDate>Fri, 17 Jul 2020 07:30:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2020/07/presentation-preparation.html</guid><description>In the previous post, I shared my tips to give great presentations. But how do I prepare to give one? That&amp;rsquo;s a different story, so let&amp;rsquo;s take a look at my complete process.</description></item><item><title>My 18 tips to deliver great presentations</title><link>https://jmmv.dev/2020/07/presentation-tips.html</link><pubDate>Mon, 13 Jul 2020 07:30:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2020/07/presentation-tips.html</guid><description>I used to dread public speaking in middle and high school. College was OKish. Now&amp;hellip; even though I’m far from an expert, I really enjoy it. How? I forced myself to give talks and strive for improvement in each of them. Here are the things I learned and do.</description></item></channel></rss>