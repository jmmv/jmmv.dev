<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>iii-iv on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/iii-iv/index/</link><description>Recent content in iii-iv on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Aug 2023 05:30:00 -0700</lastBuildDate><atom:link href="https://jmmv.dev/tags/iii-iv/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>A failed experiment with Rust static dispatch</title><link>https://jmmv.dev/2023/08/rust-static-dispatch-failed-experiment.html</link><pubDate>Sun, 06 Aug 2023 05:30:00 -0700</pubDate><guid>https://jmmv.dev/2023/08/rust-static-dispatch-failed-experiment.html</guid><description>&lt;p>Initial versions of the EndBASIC Service, and therefore initial versions of EndTRACKER, used dynamic dispatch to support abstract definitions of system services such as the database they talk to and the clock they use. This looked like a bunch of &lt;tt>Arc&lt;dyn Foo>&lt;/tt> objects passed around and was done to support extremely fast unit testing.&lt;/p>
&lt;p>When I generalized the core logic of these services into the III-IV framework, I decided to experiment with a switch to static dispatch. The rationale was that using static dispatch better aligns with the design of well-regarded crates in the Rust ecosystem, and also because I wanted to avoid unnecessary runtime costs in the foundational pieces of my web services.&lt;/p>
&lt;p>Let me tell you that this decision was a huge mistake and that the experiment has utterly failed. Using static dispatch has been a constant source of frustration due to the difficulty in passing types around and reasoning about trait bounds. The situation had gotten so bad that I dreaded adding new functionality to my services whenever a change to a statically-typed &lt;tt>struct&lt;/tt> was needed, because that meant adding yet another type parameter and plumbing it through tens of source files.&lt;/p>
&lt;p>In lieu of the difficulties, which eventually turned into blockers to implementing new features, I made the choice of going back to dynamic dispatch. The goal was to gain ergonomics at the expense of a supposedly-negligible runtime cost. Let me tell you about the problems I faced, the refactoring journey, and some measurements I gathered after the rewrite.&lt;/p></description></item><item><title>Unit-testing a web service in Rust</title><link>https://jmmv.dev/2023/07/unit-testing-a-web-service.html</link><pubDate>Fri, 07 Jul 2023 06:30:00 -0700</pubDate><guid>https://jmmv.dev/2023/07/unit-testing-a-web-service.html</guid><description>&lt;p>One of the things I'm most proud of the Rust web services I have written is how I can run their tests with zero setup and within milliseconds, all while making me confident that "main" can always be shipped to production. I've previously touched upon how this all works in other articles, but it's time for a deep dive.&lt;/p>
&lt;p>To make things specific, I'll be describing the testing infrastructure of EndTRACKER, the EndBASIC Service, and the sample key/value store app of III-IV. These services are all structured in three separate layers, and I'll be covering the testing strategy for each of them.&lt;/p></description></item><item><title>A persistent task queue in Rust</title><link>https://jmmv.dev/2023/06/iii-iv-task-queue.html</link><pubDate>Fri, 23 Jun 2023 06:35:00 -0700</pubDate><guid>https://jmmv.dev/2023/06/iii-iv-task-queue.html</guid><description>A couple of posts ago, I described why I built custom email subscriptions for this blog. I briefly mentioned that there is new automation that scrapes the RSS feed and sends new post notifications to you all. Today, it&amp;rsquo;s time to look into how this all works and how this is based on a new persistent task queuing service in Rust. The queue handles tasks to periodically scrape the RSS feed and schedule emails, all with various quota enforcers and retry policies in place. Read on for the design requirements and constraints of the task queue, how the client and worker Rust APIs look like, and how this all can be made to work inside the Azure Functions serverless runtime for minimal deployment hassle and cost.</description></item><item><title>MVC but for non-UI apps</title><link>https://jmmv.dev/2023/06/mvc-non-ui-apps.html</link><pubDate>Tue, 20 Jun 2023 10:00:00 -0700</pubDate><guid>https://jmmv.dev/2023/06/mvc-non-ui-apps.html</guid><description>In MVC isn&amp;rsquo;t MVC, which hit the Hacker News front page overnight, Collin Donnell describes how the MVC design pattern that we use today isn&amp;rsquo;t really what was originally envisioned in 1979 by Tyrgve Reenskaug. This prompted me to think about how this architecture, if tweaked even further, maps pretty well to today&amp;rsquo;s designs of other kinds of programs, and I want to explore two cases in this post: web services and CLI apps.</description></item><item><title>Introducing III-IV</title><link>https://jmmv.dev/2023/03/introducing-iii-iv.html</link><pubDate>Mon, 13 Mar 2023 06:45:00 -0700</pubDate><guid>https://jmmv.dev/2023/03/introducing-iii-iv.html</guid><description>&lt;p>Over the last couple of years, I have developed two small web services in Rust: &lt;a href="https://jmmv.dev/2021/07/endbasic-0.7.html">one for EndBASIC&lt;/a> and &lt;a href="https://jmmv.dev/2022/02/diy-web-analytics.html">one for this blog&lt;/a>. Those two web services contained significant copy/pasted helper code, which always bothered me because small bug fixes in one rarely propagated to the other. But because this only impacted two inconsequential side projects, the hinderance wasn&amp;rsquo;t a big deal.&lt;/p>
&lt;p>Until now. I now face the need to write two more web services (details TBA), and duplicating those foundations twice more felt just wrong. So I spent the last couple of weeks pulling the common code out of the existing services into a&amp;hellip; you guessed it&amp;hellip; framework, which I have called III-IV (&amp;quot;&lt;em>three four&lt;/em>&amp;quot; if you read it out loud) and am ready to announce.&lt;/p></description></item></channel></rss>