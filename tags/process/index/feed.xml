<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Process on jmmv.dev</title>
    <link>https://jmmv.dev/tags/process/</link>
    <description>Recent content in Process on jmmv.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Jan 2009 07:02:00 -0500</lastBuildDate>
    
	<atom:link href="https://jmmv.dev/tags/process/index/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Silencing the output of Python&#39;s subprocess.Popen</title>
      <link>https://jmmv.dev/2009/01/silencing-output-of-pythons.html</link>
      <pubDate>Mon, 05 Jan 2009 07:02:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2009/01/silencing-output-of-pythons.html</guid>
      <description>I&#39;m learning Python these days while writing an script to automate the testing of ATF under multiple virtual machines. I had this code in a shell script, but it is so ugly and clumsy that I don&#39;t even dare to add it to the repository. Hopefully, the new version in Python will be more robust and versatile enough to be published.
One of the things I&#39;ve been impressed by is the subprocess module and, in special, its Popen class.</description>
    </item>
    
    <item>
      <title>Boost.Process and SIGCHLD</title>
      <link>https://jmmv.dev/2008/10/boostprocess-and-sigchld.html</link>
      <pubDate>Sat, 18 Oct 2008 21:46:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2008/10/boostprocess-and-sigchld.html</guid>
      <description>For some unknown reason, I&#39;m regaining interest in Boost.Process lately. I guess many of the people who have written me in the past asking for the status of the library will be happy to hear this, but I can&#39;t promise I will stick to coding it for long. I have to say that I have received compliments from quite a few people... thanks if you are reading and sorry if I did not reply you at all.</description>
    </item>
    
    <item>
      <title>Testing the process-tree killing algorithm</title>
      <link>https://jmmv.dev/2008/01/testing-process-tree-killing-algorithm.html</link>
      <pubDate>Thu, 17 Jan 2008 09:56:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2008/01/testing-process-tree-killing-algorithm.html</guid>
      <description>Now that you know the procedure to kill a process tree, I can explain how the automated tests for this feature work. In fact, writing the tests is what was harder due to all the race conditions that popped up and due to my rusty knowledge of tree algorithms.
Basically, the testing procedure works like this:Spawn a complete tree of processes based on a configurable degree D and height H.Make each child tell the root process its PID so that the root process can have a list of all its children, be them direct or indirect, for control purposes.</description>
    </item>
    
    <item>
      <title>How to kill a tree of processes</title>
      <link>https://jmmv.dev/2008/01/how-to-kill-tree-of-processes.html</link>
      <pubDate>Wed, 16 Jan 2008 17:31:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2008/01/how-to-kill-tree-of-processes.html</guid>
      <description>Yesterday I mentioned the need for a way to kill a tree of processes in order to effectively implement timeouts for test cases. Let&#39;s see how the current algorithmÂ in ATF works:
The root process is stopped by sending a SIGSTOP to it so that it cannot spawn any new children while being processed.Get the whole list of active processes and filter them to only get those that are direct children of the root process.</description>
    </item>
    
    <item>
      <title>Implementing timeouts for test cases</title>
      <link>https://jmmv.dev/2008/01/implementing-timeouts-for-test-cases.html</link>
      <pubDate>Tue, 15 Jan 2008 12:01:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2008/01/implementing-timeouts-for-test-cases.html</guid>
      <description>One of the pending to-do entries for ATF 0.4 is (was, mostly) the ability to define a timeout for a test case after which it is forcibly terminated. The idea behind this feature is to prevent broken tests from stalling the whole test suite run, something that is already needed by the factor(6) tests in NetBSD. Given that I want to release this version past weekend, I decided to work on this instead of delaying it because.</description>
    </item>
    
    <item>
      <title>Cross-platform development with Parallels</title>
      <link>https://jmmv.dev/2007/04/cross-platform-development-with.html</link>
      <pubDate>Mon, 02 Apr 2007 10:35:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2007/04/cross-platform-development-with.html</guid>
      <description>These days I&#39;m seizing some of my free time to continue what I did as my SoC 2006 project: the Boost.Process library. There is still a lot of work to be done, but some items are annoying enough to require early attention (well, I can&#39;t speak of &#34;early&#34; because I hadn&#39;t touched the code for months).
Boost.Process aims to be a cross-platform library and currently works under POSIX-based systems (such as Linux, NetBSD or Mac OS X) as well as under Win32 systems.</description>
    </item>
    
    <item>
      <title>Boost.Process 0.1 published</title>
      <link>https://jmmv.dev/2006/08/boostprocess-01-published.html</link>
      <pubDate>Mon, 21 Aug 2006 16:36:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2006/08/boostprocess-01-published.html</guid>
      <description>SoC 2006 is officially over &amp;mdash; at least for me in my timezone. Given that the Subversion repository has some problems with public access, I&#39;ve tagged the current sources as the first public version and uploaded a couple of tarballs to the Boost Vault. Both the tag and the tarballs will also serve historical purposes, specially when newer ones come ;-)
You can download the archives from the Process directory in tar.</description>
    </item>
    
    <item>
      <title>Boost.Process tarballs posted</title>
      <link>https://jmmv.dev/2006/08/boostprocess-tarballs-posted.html</link>
      <pubDate>Thu, 17 Aug 2006 07:56:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2006/08/boostprocess-tarballs-posted.html</guid>
      <description>As everybody is not comfortable accessing Subversion repositories to download source code, I&#39;ve posted two tarballs with Boost.Process&#39; sources. They include an exported copy of the repository contents as well as prebuilt documentation in the libs/process/doc/html subdirectory.
You can download the compressed archive either in tar.gz format or in ZIP. Keep in mind that these will be updated very frequently so please do not use them to prepackage the library.</description>
    </item>
    
  </channel>
</rss>