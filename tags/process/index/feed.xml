<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>process on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/process/index/</link><description>Recent content in process on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 05 Jan 2009 07:02:00 -0500</lastBuildDate><atom:link href="https://jmmv.dev/tags/process/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Silencing the output of Python's subprocess.Popen</title><link>https://jmmv.dev/2009/01/silencing-output-of-pythons.html</link><pubDate>Mon, 05 Jan 2009 07:02:00 -0500</pubDate><guid>https://jmmv.dev/2009/01/silencing-output-of-pythons.html</guid><description>I'm learning Python these days while writing an script to automate the testing of ATF under multiple virtual machines. I had this code in a shell script, but it is so ugly and clumsy that I don't even dare to add it to the repository. Hopefully, the new version in Python will be more robust and versatile enough to be published.
One of the things I've been impressed by is the subprocess module and, in special, its Popen class.</description></item><item><title>Testing the process-tree killing algorithm</title><link>https://jmmv.dev/2008/01/testing-process-tree-killing-algorithm.html</link><pubDate>Thu, 17 Jan 2008 09:56:00 -0500</pubDate><guid>https://jmmv.dev/2008/01/testing-process-tree-killing-algorithm.html</guid><description>Now that you know the procedure to kill a process tree, I can explain how the automated tests for this feature work. In fact, writing the tests is what was harder due to all the race conditions that popped up and due to my rusty knowledge of tree algorithms.
Basically, the testing procedure works like this:Spawn a complete tree of processes based on a configurable degree D and height H.Make each child tell the root process its PID so that the root process can have a list of all its children, be them direct or indirect, for control purposes.</description></item><item><title>How to kill a tree of processes</title><link>https://jmmv.dev/2008/01/how-to-kill-tree-of-processes.html</link><pubDate>Wed, 16 Jan 2008 17:31:00 -0500</pubDate><guid>https://jmmv.dev/2008/01/how-to-kill-tree-of-processes.html</guid><description>Yesterday I mentioned the need for a way to kill a tree of processes in order to effectively implement timeouts for test cases. Let's see how the current algorithmÂ in ATF works:
The root process is stopped by sending a SIGSTOP to it so that it cannot spawn any new children while being processed.Get the whole list of active processes and filter them to only get those that are direct children of the root process.</description></item><item><title>Implementing timeouts for test cases</title><link>https://jmmv.dev/2008/01/implementing-timeouts-for-test-cases.html</link><pubDate>Tue, 15 Jan 2008 12:01:00 -0500</pubDate><guid>https://jmmv.dev/2008/01/implementing-timeouts-for-test-cases.html</guid><description>One of the pending to-do entries for ATF 0.4 is (was, mostly) the ability to define a timeout for a test case after which it is forcibly terminated. The idea behind this feature is to prevent broken tests from stalling the whole test suite run, something that is already needed by the factor(6) tests in NetBSD. Given that I want to release this version past weekend, I decided to work on this instead of delaying it because.</description></item></channel></rss>