<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sunos on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/sunos/index.html</link><description>Recent content in Sunos on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2024 Julio Merino</copyright><lastBuildDate>Sun, 03 Feb 2008 10:42:00 -0500</lastBuildDate><atom:link href="https://jmmv.dev/tags/sunos/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>unlink(2) can actually remove directories</title><link>https://jmmv.dev/2008/02/unlink2-can-actually-remove-directories.html</link><pubDate>Sun, 03 Feb 2008 10:42:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2008/02/unlink2-can-actually-remove-directories.html</guid><description>I have always thought that unlink(2) was meant to remove files only but, yesterday, SunOS (&lt;a href="http://developers.sun.com/sxde/">SXDE&lt;/a> 200709) proved my wrong. I was sanity-checking the source tree for the imminent &lt;a href="http://www.NetBSD.org/~jmmv/atf/">ATF&lt;/a> 0.4 release under this platform, which is always scary, and the tests for the &lt;tt>atf::fs::remove&lt;/tt> function were failing &amp;mdash; only when run as root.&lt;br />&lt;br />The failure happened in the cleanup phase of the test case, in which ATF attempts to recursively remove the temporary work directory. When it attempted to remove one of the directories inside it, it failed with a ENOENT message, which in SunOS may mean that the directory is not empty. Strangely, when inspecting the left-over work tree, that directory was indeed empty and it could not be removed with &lt;tt>rm -rf&lt;/tt> nor with &lt;tt>rmdir&lt;/tt>.&lt;br />&lt;br />The manual page for &lt;tt>unlink(2)&lt;/tt> finally gave me the clue of what was happening:&lt;blockquote>If the path argument is a directory and the filesystem supports unlink() and unlinkat() on directories, the directory is unlinked from its parent with no cleanup being performed. In UFS, the disconnected directory will be found the next time the filesystem is checked with fsck(1M). The unlink() and unlinkat() functions will not fail simply because a directory is not empty. The user with appropriate privileges can orphan a non-empty directory without generating an error message.&lt;/blockquote>The solution was easy: as my custom &lt;tt>remove&lt;/tt> function is supposed to remove files only, I added a check before the call to &lt;tt>unlink(2)&lt;/tt> to ensure that the path name does not point to a directory. Not the prettiest possibility (because it is subject to race-conditions even though it is not critical), but it works.</description></item></channel></rss>