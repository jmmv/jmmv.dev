<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cxx on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/cxx/index.html</link><description>Recent content in Cxx on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2025 Julio Merino</copyright><lastBuildDate>Mon, 16 Feb 2015 17:40:00 -0500</lastBuildDate><atom:link href="https://jmmv.dev/tags/cxx/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Unused parameters in C and C++</title><link>https://jmmv.dev/2015/02/unused-parameters-in-c-and-c.html</link><pubDate>Mon, 16 Feb 2015 17:40:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2015/02/unused-parameters-in-c-and-c.html</guid><description>&lt;p>Today I would like to dive into the topic of &lt;em>unused parameters&lt;/em> in C and C++: why they may happen and how to properly deal with themâ€”because smart compilers will warn you about their presence should you enable &lt;code>-Wunused-parameter&lt;/code> or &lt;code>-Wextra&lt;/code>, and even error out if you are brave enough to use &lt;code>-Werror&lt;/code>.&lt;/p>
&lt;h1 id="why-may-unused-parameters-appear">Why may unused parameters appear?&lt;/h1>
&lt;p>You would think that unused parameters should never exist: if the parameter is not necessary as an input, it should not be there in the first place! That&amp;rsquo;s a pretty good argument, but it does not hold when polymorphism enters the picture: if you want to have different implementations of a single API, such API will have to provide, on input, a superset of all the data required by all the possible implementations.&lt;/p></description></item><item><title>Header files: Avoid C++ 'using' directives</title><link>https://jmmv.dev/2013/12/header-files-avoid-c-using-directives.html</link><pubDate>Thu, 05 Dec 2013 12:00:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2013/12/header-files-avoid-c-using-directives.html</guid><description>&lt;p>Following up on the previous C++ post, here comes one more thing to consider when writing header files in this language.&lt;/p>
&lt;h1 id="using-and-using-namespace">&lt;code>using&lt;/code> and &lt;code>using namespace&lt;/code>&lt;/h1>
&lt;p>The C++ &lt;code>using&lt;/code> directive and its more generic &lt;code>using namespace&lt;/code> counterpart, allow the programmer to bring a given symbol or all the symbols in a namespace, respectively, into the calling scope. This feature exists to simplify typing and, to some extent, to make the code more readable. (It may have come into existence to simplify the porting of old, non-ISO C++ code to modern C++, but that&amp;rsquo;s just a guess.)&lt;/p></description></item><item><title>Header files: C++ ipp files</title><link>https://jmmv.dev/2013/12/header-files-c-ipp-files.html</link><pubDate>Mon, 02 Dec 2013 12:00:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2013/12/header-files-c-ipp-files.html</guid><description>&lt;p>Hoping you had a nice holiday break, it is now the time to resume our series on header files with a new topic covering the world of template definitions in C++.&lt;/p>
&lt;hr>
&lt;p>If you have ever used the &lt;a href="http://www.boost.org/">Boost libraries&lt;/a>, you may have noticed that aside from the regular &lt;code>hpp&lt;/code> header files, they also provide a bunch of accompanying &lt;code>ipp&lt;/code> files.&lt;/p>
&lt;p>&lt;strong>&lt;code>ipp&lt;/code> files, in the general case, are used to provide the implementation for a template class defined in a corresponding &lt;code>hpp&lt;/code> file.&lt;/strong> This stems from the fact that, in C++, the &lt;em>code&lt;/em> for such template definitions must be available whenever the class is instantiated, and this in turn means that the template definitions cannot be placed in separate modules as is customary with non-template classes. In other words: putting the template definitions in &lt;code>cpp&lt;/code> files just does not work. (I hear the C++ standards committee wants to &amp;ldquo;fix&amp;rdquo; this but I forget the details now and cannot find a reference.)&lt;/p></description></item><item><title>I don't really like C++</title><link>https://jmmv.dev/2012/09/i-dont-really-like-c.html</link><pubDate>Tue, 04 Sep 2012 19:06:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2012/09/i-dont-really-like-c.html</guid><description>&lt;p>Somebody recently tweeted me this message:&lt;/p>
&lt;blockquote>
&lt;p>As a strong C++ dev and googler (hopefully with some #golang exposure), what&amp;rsquo;s your opinion on @rob_pike post? (&lt;a href="http://goo.gl/xlMi4">goo.gl/xlMi4&lt;/a>)&lt;/p>
&lt;/blockquote>
&lt;p>The answer deserves much more than my original reply included, so here it goes.&lt;/p>
&lt;p>First of all, I found Rob&amp;rsquo;s article quite interesting. Basically, the authors of Go never expected Go to be more widely adopted by Python users than C++ users. In fact, their original goal was to create a replacement for C++ as a systems programming language. The rationale for this is that C++ users like the verbosity and flexibility of the language, with all of its special cases, while Python users like simplicity and switch to Go when they look for the performance bump. This is all reasonable but there is one detail I don&amp;rsquo;t associate with: Rob claims that whoever is excited by the new C++11 features will not move to Go, because liking new C++ features implies that one likes all the flexibility of C++ and will not enjoy Go&amp;rsquo;s simplicity.&lt;/p></description></item><item><title>Exposing a configuration tree through Lua</title><link>https://jmmv.dev/2012/06/exposing-configuration-tree-through-lua.html</link><pubDate>Sat, 02 Jun 2012 20:47:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2012/06/exposing-configuration-tree-through-lua.html</guid><description>In the previous post, I discussed the&amp;nbsp;&lt;a href="https://jmmv.dev/2012/05/type-safe-dynamic-tree-data-type.html">type-safe tree data structure&lt;/a>&amp;nbsp;that is now in the Kyua codebase, aimed at representing the configuration of the program. In this post, we'll see how this data structure ties to the parsing of the configuration file.&lt;br />&lt;br />One goal in the design of the configuration file was to make its contents a simple key/value association (i.e. assigning values to predetermined configuration variables). Of course, the fact that the configuration file is just a Lua script means that additional constructions (conditionals, functions, etc.) can be used to compute these values before assignment, but in the end all we want to have is a collection of values for known keys. The tree data structure does exactly the latter: maintain the mapping of keys to values, and ensuring that only a set of "valid" keys can be set. But, as a data structure, it does not contain any of the "logic" involved in computing those values: that is the job of the script.&lt;br />&lt;br />Now, consider that we have the possible following syntaxes in the configuration file:&lt;br />&lt;br />&lt;tt>simple_variable = "the value"&lt;/tt>&lt;br />&lt;tt>complex.nested.variable = "some other value"&lt;/tt>&lt;br />&lt;br />These assignments map, exactly, to a &lt;tt>tree::set()&lt;/tt> function call: the name of the key is passed as the first argument to &lt;tt>tree::set()&lt;/tt> and the value is passed as the second argument. (Let's omit types for simplicity.) What we want to do is modify the Lua environment so that these assignments are possible, and that when such assignments happen, the internal tree object gets updated with the new values.&lt;br />&lt;br />In order to achieve this, the configuration library &lt;a href="http://code.google.com/p/kyua/source/browse/utils/config/lua_module.cpp">modifies the Lua environment&lt;/a> as follows:&lt;br />&lt;ul>&lt;li>The &lt;tt>newindex&lt;/tt> metatable method of &lt;tt>_G&lt;/tt> is overridden so that an assignment causes a direct call to the &lt;tt>set&lt;/tt> method of the referenced key. The key name is readily available in the &lt;tt>newindex&lt;/tt> arguments, so no further magic is needed. This handles the case of "&lt;tt>a = b&lt;/tt>" (top-level variables).&lt;/li>&lt;li>The &lt;tt>index&lt;/tt> metatable method of &lt;tt>_G&lt;/tt> is overridden so that, if the indexed element is not found, a new table is generated and injected into &lt;tt>_G&lt;/tt>. This new table has a metatable of its own that performs the same operations as the &lt;tt>newindex&lt;/tt> and &lt;tt>index&lt;/tt> herein described. This handles the case of "&lt;tt>a.b = c&lt;/tt>", as this trick causes the intermediate tables (in this case "&lt;tt>a&lt;/tt>") to be transparently created.&lt;/li>&lt;li>Each of the tables created by &lt;tt>index&lt;/tt> has a "key" metatable field that contains the fully qualified key of the node the table corresponds to. This is necessary to be able to construct the full key to pass to the &lt;tt>set&lt;/tt> method.&lt;/li>&lt;li>There is further magic to ensure that values pre-populated in the tree (aka default values) can be queried from within Lua, and that variables can be set more than once. These details are uninteresting though.&lt;/li>&lt;/ul>At the moment, we deny setting variables that have not been pre-defined in the tree structure, which means that if the user wants to define auxiliary variables or functions, these must be declared &lt;tt>local&lt;/tt> to prevent calling into the &lt;tt>_G&lt;/tt> hooks. This is quite nice, but we may need to change this later on if we want to export the standard Lua modules to the configuration files.</description></item><item><title>Type-safe, dynamic tree data type</title><link>https://jmmv.dev/2012/05/type-safe-dynamic-tree-data-type.html</link><pubDate>Tue, 29 May 2012 19:06:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2012/05/type-safe-dynamic-tree-data-type.html</guid><description>The core component of the new configuration library in Kyua is the &lt;tt>&lt;a href="http://code.google.com/p/kyua/source/browse/utils/config/tree.hpp">utils::config::tree&lt;/a>&lt;/tt> class: a type-safe, dynamic tree data type. This class provides a mapping of string keys to arbitrary types: all the nodes of the tree have a textual name, and they can either be inner nodes (no value attached to them), or leaf nodes (an arbitrary type attached as a value to them). The keys represent traversals through such tree, and do this by separating the node names with dots (things of the form &lt;tt>root.inner1.innerN.leaf&lt;/tt>).&lt;br />&lt;br />The tree class is the in-memory representation of a configuration file, and is the data structure passed around methods and algorithms to tune their behavior. It replaces the previous &lt;tt>config&lt;/tt> static structure.&lt;br />&lt;br />The following highlights describe the tree class:&lt;br />&lt;ul>&lt;li>&lt;b>Keys are (and thus the tree layout is) pre-registered&lt;/b>. One side-effect of moving away from a static C++ structure as the representation of the configuration to a dynamic structure such as a tree is that the compiler cannot longer validate the name of the configuration settings when they are queried. In the past, doing something like &lt;tt>config.architecture&lt;/tt> would only compile if &lt;tt>architecture&lt;/tt> was a valid structure defined... but now, code like &lt;tt>config["architecture"]&lt;/tt> cannot be validated during the build.&lt;br />In order to overcome this limitation, trees must have their keys pre-defined. Pre-defining the keys declares their type within the tree. &amp;nbsp;Accesses to unknown keys results in an error right away, and accesses to pre-defined keys must always happen with their pre-recorded types.&lt;br />Note that pre-defined nodes can, or cannot, hold a value. The concept of "being set" is different than "being defined".&lt;/li>&lt;li>&lt;b>Some nodes can be dynamic&lt;/b>. Sometimes we do not know what particular keys are valid within a context. For example, the &lt;tt>test_suites&lt;/tt> subtree of the configuration can contain arbitrary test suite names and properties within it, and there is no way for Kyua (at the moment) to know what keys are valid or not.&lt;br />As a result, the tree class allows defining a particular node as "dynamic", at which point accesses to any undefined keys below that node result in the creation of the node.&lt;/li>&lt;li>&lt;b>Type safety&lt;/b>. Every node has a type attached to it. The base configuration library provides common types such as &lt;tt>bool_node&lt;/tt>, &lt;tt>int_node&lt;/tt> and &lt;tt>string_node&lt;/tt>, but the consumer can define its own node types to hold any other kind of data type. (It'd be possible, for example, to define a &lt;tt>map_node&lt;/tt> to hold a full map as a tree leaf.)&lt;br />The "tricky" (and cool) part of type safety in this context is to avoid exposing type casts to the caller: the caller always knows what type corresponds to every key (because, remember, the caller had to predefine them!), so it knows what type to expect from every node. The tree class achieves this by using template &lt;i>methods&lt;/i>, which just query the generic internal nodes and cast them out (after validation) to the requested type.&lt;/li>&lt;li>&lt;b>Plain string representations&lt;/b>. The end user has to be able to provide overrides to configuration properties through the command line... and the command line is untyped: everything is a string. The tree library, therefore, needs a mechanism to internalize strings (after validation) and convert them to the particular node types. Similarly, it is interesting to have a way to export the contents of a tree to strings so that they can be shown to the user.&lt;/li>&lt;/ul>With that said, let's see a couple of examples. First, a simple one. Let's create a tree with a couple of fictitious nodes (one a string, one an integer), set some values and then query such values:&lt;br />&lt;br />&lt;pre>config::tree tree;&lt;br />&lt;br />// Predefine the valid keys.&lt;br />tree.define&amp;lt; config::string_node &amp;gt;("kyua.architecture");&lt;br />tree.define&amp;lt; config::int_node &amp;gt;("kyua.timeout");&lt;br />&lt;br />// Populate the tree with some sample values.&lt;br />tree.set&amp;lt; config::string_node &amp;gt;("kyua.architecture", "powerpc");&lt;br />tree.set&amp;lt; config::int_node &amp;gt;("kyua.timeout", 300);&lt;br />&lt;br />// Query the sample values.&lt;br />const std::string architecture =&lt;br /> tree.lookup&amp;lt; config::string_node &amp;gt;("kyua.architecture");&lt;br />const int timeout =&lt;br /> tree.lookup&amp;lt; config::int_node &amp;gt;("kyua.timeout");&lt;/pre>&lt;br />Yep, that's it. Note how the code just knows about keys and their types, but does not have to mess around with type casts nor tree nodes. And, if there is any typo in the property names or if there is a type mismatch between the property and its requested node type, the code will fail early. This, coupled with extensive unit tests, ensures that configuration keys are always queried consistently.&lt;br />&lt;br />Note that we'd also have set the keys above as follows:&lt;br />&lt;br />&lt;pre>tree.set_string("kyua.architecture", "powerpc");&lt;br />tree.set_string("kyua.timeout", "300");&lt;/pre>&lt;br />... which would result in the validation of "300" as a proper integer, conversion of it to a native integer, and storing the resulting number as the integer node it corresponds to. This is useful, again, when reading configuration overrides from the command line as types are not known in that context yet we want to store their values in the same data structure as the values read from the configuration file.&lt;br />&lt;br />Let's now see another very simple example showcasing dynamic nodes (which is a real-life example from the current Kyua configuration file):&lt;br />&lt;br />&lt;pre>config::tree tree;&lt;br />&lt;br />// Predefine a subtree as dynamic.&lt;br />tree.define_dynamic("test_suites");&lt;br />&lt;br />// Populate the subtree with fictitious values.&lt;br />tree.set&amp;lt; config::string_node &amp;gt;("test_suites.NetBSD.ffs", "ext2fs");&lt;br />tree.set&amp;lt; config::int_node &amp;gt;("test_suites.NetBSD.iterations", 5);&lt;br />&lt;br />// And the querying would happen exactly as above with lookup().&lt;/pre>&lt;br />Indeed, it'd be very cool if this tree type followed more standard STL conventions (iterators, for example). But I didn't really think about this when I started writing this class and, to be honest, I don't need this functionality.&lt;br />&lt;br />Now, if you paid close attention to the above, you can start smelling the relation of this structure to the &lt;a href="http://code.google.com/p/kyua/source/browse/examples/kyua.conf">syntax of configuration files&lt;/a>. I'll tell you how this ties together with Lua in a later post. (Which may also explain why I chose this particular representation.)</description></item><item><title>Rethinking Kyua's configuration system</title><link>https://jmmv.dev/2012/05/rethinking-kyuas-configuration-system.html</link><pubDate>Mon, 28 May 2012 19:48:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2012/05/rethinking-kyuas-configuration-system.html</guid><description>In the&amp;nbsp;&lt;a href="https://jmmv.dev/2012/05/kyuas-configuration-system-showing-its.html">previous blog post&lt;/a>, I described the problems that the implementation of the Kyua configuration file parsing and in-memory representation posed. I also hinted that some new code was coming and, after weeks of work, I'm happy to say that it has &lt;a href="http://code.google.com/p/kyua/source/detail?r=275a6bb6101d8c9ae2f0290cac6c294ac040aeab">just landed in the tree&lt;/a>!&lt;br />&lt;div>&lt;br />I really want to get to explaining the nitty-gritty details of the implementation, but I'll keep these for later. Let's focus first on what the goals for the new configuration module were, as these drove a lot of the implementation details:&lt;/div>&lt;div>&lt;ul>&lt;li>&lt;b>Key/value pairs representation&lt;/b>: The previous configuration system did this already, and it is a pretty good form for a configuration file because it is a simple, understandable and widespread format. Note that I have not said anything yet about the &lt;i>types&lt;/i>&amp;nbsp;of the values.&lt;/li>&lt;li>&lt;b>Tree-like representation&lt;/b>: The previous configuration schema grouped test-suite specific properties under a "test_suites" map while it left internal run-time properties in the global namespace. The former is perfect and the latter was done just for simplicity. I want to move towards a tree of properties to give context to each of them so that they can be grouped semantically (e.g. &lt;i>kyua.report.*&lt;/i>, &lt;i>kyua.runtime.*&lt;/i>, etc.). The new code has not changed the structure of the properties yet (to remain compatible with previous files), but it adds very simple support to change this in the shortcoming future.&lt;/li>&lt;li>&lt;b>Single-place parsing and validation&lt;/b>: A configuration file is an external representation of a set of properties. This data is read (parsed) once and converted into an in-memory representation. All validation of the values of the properties must happen at this stage, and &lt;i>not when the properties are queried&lt;/i>. The reason is that validation of external values must be consistent and has to happen in a controlled location (so that errors can all be reported at the same time).&lt;br />I have seen code in other projects where the configuration file is stored in memory as a set of key/value string pairs and parsing to other types (such as integers, etc.) is delayed until the values are used. The result is that, if a property is queried more than once, the validation will be implemented in different forms, each with its own bugs, which will result in dangerous inconsistencies.&lt;/li>&lt;li>&lt;b>Type safety&lt;/b>: This is probably the trickiest bit. Every configuration node must be stored in the type that makes most sense for its value. For example: a timeout in seconds is an integer, so the in-memory representation must be an integer. Or another example: the type describing the "unprivileged user" is a data structure that maps to a system user, yet the configuration file just specifies either a username or a UID.&lt;br />Keeping strict type validation in the code is interesting because it helps to ensure that parsing and validation happen in just a single place: whenever the configuration file is read, every property will have to be converted to its in-memory type, and this means that the validation can only happen at that particular time. &lt;i>Once the data is in memory, we can and have to assume that it is valid&lt;/i>. Additionally, strict types ensure that the code querying such properties uses the values as intended, without having to do additional magic to map them to other types.&lt;/li>&lt;li>&lt;b>Extensibility&lt;/b>: Parsing a configuration file is a very generic concept, yet the previous code made the mistake of tying this logic with the specific details of Kyua configuration files. A goal of the new code has been to write a library that parses configuration files, and allows the Kyua-specific code to define the schema of the configuration file separately. (No, the library is not shipped separately at this point; it's placed in its own &lt;i>utils::config&lt;/i> module.)&lt;/li>&lt;/ul>&lt;div>With all this code in place, there are a bunch of things that can now be easily implemented. Consider the following:&lt;/div>&lt;/div>&lt;div>&lt;ul>&lt;li>Properties to define the timeout of test cases depending on their size (long-standing &lt;a href="http://code.google.com/p/kyua/issues/detail?id=5">issue 5&lt;/a>).&lt;/li>&lt;li>Properties to tune the UI behavior: width of the screen, whether to use color or not (no, there is no color support yet), etc.&lt;/li>&lt;li>Properties to configure how reports look like "by default": if you generate reports of any form frequently, it is very likely that you will want them to look the same every time and hence you will want to define the report settings once in the configuration file.&lt;/li>&lt;li>Hooks: one of the reasons for using Lua-based configuration files was to allow providing extra customization abilities to the user. Kyua could theoretically call back into Lua code to perform particular actions, and such actions could be explicitly stated by the user in the form of Lua functions. Neither the current configuration code nor Kyua has support for hooks, but the new implementation makes it rather easy to add them.&lt;/li>&lt;/ul>&lt;div>And that's all for today. Now that you know what the current code is trying to achieve and why, we will be able to look at how the implementation does all this in the next posts.&lt;/div>&lt;/div></description></item><item><title>Kyua's configuration system showing its age</title><link>https://jmmv.dev/2012/05/kyuas-configuration-system-showing-its.html</link><pubDate>Sat, 26 May 2012 22:13:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2012/05/kyuas-configuration-system-showing-its.html</guid><description>A couple of years ago, when Kyua was still a newborn, I wrote a &lt;a href="http://code.google.com/p/kyua/source/browse/engine/user_files/config.hpp?spec=svn9e8ba29adc79ebb616c1de64105202820642a066&amp;amp;r=f6e156d85199424b0683977d871970d05e964460">very ad-hoc solution&lt;/a> for the parsing and representation of its configuration files. The requirements for the configuration were minimal, as there were very few parameters to be exposed to the user. The implementation was quick and simple to allow further progress on other more-important parts of the project. (Yep, quick is an euphemism for dirty: the implementation of the "configuration class" has to special-case properties everywhere to deal with their particular types... just as the Lua script has to do too.)&lt;div>&lt;br />&lt;/div>&lt;div>As I just mentioned in the previous paragraph, the set of parameters exposed through the configuration file were minimal. Let's recap what these are:&lt;/div>&lt;div>&lt;ul>&lt;li>Run-time variables: &lt;i>architecture&lt;/i> and &lt;i>platform&lt;/i>, which are two strings identifying the system; and &lt;i>unprivileged_user&lt;/i>, which (if defined) is the name of the user under which to run unprivileged tests as. It is important to mention that the &lt;i>unprivileged_user&lt;/i> is internally represented by a data type that includes several properties about a system user, and that it ensures that the data it contains is valid at all times. The fact that every property holds a specific type is an important design requirement.&lt;/li>&lt;li>Test suite variables: every test suite can accept arbitrary configuration variables. Actually, these are defined by the test programs themselves. All of these properties are strings (and cannot be anything else because ATF test programs have no way of indicating the type of the configuration variables they accept/expect).&lt;/li>&lt;/ul>&lt;div>Because of the reduced set of configurable properties, I opted to implement the configuration of the program as a simple data structure with one field per property, and a map of properties to represent the arbitrary test suite variables. The "parser" to populate this structure consists on a Lua module that loads these properties from a Lua script. The module hooks into the Lua metatables to permit things like "&lt;i>test_suites.NetBSD.timeout=20&lt;/i>" to work without having to predeclare the intermediate tables.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>Unfortunately, as I keep adding more and more functionality to Kyua, I encounter additional places where a tunable would be appreciated by the end user (e.g. "disallow automatic line wrapping"). Exposing such tunable through a command-line flag would be a possibility, but some of these need to be permanent in order to be useful. It is clear that these properties have to be placed in the configuration file, and attempting to add them to the current codebase shows that the current abstractions in Kyua are not flexible enough.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>So, why am I saying all this? Well: during the last few weeks, I have been working on a new configuration module for Kyua. The goals have been simple:&lt;/div>&lt;div>&lt;ul>&lt;li>Have a generic configuration module that parses configuration files only, without any semantics about Kyua (e.g. what variables are valid or not). This ensures that the implementation is extensible and at the right level of abstraction.&lt;/li>&lt;li>Be able to get rid of the ad-hoc parsing of configuration files.&lt;/li>&lt;li>Allow defining properties in a strictly-typed tree structure. Think about being able to group properties by function, e.g. "kyua.host.architecture"; this is more or less what we have today for test-suite properties but the implementation is a special-case again and cannot be applied to other tunables.&lt;/li>&lt;/ul>&lt;/div>&lt;/div>&lt;div>And... &lt;drums> I am pleased to say that this code is about to get merged into the tree just in time for Kyua 0.4. In the next few posts, I will explain what the particular design constraints of this new configuration system were and outline a little bit its implementation. I think it's a pretty cool hack that mixes C++ data structures and Lua scripts in a "transparent" manner, albeit you may think it's too &amp;nbsp;complex. The key part is that, &lt;i>as this new configuration module is &lt;b>not&lt;/b> specific to Kyua, you might want to borrow the code/ideas for your own use!&lt;/i>&lt;/drums>&lt;/div></description></item><item><title>Name your C++ auto-cleaners</title><link>https://jmmv.dev/2011/09/name-your-c-auto-cleaners.html</link><pubDate>Sat, 17 Sep 2011 23:26:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2011/09/name-your-c-auto-cleaners.html</guid><description>As you may already know, RAII is a very powerful and popular pattern in the C++ language. With RAII, you can wrap non-stack-managed resources into a stack-managed object such that, when the stack-managed object goes out of scope, it releases the corresponding non-stack-managed object. &lt;a href="http://onlamp.com/pub/a/onlamp/2006/05/04/smart-pointers.html?page=1">Smart pointers&lt;/a> are just one example of this technique, but so are IO streams too.&lt;br />&lt;br />Before getting into the point of the article, bear with me for a second while I explain what the&amp;nbsp; &lt;a href="http://code.google.com/p/lutok/source/browse/trunk/stack_cleaner.hpp">&lt;tt>stack_cleaner&lt;/tt>&lt;/a> object of &lt;a href="http://code.google.com/p/lutok/">Lutok&lt;/a> is. The "stack cleaner" takes a reference to a Lua state and records the height of the Lua stack on creation. When the object is destroyed (which happens when the declaring function exits), the stack is returned to its previous height thus ensuring it is clean. It is always a good idea for a function to prevent side-effects by leaving its outside world as it was â€” and, like it or not, the Lua state is part of the outside world because it is an input/output parameter to many functions.&lt;br />&lt;br />Let's consider a piece of code &lt;i>without&lt;/i> using the stack cleaner:&lt;br />&lt;br />&lt;pre>void&lt;br />my_function(lutok::state&amp;amp; state, const int foo)&lt;br />{&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; state.push_integer(foo);&lt;/pre>&lt;pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; ... do something else in the state ...&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; const int bar = state.to_integer();&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if (bar != 3) {&lt;br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state.pop(1); &lt;br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; throw std::runtime_error("Invalid data!");&lt;br />&amp;nbsp; &amp;nbsp; }&lt;br />&amp;nbsp; &amp;nbsp; state.pop(1);&lt;br />&lt;br />}&lt;/pre>&lt;br />Note that we have had to call &lt;tt>state.pop(1)&lt;/tt> from "all" exit points of the function to ensure that the stack is left unmodified upon return of &lt;tt>my_function&lt;/tt>. Also note that "all exit points" may not be accurate: in a language that supports exceptions, any statement may potentially raise an exception so to be really safe we should do:&lt;br />&lt;br />&lt;pre>void&lt;br />my_function(lutok::state&amp;amp; state, const int foo)&lt;br />{&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; state.push_integer(foo);&lt;br />&amp;nbsp; &amp;nbsp; try { &lt;br />&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; ... do something else in the state ...&lt;br />&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; const int bar = state.to_integer();&lt;br />&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; if (bar != 3 &lt;br />&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; throw std::runtime_error("Invalid data!");&lt;br />&amp;nbsp; &amp;nbsp; } catch (...) {&lt;br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; state.pop(1);&lt;br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; throw;&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; state.pop(1);&lt;br />}&lt;/pre>&lt;br />... which gets old very quickly. Writing this kind of code is error-prone and boring.&lt;br />&lt;br />With an "auto-cleaner" object such as the &lt;tt>stack_cleaner&lt;/tt>, we can simplify our code like this:&lt;br />&lt;br />&lt;pre>void&lt;br />my_function(lutok::state&amp;amp; state, const int foo)&lt;br />{&lt;br />&amp;nbsp; &amp;nbsp; lutok::stack_cleaner cleaner(state);&lt;br />&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; state.push_integer(foo);&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; ... do something else in the state ...&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; const int bar = state.to_integer();&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if (bar != 3) &lt;br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; throw std::runtime_error("Invalid data!"); &lt;br />}&lt;/pre>&lt;br />And we leave the boring task of determining when to actually call &lt;tt>state.pop(1)&lt;/tt> to the compiler and the runtime environment. In this particular case, no matter how the &lt;tt>my_function&lt;/tt> terminates, we ensure that the Lua stack will be left as the same size as it was before.&lt;br />&lt;br />But, as I said earlier, all this was just an introduction to the idea that made me write this post.&lt;br />&lt;br />When you declare an auto-cleaner object of any kind, &lt;i>be sure to give it a name&lt;/i>. It has happened to me a few times already that I have written the following construct:&lt;br />&lt;br />&lt;pre>lutok::stack_cleaner(state);&lt;/pre>&lt;br />... which is syntactically correct, harmless and "looks good" if you don't look closely. The compiler will chew along just fine because, even though we are declaring an anonymous object, its constructor and destructor may be doing who-knows-what, so their code must be called and thus the "unused variable" warning cannot really be raised.&lt;br />&lt;br />&lt;b>However&lt;/b> this does not give us the desired behavior. The cleaner object will be constructed and destructed in the same statement without having a chance to wrap any of the following code, because its scope is just the statement in which it was defined. In other words, the cleaner will have absolutely no effect on the rest of the function and thus will be useless.&lt;br />&lt;br />So, moral of the story: always give a name to your auto-cleaner objects so that their scope is correctly defined and their destructor is run when you actually expect:&lt;br />&lt;br />&lt;pre>lutok::stack_cleaner ANY_NAME_HERE(state);&lt;/pre></description></item><item><title>Introducing Lutok: A lightweight C++ API for Lua</title><link>https://jmmv.dev/2011/09/introducing-lutok-lightweight-c-api-for.html</link><pubDate>Thu, 15 Sep 2011 15:18:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2011/09/introducing-lutok-lightweight-c-api-for.html</guid><description>It has finally happened. &lt;a href="http://code.google.com/p/lutok/">Lutok&lt;/a> is the result of what was promised in the "&lt;a href="https://jmmv.dev/2011/09/splitting-utilslua-from-kyua.html">Splitting utils::lua from Kyua&lt;/a>" web post.&lt;br />&lt;br />Quoting the project web page:&lt;br />&lt;blockquote>Lutok provides thin C++ wrappers around the Lua C API to ease the interaction between C++ and Lua. These wrappers make intensive use of RAII to prevent resource leakage, expose C++-friendly data types, report errors by means of exceptions and ensure that the Lua stack is always left untouched in the face of errors. The library also provides a small subset of miscellaneous utility functions built on top of the wrappers.&lt;br />&lt;br />Lutok focuses on providing a clean and safe C++ interface; the drawback is that it is not suitable for performance-critical environments. In order to implement error-safe C++ wrappers on top of a Lua C binary library, Lutok adds several layers or abstraction and error checking that go against the original spirit of the Lua C API and thus degrade performance.&lt;br />&lt;br />Lutok was originally developed within Kyua but was later split into its own project to make it available to general developers.&lt;/blockquote>Coming up with a name for this project was quite an odyssey, and is what has delayed is release more than I wanted. My original candidate was "luawrap" which, although not very original, was to-the-point and easy to understand. Unfortunately, that name did not clear with the legal department and I had to propose several other names, some of which were not acceptable either. Eventually, I settled with "Lutok", which comes from "LUa TOolKit".&lt;br />&lt;br />At this point, the source tree of Lutok provides pretty much the same code as the &lt;tt>utils::lua&lt;/tt> module of Kyua. While it may be enough to get you started, I'm pretty sure you will lack some functions in the &lt;tt>state&lt;/tt> class. If that is the case, don't hesitate to file a bug report to let me know what is missing.&lt;br />&lt;br />In case you missed the link above, the project page is here: &lt;a href="http://code.google.com/p/lutok/">Lutok in Google Code&lt;/a>.</description></item><item><title>Splitting utils::lua from Kyua</title><link>https://jmmv.dev/2011/09/splitting-utilslua-from-kyua.html</link><pubDate>Sat, 03 Sep 2011 09:43:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2011/09/splitting-utilslua-from-kyua.html</guid><description>If you remember a post from January titled &lt;a href="https://jmmv.dev/2011/01/c-interface-to-lua.html">C++ interface to Lua for Kyua&lt;/a> (wow, time flies), the Kyua codebase includes a small library to wrap the native Lua C library into a more natural C++ interface. You can take a look at the &lt;a href="http://code.google.com/p/kyua/source/browse/#svn%2Ftags%2Fkyua-cli-0.2%2Futils%2Flua%253Fstate%253Dclosed">current code as of r129&lt;/a>.&lt;br />&lt;br />Quoting the previous post:&lt;br />&lt;blockquote>The utils::lua library provides thin C++ wrappers around the Lua C API to ease the interaction between C++ and Lua. These wrappers make intensive use of RAII to prevent resource leakage, expose C++-friendly data types, report errors by means of exceptions and ensure that the Lua stack is always left untouched in the face of errors. The library also provides a place (the operations module) to add miscellaneous utility functions built on top of the wrappers.&lt;/blockquote>While the RAII wrappers and other C++-specific constructions are a very nice thing to have, this library has to jump through a lot of hoops to interact with binary Lua versions built for C. This makes utils::lua not usable for performance-critical environments. Things would be way easier if utils::lua linked to a Lua binary built for C++, but unfortunately that is not viable in most, if not all, systems with binary packaging systems (read: most Linux distributions, BSD systems, etc.).&lt;br />&lt;br />That said, I've had requests from a bunch of people to provide utils::lua separately from Kyua regardless of any performance shortcomings it may have, and this is what I have started doing this weekend. So far, I already have a pretty clumsy standalone package (I'll keep the name to myself for now ;-) that provides this library on its own with the traditional Automake, Autoconf and Libtool support. Once this is a bit better quality, and once I modify Kyua to link against this external library and assess that things work fine, I'll make the decision on how to publish this (but most likely it should be a separate project in Google Code).&lt;br />&lt;br />Splitting the code doesn't come with its own issues though: maintaining a separate package will involve more work and hopefully/supposedly, dealing with quite a few feature requests to add missing functionality! Also, it means that utils::lua cannot use any of the other Kyua libraries (utils::sanity for example), so I lose a bit of consistency across the Kyua codebase. I am also not sure about how to share non-library code (in particular, the m4 macros for Autoconf) across the two packages.&lt;br />&lt;br />So, my question is: are you interested in utils::lua being shipped separately? :-)&amp;nbsp; Do you have any cool use cases for it that you can share here?&lt;br />&lt;br />Thanks!</description></item><item><title>Injecting C++ functions into Lua</title><link>https://jmmv.dev/2011/01/injecting-c-functions-into-lua.html</link><pubDate>Mon, 17 Jan 2011 11:09:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2011/01/injecting-c-functions-into-lua.html</guid><description>The &lt;a href="https://jmmv.dev/2011/01/c-interface-to-lua.html">C++ interface to Lua&lt;/a> implemented in &lt;a href="http://code.google.com/p/kyua/">Kyua&lt;/a> exposes a &lt;tt>lua::state&lt;/tt> class that wraps the lower-level &lt;tt>lua_State*&lt;/tt> type. This class completely hides the internal C type of Lua to ensure that all calls that affect the state go through the &lt;tt>lua::state&lt;/tt> class.&lt;br />&lt;br />Things get a bit messy when we want to inject native functions into the Lua environment. These functions follow the prototype represented by the &lt;tt>lua_CFunction&lt;/tt> type:&lt;blockquote>&lt;tt>typedef int (*lua_CFunction)(lua_State*);&lt;/tt>&lt;/blockquote>Now, let's consider this code:&lt;pre>int&lt;br />awesome_native_function(lua_State* state)&lt;br />{&lt;br /> // Uh, we have access to s, so we bypass the lua::state!&lt;br /> ... do something nasty ...&lt;br />&lt;br /> // Oh, and we can throw an exception here...&lt;br /> //with bad consequences.&lt;br />}&lt;br />&lt;br />void&lt;br />setup(...)&lt;br />{&lt;br /> lua::state state;&lt;br /> state.push_c_function(awesome_native_function);&lt;br /> state.set_global("myfunc");&lt;br /> ... run some script ...&lt;br />}&lt;/pre>The fact that we must pass a &lt;tt>lua_CFunction&lt;/tt> prototype to the &lt;tt>lua_pushcfunction&lt;/tt> object means that such function must have access to the raw &lt;tt>lua_State*&lt;/tt> pointer... which we want to avoid.&lt;br />&lt;br />What we really want is the caller code to define a function such as:&lt;blockquote>&lt;tt>typedef int (*cxx_function)(lua::state&amp;)&lt;/tt>&lt;/blockquote>In an ideal world, the &lt;tt>lua::state&lt;/tt> class would implement a &lt;tt>push_cxx_function&lt;/tt> that took a &lt;tt>cxx_function&lt;/tt>, generated a thin C wrapper and injected such generated wrapper into Lua. Unfortunately, we are not in an ideal world: C++ does not have high-order functions and thus the "generate a wrapper function" part of the previous proposal does not really work.&lt;br />&lt;br />What we can do instead, though, is to make the creation of C wrappers for these C++ functions trivial. And this is what &lt;a href="http://code.google.com/p/kyua/source/detail?r=42">r42&lt;/a> did. The approach I took is similar to this overly-simplified (and broken) example:&lt;pre>template&amp;lt; cxx_function Function &amp;gt;&lt;br />int&lt;br />wrap_cxx_function(lua_State* state)&lt;br />{&lt;br /> try {&lt;br /> lua::state state_wrapper(state);&lt;br /> return Function(state_wrapper);&lt;br /> } catch (...) {&lt;br /> luaL_error(state, "Geez, don't go into C's land!");&lt;br /> }&lt;br />}&lt;/pre>This template wrapper takes a &lt;tt>cxx_function&lt;/tt> object and generates a corresponding C function &lt;i>at compile time&lt;/i>. This wrapper function ensures that C++ state does not propagate into the C world, as that often has catastrophical consequences. (Due to language limitations, the input function must have external linkage. So no, it cannot be static.)&lt;br />&lt;br />As a result, we can rewrite our original snippet as:&lt;pre>int&lt;br />awesome_native_function(lua::state&amp; state)&lt;br />{&lt;br /> // See, we cannot access lua_State* now.&lt;br />&lt;br /> ... do something ...&lt;br /> throw std::runtime_error("And we can even do this!");&lt;br />}&lt;br />&lt;br />void&lt;br />setup(...)&lt;br />{&lt;br /> lua::state state;&lt;br /> state.push_c_function(&lt;br /> wrap_cxx_function&lt; awesome_native_function >);&lt;br /> state.set_global("myfunc");&lt;br /> ... run some script ...&lt;br />}&lt;/pre>Neat? I think so, but maybe not so much. I'm pretty sure there are cooler ways of achieving the above purpose in a cleaner way, but this one works nicely and has few overhead.</description></item><item><title>Error handling in Lua: the Kyua approach</title><link>https://jmmv.dev/2011/01/error-handling-in-lua-kyua-approach.html</link><pubDate>Fri, 14 Jan 2011 03:04:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2011/01/error-handling-in-lua-kyua-approach.html</guid><description>About a week ago, I detailed the different approaches I encountered to &lt;a href="https://jmmv.dev/2011/01/error-handling-in-lua.html">deal with errors raised by the Lua C API&lt;/a>. Later, I announced the &lt;a href="https://jmmv.dev/2011/01/c-interface-to-lua.html">new C++ interface for Lua&lt;/a> implemented within &lt;a href="http://code.google.com/p/kyua/">Kyua&lt;/a>. And today, I would like to talk about the specific mechanism I implemented in this library to deal with the Lua errors.&lt;br />&lt;br />The first thing to keep in mind is that the whole purpose of Lua in the context of Kyua is to parse configuration files. This is an infrequent operation, so &lt;i>high performance does not matter&lt;/i>: it is more valuable to me to be able to write robust algorithms fast than to have them run at optimal speed. The other key point to consider is that I want Kyua to be able to use prebuilt Lua libraries, which are built as C binaries.&lt;br />&lt;br />The approach I took is to wrap every single unsafe Lua C API call in a "thin" (FSVO thin depending on the case) wrapper that gets called by &lt;tt>lua_pcall&lt;/tt>. Anything that runs inside the wrapper is safe to Lua errors, as they are caught and safely reported to the caller.&lt;br />&lt;br />Lets examine how this works by taking a look at an example: the wrapping of &lt;tt>lua_getglobal&lt;/tt>. We have the following code (copy pasted from the &lt;a href="http://code.google.com/p/kyua/source/browse/trunk/kyua-cli/utils/lua/wrap.cpp?spec=svn39&amp;r=39">utils/lua/wrap.cpp&lt;/a> file but hand-edited for publishing here):&lt;pre>static int&lt;br />protected_getglobal(lua_State* state)&lt;br />{&lt;br /> lua_getglobal(state, lua_tostring(state, -1));&lt;br /> return 1;&lt;br />}&lt;br />&lt;br />void&lt;br />lua::state::get_global(const std::string&amp; name)&lt;br />{&lt;br /> lua_pushcfunction(_pimpl->lua_state, protected_getglobal);&lt;br /> lua_pushstring(_pimpl->lua_state, name.c_str());&lt;br /> if (lua_pcall(_pimpl->lua_state, 1, 1, 0) != 0)&lt;br /> throw lua::api_error::from_stack(_pimpl->lua_state,&lt;br /> "lua_getglobal");&lt;br />}&lt;/pre>The &lt;tt>state::get_global&lt;/tt> method is my public wrapper for the &lt;tt>lua_getglobal&lt;/tt> Lua C API call. This wrapper first prepares the Lua stack by pushing the address of the C function to call and its parameters and then issues a &lt;tt>lua_pcall&lt;/tt> call that executes the C function in a Lua protected environment.&lt;br />&lt;br />In this case, the argument preparation for &lt;tt>protected_getglobal&lt;/tt> is trivial because the &lt;tt>lua_getglobal&lt;/tt> call does not require access to any preexisting values on the Lua stack. Things get much trickier when that happens as in the case of the &lt;tt>lua_getglobal&lt;/tt> wrapper. I'll leave understanding how to do this as an exercise to the reader (but you can cheat by looking at &lt;a href="http://code.google.com/p/kyua/source/browse/trunk/kyua-cli/utils/lua/wrap.cpp?spec=svn39&amp;r=39#154">line 154&lt;/a>).&lt;br />&lt;br />Anyway. The above looks all very nice and safe and the &lt;a href="http://code.google.com/p/kyua/source/browse/trunk/kyua-cli/utils/lua/wrap_test.cpp?spec=svn39&amp;r=39#112">tests for the state::get_global function&lt;/a>, even the ones that intentionally cause a failure, all work fine. So we are good, right? &lt;i>Nope!&lt;/i> Unfortunately, the code above is not fully safe to Lua errors.&lt;br />&lt;br />In order to prepare the &lt;tt>lua_pcall&lt;/tt> execution, the code must push values on the stack. As it turns out, both &lt;tt>lua_pushcfunction&lt;/tt> and &lt;tt>lua_pushstring&lt;/tt> &lt;i>can&lt;/i> fail if they run out of memory (OOM). Such failure would of course be captured inside a protected environment... but we have a little chicken'n'egg problem here. That said, OOM failures are rare so I'm going to leverage this fact and not worry about it. (Note to self: install a &lt;tt>lua_atpanic&lt;/tt> handler to complain loudly if that ever happens.)&lt;br />&lt;br />&lt;b>Addendum&lt;/b>: Bundling Lua within my program and building it as a C++ binary with exception reporting enabled in &lt;tt>luaconf.h&lt;/tt> would magically solve all my issues. I know. But I don't fancy the idea of bundling the library into my source tree for a variety of reasons.</description></item><item><title>C++ interface to Lua for Kyua</title><link>https://jmmv.dev/2011/01/c-interface-to-lua.html</link><pubDate>Sat, 08 Jan 2011 08:17:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2011/01/c-interface-to-lua.html</guid><description>Finally! After two weeks of holidays work, I have finally been able to submit &lt;a href="http://code.google.com/p/kyua/">Kyua&lt;/a>'s &lt;a href="http://code.google.com/p/kyua/source/detail?r=39">r39&lt;/a>: a generic library that implements a C++ interface to &lt;a href="http://www.lua.org/">Lua&lt;/a>. The code is hosted in the &lt;tt>&lt;a href="http://code.google.com/p/kyua/source/browse/#svn%2Ftrunk%2Fkyua-cli%2Futils%2Flua">utils/lua/&lt;/a>&lt;/tt> subdirectory.&lt;br />&lt;br />From the revision description:&lt;blockquote>The utils::lua library provides thin C++ wrappers around the Lua C API to ease the interaction between C++ and Lua. These wrappers make intensive use of RAII to prevent resource leakage, expose C++-friendly data types, report errors by means of exceptions and ensure that the Lua stack is always left untouched in the face of errors. The library also provides a place (the operations module) to add miscellaneous utility functions built on top of the wrappers.&lt;/blockquote>In other words: this code aims to decouple all details of the interaction with the Lua C API from the main code of Kyua so that the high level algorithms do not have to worry about Lua C API idiosyncrasies.&lt;br />&lt;br />Further changes to Kyua to implement the &lt;a href="http://code.google.com/p/kyua/wiki/ConfigurationDesign">new configuration system&lt;/a> will follow soon as all the basic code to talk to Lua has been ironed out. Also expect some extra posts regarding the design decisions that went on this helper code and, in particular, about error reporting as mentioned in the &lt;a href="https://jmmv.dev/2011/01/error-handling-in-lua.html">previous post&lt;/a>.&lt;br />&lt;br />(Yep, Lua and Kyua sound similar. But that was never intended; promise!)</description></item><item><title>Error handling in Lua</title><link>https://jmmv.dev/2011/01/error-handling-in-lua.html</link><pubDate>Fri, 07 Jan 2011 08:01:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2011/01/error-handling-in-lua.html</guid><description>Some of the methods of the Lua C API can raise errors. To get an initial idea on what these are, take a look at the &lt;a href="http://www.lua.org/manual/5.1/manual.html#3.7">Functions and Types&lt;/a> section and pay attention to the third field of a function description (the one denoted by 'x' in the introduction).&lt;div>&lt;br />&lt;/div>&lt;div>Dealing with the errors raised by these functions is tricky, not to say a nightmare. Also, the &lt;a href="http://www.lua.org/manual/5.1/manual.html#3.6">ridiculously-short documentation on this topic&lt;/a> does not help. This post is dedicated to explain how these errors may be handled along with the advantages and disadvantages of each case.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>The Lua C API provides two modes of execution: protected and unprotected. When in protected mode, all errors caused by Lua are caught and reported to the caller in a controlled manner. When in unprotected mode, the errors just abort the execution of the calling process by default. So, one would think: just run the code in protected mode, right? Yeah, well... entering protected mode is nontrivial and it has its own particularities that make interaction with C++ problematic.&lt;br />&lt;br />&lt;/div>&lt;div>Let's analyze error reporting by considering a simple example: the &lt;tt>lua_gettable&lt;/tt> function. The following Lua code would error out when executed:&lt;pre>my_array = nil&lt;br />return my_array["test"]&lt;/pre>... which is obvious because indexing a non-table object is a mistake. Now let's consider how this code would look like in C (modulo the &lt;tt>my_array&lt;/tt> assignment):&lt;pre>lua_getglobal(state, "my_array");&lt;br />lua_pushstring(state, "test");&lt;br />lua_gettable(state, -2);&lt;/pre>Simple, huh? Sure, but as it turns out, &lt;i>any&lt;/i> of the API calls (not just &lt;tt>lua_gettable&lt;/tt>) in this code can raise errors (I'll call them &lt;i>unsafe&lt;/i> functions). What this means is that, unless you run the code with a &lt;tt>lua_pcall&lt;/tt> wrapper, your program will simply &lt;i>exit&lt;/i> in the face of a Lua error. Uh, your scripting language can "crash" your host program out of your control? Not nice.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>What would be nice is if each of the Lua C API unsafe functions reported an error (as a return value or whatever) and allowed the caller to decide what to do. Ideally, no state would change in the face of an error. Unfortunately, that is not the case but it is exactly what I would like to do. I am writing a C++ wrapper for Lua in the context of Kyua and fine granularity in error reporting means that automatic cleanup of resources managed by RAII is trivial.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>Let's analyze the options that we have to control errors caused within the Lua C API. I will explain in a later post the one I have chosen for the wrapper in Kyua (it has to be later because I'm not settled yet!).&lt;/div>&lt;div>&lt;br />&lt;span class="Apple-style-span">&lt;b>Install a panic handler&lt;/b>&lt;/span>&lt;div>&lt;br />&lt;/div>&lt;div>Whenever Lua code runs in an unprotected environment, one can use &lt;tt>lua_atpanic&lt;/tt> to install a handler for errors. The function provided by the user is executed when the error occurs and, if the panic function returns, the program exits. To prevent exiting prematurely, one could opt for two mechanisms:&lt;br />&lt;ul>&lt;li>Make the panic handler raise a C++ exception. Sounds nice, right? Well, it does not work. The Lua library is generally built as a C binary which means that our panic handler will be called from within a C environment. As a result, we cannot throw an exception from our C++ handler and expect things to work: the exception won't propagate correctly from a C++ context to a C context and then back to C++. Most likely, the program will abort as soon as we leave the C++ world and enter C to unwind the stack.&lt;/li>&lt;li>Use &lt;tt>setjmp&lt;/tt> before the call to the unsafe Lua function and recover with &lt;tt>longjmp&lt;/tt> from within the panic handler. It turns out that this does work &lt;i>but&lt;/i> with one important caveat: the stack is completely cleared before the call to the panic handler. As a result, this prevents the requirement of "leave the stack unmodified on failure" as is desired of any function (report errors early before changing state).&lt;/li>&lt;/ul>&lt;span class="Apple-style-span">&lt;b>Run every single call in a protected environment&lt;/b>&lt;/span>&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>This is doable but complex and not completely right: to do this, we need to write a C wrapper function for every unsafe API function and run it with &lt;tt>lua_pcall&lt;/tt>. The overhead of this approach is significant: something as simple as a call to &lt;tt>lua_gettable&lt;/tt> turns into several stack manipulation operations, a call to &lt;tt>lua_pcall&lt;/tt> and then further stack modifications to adjust the results.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>Additionally, in order to prepare the call to &lt;tt>lua_pcall&lt;/tt>, one has to use the multiple &lt;tt>lua_push*&lt;/tt> functions to prepare the stack for the call. And, guess what, most of these functions that push values onto the stack can themselves fail. So... in order to prepare the environment for a safe call, we are already executing unsafe calls. (Granted, the errors in these case are only due to memory exhaustion... but still, the solution is not fully robust.)&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>Lastly, note that we cannot use &lt;tt>lua_cpcall&lt;/tt> because it does discard all return values of the executed function. Which means that we can't really wrap single Lua operations. (We could wrap a whole algorithm though.)&lt;br />&lt;br />&lt;span class="Apple-style-span">&lt;b>Run the whole algorithm in a protected environment&lt;/b>&lt;/span>&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>This defeats the whole purpose of the per-function wrapping. We would need to provide a separate C/C++ function that runs all unsafe code and then call it by means of &lt;tt>lua_pcall&lt;/tt> (or &lt;tt>lua_cpcall&lt;/tt>) so that errors are captured and reported in a controlled manner. This seems very efficient... albeit not transparent and will surely cause issues.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>Why is this problematic? Errors that happen inside the protected environment are managed by means of a &lt;tt>longjmp&lt;/tt>. If the code wrapped by &lt;tt>lua_pcall&lt;/tt> is a C++ function, it can instantiate objects. These objects have destructors. A &lt;tt>longjmp&lt;/tt> outside of the function means that no destructors will run... so objects will leak memory, file descriptors, and anything you can imagine. Doom's day.&lt;br />&lt;br />Yes, I know Lua can be rebuilt to report internal errors by means of exceptions which would make this particular problem a non-issue... but this rules out any pre-packaged Lua binaries (the default is to use &lt;tt>longjmp&lt;/tt> and henceforth what packaged binaries use). I do not want to embed Lua into my source tree. I want to use Lua binary packages shipped with pretty much any OS (hey, including NetBSD!), which means that my code needs to be able to cope with Lua binaries that use &lt;tt>setjmp&lt;/tt>/&lt;tt>longjmp&lt;/tt> internally.&lt;/div>&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;span class="Apple-style-span" >&lt;b>Closing remarks&lt;/b>&lt;/span>&lt;/div>&lt;div>&lt;span class="Apple-style-span" >&lt;b>&lt;br />&lt;/b>&lt;/span>&lt;/div>&lt;div>&lt;span class="Apple-style-span" >I hope the above description makes any sense because I had to omit many, many details in order to make the post reasonably short. It could also be that there are other alternatives I have not considered, in which case I'd love to know them. Trying to find a solution to the above problem has already sucked several days of my free time, which translates in Kyua not seeing any further development until a solution is found!&lt;/span>&lt;/div></description></item></channel></rss>