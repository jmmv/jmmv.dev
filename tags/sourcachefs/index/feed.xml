<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sourcachefs on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/sourcachefs/index.html</link><description>Recent content in Sourcachefs on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2024 Julio Merino</copyright><lastBuildDate>Fri, 25 Aug 2017 16:25:18 -0400</lastBuildDate><atom:link href="https://jmmv.dev/tags/sourcachefs/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Introducing sandboxfs</title><link>https://jmmv.dev/2017/08/introducing-sandboxfs.html</link><pubDate>Fri, 25 Aug 2017 16:25:18 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2017/08/introducing-sandboxfs.html</guid><description>&lt;p>sandboxfs is a FUSE-based file system that exposes an arbitrary view of the
host&amp;rsquo;s file system under the mount point, and offers access controls that
differ from those of the host. You can think of sandboxfs as an advanced
version of &lt;a href="https://bindfs.org/">bindfs&lt;/a> (or &lt;code>mount --bind&lt;/code> or &lt;code>mount_null(8)&lt;/code>
depending on your system) in which you can combine and nest directories under
an arbitrary layout.&lt;/p>
&lt;p>The primary use case for this project is to provide a better file system
sandboxing technique for the Bazel build system. The goal here is to run each
build action (think compiler invocation) in a sandbox so that its inputs and
outputs are tightly controlled, and sandboxfs attempts to do this in a more
efficient manner than the current symlinks-based implementation.&lt;/p></description></item><item><title>Introducing sourcachefs</title><link>https://jmmv.dev/2017/07/introducing-sourcachefs.html</link><pubDate>Sun, 30 Jul 2017 20:30:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2017/07/introducing-sourcachefs.html</guid><description>Announcing the launch of sourcachefs, a FUSE-based persistent caching layer.</description></item><item><title>Analysis of SSHFS performance for large builds</title><link>https://jmmv.dev/2016/02/sshfs-performance-analysis-for-builds.html</link><pubDate>Wed, 17 Feb 2016 08:30:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2016/02/sshfs-performance-analysis-for-builds.html</guid><description>&lt;p>Last week, I spent some time looking at the &lt;strong>feasibility of using SSHFS on OS X to access Google&amp;rsquo;s centralized source tree for the purpose of issuing local builds&lt;/strong>. My goals were two-fold: first, to &lt;strong>avoid having to &amp;ldquo;clone&amp;rdquo; the large source code&lt;/strong> of the apps I wanted to build; and, second, to &lt;strong>avoid having to port&lt;/strong> the source file system (a FUSE module) to the Mac.&lt;/p>
&lt;p>What I found highlights that &lt;strong>SSHFS is not the right choice for locally building a remote source tree&lt;/strong>. That said, the overall study process was interesting, fun, and I am now tempted to make SSHFS viable for this use case. Read on for the details.&lt;/p></description></item></channel></rss>