<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/python/index/</link><description>Recent content in python on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 04 Jul 2013 12:00:00 -0400</lastBuildDate><atom:link href="https://jmmv.dev/tags/python/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Readability: Dictionaries are not data types</title><link>https://jmmv.dev/2013/07/readability-dictionaries-are-not-data.html</link><pubDate>Thu, 04 Jul 2013 12:00:00 -0400</pubDate><guid>https://jmmv.dev/2013/07/readability-dictionaries-are-not-data.html</guid><description>Yes: a dictionary is a data type. No: a dictionary is not a way to implement abstract data types; doing so is lazy programming and is asking for trouble later on.
What do I mean by this? In Python and other similar dynamic languages, dictionaries are a mapping of keys to values that have no typing restrictions: the dictionary is heterogeneous, and a single dictionary can contain elements of different types both as its keys and its values.</description></item><item><title>Readability: Document your types</title><link>https://jmmv.dev/2013/06/readability-document-your-types.html</link><pubDate>Mon, 24 Jun 2013 12:00:00 -0400</pubDate><guid>https://jmmv.dev/2013/06/readability-document-your-types.html</guid><description>Wow. The previous post titled Self-interview after leaving the NetBSD board has turned out to be, by far, the most popular article in this blog. The feedback so far has been positive and I owe all of you a follow-up post. However, writing such post will take a while and content must keep flowing. So let&amp;rsquo;s get back to the readability series for now.
In dynamically-typed languages1, variable and function definitions do not state the type of their arguments.</description></item><item><title>Readability: Blocks and variable scoping</title><link>https://jmmv.dev/2013/06/readability-blocks-and-variable-scoping.html</link><pubDate>Thu, 06 Jun 2013 12:00:00 -0400</pubDate><guid>https://jmmv.dev/2013/06/readability-blocks-and-variable-scoping.html</guid><description>In a dynamically-typed language, it is common for the scoping semantics of a variable to be wider than a single code block. For example: in at least Python and the shell, it is the case that a variable defined anywhere within a function —even inside conditionals or loops— is reachable anywhere in the function from there on.
To illustrate what this means, consider this snippet in which we define a function to compute the CPU requirements needed in a database system to support a set of tables:</description></item><item><title>Silencing the output of Python's subprocess.Popen</title><link>https://jmmv.dev/2009/01/silencing-output-of-pythons.html</link><pubDate>Mon, 05 Jan 2009 07:02:00 -0500</pubDate><guid>https://jmmv.dev/2009/01/silencing-output-of-pythons.html</guid><description>I'm learning Python these days while writing an script to automate the testing of ATF under multiple virtual machines. I had this code in a shell script, but it is so ugly and clumsy that I don't even dare to add it to the repository. Hopefully, the new version in Python will be more robust and versatile enough to be published.
One of the things I've been impressed by is the subprocess module and, in special, its Popen class.</description></item></channel></rss>