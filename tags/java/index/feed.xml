<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/java/index/</link><description>Recent content in java on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 03 Dec 2023 10:30:00 -0700</lastBuildDate><atom:link href="https://jmmv.dev/tags/java/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Strings, encodings, NULs and Bazel</title><link>https://jmmv.dev/2023/12/strings-encodings-nuls-and-bazel.html</link><pubDate>Sun, 03 Dec 2023 10:30:00 -0700</pubDate><guid>https://jmmv.dev/2023/12/strings-encodings-nuls-and-bazel.html</guid><description>Just yesterday, Twitter user @vkrajacic wrote:
Advice for new C programmers: &amp;ldquo;Avoid null-terminated strings; they&amp;rsquo;re outdated, inefficient and impractical.&amp;rdquo;
Create your own type with basic functions. It&amp;rsquo;s not that hard, and it goes a long way. One of the benefits of this approach, among others, is slicing without copying.
This suggestion has its merits and I understand where it is coming from: performance. You see: the traditional way to represent strings in C is to use NUL-terminated byte arrays.</description><enclosure url="https://jmmv.dev/images/2023-12-03-threads.jpg" length="589063" type="image/jpeg"/></item></channel></rss>