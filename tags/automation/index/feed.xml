<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Automation on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/automation/index.html</link><description>Recent content in Automation on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&#150;2025 Julio Merino</copyright><lastBuildDate>Mon, 11 Jan 2021 09:20:00 -0800</lastBuildDate><atom:link href="https://jmmv.dev/tags/automation/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Prevent accidental commits with DO NOT SUBMIT</title><link>https://jmmv.dev/2021/01/do-not-submit.html</link><pubDate>Mon, 11 Jan 2021 09:20:00 -0800</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2021/01/do-not-submit.html</guid><description>&lt;p>One of the teeny tiny features I miss from the Google development stack is something called &lt;code>DO NOT SUBMIT&lt;/code>. Here is what it is and how to replicate it in your projects.&lt;/p></description></item><item><title>Enforcing code health via GitHub Actions</title><link>https://jmmv.dev/2021/01/github-actions-code-health.html</link><pubDate>Fri, 08 Jan 2021 09:50:00 -0800</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2021/01/github-actions-code-health.html</guid><description>&lt;p>It is no secret that, in software development, the edit+build+test cycle must be as short as possible. The delay between saving a file and seeing the results has to be minimal and in the order of a few seconds, or else developers lose focus and productivity suffers.&lt;/p>
&lt;p>It&amp;rsquo;s equally important to ensure that the code is held to certain quality standards. Compiler warnings, for example, are part of any compilation and catch a set of common problems. But there are a lot more health checks that can be performed, such as ensuring that the code matches predefined coding guidelines, running a more aggressive linter to catch bugs that compiler warnings don&amp;rsquo;t notice, or even using ASAN or TSAN to validate the code&amp;rsquo;s memory and thread safety.&lt;/p></description></item><item><title>Offloading maintenance tasks to Travis CI</title><link>https://jmmv.dev/2015/05/offloading-maintenance-tasks-to-travis.html</link><pubDate>Thu, 21 May 2015 17:00:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2015/05/offloading-maintenance-tasks-to-travis.html</guid><description>&lt;p>From day one, the &lt;a href="https://github.com/jmmv/kyua/">Kyua&lt;/a> source tree has had docstring annotations for all of its symbols. The goal of such docstrings is to &lt;em>document the code for the developers of Kyua&lt;/em>: these docstrings were never intended to turn into pre-generated HTML documentation because Kyua does not offer an API once installed.&lt;/p>
&lt;p>As you might have noticed, &lt;a href="https://github.com/jmmv/kyua/blob/c2527eee5471b2fde4aeb2e63121d91cc8aba723/m4/doxygen.m4#L30">Doxygen is an optional component of the build&lt;/a> and it used to run on each &lt;code>make&lt;/code> invocation. This changed &amp;ldquo;recently&amp;rdquo;. Nowadays, &lt;a href="http://www.doxygen.org/">Doxygen&lt;/a> is only run asynchronously on Travis CI to report docstring inconsistencies post-submission (&lt;a href="https://travis-ci.org/jmmv/kyua/builds/63535926">see the &lt;code>DO=apidocs&lt;/code> matrix entry&lt;/a> if you are impatient). Combined with feature branches that are only merged into master when green, this is as good as the previous approach of running Doxygen along the build. Scratch that: this is even better because running Doxygen locally on each build took significant resources and penalized edit/build/test cycles.&lt;/p></description></item></channel></rss>