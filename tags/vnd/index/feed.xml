<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vnd on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/vnd/index.html</link><description>Recent content in Vnd on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2024 Julio Merino</copyright><lastBuildDate>Thu, 09 Nov 2006 10:49:00 -0500</lastBuildDate><atom:link href="https://jmmv.dev/tags/vnd/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Making vnd(4) work with tmpfs</title><link>https://jmmv.dev/2006/11/making-vnd4-work-with-tmpfs.html</link><pubDate>Thu, 09 Nov 2006 10:49:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2006/11/making-vnd4-work-with-tmpfs.html</guid><description>vnd(4) is the virtual disk driver found in NetBSD. It provides a disk-like interface to files which allows you to treat them as if they were disks. This is useful, for example, when a file holds a file system image (e.g. the typical ISO-9660 files) and you want to inspect its contents.&lt;br />&lt;br />Up until now vnd(4) used the vnode's &lt;tt>bmap&lt;/tt> and &lt;tt>strategy&lt;/tt> operations to access the backing file. These operate at the block-level and therefore do not involve any system-wide caches; this is why they were used (see below). Unfortunately, some file systems (e.g. tmpfs and smbfs) do not implement these operations so vnd could not work with files stored inside them.&lt;br />&lt;br />One of the possible fixes to resolve this problem was to make vnd(4) use the regular &lt;tt>read&lt;/tt> and &lt;tt>write&lt;/tt> operations; these act on a higher (byte) level and are so fundamental that must be implemented by all file systems. The disadvantage is that all data that flows through these two methods ends up in the buffer cache. (If I understand it correctly, this is problematic because vnd itself will also push a copy of the same data into the cache thus ending up with duplicates in there.)&lt;br />&lt;br />Despite that minor problem, I believe it is better to have vnd(4) working in all cases even if that involves some performance penalty in some situations (which can be fixed anyway by implementing the missing operations later on). So this is what I have done: vnd(4) will now use read and write for those files stored in file systems where &lt;tt>bmap&lt;/tt> and &lt;tt>strategy&lt;/tt> are not available and continue to use the latter two if they are present (as it has always done).&lt;br />&lt;br />Some more information can be found in the &lt;a href="http://mail-index.netbsd.org/source-changes/2006/11/09/0032.html">CVS commit&lt;/a> and its corresponding &lt;a href="http://www.netbsd.org/cgi-bin/query-pr-single.pl?number=34882">bug report&lt;/a>.</description></item></channel></rss>