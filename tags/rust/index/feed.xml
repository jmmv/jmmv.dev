<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on jmmv.dev</title>
    <link>https://jmmv.dev/tags/rust/index/</link>
    <description>Recent content in rust on jmmv.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Nov 2020 12:30:00 -0800</lastBuildDate><atom:link href="https://jmmv.dev/tags/rust/index/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>EndBASIC 0.3 is here</title>
      <link>https://jmmv.dev/2020/11/endbasic-0.3.html</link>
      <pubDate>Sun, 29 Nov 2020 12:30:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/11/endbasic-0.3.html</guid>
      <description>After a 6-month long hiatus caused by me hunting and changing jobs and cities, I am pleased to announce the release of EndBASIC 0.3! The Thanksgiving break has been as fruitful as I had hoped üòÅ
There are two major changes in this release.
  The first is the official debut of the web-based interface. I introduced this months ago and have had it running on a &amp;ldquo;push on green&amp;rdquo; model, which means that the web deployment of EndBASIC is always tracking Git HEAD.</description>
    </item>
    
    <item>
      <title>Bridging the web gap in EndBASIC</title>
      <link>https://jmmv.dev/2020/05/bridging-the-web-gap-endbasic.html</link>
      <pubDate>Sat, 30 May 2020 08:50:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/05/bridging-the-web-gap-endbasic.html</guid>
      <description>After a ton of work, a lot of which was unexpected, I am ecstatic to announce that EndBASIC is now a reality on the web! The whole language interpreter can now run as a fully client-side web app on a computer, on a tablet&amp;hellip; and even on a phone. Yes: the whole thing, which is written in Rust (94%), works in a modern browser with just a tiny bit of JavaScript glue (1%).</description>
    </item>
    
    <item>
      <title>EndBASIC 0.2.0 is here</title>
      <link>https://jmmv.dev/2020/05/endbasic-0.2.0.html</link>
      <pubDate>Thu, 07 May 2020 06:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/05/endbasic-0.2.0.html</guid>
      <description>A couple of weeks ago, I announced EndBASIC: a simple BASIC language interpreter written in Rust with a goal to provide an environment for teaching my kids how to code. That first release provided what-I-think-is a robust interpreter, but that was about it: the language features were still minimal and the interactive features were non-existent.
Well, EndBASIC 0.2.0 is here and things are changing! It&amp;rsquo;s still far from the vision I want to reach, but it&amp;rsquo;s slowly moving towards that direction.</description>
    </item>
    
    <item>
      <title>What is Rust&#39;s Into&lt;T&gt; for?</title>
      <link>https://jmmv.dev/2020/04/rust-into-trait.html</link>
      <pubDate>Mon, 27 Apr 2020 18:50:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/04/rust-into-trait.html</guid>
      <description>Rust provides a bunch of traits that you may use or implement in your code, but unless you have experienced them first-hand, it can be hard to imagine what their real utility is. For example, if you go read Into&amp;rsquo;s documentation, all you find is:
 Trait std::convert::Into
A value-to-value conversion that consumes the input value. The opposite of From. [&amp;hellip;]
 Yay, very useful. This text tells me what this trait does, which is fine for a reference manual, but not when I could find it useful.</description>
    </item>
    
    <item>
      <title>Hello, EndBASIC!</title>
      <link>https://jmmv.dev/2020/04/hello-endbasic.html</link>
      <pubDate>Wed, 22 Apr 2020 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/04/hello-endbasic.html</guid>
      <description>INPUT&amp;#34;Did you ever experience BASIC (true/false)&amp;#34;;answer? IFanswer?THEN PRINT&amp;#34;Great; you are in for a treat!&amp;#34; ELSE PRINT&amp;#34;Oh noes; try today?&amp;#34; ENDIF I have pretty fond memories of my Amstrad CPC 6128 and its Locomotive BASIC 1.1. The experience was quite unique as the computer was ready to take commands in a couple of seconds, and those commands you typed had an immediate effect on the screen. Changing colors, drawing, playing sounds&amp;hellip; were all at your fingertips, which was pretty exciting for a young boy.</description>
    </item>
    
    <item>
      <title>Sample REST interface in Rust and Go</title>
      <link>https://jmmv.dev/2019/09/rest-api-rust-go.html</link>
      <pubDate>Fri, 27 Sep 2019 06:45:40 +0500</pubDate>
      
      <guid>https://jmmv.dev/2019/09/rest-api-rust-go.html</guid>
      <description>Over the summer, I prototyped a bunch of web apps whose ideas had been floating in my mind for a long time. I spent some time reading through REST API documentation pages and, as part of these exercises, implemented sample RESTful web services in both Go and Rust. (Just for context, the last time I wrote a web app was in high school&amp;hellip; and it involved PHP, MySQL, and I think IE6?</description>
    </item>
    
    <item>
      <title>Rust vs. Go</title>
      <link>https://jmmv.dev/2018/07/rust-vs-go.html</link>
      <pubDate>Fri, 13 Jul 2018 10:45:00 +0200</pubDate>
      
      <guid>https://jmmv.dev/2018/07/rust-vs-go.html</guid>
      <description>Welcome to the Rust Review&amp;rsquo;s bonus post, which I had promised from the very beginning. I&amp;rsquo;m here to cover the big elephant in the room: Rust vs. Go. Which one is better?
There is no good answer to this question because this comparison is unfounded. I think people tend to bundle the two languages together because they were released at about the same time and the release of Rust felt like a response to the release of Go.</description>
    </item>
    
    <item>
      <title>Rust review: Closing thoughts</title>
      <link>https://jmmv.dev/2018/07/rust-review-closing-thoughts.html</link>
      <pubDate>Tue, 10 Jul 2018 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/07/rust-review-closing-thoughts.html</guid>
      <description>Thought that the Rust review was over? Think again; I was just on vacation! I&amp;rsquo;m back now to conclude the series with a bunch of random thoughts and a surprise follow-up post.
 The series is coming to an end. It&amp;rsquo;s time to summarize everything we have discussed so far and to cover a few more items that didn&amp;rsquo;t really deserve full posts of their own. Most of these miscellaneous items were thoughts that I jotted down while reading TRPL book.</description>
    </item>
    
    <item>
      <title>Rust review: The ecosystem</title>
      <link>https://jmmv.dev/2018/06/rust-review-ecosystem.html</link>
      <pubDate>Fri, 22 Jun 2018 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/06/rust-review-ecosystem.html</guid>
      <description>In this part of the review, I would like to focus on Rust&amp;rsquo;s ecosystem: in other words, how Rust plays with other parts of a functioning system and how Rust&amp;rsquo;s standard library vs. external libraries interact with each other. There are a lot of pieces to cover in these areas and they have left me with mixed feelings. Let&amp;rsquo;s look at some.
The standard library The std library feels generally well-thought out and full of features.</description>
    </item>
    
    <item>
      <title>Rust review: The book</title>
      <link>https://jmmv.dev/2018/06/rust-review-book.html</link>
      <pubDate>Tue, 19 Jun 2018 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/06/rust-review-book.html</guid>
      <description>&amp;ldquo;The Rust Programming Language&amp;rdquo; is one of the free books that the community has put together to teach the language. The book does a good job in general, but there are some things that could be better. Let&amp;rsquo;s cover these, but first, some background.
A couple of years ago, right after getting started with Rust, I tried to go through the book&amp;rsquo;s first few chapters. It all sounded cool&amp;hellip; but the first edition of the book moved at a glacially slow pace because it covered things in excruciating detail.</description>
    </item>
    
    <item>
      <title>Rust review: The match keyword</title>
      <link>https://jmmv.dev/2018/06/rust-review-match-keyword.html</link>
      <pubDate>Fri, 15 Jun 2018 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/06/rust-review-match-keyword.html</guid>
      <description>A commonly-acclaimed feature of Rust is its match keyword: a &amp;ldquo;conditional on steroids&amp;rdquo;. match lets you take the value of an expression and compare it against a bunch of values‚Äîor, more generally, patterns.
As you write and read Rust, you will notice that this keyword is used everywhere because it&amp;rsquo;s the way to access certain types, like Option values or error codes.
For example:
matchnode.get_parent(){// node is an Option&amp;lt;Something&amp;gt;. Some(parent)=&amp;gt;{// Do something with &amp;#34;parent&amp;#34;, which we know points to a node.</description>
    </item>
    
    <item>
      <title>Rust review: Expressions, expressions, expressions</title>
      <link>https://jmmv.dev/2018/06/rust-review-expressions.html</link>
      <pubDate>Tue, 12 Jun 2018 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/06/rust-review-expressions.html</guid>
      <description>Rust resembles a functional language in many ways although it does not claim to be one. In fact, I have been thinking of Rust as a &amp;ldquo;pragmatic Haskell&amp;rdquo; or as a &amp;ldquo;well-balanced mixture between C++ and Haskell&amp;quot;.
One of the ways the functional aspects show up is via expressions and how pretty much any construct in Rust can be treated as an expression. But before we begin, a little warning: the examples below are, by no means, idiomatic Rust‚ÄîI just hope they are simple enough to illustrate what I want to show.</description>
    </item>
    
    <item>
      <title>Rust review: Learning curve</title>
      <link>https://jmmv.dev/2018/06/rust-review-learning-curve.html</link>
      <pubDate>Fri, 08 Jun 2018 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/06/rust-review-learning-curve.html</guid>
      <description>Writing Rust code is not restricted to programming gurus‚Äîbut there is no denying that the learning curve is steeper than that of other languages. Or is it? In this post, I&amp;rsquo;ll try to convince you that the curve does feel steep, but it isn&amp;rsquo;t when taken into perspective.
Let&amp;rsquo;s first start by stating that learning a language is not the same as learning its syntax. Learning a language involves learning the syntax, of course, but it also involves familiarizing oneself with its common idioms and grabbing a good sense of what the standard libraries provide.</description>
    </item>
    
    <item>
      <title>Rust review: Protect the data</title>
      <link>https://jmmv.dev/2018/06/rust-review-protect-the-data.html</link>
      <pubDate>Tue, 05 Jun 2018 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/06/rust-review-protect-the-data.html</guid>
      <description>The one thing that blew my mind about Rust is its approach to data sharing in concurrent situations.
I had always thought of mutexes as something that is easy to get wrong and was convinced that the use of a RAII pattern to prevent lock leaks never happen (like with Abseil&amp;rsquo;s MutexLock) was the panacea. (I&amp;rsquo;m a fan of RAII in C++ by the way, in case you haven&amp;rsquo;t noticed.)</description>
    </item>
    
    <item>
      <title>Rust review: The borrow checker</title>
      <link>https://jmmv.dev/2018/06/rust-review-borrow-checker.html</link>
      <pubDate>Fri, 01 Jun 2018 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/06/rust-review-borrow-checker.html</guid>
      <description>Aaaah, the borrow checker: the dreaded enemy lurking within the Rust compiler, ready to make its move to bring pain to your life by preventing your code from compiling. Or that&amp;rsquo;s what everyone seems to say, which is one of the reasons I put off learning Rust for so long. In reality&amp;hellip; the borrow checker is a blessing, but it is true that getting past its gates is difficult at first.</description>
    </item>
    
  </channel>
</rss>
