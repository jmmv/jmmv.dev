<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/rust/index.html</link><description>Recent content in Rust on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2025 Julio Merino</copyright><lastBuildDate>Tue, 23 Jul 2024 07:10:00 -0700</lastBuildDate><atom:link href="https://jmmv.dev/tags/rust/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Rust doesn't solve the CrowdStrike outage</title><link>https://jmmv.dev/2024/07/crowdstrike-and-rust.html</link><pubDate>Tue, 23 Jul 2024 07:10:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2024/07/crowdstrike-and-rust.html</guid><description>&lt;p>Look, I like Rust. I really, really do, and I agree with the premise that memory-unsafe languages like C++ should not be used anymore. But claiming that Rust would have &lt;em>prevented&lt;/em> the massive outage that the world went through last Friday is misleading and actively harmful to Rust&amp;rsquo;s evangelism.&lt;/p>
&lt;p>Having CrowdStrike written in Rust would have &lt;em>minimized&lt;/em> the chances of the outage happening, but not resolved the root cause that allowed the outage to happen in the first place. Thus, it irks me to see various folks blanket-claiming that Rust is the answer. It&amp;rsquo;s not, and pushing this agenda hurts Rust&amp;rsquo;s adoption more than it helps: C++ experts can understand the root cause and see that this claim is misleading, causing further divide in the systems programming world.&lt;/p>
&lt;p>So, why won&amp;rsquo;t Rust help? Let me try to answer that question, but while we are at it, let&amp;rsquo;s also delve deeper into the causes of the outage. In a way, let me put my SRE hat on and write my own version of the postmortem.&lt;/p></description><enclosure url="https://jmmv.dev/images/2024-07-23-rusty-crow.jpg" length="343660" type="image/jpeg"/></item><item><title>Porting the EndBASIC console to an LCD</title><link>https://jmmv.dev/2024/04/endbasic-st7735s.html</link><pubDate>Fri, 26 Apr 2024 13:30:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2024/04/endbasic-st7735s.html</guid><description>&lt;p>Hello again Blog System/5 and sorry for the radio silence for the last couple of months. I had been writing too much in here and neglecting my side projects so I &lt;em>needed&lt;/em> to get back to them. And now that I&amp;rsquo;ve made significant progress on cool new features for &lt;a href="https://www.endbasic.dev/">EndBASIC&lt;/a>, it&amp;rsquo;s time to write about them a little!&lt;/p>
&lt;p>One of the defining characteristics of EndBASIC is its hybrid console: what looks like a simple text terminal at first glance can actually render overlapping graphics and text &lt;em>at the same time&lt;/em>. This is a feature that I believe is critical to simplify learning and it first appeared with &lt;a href="https://jmmv.dev/2021/11/endbasic-0.8.html">the 0.8 release&lt;/a> back in 2021.&lt;/p></description><enclosure url="https://jmmv.dev/images/2024-04-26-endbasic-st7735s-editor.jpg" length="2750893" type="image/jpeg"/></item><item><title>How "new type" helps avoid production outages</title><link>https://jmmv.dev/2024/03/new-type-and-production-outages.html</link><pubDate>Sat, 09 Mar 2024 09:50:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2024/03/new-type-and-production-outages.html</guid><description>&lt;p>My &lt;a href="https://jmmv.dev/2024/01/links-january-2024-edition.html">January links recap&lt;/a> included the &lt;a href="https://experimentalworks.net/posts/2024-01-22-simple-phantom-types/">&amp;ldquo;Phantom Types&amp;rdquo;&lt;/a> article by David Soria Parra. In it, the author briefly touches upon the &amp;ldquo;new type&amp;rdquo; idiom, its typical implementation in Rust, and then proceeds to propose a better alternative. But the question arises: why should you care?&lt;/p>
&lt;p>To answer why this idiom is useful, I want to present you with a real production problem we faced in the Storage Infrastructure team at Google circa 2010. That issue made me a convert and I&amp;rsquo;ve kept it in mind when designing APIs since then.&lt;/p></description><enclosure url="https://jmmv.dev/images/2024-03-09-new-types-store.jpg" length="552435" type="image/jpeg"/></item><item><title>5 ways to instantiate Rust structs in tests</title><link>https://jmmv.dev/2023/10/rust-test-structs.html</link><pubDate>Fri, 06 Oct 2023 09:00:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2023/10/rust-test-structs.html</guid><description>&lt;p>I&amp;rsquo;m a big fan of static typing and I&amp;rsquo;ve found that using narrow types for each entity in the object model of my programs reduces errors. Rust is particularly well-suited at this task: its lack of implicit type conversions eliminates surprises, and its ownership semantics allow type transformations with zero cost.&lt;/p>
&lt;p>Unfortunately, (ab)using narrow types in an app&amp;rsquo;s domain is &lt;em>really&lt;/em> annoying when writing tests. While non-test code rarely instantiates new objects&amp;mdash;in the case of a REST service, this would only happen at the service&amp;rsquo;s boundaries&amp;mdash;tests instantiate objects infinitely more times than non-test code. Code patterns that may seem reasonable in non-test code can become unbearable in tests.&lt;/p>
&lt;p>In this post, I want to look into the various ways in which you can instantiate strongly-typed objects. For each, I show examples and describe their pros and cons. And yes, as a matter of fact, I have tried them all before&amp;hellip; and I can&amp;rsquo;t yet make my mind as to which one is best.&lt;/p></description><enclosure url="https://jmmv.dev/images/2023-10-06-rust-test-structs.png" length="138979" type="image/jpeg"/></item><item><title>A failed experiment with Rust static dispatch</title><link>https://jmmv.dev/2023/08/rust-static-dispatch-failed-experiment.html</link><pubDate>Sun, 06 Aug 2023 05:30:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2023/08/rust-static-dispatch-failed-experiment.html</guid><description>&lt;p>Initial versions of the EndBASIC Service, and therefore initial versions of EndTRACKER, used dynamic dispatch to support abstract definitions of system services such as the database they talk to and the clock they use. This looked like a bunch of &lt;tt>Arc&lt;dyn Foo>&lt;/tt> objects passed around and was done to support extremely fast unit testing.&lt;/p>
&lt;p>When I generalized the core logic of these services into the III-IV framework, I decided to experiment with a switch to static dispatch. The rationale was that using static dispatch better aligns with the design of well-regarded crates in the Rust ecosystem, and also because I wanted to avoid unnecessary runtime costs in the foundational pieces of my web services.&lt;/p>
&lt;p>Let me tell you that this decision was a huge mistake and that the experiment has utterly failed. Using static dispatch has been a constant source of frustration due to the difficulty in passing types around and reasoning about trait bounds. The situation had gotten so bad that I dreaded adding new functionality to my services whenever a change to a statically-typed &lt;tt>struct&lt;/tt> was needed, because that meant adding yet another type parameter and plumbing it through tens of source files.&lt;/p>
&lt;p>In lieu of the difficulties, which eventually turned into blockers to implementing new features, I made the choice of going back to dynamic dispatch. The goal was to gain ergonomics at the expense of a supposedly-negligible runtime cost. Let me tell you about the problems I faced, the refactoring journey, and some measurements I gathered after the rewrite.&lt;/p></description></item><item><title>Unit-testing a web service in Rust</title><link>https://jmmv.dev/2023/07/unit-testing-a-web-service.html</link><pubDate>Fri, 07 Jul 2023 06:30:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2023/07/unit-testing-a-web-service.html</guid><description>&lt;p>One of the things I'm most proud of the Rust web services I have written is how I can run their tests with zero setup and within milliseconds, all while making me confident that "main" can always be shipped to production. I've previously touched upon how this all works in other articles, but it's time for a deep dive.&lt;/p>
&lt;p>To make things specific, I'll be describing the testing infrastructure of EndTRACKER, the EndBASIC Service, and the sample key/value store app of III-IV. These services are all structured in three separate layers, and I'll be covering the testing strategy for each of them.&lt;/p></description></item><item><title>A persistent task queue in Rust</title><link>https://jmmv.dev/2023/06/iii-iv-task-queue.html</link><pubDate>Fri, 23 Jun 2023 06:35:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2023/06/iii-iv-task-queue.html</guid><description>A couple of posts ago, I described why I built custom email subscriptions for this blog. I briefly mentioned that there is new automation that scrapes the RSS feed and sends new post notifications to you all. Today, it&amp;rsquo;s time to look into how this all works and how this is based on a new persistent task queuing service in Rust. The queue handles tasks to periodically scrape the RSS feed and schedule emails, all with various quota enforcers and retry policies in place. Read on for the design requirements and constraints of the task queue, how the client and worker Rust APIs look like, and how this all can be made to work inside the Azure Functions serverless runtime for minimal deployment hassle and cost.</description></item><item><title>From AST to bytecode execution in EndBASIC</title><link>https://jmmv.dev/2022/11/endbasic-bytecode.html</link><pubDate>Tue, 22 Nov 2022 06:50:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2022/11/endbasic-bytecode.html</guid><description>&lt;p>Since its inception two years ago, the EndBASIC interpreter has been using an AST-based execution
engine. And during all this time, people have mocked the language for not allowing &lt;code>10 GOTO 10&lt;/code>.
Well, fear not: the upcoming 0.10 release has full support for &lt;code>GOTO&lt;/code> and &lt;code>GOSUB&lt;/code>, features that
were made possible by moving to a bytecode-based interpreter. Let&amp;rsquo;s take a peek at what the
problems were and how I addressed them.&lt;/p></description></item><item><title>Rust is hard, yes, but does it matter?</title><link>https://jmmv.dev/2022/05/rust-is-hard-but-does-it-matter.html</link><pubDate>Fri, 06 May 2022 06:45:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2022/05/rust-is-hard-but-does-it-matter.html</guid><description>&lt;p>Rust is infamous for having a steep learning curve. The borrow checker is the first boss you must defeat, but with a good mental model of how memory works, how objects move, and the rules that the borrow checker enforces, it becomes second nature rather quickly. These rules may sound complicated, but really, they are about understanding the fundamentals of how a computer works.&lt;/p>
&lt;p>That said&amp;hellip; the difficulties don&amp;rsquo;t stop there. Oh no. As you continue to learn about the language and start dealing with things like concurrency&amp;mdash;or, God forbid, Unix signals&amp;mdash;things can get tricky very quickly. To make matters worse, mastering &lt;a href="https://rust-unofficial.github.io/patterns/intro.html">idiomatic Rust&lt;/a> and &lt;a href="https://jmmv.dev/2020/04/rust-into-trait.html">the purpose of core traits&lt;/a> takes a lot of time. I&amp;rsquo;ve had to throw my arms up in frustration a few times so far and, while I&amp;rsquo;ve emerged from those exercises as a better programmer, I have to concede that they were exhausting experiences. And I am certainly not an expert yet.&lt;/p>
&lt;p>So, yes, there is no denying in saying that Rust is harder than other languages. But&amp;hellip; does it matter in practical terms?&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Betteridge's_law_of_headlines">Betteridge&amp;rsquo;s law of headlines&lt;/a> says that we should conclude the post right here with a &amp;ldquo;no&amp;rdquo;&amp;mdash;and I think that&amp;rsquo;s the right answer. But let&amp;rsquo;s see why.&lt;/p></description></item><item><title>Do Rust devs hate Go devs?</title><link>https://jmmv.dev/2022/04/do-rust-devs-hate-go-devs.html</link><pubDate>Fri, 29 Apr 2022 09:50:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2022/04/do-rust-devs-hate-go-devs.html</guid><description>&lt;p>Earlier this week, a 2-year old post titled &lt;a href="https://fasterthanli.me/articles/i-want-off-mr-golangs-wild-ride">I want off Mr. Golang&amp;rsquo;s wild ride&lt;/a> by &lt;a href="https://fasterthanli.me/">@fasterthanlime&lt;/a> made the news rounds &lt;em>again&lt;/em>. This post raises a bunch of concerns on the Go language and is posted from the perspective of someone who prefers Rust. And, just yesterday, I noticed &lt;a href="https://fasterthanli.me/articles/lies-we-tell-ourselves-to-keep-using-golang">a comment on Twitter by @FiloSottile&lt;/a> that, paraphrased, reads &amp;ldquo;&lt;em>Why is there so much hatred towards Go, especially from Rust developers?&lt;/em>&amp;rdquo;.&lt;/p>
&lt;p>I wish I could answer this question with a &amp;ldquo;no, there isn&amp;rsquo;t&amp;rdquo;, but that would be a lie: in any large community, there will certainly be hateful people/opinions. If you have encountered such flamebait, I&amp;rsquo;m sorry, and I&amp;rsquo;m not here to defend it. What I&amp;rsquo;m here to do is look at the possible truth behind the claim that Rust developers dislike Go, and I wanted to elaborate on this based on my personal experience.&lt;/p></description></item><item><title>Rust traits and dependency injection</title><link>https://jmmv.dev/2022/04/rust-traits-and-dependency-injection.html</link><pubDate>Fri, 22 Apr 2022 09:30:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2022/04/rust-traits-and-dependency-injection.html</guid><description>Dependency injection is one of my favorite design patterns to develop highly-testable and modular code. Unfortunately, applying this pattern by taking Rust traits as arguments to public functions has unintended consequences on the visibility of private symbols. If you are not careful, most of your crate-internal APIs might need to become public just because you needed to parameterize a function with a trait. Let&amp;rsquo;s look at why this happens and what we can do about it.</description></item><item><title>Introducing db_logger</title><link>https://jmmv.dev/2022/04/introducing-db-logger.html</link><pubDate>Tue, 12 Apr 2022 08:30:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2022/04/introducing-db-logger.html</guid><description>&lt;p>Over the last couple of weeks, I have been modernizing the codebase of the &lt;a href="https://jmmv.dev/2021/07/endbasic-0.7.html">EndBASIC cloud service&lt;/a> by applying many of the learnings I got from the &lt;a href="https://jmmv.dev/2022/02/diy-web-analytics.html">development of EndTRACKER&lt;/a>. The latter was a fork of the former and thus the foundations were the same, but as I iterated on the latter more recently, I got to refine my approach to writing a REST API in Rust.&lt;/p>
&lt;p>During this refactoring process, there was a small piece of the system that routinely got in the way for various reasons. This piece was the &amp;ldquo;database logger&amp;rdquo;.&lt;/p></description></item><item><title>EndBASIC 0.6 release announcement</title><link>https://jmmv.dev/2021/02/endbasic-0.6.html</link><pubDate>Fri, 19 Feb 2021 06:30:00 -0800</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2021/02/endbasic-0.6.html</guid><description>&lt;p>After a very active month of development since the &lt;a href="https://jmmv.dev/2021/01/endbasic-0.5.html">0.5 announcement&lt;/a>, it is time to welcome EndBASIC 0.6!&lt;/p>
&lt;p>This new 0.6 release is super-exciting for three reasons:&lt;/p>
&lt;ul>
&lt;li>preliminary GPIO support in the standard library specifically tailored to the Raspberry Pi;&lt;/li>
&lt;li>multidimensional array support in the language; and&lt;/li>
&lt;li>availability of binary releases for the most common platforms.&lt;/li>
&lt;/ul>
&lt;p>You can dive right in by:&lt;/p>
&lt;ul>
&lt;li>visiting &lt;a href="https://repl.endbasic.dev/">https://repl.endbasic.dev/&lt;/a> for an interactive session,&lt;/li>
&lt;li>reading more about the project at &lt;a href="https://www.endbasic.dev/">https://www.endbasic.dev/&lt;/a>, or&lt;/li>
&lt;li>downloading and installing any of the new &lt;a href="https://github.com/endbasic/endbasic/releases/tag/endbasic-0.6.0">prebuilt binaries&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>But stick around and continue reading if you are interested in many more details about these major changes 😉&lt;/p></description></item><item><title>Embedding EndBASIC into a (Rust) program</title><link>https://jmmv.dev/2021/01/embedding-endbasic.html</link><pubDate>Tue, 26 Jan 2021 07:20:00 -0800</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2021/01/embedding-endbasic.html</guid><description>One thing that bothers me quite a lot about various language implementations is that the core of their interpreter isn&amp;rsquo;t clearly separate from their standard library. This makes it hard to embed those interpreters into other programs because it&amp;rsquo;s not obvious how to limit their side-effects and because the interpreter dependency can be heavy. In this post, we will see how EndBASIC&amp;rsquo;s design tries hard to keep the core as small as possible, and we will see some examples on how to use EndBASIC from Rust and vice versa.</description></item><item><title>EndBASIC 0.5 release announcement</title><link>https://jmmv.dev/2021/01/endbasic-0.5.html</link><pubDate>Sun, 24 Jan 2021 08:00:00 -0800</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2021/01/endbasic-0.5.html</guid><description>A month has passed since the 0.4.0 announcement so it is about time to say hello to yet another EndBASIC release because 0.5.0 is here! So, what&amp;rsquo;s new? Not much&amp;hellip; unless you look under the covers, in which case a &lt;em>ton&lt;/em> has changed. About 30% of the codebase has been affected in one way or another to improve general quality, so read on to see how.</description></item></channel></rss>