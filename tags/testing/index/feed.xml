<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing on jmmv.dev</title>
    <link>https://jmmv.dev/tags/testing/index/</link>
    <description>Recent content in testing on jmmv.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 May 2014 18:50:00 -0400</lastBuildDate><atom:link href="https://jmmv.dev/tags/testing/index/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BSDCan 2014 summary</title>
      <link>https://jmmv.dev/2014/05/bsdcan-2014-summary.html</link>
      <pubDate>Wed, 21 May 2014 18:50:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2014/05/bsdcan-2014-summary.html</guid>
      <description>BSDCan 2014 and the accompanying FreeBSD devsummit are officially over. Let&#39;s recap.
FreeBSD devsummit
The FreeBSD devsumit at BSDCan is, by far, the largest of them all. It is true that I already visited a devsummit once —the one in EuroBSDCon 2013—, but this is the first time I participate in the &#34;real deal&#34; while also being a committer.
 The first impressive thing about this devsummit is that there were about 120 attendees.</description>
    </item>
    
    <item>
      <title>GSoC 2014 idea: Port FreeBSD&#39;s old-style tests to ATF</title>
      <link>https://jmmv.dev/2014/03/gsoc-2014-idea-port-freebsds-old-style.html</link>
      <pubDate>Wed, 12 Mar 2014 08:22:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2014/03/gsoc-2014-idea-port-freebsds-old-style.html</guid>
      <description>Are you a student interested in contributing to a production-quality operating system by increasing its overall quality? If so, you have come to the right place!
As you may already know, the Google Summer of Code 2014 program is on and FreeBSD has been accepted as a mentoring organization. As it so happens, I have a project idea that may sound interesting to you.
During the last few months, we have been hard at work adding a standardized test suite to the FreeBSD upstream source tree as described in the TestSuite project page.</description>
    </item>
    
    <item>
      <title>FreeBSD Test Suite tutorial at AsiaBSDCon 2014</title>
      <link>https://jmmv.dev/2014/01/freebsd-test-suite-tutorial-at.html</link>
      <pubDate>Wed, 08 Jan 2014 07:00:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2014/01/freebsd-test-suite-tutorial-at.html</guid>
      <description>I am pleased to announce that the tutorial on the FreeBSD Test Suite that I proposed for AsiaBSDCon 2014 has been accepted!
The conference website will soon include more details, but allow me to spoil your wait:
 Goals: Learn how to use the test suite, how it is internally organized and how new tests can be written. Stretch goal: Get attendees to contribute one or more tests to the project.</description>
    </item>
    
    <item>
      <title>FreeBSD Test Suite goals and planning</title>
      <link>https://jmmv.dev/2014/01/freebsd-test-suite-goals-and-planning.html</link>
      <pubDate>Sun, 05 Jan 2014 11:30:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2014/01/freebsd-test-suite-goals-and-planning.html</guid>
      <description>I was really impressed and delighted to see how popular my previous (and first) post on FreeBSD testing, titled Introducing the FreeBSD Test Suite, was. Looks like this project may be of great interest to developers and users out there (not unsurprisingly) so I&#39;ll try to keep you all up-to-date with any key developments.
A first question that arises from the announcement is: where are the test suite and infrastructure headed?</description>
    </item>
    
    <item>
      <title>Introducing the FreeBSD Test Suite</title>
      <link>https://jmmv.dev/2013/12/introducing-freebsd-test-suite.html</link>
      <pubDate>Tue, 31 Dec 2013 08:00:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2013/12/introducing-freebsd-test-suite.html</guid>
      <description>I joined the FreeBSD committer ranks a couple of months ago with the intention to equip FreeBSD with an out-of-the-box test suite and with a testing infrastructure. The time until now has been quite fruitful and I have been rushing to get something ready for you before the year end.
With that, I am very pleased to announce that the first mockup of the FreeBSD testing cluster is up and running!</description>
    </item>
    
    <item>
      <title>Testing NetBSD&#39;s share/mk</title>
      <link>https://jmmv.dev/2012/08/testing-netbsds-sharemk.html</link>
      <pubDate>Sun, 26 Aug 2012 22:18:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2012/08/testing-netbsds-sharemk.html</guid>
      <description>For a long time, a pet peeve of mine has been the lack of tests for the build infrastructure files of NetBSD: i.e. those bsd.*.mk files that live under /usr/share/mk/ and on which the whole source tree depends.
One could argue that writing tests for these files is not strictly necessary because the successful build of NetBSD is the real final test of whether the files work or not. That&#39;s partly true, but unfortunately is not the whole story:</description>
    </item>
    
    <item>
      <title>Dependency injection: simple class constructors</title>
      <link>https://jmmv.dev/2010/12/dependency-injection-simple-class.html</link>
      <pubDate>Sun, 26 Dec 2010 05:41:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2010/12/dependency-injection-simple-class.html</guid>
      <description>Following my previous post on dependency injection (DI for short), I wanted to show you today another example of code in which DI helps in making the code clearer and easier to validate. In this case, the person to blame for the original piece of code being criticized is me.
The atffile module in ATF provides a class to represent the contents of Atffiles. An Atffile is, basically, a file containing a list of test programs to run and a list of properties associated to these test programs.</description>
    </item>
    
    <item>
      <title>Dependency injection and testing: an example</title>
      <link>https://jmmv.dev/2010/12/dependency-injection-and-testing.html</link>
      <pubDate>Thu, 23 Dec 2010 11:11:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2010/12/dependency-injection-and-testing.html</guid>
      <description>A coworker just sent me some Python code for review and, among such code, there was the addition of a function similar to:def PathWithCurrentDate(prefix, now=None):
&#34;&#34;&#34;Extend a path with a year/month/day subdirectory layout.
Args:
prefix: string, The path to extend with the date subcomponents.
now: datetime.date, The date to use for the path; if None, use
the current date.
Returns:
string, The new computed path with the date appended.
&#34;&#34;&#34;</description>
    </item>
    
  </channel>
</rss>
