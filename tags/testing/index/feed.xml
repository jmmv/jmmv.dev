<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testing on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/testing/index.html</link><description>Recent content in Testing on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2025 Julio Merino</copyright><lastBuildDate>Sat, 04 Nov 2023 07:50:00 -0700</lastBuildDate><atom:link href="https://jmmv.dev/tags/testing/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>End-to-end tool testing with Bazel and shtk</title><link>https://jmmv.dev/2023/11/end-to-end-tool-testing-with-bazel.html</link><pubDate>Sat, 04 Nov 2023 07:50:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2023/11/end-to-end-tool-testing-with-bazel.html</guid><description>&lt;p>If you use Bazel, your project is of moderate size. And because your project is of moderate size, it almost-certainly builds one or more binaries, at least one of which is a CLI tool. But let&amp;rsquo;s face it: you don&amp;rsquo;t have end-to-end testing for those tools, do you?&lt;/p>
&lt;p>I&amp;rsquo;m &lt;em>sure&lt;/em> you have split the binary&amp;rsquo;s &lt;code>main&lt;/code> function into its own file so that the rest of the tool can be put in a library, and I&amp;rsquo;m &lt;em>extra-sure&lt;/em> that you have unit tests for such library. But&amp;hellip; those tests do little to verify the functionality and quality of the tool &lt;em>as experienced by the end user&lt;/em>. Consider: What exactly does the tool print to the console on success? Does it show errors nicely when they happen, or does it dump internal stack traces? How does it handle unknown flags or bad arguments? Is the built-in help message nicely rendered when your terminal is really wide? What if the terminal is narrow?&lt;/p>
&lt;p>You must write end-to-end tests for your tools but, usually, that isn’t easy to do. Until today. Combining shtk with Bazel via the new &lt;code>rules_shtk&lt;/code> ruleset makes it trivial to write tests that verify the behavior of your CLI tools&amp;mdash;no matter what language they are written in&amp;mdash;and in this article I’m going to show you how.&lt;/p></description><enclosure url="https://jmmv.dev/images/2023-11-04-bazel-clamp.jpg" length="572746" type="image/jpeg"/></item><item><title>Unit-testing shell scripts and tools with shtk</title><link>https://jmmv.dev/2023/10/unit-testing-with-shtk.html</link><pubDate>Wed, 11 Oct 2023 08:30:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2023/10/unit-testing-with-shtk.html</guid><description>&lt;p>While working on this static blog a few days ago, I made a change to its templates that warranted an automated test. I could have written a trivial shell script to do it, but instead I reached out for shtk&amp;rsquo;s unit-testing module. I &lt;a href="https://twitter.com/jmmv/status/1710309896670081083">tweeted about it&lt;/a> right away to just say that you can, in fact, write tests in shell because lots of developers are skeptical about any script longer than 10 lines of code.&lt;/p>
&lt;p>Interestingly, this reply came through: a pointer to a contemporary, under-development library for writing tests in Bash. Which made me think: &amp;ldquo;Hey, I had already done that years ago&amp;hellip; but nobody knows about it. Gotta fix that with a blog post!&amp;rdquo; But first, I had to bring shtk back from its ashes because I had not touched it for more than 6 years and it wasn&amp;rsquo;t read for show and tell. So I did something that I wanted to do back in the day but never did: I put together &lt;a href="https://shtk.jmmv.dev/">a website for shtk&lt;/a> to host its &lt;a href="https://shtk.jmmv.dev/docs.html">reference manual&lt;/a> and I fixed a few obvious rough edges.&lt;/p>
&lt;p>With those tweaks out of the way, we come to this article. In here, I want to show you how writing decent tests in shell is entirely possible and how shtk&amp;rsquo;s testing platform provides unique features to do integration testing of CLI apps written in any language.&lt;/p></description><enclosure url="https://jmmv.dev/images/2023-10-11-shell-hammer-wrench.jpg" length="398237" type="image/jpeg"/></item><item><title>BSDCan 2014 summary</title><link>https://jmmv.dev/2014/05/bsdcan-2014-summary.html</link><pubDate>Wed, 21 May 2014 18:50:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2014/05/bsdcan-2014-summary.html</guid><description>&lt;p>&lt;a href="https://www.bsdcan.org/2014/">BSDCan 2014&lt;/a> and the accompanying &lt;a href="https://wiki.freebsd.org/DevSummit">FreeBSD devsummit&lt;/a> are officially over. Let's recap.&lt;/p> &lt;p>&lt;b>FreeBSD devsummit&lt;/b>&lt;/p> &lt;p>The FreeBSD devsumit at BSDCan is, by far, the largest of them all. It is true that &lt;a href="https://jmmv.dev/2013/09/live-from-eurobsdcon-2013-day-1.html">I already visited a devsummit once&lt;/a> —the one in EuroBSDCon 2013—, but this is the first time I participate in the "real deal" while also being a committer.&lt;/p> &lt;div class="separator" style="clear: both; text-align: center;">&lt;a href="http://1.bp.blogspot.com/-3PQD8mvKdXA/U30iTWjLA_I/AAAAAAAAMa4/RM0npPCidc0/s1600/IMG_20140518_085230124.jpg" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;">&lt;img border="0" src="https://jmmv.dev/images/2014-05-21-IMG_20140518_085230124.jpg" />&lt;/a>&lt;/div> &lt;p>The first impressive thing about this devsummit is that there were about 120 attendees. The vast majority of these were developers, of course, but there was also a reasonable presence from vendors — including, for example, delegates from Netflix, Isilon, NetApp and even smaller parties like Tarsnap.&lt;/p></description></item><item><title>GSoC 2014 idea: Port FreeBSD's old-style tests to ATF</title><link>https://jmmv.dev/2014/03/gsoc-2014-idea-port-freebsds-old-style.html</link><pubDate>Wed, 12 Mar 2014 08:22:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2014/03/gsoc-2014-idea-port-freebsds-old-style.html</guid><description>&lt;p>Are you a student interested in contributing to a production-quality operating system by increasing its overall quality? If so, you have come to the right place!&lt;/p> &lt;p>As you may already know, the &lt;a href="https://www.google-melange.com/gsoc/homepage/google/gsoc2014">Google Summer of Code 2014 program&lt;/a> is on and &lt;a href="https://www.google-melange.com/gsoc/org2/google/gsoc2014/freebsd">FreeBSD has been accepted as a mentoring organization&lt;/a>. As it so happens, I have a project idea that may sound interesting to you.&lt;/p> &lt;p>During the last few months, we have been hard at work adding a standardized test suite to the FreeBSD upstream source tree as described in the &lt;a href="http://wiki.freebsd.org/TestSuite">TestSuite project page&lt;/a>. However, a test suite is of no use if it lacks a comprehensive collection of tests!&lt;/p></description></item><item><title>FreeBSD Test Suite tutorial at AsiaBSDCon 2014</title><link>https://jmmv.dev/2014/01/freebsd-test-suite-tutorial-at.html</link><pubDate>Wed, 08 Jan 2014 07:00:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2014/01/freebsd-test-suite-tutorial-at.html</guid><description>&lt;p>I am pleased to announce that the tutorial on the &lt;a href="http://wiki.freebsd.org/TestSuite">FreeBSD Test Suite&lt;/a> that I proposed for &lt;a href="http://2014.asiabsdcon.org/">AsiaBSDCon 2014&lt;/a> has been accepted!&lt;/p> &lt;p>The conference website will soon include more details, but allow me to spoil your wait:&lt;/p> &lt;ul> &lt;li>Goals: Learn how to use the test suite, how it is internally organized and how new tests can be written.&lt;/li> &lt;li>Stretch goal: Get attendees to contribute one or more tests to the project.&lt;/li> &lt;li>Audience: Mostly developers of FreeBSD that want to learn how the new test suite plugs into the system. That said, and because a major part of the tutorial will revolve around &lt;i>using&lt;/i> the test suite for one's own benefit, everyone is welcome really. In particular, system administrators may get a useful tool out of this.&lt;/li> &lt;/ul> &lt;p>The main surprise in the acceptance confirmation email is that materials are due by January 20th... which is around the corner! Time to rush in getting things ready. In the meantime, you can find more details on the tutorial by &lt;a href="https://docs.google.com/a/meroh.net/document/d/1OYZR3Sc4Xr4IpVPyIyyiFpCpVSCLjEU4dt0Iwp_SS7o/edit">reading the proposal itself&lt;/a>.&lt;/p></description></item><item><title>FreeBSD Test Suite goals and planning</title><link>https://jmmv.dev/2014/01/freebsd-test-suite-goals-and-planning.html</link><pubDate>Sun, 05 Jan 2014 11:30:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2014/01/freebsd-test-suite-goals-and-planning.html</guid><description>&lt;p>I was really impressed and delighted to see how popular my previous (and first) post on FreeBSD testing, titled &lt;a href="https://jmmv.dev/2013/12/introducing-freebsd-test-suite.html">Introducing the FreeBSD Test Suite&lt;/a>, was. Looks like this project may be of great interest to developers and users out there (not unsurprisingly) so I'll try to keep you all up-to-date with any key developments.&lt;/p> &lt;p>A first question that arises from the announcement is: &lt;b>where are the test suite and infrastructure headed?&lt;/b> After all, the continuous testing machines for amd64 are already up and running, so what else is there to do?&lt;/p></description></item><item><title>Introducing the FreeBSD Test Suite</title><link>https://jmmv.dev/2013/12/introducing-freebsd-test-suite.html</link><pubDate>Tue, 31 Dec 2013 08:00:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2013/12/introducing-freebsd-test-suite.html</guid><description>&lt;p>&lt;a href="https://jmmv.dev/2013/11/joining-freebsd-committer-ranks.html">I joined the FreeBSD committer
ranks&lt;/a>
a couple of months ago with the intention to equip FreeBSD with an
out-of-the-box test suite and with a testing infrastructure. The time
until now has been quite fruitful and I have been rushing to get
something ready for you before the year end.&lt;/p>
&lt;p>With that, I am very pleased to announce that the first mockup of the
FreeBSD testing cluster is up and running! Point your browser at:&lt;/p></description></item><item><title>Testing NetBSD's share/mk</title><link>https://jmmv.dev/2012/08/testing-netbsds-sharemk.html</link><pubDate>Sun, 26 Aug 2012 22:18:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2012/08/testing-netbsds-sharemk.html</guid><description>For a long time, a pet peeve of mine has been the lack of tests for the build infrastructure files of NetBSD: i.e. those &lt;tt>bsd.*.mk&lt;/tt> files that live under &lt;tt>/usr/share/mk/&lt;/tt> and on which the whole source tree depends.&lt;br />&lt;br />One could argue that writing tests for these files is not strictly necessary because the successful build of NetBSD is the real final test of whether the files work or not. That's partly true, but unfortunately is not the whole story:&lt;br />&lt;ul>&lt;li>Other projects depend on these build files and thus rely on their behavior. This can either be by just relying on NetBSD having these files installed, or by using the separate &lt;tt>mk-files&lt;/tt> package (available e.g. in Fedora). The functionality of the build infrastructure should not regress, or it would break these third-party projects. (Think about these files as having a public API outside of NetBSD.)&lt;/li>&lt;li>Even if the build of NetBSD is the real test of the functionality of the build infrastructure, the build infrastructure supports dozens of options and tweaks to change its behavior. One would need to rebuild NetBSD tens, if not hundreds of times, each with a different combination of build options, to ensure the files work.&lt;/li>&lt;li>Lastly, when a new functionality is added to the build infrastructure, it is because some component of the source tree needs such functionality. It may latter happen that this component disappears or stops needing such functionality. The functionality becomes unused by the source tree, and thus can regress unexpectedly (breaking third-party packages or introducing bugs, as mentioned earlier).&lt;/li>&lt;/ul>With this in mind, it's clear that we should have some tests for the &lt;tt>share/mk&lt;/tt> files. Unfortunately, that's easier said than done:&amp;nbsp;the files in &lt;tt>share/mk&lt;/tt> are extremely complex and expose hundreds, if not thousands, of different behaviors each with its own subtleties. Adding tests for these is hard. The fact that this code that was never designed to be unit-tested doesn't help either.&lt;br />&lt;div>&lt;br />Regardless, I have just&amp;nbsp;&lt;a href="http://mail-index.netbsd.org/source-changes/2012/08/26/msg036875.html">submitted some "placeholder" tests&lt;/a>&amp;nbsp;to the tree. The major point of these new test programs is&amp;nbsp;to lower the barrier of entry to writing tests for &lt;tt>share/mk&lt;/tt> and, therefore, maybe get other people to write some tests. To predicate with the example, I have populated these skeleton test programs with a couple of test cases each, although as you will see they are very trivial tests.&lt;br />&lt;br />And, to conclude, why have I done this &lt;i>now&lt;/i>? Well: I'm working on integrating Kyua into the source tree and, to make this happen, I need to do a couple of changes to the build infrastructure files. The changes are tricky, so I want to write tests to have some assurance that my modifications work and that, specially, they do not regress over time. Having the placeholder test programs in place makes this much easier, and the real functionality changes easier to review.&lt;/div></description></item><item><title>Dependency injection: simple class constructors</title><link>https://jmmv.dev/2010/12/dependency-injection-simple-class.html</link><pubDate>Sun, 26 Dec 2010 05:41:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2010/12/dependency-injection-simple-class.html</guid><description>&lt;p>Following my &lt;a href="https://jmmv.dev/2010/12/dependency-injection-and-testing.html">previous post on dependency
injection&lt;/a>
(DI for short), I wanted to show you today another example of code in
which DI helps in making the code clearer and easier to validate. In
this case, the person to blame for the original piece of code being
criticized is me.&lt;/p>
&lt;p>The &lt;code>atffile&lt;/code> module in ATF provides a class to represent the contents
of &lt;code>Atffile&lt;/code>s. An &lt;code>Atffile&lt;/code> is, basically, a file containing a list of
test programs to run and a list of properties associated to these test
programs. Let&amp;rsquo;s consider the original implementation of this module:&lt;/p></description></item><item><title>Dependency injection and testing: an example</title><link>https://jmmv.dev/2010/12/dependency-injection-and-testing.html</link><pubDate>Thu, 23 Dec 2010 11:11:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2010/12/dependency-injection-and-testing.html</guid><description>&lt;p>A coworker just sent me some Python code for review and, among such
code, there was the addition of a function similar to:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">PathWithCurrentDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">now&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Extend a path with a year/month/day subdirectory layout.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> prefix: string, The path to extend with the date subcomponents.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> now: datetime.date, The date to use for the path; if None, use
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> the current date.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Returns:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> string, The new computed path with the date appended.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;%Y&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;%m&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">now&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">now&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strftime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strftime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The purpose of this function, as the docstring says, is to simplify the
construction of a path that lays out files on disk depending on a given
date.&lt;/p></description></item></channel></rss>