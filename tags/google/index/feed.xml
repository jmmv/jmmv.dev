<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>google on jmmv.dev</title>
    <link>https://jmmv.dev/tags/google/index/</link>
    <description>Recent content in google on jmmv.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 31 Dec 2020 09:30:00 -0800</lastBuildDate><atom:link href="https://jmmv.dev/tags/google/index/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How does Google avoid clean builds?</title>
      <link>https://jmmv.dev/2020/12/google-no-clean-builds.html</link>
      <pubDate>Thu, 31 Dec 2020 09:30:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/12/google-no-clean-builds.html</guid>
      <description>During my 11 years at Google, I can confidently count the number of times I had to do a &amp;ldquo;clean build&amp;rdquo; with one hand: their build system is so robust that incremental builds always work. Phrases like &amp;ldquo;clean everything and try building from scratch&amp;rdquo; are unheard of. So&amp;hellip; you can color me skeptical when someone says that incremental build problems are due to bugs in the build files and not due to a suboptimal build system. The answer lies in having a robust build system, and in this post I&amp;rsquo;ll examine the common causes behind incremental build breakages, what the build system can do to avoid them, and how Bazel accomplishes most of them.</description>
    </item>
    
    <item>
      <title>My interviews with Facebook, Twitter, and Microsoft</title>
      <link>https://jmmv.dev/2020/10/facebook-twitter-microsoft-interviews.html</link>
      <pubDate>Fri, 23 Oct 2020 05:30:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2020/10/facebook-twitter-microsoft-interviews.html</guid>
      <description>Now that you know about my recent departure from Google, it is time to look into how the whole interviewing process went with all of Facebook, Twitter, and Microsoft. Read on for details on engineering levels, the timeline of all three processes, and some key observations of each.</description>
    </item>
    
    <item>
      <title>Farewell, Google; hello, Microsoft!</title>
      <link>https://jmmv.dev/2020/10/bye-google-hi-microsoft.html</link>
      <pubDate>Mon, 19 Oct 2020 06:00:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2020/10/bye-google-hi-microsoft.html</guid>
      <description>After a little over 11 years, it&amp;rsquo;s time for a much longed change: I&amp;rsquo;m leaving Google and I&amp;rsquo;m joining Microsoft as a Principal Software Engineer for Azure. These job changes are effective as of this week, but my family and I already moved from New York City to Redmond, WA about three weeks ago. Read on for a recap on my tenure at Google, the whys behind my departure, and how I ended up choosing the position in Microsoft Azure after mulling over offers from Facebook, Twitter, and Microsoft.</description>
    </item>
    
    <item>
      <title>Internships para estudiantes españoles</title>
      <link>https://jmmv.dev/2020/08/internships-de-verano.html</link>
      <pubDate>Thu, 13 Aug 2020 07:20:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/08/internships-de-verano.html</guid>
      <description>[This post in Spanish to target the Spanish student audience.] La semana pasada nos despedimos de un estudiante de tercer año de carrera que pasó el verano con nosotros haciendo una internship en el equipo de Bazel. Este hecho me hizo pensar en que es el mejor momento de repasar qué son los internships. Mi objetivo es intentar convencerte, si eres un estudiante de carrera, máster, o doctorado, de que son una opción muy interesante y asequible para mejorar tus conocimientos y crecer en el mundo laboral.</description>
    </item>
    
    <item>
      <title>A few extra system calls... and you lose 1% build time</title>
      <link>https://jmmv.dev/2018/04/bazel-xcode-locations-cache.html</link>
      <pubDate>Mon, 30 Apr 2018 13:45:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/04/bazel-xcode-locations-cache.html</guid>
      <description>Blaze—the variant of Bazel used internally at Google—was originally designed to build the Google monorepo. One of the beauties of sticking to a monorepo is code reuse, but this has the unfortunate side-effect of dependency bloat. As a result, Bazel and Blaze have evolved to support ever-increasingly-bigger pieces of software.
The growth of the projects built by Bazel and Blaze has had the unsurprising consequence that our engineers all now have high-end workstations with access to massive amounts of distributed resources.</description>
    </item>
    
    <item>
      <title>Preliminary sandboxfs support in Bazel</title>
      <link>https://jmmv.dev/2018/04/preliminary-sandboxfs-support-in-bazel.html</link>
      <pubDate>Fri, 13 Apr 2018 15:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/04/preliminary-sandboxfs-support-in-bazel.html</guid>
      <description>During the summer of last year, I hosted an intern who implemented sandboxfs: a FUSE-based file system that exposes an arbitrary view of the host&amp;rsquo;s file system under the mount point. At the end of his internship, we had a functional sandboxfs implementation and some draft patches for integration in Bazel.
The goal of sandboxfs in the context of Bazel is to improve the performance of builds when action sandboxing is enabled.</description>
    </item>
    
    <item>
      <title>Stick to your project&#39;s core language in your tests</title>
      <link>https://jmmv.dev/2018/03/stick-to-projects-core-language-in-tests.html</link>
      <pubDate>Tue, 27 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://jmmv.dev/2018/03/stick-to-projects-core-language-in-tests.html</guid>
      <description>&lt;p&gt;&lt;em&gt;This post is a short, generalized summary of the preceeding two. I believe those two posts put readers off due to their massive length and the fact that they were seemingly tied to Bazel and Java, thus failing to communicate the larger point I wanted to make. Let&amp;rsquo;s try to distill their key points here in a language- and project-agnostic manner.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;</description>
    </item>
    
    <item>
      <title>A case for writing Bazel&#39;s integration tests in Java, part 2</title>
      <link>https://jmmv.dev/2018/03/bazel-tests-in-java-part-2.html</link>
      <pubDate>Mon, 19 Mar 2018 08:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/03/bazel-tests-in-java-part-2.html</guid>
      <description>In part 1 of this series, I made the case that you should run away from the shell when writing integration tests for your software and that you should embrace the primary language of your project to write those.
Depending on the language you are using, doing this will mean significant more work upfront to lay out the foundations for your tests, but this work will pay off. You may also feel that the tests could be more verbose than if they were in shell, though that&amp;rsquo;s not necessarily the case.</description>
    </item>
    
    <item>
      <title>A case for writing Bazel&#39;s integration tests in Java, part 1</title>
      <link>https://jmmv.dev/2018/03/bazel-tests-in-java-part-1.html</link>
      <pubDate>Fri, 16 Mar 2018 14:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/03/bazel-tests-in-java-part-1.html</guid>
      <description>My latest developer productivity rant thesis is that integration tests should be written in the exact same language as the thing they test. Specifically, not shell.
This theory applies mostly to tests that verify infrastructure software like servers or command line tools. It is too easy to fall into the trap of using the shell because it feels like the natural choice to interact with tools. But I argue that this is a big mistake that hurts the long-term health of the project, and once trapped, it&amp;rsquo;s hard to escape.</description>
    </item>
    
    <item>
      <title>Don&#39;t rollback rollbacks</title>
      <link>https://jmmv.dev/2018/03/dont-rollback-rollbacks.html</link>
      <pubDate>Mon, 05 Mar 2018 06:45:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/03/dont-rollback-rollbacks.html</guid>
      <description>In a version control system, a rollback is a type of change that undoes the effects of a previous commit. In essence, a rollback is a commit that applies the inverse diff of another commit.
At Google, our tools make it trivial to create rollbacks for a given changelist or CL. (A CL is similar to a commit but can be either pending—in review—or submitted.) Making it trivial to create rollback CLs is important in a culture where the standard upon encountering a problem is &amp;ldquo;rollback first, ask questions later&amp;rdquo; because it removes friction from the process of backing out problematic changes.</description>
    </item>
    
    <item>
      <title>Joining the Blaze team</title>
      <link>https://jmmv.dev/2016/01/joining-blaze-team.html</link>
      <pubDate>Tue, 19 Jan 2016 08:30:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2016/01/joining-blaze-team.html</guid>
      <description>&lt;p&gt;It has been &lt;a href=&#34;https://medium.com/@jmmv/six-years-at-google-8b06563fab08&#34;&gt;over 6 years since I joined
Google&lt;/a&gt; and
throughout this time I have been in the Storage SRE family: first with GFS,
then with Colossus, and last with Persistent Disk.  Even though this counts as
3 different teams, the reality is that I have been doing mostly the same type
of work all around.&lt;/p&gt;
&lt;p&gt;I had pondered the idea of switching to a pure Software Engineer (SWE) role for
all these years and never taken any action.  Until now.  Things change, and the
time has come for me to make a move and pursue that thought in an effort to
grow in a different direction.  And why now, you ask?  Well, simply because I
have found a role in the NYC office for a project that I am personally
passionate about.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Six years at Google</title>
      <link>https://jmmv.dev/2015/05/six-years-at-google.html</link>
      <pubDate>Tue, 26 May 2015 12:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2015/05/six-years-at-google.html</guid>
      <description>Mission: Site Reliability Engineer for the Storage Infrastructure at Google
D-Day: May 25th, 2009
Location: Dublin, Ireland
Duration: Unspecified
 Six years have passed. Six years since I dropped out of a Ph.D. program, left home, and took a plane to Dublin, Ireland, to start my work life adventure by joining Google. Two years later, I moved to New York City and I am still here without any specific plans to leave.</description>
    </item>
    
    <item>
      <title>On Bazel and Open Source</title>
      <link>https://jmmv.dev/2015/04/on-bazel-and-open-source.html</link>
      <pubDate>Tue, 14 Apr 2015 16:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2015/04/on-bazel-and-open-source.html</guid>
      <description>This is a rare post because I don&amp;rsquo;t usually talk about Google stuff here, and this post is about Bazel: a tool recently published by Google. Why? Because I love its internal counterpart, Blaze, and believe that Bazel has the potential to be one of the best build tools if it is not already.
However, Bazel currently has some shortcomings to cater to a certain kind of important projects in the open source ecosystem: the projects that form the foundation of open source operating systems.</description>
    </item>
    
    <item>
      <title>Code review culture meets FreeBSD</title>
      <link>https://jmmv.dev/2014/05/code-review-culture-meets-freebsd.html</link>
      <pubDate>Sat, 31 May 2014 23:10:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2014/05/code-review-culture-meets-freebsd.html</guid>
      <description>One of the things that often shocks new engineers at Google is the fact that every change to the source tree must be reviewed before commit. It is hard to internalize such a workflow if you have never been exposed to it, but given enough time —O(weeks) is my estimation—, the formal pre-commit code review process becomes a habit and, soon after, something you take for granted.
To me, code reviews have become invaluable and, actually, I feel &amp;ldquo;naked&amp;rdquo; when I work on open source projects where this process is not standard practice.</description>
    </item>
    
    <item>
      <title>Getting rid of @public.talk.google.com GTalk contacts</title>
      <link>https://jmmv.dev/2012/07/getting-rid-of-publictalkgooglecom.html</link>
      <pubDate>Thu, 05 Jul 2012 09:38:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2012/07/getting-rid-of-publictalkgooglecom.html</guid>
      <description>If you use a native IM client to connect to Google Talk and also have a Google+ account, you probably have noticed by now that your contacts list is polluted by tons of addresses of the form annoyinghash@public.talk.google.com. Attempting to talk to these people from the native IM client does not work (maybe it does in some specific situations? I don&#39;t know.), so these contacts only add noise and annoyance.</description>
    </item>
    
  </channel>
</rss>
