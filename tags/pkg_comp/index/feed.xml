<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pkg_comp on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/pkg_comp/index.html</link><description>Recent content in Pkg_comp on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2024 Julio Merino</copyright><lastBuildDate>Tue, 05 Feb 2019 09:00:00 -0500</lastBuildDate><atom:link href="https://jmmv.dev/tags/pkg_comp/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Hello, sandboxfs 0.1.0</title><link>https://jmmv.dev/2019/02/sandboxfs-0-1-0.html</link><pubDate>Tue, 05 Feb 2019 09:00:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2019/02/sandboxfs-0-1-0.html</guid><description>&lt;p>I am pleased to announce that the first release of &lt;a href="https://github.com/bazelbuild/sandboxfs">sandboxfs&lt;/a>, 0.1.0, is &lt;em>finally&lt;/em> here! You can download the sources and prebuilt binaries from the &lt;a href="https://github.com/bazelbuild/sandboxfs/releases/tag/sandboxfs-0.1.0">0.1.0 release page&lt;/a> and you can read the &lt;a href="https://github.com/bazelbuild/sandboxfs/blob/master/INSTALL.md">installation instructions&lt;/a> for more details.&lt;/p>
&lt;p>The journey to this first release has been a long one. sandboxfs was first conceived over two years ago, was &lt;a href="https://jmmv.dev/2017/08/introducing-sandboxfs.html">first announced in August 2017&lt;/a>, showed its &lt;a href="https://blog.bazel.build/2018/04/13/preliminary-sandboxfs-support.html">first promising results in April 2018&lt;/a>, and has been undergoing a rewrite from Go to Rust. (And by the way, this has been my 20% project at Google so rest assured that they are still possible!)&lt;/p></description></item><item><title>Introducing sandboxfs</title><link>https://jmmv.dev/2017/08/introducing-sandboxfs.html</link><pubDate>Fri, 25 Aug 2017 16:25:18 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2017/08/introducing-sandboxfs.html</guid><description>&lt;p>sandboxfs is a FUSE-based file system that exposes an arbitrary view of the
host&amp;rsquo;s file system under the mount point, and offers access controls that
differ from those of the host. You can think of sandboxfs as an advanced
version of &lt;a href="https://bindfs.org/">bindfs&lt;/a> (or &lt;code>mount --bind&lt;/code> or &lt;code>mount_null(8)&lt;/code>
depending on your system) in which you can combine and nest directories under
an arbitrary layout.&lt;/p>
&lt;p>The primary use case for this project is to provide a better file system
sandboxing technique for the Bazel build system. The goal here is to run each
build action (think compiler invocation) in a sandbox so that its inputs and
outputs are tightly controlled, and sandboxfs attempts to do this in a more
efficient manner than the current symlinks-based implementation.&lt;/p></description></item><item><title>Easy pkgsrc on macOS with pkg_comp 2.0</title><link>https://jmmv.dev/2017/02/pkg_comp-2.0-tutorial-macos.html</link><pubDate>Thu, 23 Feb 2017 17:36:54 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2017/02/pkg_comp-2.0-tutorial-macos.html</guid><description>&lt;p>This is a tutorial to guide you through the &lt;a href="https://jmmv.dev/2017/02/introducing-pkg_comp-2.0.html">shiny new pkg_comp 2.0&lt;/a> on macOS &lt;a href="https://github.com/jmmv/pkg_comp/blob/master/INSTALL.md#using-the-macos-installer">using the macOS-specific self-installer&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Goals:&lt;/strong> to use pkg_comp 2.0 to build a binary repository of all the packages you are interested in; to keep the repository fresh on a daily basis; and to use that repository with pkgin to maintain your macOS system up-to-date and secure.&lt;/p></description></item><item><title>Keeping NetBSD up-to-date with pkg_comp 2.0</title><link>https://jmmv.dev/2017/02/pkg_comp-2.0-tutorial-netbsd.html</link><pubDate>Sat, 18 Feb 2017 11:51:55 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2017/02/pkg_comp-2.0-tutorial-netbsd.html</guid><description>&lt;p>This is a tutorial to guide you through the &lt;a href="https://jmmv.dev/2017/02/introducing-pkg_comp-2.0.html">shiny new pkg_comp 2.0&lt;/a> on NetBSD.&lt;/p>
&lt;p>&lt;strong>Goals:&lt;/strong> to use pkg_comp 2.0 to build a binary repository of all the packages you are interested in; to keep the repository fresh on a daily basis; and to use that repository with pkgin to maintain your NetBSD system up-to-date and secure.&lt;/p></description></item><item><title>Introducing pkg_comp 2.0 (and sandboxctl 1.0)</title><link>https://jmmv.dev/2017/02/introducing-pkg_comp-2.0.html</link><pubDate>Fri, 17 Feb 2017 16:37:06 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2017/02/introducing-pkg_comp-2.0.html</guid><description>Announcing the launch of pkg_comp 2.0, how this differs from the 1.x series, why there was a rewrite, what sandboxctl 1.0 is, and more.</description></item><item><title>Keeping pkgsrc packages up to date</title><link>https://jmmv.dev/2007/05/keeping-pkgsrc-packages-up-to-date.html</link><pubDate>Sun, 27 May 2007 14:26:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2007/05/keeping-pkgsrc-packages-up-to-date.html</guid><description>drio asks in the &lt;a href="http://julipedia.blogspot.com/2005/10/suggestion-box.html">suggestion box&lt;/a> which is the best way to keep all the packages installed from &lt;a href="http://www.pkgsrc.org/">pkgsrc&lt;/a> up to date. I must confess that pkgsrc is quite weak in the updating area when compared to systems such as apt-get or yum. The problem comes from the fact that pkgsrc is a source-based packaging system, meaning that the end user builds packages by himself most of the times. Doing updates from such a system is hard because rebuilds take a long time and have high chances of breaking, leaving your system in an unusable status. Of course there is support for binary packages in pkgsrc, but we are not doing a good job in providing good sets of prebuilt binaries. Furthermore, and as drio stated, there is few documentation on the subject.&lt;br />&lt;br />The thing is there are several ways of updating all your installed packages. All of them are quite tedious and not "official", but with some work you can configure some scripts and cron jobs to automate the process as much as possible.&lt;br />&lt;br />Before doing an update, I usually start by running &lt;tt>pkg_chk -u -n&lt;/tt>; this tells me which packages are out of date and which are their new versions. If the resulting list is short, I tend to follow the &lt;tt>make replace&lt;/tt> procedure. This only works if the new versions of the packages are &lt;i>binary compatible&lt;/i> with the old ones, something that you cannot guarantee by looking at the version numbers. For example, you can assume that if you have version X.Y.A from the libfoo library, the newer X.Y.B will be compatible to the old one. This is generally true but not always. Plus you need to have some knowledge of the dependency graph of your installed packages. Anyway, if you want to take the risk, simply go to the pkgsrc's directory for the outdated packages and run &lt;tt>make replace&lt;/tt> in them. In most cases this works and is the fastest way to do minor updates.&lt;br />&lt;br />Things get worse when you have to update lots of stuff. The first and most obvious approach resorts to doing a clean reinstall. Start by issuing &lt;tt>pkg_delete -r "*"&lt;/tt> followed by wiping &lt;tt>/usr/pkg&lt;/tt> and &lt;tt>/var/db/pkg&lt;/tt>. Then rebuild your packages. The problems with this approach are that it introduces a huge downtime in the system — until you have rebuilt everything (which can take a long time), the tools won't be available — and that any build failure can prevent you from reconfiguring your system soon enough.&lt;br />&lt;br />Another approach involves using different installation prefixes for the old and new installations. I used to do that when working on major GNOME updates. To do this set &lt;tt>LOCALBASE&lt;/tt> to something like &lt;tt>/usr/pkg-YYYYMMDD&lt;/tt> (similarly for &lt;tt>PKG_SYSCONFBASE&lt;/tt>, &lt;tt>VARBASE&lt;/tt> and &lt;tt>PKG_DBDIR&lt;/tt>) where &lt;tt>YYYYMMDD&lt;/tt> is the date when you started the installation of that specific set of packages. Then install your packages as usual and at last create a &lt;tt>/usr/pkg&lt;/tt> symlink to point to the real directory. Do not change the date until you need to do major updates. When that time comes, change the date in your configuration to the current day; after that, pkgsrc will think that you don't have any packages installed so you can cleanly reinstall everything. Once you have finished installing all your packages again, update the &lt;tt>/usr/pkg&lt;/tt> symlink to point to the new directory and remove the old one. Voila, minimum downtime and build failures cannot bother you. (However, you will need to migrate configuration files to the new tree, for example.)&lt;br />&lt;br />The last approach I can think of involves using &lt;tt>pkg_comp&lt;/tt>. Use this tool to configure a sandbox in which you build &lt;i>binary packages&lt;/i> for all the stuff you are interested in. You can even set up a cron job to do this rebuild weekly, for example, which is trivial using the tool's &lt;tt>auto&lt;/tt> target. Once &lt;tt>pkg_comp&lt;/tt> has generated a clean set of binary packages for you, you can proceed to update your real system with those packages. The way you proceed is up to you though. You can remove everything and do a clean reinstall (which should be a quick process anyway because you needn't rebuild anything!) or use &lt;tt>pkg_add -u&lt;/tt> for the outdated packages. I think this is the safest way to proceed.&lt;br />&lt;br />Oh, I now notice that there is a &lt;tt>pkg_rolling-replace&lt;/tt> utility that can also be used for updates. Dunno how it works though.&lt;br />&lt;br />Hope this makes any sense!&lt;br />&lt;br />&lt;b>Edit (22:15)&lt;/b>: Peter Bex refers us to the &lt;a href="http://wiki.netbsd.se/index.php/How_to_upgrade_packages">How to upgrade packages&lt;/a> page in the unofficial NetBSD Wiki. It contains all these tricks plus many more, so it is worth to link it from here for completeness.</description></item></channel></rss>