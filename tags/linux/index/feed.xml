<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/linux/index/</link><description>Recent content in linux on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 01 Jul 2023 16:30:00 -0700</lastBuildDate><atom:link href="https://jmmv.dev/tags/linux/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>ldd(1) and untrusted binaries</title><link>https://jmmv.dev/2023/07/ldd-untrusted-binaries.html</link><pubDate>Sat, 01 Jul 2023 16:30:00 -0700</pubDate><guid>https://jmmv.dev/2023/07/ldd-untrusted-binaries.html</guid><description>While diagnosing a non-determinism Bazel issue at work, I had to compare the dynamic libraries used by two builds of the same binary. To do so, I used &lt;code>ldd(1)&lt;/code> and I had to refer to its manual page to understand details of the output I had never paid attention to before. What I saw will surprise you: &lt;code>ldd&lt;/code> can end up &lt;em>running&lt;/em> the binary given to it, thus making it unsafe against untrusted binaries. Read on for the history I could find around this issue and what alternatives you have.</description></item><item><title>Waiting for process groups, Linux edition</title><link>https://jmmv.dev/2019/11/wait-for-process-group-linux.html</link><pubDate>Thu, 14 Nov 2019 11:30:00 +0000</pubDate><guid>https://jmmv.dev/2019/11/wait-for-process-group-linux.html</guid><description>In the previous post, we saw why waiting for a process group to terminate is important (at least in the context of Bazel), and we also saw why this is a difficult thing to do in a portable manner. So today, let&amp;rsquo;s dive into how to do this properly on a Linux system.
On Linux, we have two routes: using the child subreaper feature or using PID namespaces. We&amp;rsquo;ll focus on the former because that&amp;rsquo;s what we&amp;rsquo;ll use to fix (#10245) the process wrapper1, and because they are sufficient to fully address our problem.</description></item><item><title>Blacklisting a device in HAL</title><link>https://jmmv.dev/2008/06/blacklisting-device-in-hal.html</link><pubDate>Sun, 29 Jun 2008 08:11:00 -0400</pubDate><guid>https://jmmv.dev/2008/06/blacklisting-device-in-hal.html</guid><description>I have an old Aiptek mini PenCam 1.3 MPixels, identified by USB vendor 1276 and product 20554. I want to use this webcam for videoconferencing in the machine I am setting up for this purpose. This machine carries a Fedora 9 x86_64 installation, as already mentioned in the previous post.
Whenever I connect the camera to the machine, HAL detects the new device and then GNOME attempts to "mount" it using gphoto2.</description></item><item><title>Desktop effects with an nVidia card and Fedora 9</title><link>https://jmmv.dev/2008/06/desktop-effects-with-nvidia-card-and.html</link><pubDate>Sat, 28 Jun 2008 12:24:00 -0400</pubDate><guid>https://jmmv.dev/2008/06/desktop-effects-with-nvidia-card-and.html</guid><description>I'm setting up a machine at home to act as a videoconferencing station so that my family can easily talk to me during the summer, while I'm in NYC. This machine is equipped with an Athlon 64-bit processor and a nVidia GeForce 6200 PCI-Express video card. I decided to install Fedora 9 in this computer because this is the distribution I'm currently using everywhere (well, everywhere except on the Mac ;-).</description></item><item><title>lib64 problems</title><link>https://jmmv.dev/2008/06/lib64-problems.html</link><pubDate>Thu, 12 Jun 2008 11:10:00 -0400</pubDate><guid>https://jmmv.dev/2008/06/lib64-problems.html</guid><description>Linux distributions for the x86_64 platform have different approaches when it comes to the installation of 32-bit and 64-bit libraries. In a 64-bit platform, 64-bit libraries are required to run all the standard applications but 32-bit libraries need to be available to provide compatibility with 32-bit binaries. In this post, I consider 64-bit applications to be the native ones and the 32-bit to be foreign.
The two major approaches I have seen are:</description></item><item><title>Linux is just an implementation detail</title><link>https://jmmv.dev/2008/02/linux-is-just-implementation-detail.html</link><pubDate>Sat, 02 Feb 2008 09:32:00 -0500</pubDate><guid>https://jmmv.dev/2008/02/linux-is-just-implementation-detail.html</guid><description>You can't imagine how happy I was today when I read the interview with KDE 4's developer Sebastian Kuegler. Question 6 asks him:6. Are there any misconceptions about KDE 4 you see regularly and would like to address?And around the middle of the answer, he says:Frankly, I don’t like the whole concept of the “Linux Desktop”. Linux is really just a kernel, and in this case very much a buzzword. Having to mention Linux (which is just a technical implementation detail of a desktop system) suggests that something is wrong.</description></item><item><title>Past days' work</title><link>https://jmmv.dev/2007/12/past-days-work.html</link><pubDate>Fri, 07 Dec 2007 18:06:00 -0500</pubDate><guid>https://jmmv.dev/2007/12/past-days-work.html</guid><description>Been tracking and resolving a bug in Linux's SPU scheduler for the last three days, and fixed it just a moment ago! I'm happy and needed to mention this ;-)
More specifically, tracking it down was fairly easy using SystemTap and Paraver (getting the two to play well together was another source of headaches), but fixing it was the most complex thing due to deadlocks popping up over and over again.</description></item><item><title>Thanks, SystemTap!</title><link>https://jmmv.dev/2007/12/thanks-systemtap.html</link><pubDate>Sun, 02 Dec 2007 09:52:00 -0500</pubDate><guid>https://jmmv.dev/2007/12/thanks-systemtap.html</guid><description>I started this week's work with the idea of instrumenting the spufs module found in Linux/Cell to be able to take some traces of the execution of Cell applications. At first, I modified that module to emit events at certain key points, which were later registered in a circular queue. Then, I implemented a file in /proc so that a user-space application could read from it and free space from the queue to prevent the loss of events when it was full.</description></item><item><title>Hello world in Linux/ppc64</title><link>https://jmmv.dev/2007/11/hello-world-in-linuxppc64.html</link><pubDate>Sun, 25 Nov 2007 12:22:00 -0500</pubDate><guid>https://jmmv.dev/2007/11/hello-world-in-linuxppc64.html</guid><description>I'm decided to improve my knowledge on the Cell platform, and the best way to get started seems to be to learn 64-bit PowerPC assembly given that the PPU uses this instruction set. Learning this will open the door to do some more interesting tricks with the architecture's low-level details.
There are some excellent articles at IBM developerWorks dealing with this subject, and thanks to the first one in an introductory series to PPC64 I've been able to write the typical hello world program :-)</description></item><item><title>PFC report almost ready</title><link>https://jmmv.dev/2007/06/pfc-report-almost-ready.html</link><pubDate>Tue, 19 Jun 2007 11:25:00 -0400</pubDate><guid>https://jmmv.dev/2007/06/pfc-report-almost-ready.html</guid><description>The deadline for my PFC (the project that will conclude my computer science degree) is approaching. I have to hand out the final report next week and present the project on July 6th. Its title is "Efficient resource management in heterogeneous multiprocessor systems" and its basic goal is to inspect the poor management of such machines in current operating systems and how this situation could be improved in the future.</description></item><item><title>Building an updated kernel for the PS3</title><link>https://jmmv.dev/2007/03/building-updated-kernel-for-ps3.html</link><pubDate>Fri, 16 Mar 2007 04:25:00 -0400</pubDate><guid>https://jmmv.dev/2007/03/building-updated-kernel-for-ps3.html</guid><description>The mainstream Linux sources have some support for the PlayStation 3, but it is marked as incomplete. Trying to boot such a kernel results in a stalled machine, as the kernel configuration option says:
CONFIG_PPC_PS3: This option enables support for the Sony PS3 game console and other platforms using the PS3 hypervisor. Support for this platform is not yet complete, so enabling this will not result in a bootable kernel on a PS3 system.</description></item></channel></rss>