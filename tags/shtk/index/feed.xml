<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>shtk on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/shtk/index/</link><description>Recent content in shtk on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 11 Oct 2023 08:30:00 -0700</lastBuildDate><atom:link href="https://jmmv.dev/tags/shtk/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Unit-testing shell scripts and tools with shtk</title><link>https://jmmv.dev/2023/10/unit-testing-with-shtk.html</link><pubDate>Wed, 11 Oct 2023 08:30:00 -0700</pubDate><guid>https://jmmv.dev/2023/10/unit-testing-with-shtk.html</guid><description>&lt;p>While working on this static blog a few days ago, I made a change to its templates that warranted an automated test. I could have written a trivial shell script to do it, but instead I reached out for shtk&amp;rsquo;s unit-testing module. I &lt;a href="https://twitter.com/jmmv/status/1710309896670081083">tweeted about it&lt;/a> right away to just say that you can, in fact, write tests in shell because lots of developers are skeptical about any script longer than 10 lines of code.&lt;/p>
&lt;p>Interestingly, this reply came through: a pointer to a contemporary, under-development library for writing tests in Bash. Which made me think: &amp;ldquo;Hey, I had already done that years ago&amp;hellip; but nobody knows about it. Gotta fix that with a blog post!&amp;rdquo; But first, I had to bring shtk back from its ashes because I had not touched it for more than 6 years and it wasn&amp;rsquo;t read for show and tell. So I did something that I wanted to do back in the day but never did: I put together &lt;a href="https://shtk.jmmv.dev/">a website for shtk&lt;/a> to host its &lt;a href="https://shtk.jmmv.dev/docs.html">reference manual&lt;/a> and I fixed a few obvious rough edges.&lt;/p>
&lt;p>With those tweaks out of the way, we come to this article. In here, I want to show you how writing decent tests in shell is entirely possible and how shtk&amp;rsquo;s testing platform provides unique features to do integration testing of CLI apps written in any language.&lt;/p></description><enclosure url="https://jmmv.dev/images/2023-10-11-shell-hammer-wrench.jpg" length="398237" type="image/jpeg"/></item><item><title>Shell readability: function parameters</title><link>https://jmmv.dev/2018/03/shell-readability-function-parameters.html</link><pubDate>Fri, 02 Mar 2018 06:35:00 -0400</pubDate><guid>https://jmmv.dev/2018/03/shell-readability-function-parameters.html</guid><description>&lt;p>The shell supports defining functions, which, &lt;a href="https://jmmv.dev/2018/02/shell-readability-main.html">as we learned in the previous post&lt;/a>, you should embrace and use. Unfortunately, they are fairly primitive and their use can, paradoxically, introduce other readability problems.&lt;/p>
&lt;p>One specific problem is that &lt;strong>function parameters are numbered, not named&lt;/strong>, so the risk of cryptic code is high. Let&amp;rsquo;s see why this is a problem.&lt;/p></description></item><item><title>Shell readability: main</title><link>https://jmmv.dev/2018/02/shell-readability-main.html</link><pubDate>Mon, 26 Feb 2018 05:15:00 -0400</pubDate><guid>https://jmmv.dev/2018/02/shell-readability-main.html</guid><description>Our team develops Bazel, a Java-based tool. We do have, however, a significant amount of shell scripting. The percentage is small at only 3.6% of our codebase&amp;hellip; but given the size of our project, that&amp;rsquo;s about 130,000 linesâ€”a lot, really.
Pretty much nobody likes writing these integration tests in shell. Leaving aside that our infrastructure is clunky, the real problem is that the team at large is not familiar with writing shell per se.</description></item><item><title>shtk 1.6 is now available</title><link>https://jmmv.dev/2014/11/shtk-16-is-now-available.html</link><pubDate>Mon, 17 Nov 2014 15:28:00 -0500</pubDate><guid>https://jmmv.dev/2014/11/shtk-16-is-now-available.html</guid><description>The Shell Toolkit, or shtk for short, is a little project I introduced back in August of 2008 to support other tools such as sysbuild and sysupgrade. Since that time, the project has seen little activity because it did not have much to offer and because shtk's public interface was not documented (hence making it impossible for developers to get started with shtk).
Well, both are changing today with the brand-new release of shtk 1.</description></item><item><title>'Hello GitHub!' say shtk, sysbuild and sysupgrade</title><link>https://jmmv.dev/2013/07/hello-github-say-shtk-sysbuild-and.html</link><pubDate>Sun, 28 Jul 2013 20:00:00 -0400</pubDate><guid>https://jmmv.dev/2013/07/hello-github-say-shtk-sysbuild-and.html</guid><description>Over a year ago, I developed two command line utilities for NetBSD (sysbuild and sysupgrade) and a supporting library for the two tools (shtk). These were all introduced in their corresponding blog posts &amp;mdash;Introducing sysbuild for NetBSD, Introducing sysupgrade for NetBSD and Introducing shtk&amp;mdash; and since then I have heard good comments about them.
About a couple of weeks ago, I started working on the much-needed rewrite of pkg_comp and a supporting standalone tool.</description></item><item><title>Introducing shtk</title><link>https://jmmv.dev/2012/08/introducing-shtk.html</link><pubDate>Wed, 15 Aug 2012 17:39:00 -0400</pubDate><guid>https://jmmv.dev/2012/08/introducing-shtk.html</guid><description>Have you ever wanted to have a collection of ready-to-use modules for shell scripts? I have, particularly because I keep reimplementing the same functions over and over and over and over again whenever I write non-trivial shell scripts, and I'm tired of doing so.
That's why I have just abstracted all the common code in the aforementioned tools and put it into a new package called the "Shell Toolkit", or shtk for short.</description></item></channel></rss>