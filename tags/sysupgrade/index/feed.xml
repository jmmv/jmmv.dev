<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sysupgrade on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/sysupgrade/index.html</link><description>Recent content in Sysupgrade on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2024 Julio Merino</copyright><lastBuildDate>Mon, 24 Aug 2020 06:30:00 -0400</lastBuildDate><atom:link href="https://jmmv.dev/tags/sysupgrade/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>rc.d belongs in libexec, not etc</title><link>https://jmmv.dev/2020/08/rcd-libexec-etc.html</link><pubDate>Mon, 24 Aug 2020 06:30:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2020/08/rcd-libexec-etc.html</guid><description>The scripts that live under /etc/rc.d/ in FreeBSD, NetBSD, and OpenBSD are in the wrong place. They all should live in /libexec/rc.d/ because they are code, not configuration. Let&amp;rsquo;s look at the history of these systems to see how we got here, why this is problematic, and how things would look like in a better world.</description></item><item><title>Moving projects to GitHub</title><link>https://jmmv.dev/2014/02/moving-projects-to-github.html</link><pubDate>Thu, 06 Feb 2014 07:12:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2014/02/moving-projects-to-github.html</guid><description>&lt;p>For a couple of years or so, I have been hosting my open source projects in Google Code. The time to jump ship has come.&lt;/p> &lt;p>The major reason for this move is that &lt;a href="http://google-opensource.blogspot.com/2013/05/a-change-to-google-code-download-service.html">Google Code stopped supporting file downloads&lt;/a> three weeks ago. This is unfortunate given that "binary" releases are a must for proper software distribution. Sure, I could use a third-party service like &lt;a href="https://bintray.com/">Bintray&lt;/a> to offer the downloads, but I'd rather consolidate all project data in a single location.&lt;/p></description></item><item><title>'Hello GitHub!' say shtk, sysbuild and sysupgrade</title><link>https://jmmv.dev/2013/07/hello-github-say-shtk-sysbuild-and.html</link><pubDate>Sun, 28 Jul 2013 20:00:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2013/07/hello-github-say-shtk-sysbuild-and.html</guid><description>&lt;p>Over a year ago, I developed two command line utilities for NetBSD (sysbuild and sysupgrade) and a supporting library for the two tools (shtk). These were all introduced in their corresponding blog posts &amp;mdash;&lt;a href="https://jmmv.dev/2012/07/introducing-sysbuild-for-netbsd.html">Introducing sysbuild for NetBSD&lt;/a>, &lt;a href="https://jmmv.dev/2012/08/introducing-sysupgrade.html">Introducing sysupgrade for NetBSD&lt;/a> and &lt;a href="https://jmmv.dev/2012/08/introducing-shtk.html">Introducing shtk&lt;/a>&amp;mdash; and since then I have heard good comments about them.&lt;/p> &lt;p>About a couple of weeks ago, I started working on the much-needed rewrite of pkg_comp and a supporting standalone tool. I was using the same development methodology as with the other three projects: putting all the code in pkgsrc and implementing the build system from the package's &lt;tt>Makefile&lt;/tt>. Along the way, this became increasingly annoying to the point where I could not stand it any more. pkgsrc is a packaging system, not a development platform. Developing a project within it is difficult due to the indirections between the outer &lt;tt>Makefile&lt;/tt> and the work directory, and the expected workflow of working with packages. &lt;p>A separate issue is that having the source code in pkgsrc prevents the distribution of the packages as standalone tools for third-party operating systems. (Mind you: I've recently started building NetBSD from Linux and FreeBSD and missed sysbuild dearly.) It's hard and ugly (but not impossible) to generate tarballs for the sources in pkgsrc that can later be hosted elsewhere... and, even if doing that, using pkgsrc as the master tree for the code would seem backwards.&lt;/p></description></item><item><title>Introducing shtk</title><link>https://jmmv.dev/2012/08/introducing-shtk.html</link><pubDate>Wed, 15 Aug 2012 17:39:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2012/08/introducing-shtk.html</guid><description>Have you ever wanted to have a collection of ready-to-use modules for shell scripts? I have, particularly because I keep reimplementing the same functions over and over and over and over again whenever I write non-trivial shell scripts, and I'm tired of doing so.&lt;br />&lt;br />That's why I have just abstracted all the common code in the aforementioned tools and &lt;a href="http://mail-index.netbsd.org/pkgsrc-changes/2012/08/15/msg077072.html">put it into a new package called the "Shell Toolkit", or shtk for short&lt;/a>. Yeah, this name sounds very pretentious but, really, I don't intend this to be anything big. The only thing I want to do is simplify my life when implementing shell scripts, and hope that other people might find the modules useful. So far, I have taken the generic (and common!) code from sysbuild and sysupgrade, reconciled a few tiny divergences, and moved it into this new shtk package.&lt;br />&lt;br class="Apple-interchange-newline" />In reality, writing something like shtk is sin-borderline. I really should not be using shell scripting for the kind of tools I am implementing (they deserve better data structures and better error checking than what shell provides, for example). However, shell scripting is incredible convenient to get reasonably-good implementations of such tools with minimal effort, and is the only scripting language available in NetBSD's base system. (Yes, yes, there is Lua, but my limited knowledge of Lua would not let me write these tools in any decent manner nor in any reasonable time.)&lt;br />&lt;div>&lt;br />&lt;/div>So, what's in shtk? There are a few functions to deal with command lines (error/warning reporting and such things), some trivial stuff to deal with lists, a bunch of code to interact with cvs and, what I like the most, a module to implement configuration files with some kind of key/value validation.&lt;br />&lt;br />At the moment, shtk can only be found in pkgsrc under &lt;a href="http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/devel/shtk?only_with_tag=MAIN">pkgsrc/devel/shtk&lt;/a>&amp;nbsp;and I don't currently have any plans to make it more widely available. If there are enough people interested in that with real needs, I could reconsider, but the maintenance effort would be non-trivial.&lt;br />&lt;br />To showcase the features of shtk, I have updated the sysbuild and sysupgrade packages to depend on this new toolkit while at the same time dropping all this duplicate supporting code. It's a good thing that I wrote exhaustive tests for all possible code paths, because the migration from the built-in modules to shtk was riddled with subtleties that would have impacted end users otherwise.&lt;br />&lt;br />Now... time to really consider taking the task of rewriting pkg_comp in a more&amp;nbsp;maintainable&amp;nbsp;style so that I can add the features I have wished for for many years (like OS X support).</description></item><item><title>Introducing sysupgrade for NetBSD</title><link>https://jmmv.dev/2012/08/introducing-sysupgrade.html</link><pubDate>Mon, 06 Aug 2012 13:32:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2012/08/introducing-sysupgrade.html</guid><description>Over the last two weeks, you might have had fun &lt;a href="https://jmmv.dev/2012/07/introducing-sysbuild-for-netbsd.html">rolling your own NetBSD binary releases with sysbuild&lt;/a>. But what fun is that if you have no trivial way of upgrading your existing NetBSD installation to a newer version?&lt;br />&lt;br />Upgrading NetBSD to a newer version from distribution sets generally looks like the following;&lt;br />&lt;ol>&lt;li>Fetch new distribution sets (or roll your own).&lt;/li>&lt;li>Upgrade the kernel.&lt;/li>&lt;li>Unpack the distribution sets over the root directory, without fat-fingering the command and unpacking &lt;tt>etc.tgz&lt;/tt> along the way.&lt;/li>&lt;li>Use &lt;tt>etcupdate&lt;/tt> to merge new changes to configuration files.&lt;/li>&lt;li>Use &lt;tt>postinstall&lt;/tt> to validate the upgraded system.&lt;/li>&lt;/ol>&lt;b>Simple? Yes. Easy? No.&lt;/b> The above procedure is obscure to anyone new to NetBSD. (Actually, if you tell anybody that the way to upgrade your machine is by unpacking tarballs over &lt;tt>/&lt;/tt> will stare at you thinking you are kidding. It's 2012.) "Jokes" aside, what is worse is that the procedure is quite monotonous and, therefore, it is very easy for the administrator to make a trivial mistake along the way and screw up a running system. (Been there, done that... multiple times.)&lt;br />&lt;br />Machines are made to automate trivial and repetitive tasks like the above, and they are actually very good at that. Over the years, I have performed NetBSD updates manually and later written crappy, unreliable scripts to do the upgrades for me. These scripts have never been reusable and they haven't dealt with error conditions gracefully. Furthermore, because these scripts live in my home directory, I have to remember to carry them around every time I set up a new NetBSD box.&lt;br />&lt;br />It was about time I sat down and rewrote my custom scripts into something more "decent". Something with documentation, with a configuration file, and with tests.&lt;br />&lt;br />So today, and for all the reason above, I am &lt;a href="http://mail-index.netbsd.org/pkgsrc-changes/2012/08/06/msg076544.html">introducing sysupgrade&lt;/a>.&lt;br />&lt;br />sysupgrade is a script that automates (trivializes) the whole process of upgrading an existing NetBSD installation to a newer release,&amp;nbsp;be it the currently-running system or a non-live system. sysupgrade does so by following the steps outlined above and is coordinated by a configuration file. You can find the tool in &lt;a href="http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/sysutils/sysupgrade/?only_with_tag=MAIN">&lt;span id="goog_1890316919">&lt;/span>pkgsrc/sysutils/sysupgrade&lt;span id="goog_1890316920">&lt;/span>&lt;/a>, next to sysbuild. The bundled &lt;tt>sysupgrade(8)&lt;/tt> and &lt;tt>sysupgrade.conf(5)&lt;/tt> manual pages, and the default &lt;tt>sysupgrade.conf&lt;/tt> configuration file should get you started and hopefully answer most of your questions.&lt;br />&lt;br />For the impatient, the following command would upgrade your machine to the specified version target:&lt;br />&lt;br />&lt;tt>$ sysupgrade auto &lt;/tt>&lt;br />&lt;tt>&amp;nbsp; &amp;nbsp; ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-&amp;lt;X.Y.Z&amp;gt;/$(uname -m)&lt;/tt>&lt;br />&lt;br />At the moment, please consider sysupgrade to be experimental. It works well for me on my various machines (running both NetBSD 6.0 BETA and -current), and I have been using the upgrade procedure outlined above for years without issues. However, as with any shiny-new software, be careful. If you use NetBSD on a virtual machine, take a snapshot before running this tool; I don't think your machine is going to blow up, but better safe than sorry!&lt;br />&lt;br />Enjoy, and feedback very welcome!&lt;br />&lt;br />PS: There is lots of room for improvement. The &lt;tt>TODO&lt;/tt> file in the package directory includes some of the ideas I'd like to work on later.</description></item></channel></rss>