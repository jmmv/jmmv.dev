<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Boost-Process on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/boost-process/index.html</link><description>Recent content in Boost-Process on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&#150;2025 Julio Merino</copyright><lastBuildDate>Sun, 21 Jun 2009 13:40:00 -0400</lastBuildDate><atom:link href="https://jmmv.dev/tags/boost-process/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Child-process management in C for ATF</title><link>https://jmmv.dev/2009/06/child-process-management-in-c-for-atf.html</link><pubDate>Sun, 21 Jun 2009 13:40:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2009/06/child-process-management-in-c-for-atf.html</guid><description>Let's face it: spawning child processes in Unix is a "mess". Yes, the interfaces involved (fork, wait, pipe) are really elegant and easy to understand, but every single time you need to spawn a new child process to, later on, execute a random command, you have to write quite a bunch of error-prone code to cope with it. If you have ever used any other programming language with higher-level abstraction layers — just check Python's subprocess.Popen — you surely understand what I mean.&lt;div>&lt;br />&lt;div>&lt;div>The current code in ATF has many places were child processes have to be spawned. I recently had to add yet another case of this, and... enough was enough. Since then, I've been working on a C API to spawn child processes from within ATF's internals and just pushed it to the repository. It's still fairly incomplete, but with minor tweaks, it'll keep all the dirty details of process management contained in a single, one-day-to-be-portable module.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>The interface tries to mimic the one that was designed on my Boost.Process Summer of Code project, but in C, which is quite painful. The main idea is to have a fork function to which you pass the subroutine you want to run on the child, the behavior you want for the stdout stream and the behavior you want for the stderr steam. These behaviors can be any of capture (aka create pipes for IPC communcations), silence (aka redirect to /dev/null), redirect to file descriptor and redirect to file. For simplicity, I've omitted stdin. With all this information, the fork function returns you an opaque structure representing the child, from which you can obtain the IPC channels if you requested them and on which you can wait for finalization.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>Here is a little example, with tons of details such as error handling or resource finalization removed for simplicity. The code below would spawn "/bin/ls" and store its output in two files named ls.out and ls.err:&lt;/div>&lt;pre>static&lt;br />atf_error_t&lt;br />run_ls(const void *v)&lt;br />{&lt;br /> system("/bin/ls");&lt;br /> return atf_no_error();&lt;br />}&lt;br />&lt;br />static&lt;br />void&lt;br />some_function(...)&lt;br />{&lt;br /> atf_process_stream_t outsb, errsb;&lt;br /> atf_process_child_t child;&lt;br /> atf_process_status_t status;&lt;br />&lt;br /> atf_process_status_init_redirect_path(&amp;amp;outsb, "ls.out");&lt;br /> atf_process_status_init_redirect_path(&amp;amp;errsb, "ls.err");&lt;br />&lt;br /> atf_process_fork(&amp;amp;child, run_ls, &amp;amp;outsb, &amp;amp;errsb, NULL);&lt;br /> ... yeah, here comes the concurrency! ...&lt;br /> atf_process_child_wait(&amp;amp;child, &amp;amp;status);&lt;br />&lt;br /> if (atf_process_status_exited(&amp;amp;status))&lt;br /> printf("Exit: %dn", atf_process_status_exitstatus(&amp;amp;status));&lt;br /> else&lt;br /> printf("Error!");&lt;br />}&lt;/pre>&lt;div>Yeah, quite verbose, huh? Well, it's the price to pay to simulate namespaces and similar other things in C. I'm not too happy with the interface yet, though, because I've already encountered a few gotchas when trying to convert some of the existing old fork calls to the new module. But, should you want to check the whole mess, &lt;a href="http://mtn-host.prjek.net/viewmtn/atf/revision/info/3ba2af4ab1cad67108c3fb1aea15e8e0168667ff">check out the corresponding revision&lt;/a>.&lt;/div>&lt;/div>&lt;/div></description></item><item><title>Boost.Process and SIGCHLD</title><link>https://jmmv.dev/2008/10/boostprocess-and-sigchld.html</link><pubDate>Sat, 18 Oct 2008 21:46:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2008/10/boostprocess-and-sigchld.html</guid><description>For some unknown reason, I'm regaining interest in Boost.Process lately.  I guess many of the people who have written me in the past asking for the status of the library will be happy to hear this, but I can't promise I will stick to coding it for long.  I have to say that I have received compliments from quite a few people...  thanks if you are reading and sorry if I did not reply you at all.&lt;div>&lt;br />&lt;/div>&lt;div>Anyway.  So I downloaded my code and ran the unit tests under Mac OS X to make sure that everything still worked before attempting to do any further coding.  Oops, lots of failures!  All tests spawning a child process broke due to an EINTR received by waitpid(2).  That doesn't look good; it certainly didn't happen before.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>After these failures, I tried the same thing under Linux to make sure that the failures were not caused by some compatibility issue with Mac OS X.  Oops, failures again! Worrisome.  The curious thing is that the tests &lt;span class="Apple-style-span" style="font-style: italic;">do&lt;/span> work in Win32 &amp;mdash; but that can be somewhat expected because all the internal code that does the real work is platform-specific.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>Curiously, though, running the examples (not the tests, but the sample little programs distributed as part of the library documentation) did not raise any errors. Hence, I tried to run gdb on the actual tests to see if the debugger could shed any light on the failures.  No way.  Debugging the unit tests this way is not easy because Boost.Test does a lot of bookkeeping itself &amp;mdash; yeah, newer versions of the library have cool features for debugging, but they don't work on OS X.  Hmm, so what if I run gdb on the examples? Oh! The problem magically appears again.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>It has taken me a long while to figure out the problem. Along the process, I have gone through thoughts of memory corruption issues and race conditions. In the end, the response was much simpler: it all turns out to SIGCHLD (as the error code returned by waitpid(2) well said).&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>SIGCHLD is received by a process whenever any of its children change status (e.g. terminates execution). The default behavior of the signal handler for SIGCHLD is to discard the signal. Therefore, when this signal is received, no system calls are aborted because it is effectively discarded. However, it turns out that newer versions of Boost.Test install signal handlers for a lot of signals (all?) to allow the test monitor to capture unmanaged signals and report them as errors. Similarly, gdb also installs a signal handler for SIGCHLD. As a result, Boost.Process does not work when run under gdb or Boost.Test because the blocking system calls in the library do not deal with EINTR, but it actually works for non-test programs run out of the debugger.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>The first solution I tried was to simply retry the waitpid(2) whenever an EINTR error was received. This fixes the problem when running the tests under gdb. Unfortunately, the test cases are signaled as failed anyway because the test monitor still receives SIGCHLD and considers it a failure.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>The second solution I have implemented consists on resetting the SIGCHLD handler to its default behavior when Boost.Process spawns a new child and restoring the old SIGCHLD handler when the last child managed by Boost.Process is awaited for.  Eventually, the library could do something useful with the signal, but discarding it seems to be good enough for now.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>This second solution is the one that is going to stay, probably, unless you have any other suggestion. I still feel it is a bit fragile, but can't think of anything better. For example: what if the user of Boost.Process had already programmed a handler for SIGCHLD? I just think that such a case shouldn't be considered because, after all, if you are using Boost.Process to manage children processes, you shouldn't have to deal with SIGCHLD on your own as long as the library provides a correct abstraction for it.&lt;/div></description></item><item><title>Cross-platform development with Parallels</title><link>https://jmmv.dev/2007/04/cross-platform-development-with.html</link><pubDate>Mon, 02 Apr 2007 10:35:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2007/04/cross-platform-development-with.html</guid><description>These days I'm seizing some of my free time to continue what I did as my SoC 2006 project: the &lt;a href="https://www.boost-consulting.com:8443/trac/soc/wiki/process">Boost.Process library&lt;/a>. There is still a lot of work to be done, but some items are annoying enough to require early attention (well, I can't speak of "early" because I hadn't touched the code for months).&lt;br />&lt;br />Boost.Process aims to be a cross-platform library and currently works under POSIX-based systems (such as Linux, NetBSD or Mac OS X) as well as under Win32 systems. However, developing such a thing is not easy if you don't have concurrent access to both systems to test your code as you go. That is because, past summer, Win32 support was "second class": I first coded everything under NetBSD and, eventually, I fired up my Windows XP installation and fixed any problems that arised due to the new code. This was suboptimal and really slowed down the development of the library.&lt;br />&lt;br />Now, with a MacBook Pro and &lt;a href="http://www.parallels.com/en/download/desktop/">Parallels Desktop for Mac&lt;/a>, these issues have gone away. I can now code under whichever system I want and immediately test my changes on the other system without having to reboot! It's so convenient...&lt;br />&lt;br />And, with Coherence mode, everything is so transparent... just check out the following screenshot:&lt;br />&lt;br />&lt;a href="http://2.bp.blogspot.com/_xLbGV919cEE/RhEWq-D3ttI/AAAAAAAAAAc/RtnUxOaBWw4/s1600-h/Parallels.png">&lt;img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;" src="https://jmmv.dev/images/2007-04-02-Parallels.png" />&lt;/a>&lt;br />To make things better I could share the project's code over the virtual network to avoid having to commit changes to the public repository before having tested them on the two systems. If you inspect the logs, you'll see many "Add feature X" commits followed by a "Fix previous under Win32". But it is a minor issue right now.&lt;br />&lt;br />Kudos to the Parallels developers, who made this possible and &lt;i>painless&lt;/i>. I now understand the "computer as a tool" paradigm rather than a "computer as a hobby".</description></item><item><title>Mac OS X vs. Ubuntu: Introduction</title><link>https://jmmv.dev/2006/09/mac-os-x-vs-ubuntu-introduction.html</link><pubDate>Thu, 28 Sep 2006 07:07:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2006/09/mac-os-x-vs-ubuntu-introduction.html</guid><description>&lt;p>About a week ago, my desktop machine was driving me crazy because I couldn&amp;rsquo;t comfortably work on anything other than &lt;a href="http://www.NetBSD.org/">NetBSD&lt;/a> and &lt;a href="http://www.pkgsrc.org/">pkgsrc&lt;/a> themselves. With &amp;ldquo;other work&amp;rdquo; I&amp;rsquo;m referring to Boost.Process and, most importantly, university assignments. Given my painless experience with the iBook G4 laptop I&amp;rsquo;ve had for &lt;a href="https://jmmv.dev/2005/11/got-new-laptop-ibook-12.html">around a year&lt;/a>, I was decided to replace the desktop machine with a Mac&amp;mdash;most likely a brand-new iMac 20&amp;quot;&amp;mdash;to run &lt;a href="http://www.apple.com/macosx/">Mac OS X&lt;/a> on top of it exclusively&amp;mdash;OK, OK, alongside Windows XP to satisfy the eventual willingness to play some games.&lt;/p></description></item><item><title>What have I learned during SoC?</title><link>https://jmmv.dev/2006/08/what-have-i-learned-during-soc.html</link><pubDate>Tue, 22 Aug 2006 05:05:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2006/08/what-have-i-learned-during-soc.html</guid><description>One of SoC's most important goals is the introduction of students to the free software world; this way there are high chances that they will keep contributing even when SoC is over. Students already familiar with FOSS (as was my case both years) are also allowed to participate because they can seize the Summer to learn new stuff and improve their skills.&lt;br />&lt;br />As I expected, the development of Boost.Process has taught me multiple new things. First of all, I wanted to get familiar with the Win32 API because I knew nothing about it. I have achieved this objective by learning the details about process and file management and making Boost.Process work under this platform. Sincerely, Win32 is overly complex but has some interesting features.&lt;br />&lt;br />Secondly, I have got a lot more fluent with C++ templates and have learned some curious coding techniques that I never thought about in the past. The most impressive one in my opinion is that templates can be used to achieve build time specialization, avoiding expensive virtual tables at run time and inheritance when these are not really needed. (I only considered them for polimorphic containers before.)&lt;br />&lt;br />At last, I have also got into several utilities used for Boost development. Among them are Quickbook for easy document writing, Boost.Build v2 for portable software building and the Boost Unit Test library for painlessly creating automated test suites.&lt;br />&lt;br />All in all I'm happy with the outcome of the project and the new knowledge. If SoC happens again, you should really consider joining if you have the chance!</description></item><item><title>Boost.Process 0.1 published</title><link>https://jmmv.dev/2006/08/boostprocess-01-published.html</link><pubDate>Mon, 21 Aug 2006 16:36:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2006/08/boostprocess-01-published.html</guid><description>SoC 2006 is officially over &amp;mdash; at least for me in my timezone. Given that the Subversion repository has some problems with public access, I've tagged the current sources as the first public version and uploaded a couple of tarballs to the &lt;a href="http://boost-consulting.com/vault/index.php?">Boost Vault&lt;/a>. Both the tag and the tarballs will also serve historical purposes, specially when newer ones come ;-)&lt;br />&lt;br />You can download the archives from the &lt;a href="http://boost-consulting.com/vault/index.php?&amp;direction=0&amp;amp;order=&amp;directory=Process">Process&lt;/a> directory in &lt;a href="http://boost-consulting.com/vault/index.php?action=downloadfile&amp;amp;filename=process-0.1.tar.gz&amp;directory=Process&amp;amp;">tar.gz&lt;/a> and &lt;a href="http://boost-consulting.com/vault/index.php?action=downloadfile&amp;filename=process-0.1.zip&amp;amp;directory=Process&amp;">ZIP&lt;/a> formats. Enjoy!</description></item><item><title>Boost.Process tarballs posted</title><link>https://jmmv.dev/2006/08/boostprocess-tarballs-posted.html</link><pubDate>Thu, 17 Aug 2006 07:56:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2006/08/boostprocess-tarballs-posted.html</guid><description>As everybody is not comfortable accessing Subversion repositories to download source code, I've posted two tarballs with Boost.Process' sources. They include an exported copy of the repository contents as well as prebuilt documentation in the &lt;tt>libs/process/doc/html&lt;/tt> subdirectory.&lt;br />&lt;br />You can download the compressed archive either in &lt;a href="http://www.netbsd.org/%7Ejmmv/process.tar.gz">tar.gz&lt;/a> format or in &lt;a href="http://www.netbsd.org/%7Ejmmv/process.zip">ZIP&lt;/a>. Keep in mind that these will be updated very frequently so please do not use them to prepackage the library.&lt;br />&lt;br />Changes from yesterday's announcement are minor at this point. For the curious ones: there is now a list of &lt;a href="http://www.netbsd.org/%7Ejmmv/process/boost_process/pending_work.html">pending work&lt;/a> and the &lt;i>Last revised&lt;/i> item in the main page has been fixed. As a side effect of this last change, Boostbook will support SVN's &lt;tt>$Date$&lt;/tt> tags if &lt;a href="http://lists.boost.org/Archives/boost/2006/08/109248.php">my patch&lt;/a> is integrated :-)</description></item><item><title>SoC: Boost.Process published</title><link>https://jmmv.dev/2006/08/soc-boostprocess-published.html</link><pubDate>Wed, 16 Aug 2006 16:59:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2006/08/soc-boostprocess-published.html</guid><description>In a rush to publish Boost.Process before the &lt;span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_0">SoC&lt;/span> deadline arrives, I've been working intensively during the past two days to polish some issues raised by my mentor. First of all I've added some Win32-specific classes so that the library does not seem Unix-only. These new classes provide functionality only available under Windows and, on the documentation side, they come with a couple of extra examples to demonstrate their functionality.&lt;br />&lt;br />Speaking of &lt;a href="http://www.NetBSD.org/%7Ejmmv/process/">documentation&lt;/a>, it has been improved &lt;span style="font-style: italic;">a lot&lt;/span>. The usage chapter has been rewritten almost completely; it has gained a couple of tutorials and all the platform-specific details in it have been moved to two new chapters. One of them focuses on explaining those features available only under a specific operating system while the other summarizes multiple portability issues that may arise when using the generic classes. Additionally, a chapter about supported systems and compilers has been added.&lt;br />&lt;br />There are still two big things missing that shall be worked on in the (very) short term: add a design decisions chapter to the documentation and incorporate asynchronous functionality to the library by using &lt;a href="http://asio.sourceforge.net/">Boost.&lt;span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_1">Asio&lt;/span>&lt;/a>. This last thing is needed to keep things simple from the user 's point of view (i.e. no threads on his code).&lt;br />&lt;br />Check out the &lt;a href="http://lists.boost.org/Archives/boost/2006/08/109219.php">official announcement&lt;/a> for more details.&lt;br />&lt;br />I guess that this closes SoC for me this year. There are still going to be some changes before Monday but don't expect anything spectacular (I'll be away during the weekend... hopefully ;-). But don't be afraid! Work on this project will continue afterwards!</description></item><item><title>SoC: Status report 3</title><link>https://jmmv.dev/2006/08/soc-status-report-12.html</link><pubDate>Sat, 12 Aug 2006 12:12:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2006/08/soc-status-report-12.html</guid><description>Only 8 more days and SoC will be officially over... Time has passed very fast and my project required much more work than I initially thought. It certainly cannot be completed before the deadline but I assure you that it will not fall into oblivion afterwards; I have spent too much time on it to forget ;-)&lt;br />&lt;br />There have been many changes in Boost.Process' code base since the &lt;a href="http://julipedia.blogspot.com/2006/07/soc-status-report-2.html">previous&lt;/a> status report; let's see a brief summary:&lt;br />&lt;ul>&lt;li>The library has been simplified removing all those bits that were aimed at "generic process management". Now it is focused on child process managing only, although extending it to support other process-related functionality is still possible (preserving compatibility with the current API). It'll be better to design and implement these features when really needed because they will require &lt;i>a lot&lt;/i> of work and cannot be planned right now; doing so might result in an incomplete and clusmy design. Yup... my mentor (Jeff Garland) was right when he suggested to go this simplified route at the very beginning!&lt;/li>&lt;li>Due to the above simplifications, some classes are not templated any more (the stuff that depended on the template parameters is now gone). I bet some of them could still be, but this can be easily changed later on.&lt;br />&lt;/li>&lt;li>There is now a specialized launcher in the library to painlessly start command pipelines. This also comes with a helper process group class to treat the set of processes as a unique entity.&lt;/li>&lt;li>The user now has much more flexibility to specify how a child process' channels behave. While documenting the previous API it became clear that it was incomplete and hard to understand.&lt;/li>&lt;li>Code from all launchers has been unified in a base private class to avoid duplication and ensure consistency across those classes. Similar changes have ocurred in the test suite, which helped in catching some obscure problems.&lt;/li>&lt;li>Related to previous, many of the code used to do the actual task of spawning a process has been moved out of the individual launcher classes into some generic private functions. This was done to share more code, improve cohesion and readability.&lt;br />&lt;/li>&lt;li>The documentation is now much better, although it still lacks a chapter about design issues. See the &lt;a href="http://www.NetBSD.org/%7Ejmmv/process/">online snapshot&lt;/a> for more details.&lt;/li>&lt;li>And, of course, multiple bug fixes and cleanups.&lt;br />&lt;/li>&lt;/ul>Still, I haven't had a chance to ask for a public review in Boost's developers mailing list. The problem is that I continously find things to improve or to complete and prefer to do them before asking for the review. However, as time is running out I'll be forced to do this in the forthcoming week to get some more feedback in time.</description></item><item><title>SoC: Playing with Doxygen</title><link>https://jmmv.dev/2006/07/soc-playing-with-doxygen.html</link><pubDate>Wed, 26 Jul 2006 12:10:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2006/07/soc-playing-with-doxygen.html</guid><description>My Boost.Process prototype is almost feature complete; the major thing that is still not included is the ability to create pipelines. I should address that as soon as possible because I'm afraid it will have some impact on the existing classes, but for now I wanted to start documenting some code. There are already 21 header files to document and doing so is by no means an easy task.&lt;br />&lt;br />In order to document the library's API I've decided to use &lt;a href="http://www.stack.nl/%7Edimitri/doxygen/">Doxygen&lt;/a>, a documentation system for multiple languages including, obviously, C++. Doxygen scans your source files looking for special comments that document classes, methods and any other part of the code. Then, the comments are extracted alongside with the code structure and are used to automatically generate reference documentation in whichever format you want (HTML, LaTeX, XML, etc.).&lt;br />&lt;span class="down" style="display: block;" id="formatbar_CreateLink" title="Link" onmouseover="ButtonHoverOn(this);" onmouseout="ButtonHoverOff(this);" onmouseup="" onmousedown="CheckFormatting(event);FormatbarButton('richeditorframe', this, 8);ButtonMouseDown(this);">&lt;/span>&lt;br />Doxygen is &lt;a href="http://www.stack.nl/%7Edimitri/doxygen/projects.html">widely used&lt;/a> and nicely integrated within Boost.Build. Boost's build system automatically generates the required configuration file for Doxygen (the &lt;tt>Doxyfile&lt;/tt>) and lets you merge the resuting files with your other BoostBook (or QuickBook) documents painlessly.&lt;br />&lt;br />So far I like this tool very much. Keeping the documentation alongside the source code helps in keeping it consistent and makes it immediately available to the curious developer reading the code. Furthermore, it provides tags to format anything you can imagine: preconditions, postconditions, thrown exceptions, results, etc.&lt;br />&lt;br />The results? Take a look at the Reference section in the &lt;a href="http://www.netbsd.org/%7Ejmmv/process/">Boost.Process' manual&lt;/a> ;-) At the moment of this writing only the classes in the &lt;tt>detail&lt;/tt> subdirectory are documented, which correspond to sections 5.10 through 5.13.</description></item><item><title>SoC: Status report 2</title><link>https://jmmv.dev/2006/07/soc-status-report-21.html</link><pubDate>Fri, 21 Jul 2006 07:36:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2006/07/soc-status-report-21.html</guid><description>Another week has passed and I'm happy to announce that the &lt;a href="https://www.boost-consulting.com:8443/trac/soc/wiki/process/Prototype">Boost.Process prototype&lt;/a> is now completely ported to the Win32 API. In other words, a program can use the current library to transparently manage child processes both from Windows and Unix systems.&lt;br />&lt;br />There are still several rough edges and incomplete classes but the code passes the test suite on both systems :-) OK, you know that passing a test suite does &lt;i>not&lt;/i> mean that the code is correct; it only means that it complies with the existing tests. So... more tests are needed to spot the existing failures.&lt;br />&lt;br />I'm now going to clean up some parts of the code that make little sense after the huge rototill to port the code to Win32; basically, the internal &lt;tt>pipe&lt;/tt> class and its usage. Then, I'll try to complete the missing Unix-specific bits.&lt;br />&lt;br />Why did I say a "huge rototill"? After starting to port some code to Windows, I discovered the CRT library. For a moment, I thought that the porting could be easy, given that this supports the standard POSIX file descriptors and calls (open(2), read(2), etc.). Unfortunately, I quickly realized that using the CRT could not integrate well with the native Win32 API; and worse, I discovered that Windows only supports communicating with child processes through the three standard channels (stdin, stdout and stderr). This restriction has forced me to redo most of the existing design and code to offer a clean and common interface on both platforms; file descriptors are now hidden all around unless you explicitly want to see them.&lt;br />&lt;br />Of course this means that the classes used to launch child processes now only accept these three channels, something that is not powerful enough in a Unix system. In these OSes, processes may need to set up extra communcation pipes with children to retrieve additional information (dbus and GPG come to my mind), so there shall be POSIX-specific classes that allow this interface.&lt;br />&lt;br />I would like to finish the clean up and the addition of POSIX-specific code by the end of the month alongside some simple documentation (formal code examples). The idea is to be able to publish it for informal review soon afterwards (beginning of August).</description></item><item><title>SoC: Status report</title><link>https://jmmv.dev/2006/07/soc-status-report.html</link><pubDate>Thu, 13 Jul 2006 15:01:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2006/07/soc-status-report.html</guid><description>Mmm... SoC. Multiple things have been going on lately in my SoC project, yet I've kept you uninformed. As I &lt;a href="http://julipedia.blogspot.com/2006/05/soc-accepted-again.html">already told you&lt;/a>, my project aims to develop a C++ library for the &lt;a href="http://www.boost.org/">Boost&lt;/a> project to manage child processes; it's named &lt;a href="https://boost-consulting.com:8443/trac/soc/wiki/process">Boost.Process&lt;/a>.&lt;br />&lt;br />During June I discussed with Jeff Garland &amp;mdash; my mentor &amp;mdash; the &lt;a href="https://boost-consulting.com:8443/trac/soc/wiki/process/DesignThoughts">general design&lt;/a> of the library. The design is surely not final but it is a lot better than it was at its first sketches. For example: it makes use of templates where appropriate to let the user replace any part of the library with his own code (more or less). I must say he has been very patient with all my questions and has provided extremely valuable information.&lt;br />&lt;br />I also seized that month to investigate a bit the Win32 API because the library must work on Windows too. I couldn't do much more during that time because I was busy with semester's final exams. All passed by the way :-)&lt;br />&lt;br />And now to the interesting thing. I've spent the past week (almost two) implementing a preliminary prototype. It is still incomplete but has already raised &lt;a href="https://boost-consulting.com:8443/trac/soc/wiki/process/Prototype">many issues&lt;/a>; you know, it is hard to get into the details (that affect the design) without coding a bit. The prototype also includes multiple unit tests to ensure that everything works, as it shall be; Boost's &lt;a href="http://www.boost.org/libs/test/doc/components/utf/index.html">Unit Test Framework&lt;/a> is a really nice tool to implement them.&lt;br />&lt;br />&lt;a href="https://boost-consulting.com:8443/trac/soc/browser/boost/soc/2006/process/trunk">Browse the source code&lt;/a> for more details.</description></item><item><title>Win32: Mappings for Unicode support</title><link>https://jmmv.dev/2006/06/win32-mappings-for-unicode-support.html</link><pubDate>Wed, 14 Jun 2006 08:06:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2006/06/win32-mappings-for-unicode-support.html</guid><description>I have spent some time during the past few days to play with the Win32 API &lt;a href="http://julipedia.blogspot.com/2005/06/mfc-developing-for-windows.html">again&lt;/a> after a year since first looking at them. I must learn how to manage processes under Windows as part of my SoC project, Boost.Process, and this involves native Windows programming with the Win32 API.&lt;br />&lt;br />After creating a fresh C++ Win32 console application project from Visual Studio 2005, I noticed that the template code had a &lt;tt>_tmain&lt;/tt> function rather than a &lt;tt>main&lt;/tt> one. I did not pay much attention to it until I looked at some code examples that deal with the &lt;tt>CreateProcess&lt;/tt> call: they use weirdly named functions such as &lt;tt>_tcsdup&lt;/tt> and types as &lt;tt>_TCHAR&lt;/tt> instead of the traditional &lt;tt>strdup&lt;/tt> and &lt;tt>char *&lt;/tt> respectively. I could not resist to learn &lt;i>why&lt;/i> they did this.&lt;br />&lt;br />Spending some time searching and reading the MSDN documentation answered my question. These functions and types are wrappers around the standard objects: the functions and types they really point to depend on whether you define the &lt;tt>_UNICODE&lt;/tt> macro during the build or not.&lt;br />&lt;br />As you can easily guess, defining &lt;tt>_UNICODE&lt;/tt> maps those routines and types to entities that can handle Unicode strings, effectively making your application Unicode-aware. Similarly, if you do not define the symbol, the application remains SBCS/MBCS compatible (the distinction between these two also depends on another macro, as far as I can tell). And because all these redirections are handled by the preprocessor, there is no run-time overhead.&lt;br />&lt;br />For example: the &lt;tt>_tmain&lt;/tt> function is mapped to the traditional &lt;tt>main&lt;/tt> subroutine if and only if &lt;tt>_UNICODE&lt;/tt> is undefined while it is mapped to &lt;tt>wmain&lt;/tt> otherwise. The latter takes wide-character &lt;tt>argv&lt;/tt> and &lt;tt>envp&lt;/tt> pointers in contrast to the former.&lt;br />&lt;br />I do not know to which extent this macro is supported by the standard libraries, although I bet almost everything supports it; I have seen many other functions taking advantage of this redirection. In the specific domain I am analyzing, there are two implementations for &lt;tt>CreateProcess&lt;/tt>: &lt;tt>CreateProcessW&lt;/tt>, the Unicode version; and &lt;tt>CreateProcessA&lt;/tt>, the ANSI one.&lt;br />&lt;br />OK, my knowledge about internationalization is very limited, and I do not know if this feature is very useful or not, but it seems quite interesting at the very least.&lt;br />&lt;br />See &lt;a href="http://msdn2.microsoft.com/en-us/library/tsbaswba.aspx">Routine Mappings (CRT)&lt;/a> and &lt;a href="http://msdn2.microsoft.com/en-us/library/6wd819wh.aspx">main: Program Startup (C++)&lt;/a> for more details.&lt;br />&lt;br />&lt;span style="font-weight: bold;">Edit (17:24)&lt;/span>: Changed MFC references to Win32. Thanks to Jason for pointing out the difference between the two in one of the comments. I am in fact investigating the latter.</description></item><item><title>SoC: Accepted, again!</title><link>https://jmmv.dev/2006/05/soc-accepted-again.html</link><pubDate>Wed, 24 May 2006 13:44:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2006/05/soc-accepted-again.html</guid><description>I am very proud to annouce that I have been accepted into Google's &lt;a href="http://code.google.com/soc/">Summer of Code&lt;/a> program &amp;mdash; &lt;a href="http://julipedia.blogspot.com/2005/06/soc-accepted.html">again&lt;/a>! During Summer 2005 I developed an efficient, memory-based file system for the NetBSD operating system, baptized &lt;a href="http://netbsd-soc.sourceforge.net/projects/tmpfs/">tmpfs&lt;/a>. I must confess that I enjoyed &lt;i>very much&lt;/i> hacking the NetBSD kernel and also learned a lot about file systems.&lt;br />&lt;br />So this year I was eager to repeat the experience by taking part in SoC again. In order to ensure my participation, I thoroughly prepared three applications for three different projects. I had a hard time making the choices because there were tons of interesting projects (which could have taught me very different skills), but at last decided for the following:&lt;br />&lt;ul>&lt;li>&lt;a href="http://www.netbsd.org/~jmmv/soc2006/grub.txt">Application 1&lt;/a>: Add complete NetBSD support to &lt;a href="http://www.gnu.org/software/grub/">GRUB 2&lt;/a>. I chose this project because I knew I could do it, but mostly because I wanted to ensure that GRUB 2 had first-class support for BSD operating systems. GRUB currently lacks features to correctly boot these, which is a nuisance. After sending the application, I was quickly contacted by a GRUB developer telling me that there was another student willing to work on this project, and that he did not knew what to do. I offered to leave my spot to the other developer, hoping to capture another potential NetBSD hacker.&lt;/li>&lt;li>&lt;a href="http://www.netbsd.org/~jmmv/soc2006/boost.txt">Application 2&lt;/a>: Develop a &lt;a href="http://www.crystalclearsoftware.com/cgi-bin/boost_wiki/wiki.pl?BoostProcess">process management library&lt;/a> for &lt;a href="http://www.boost.org/">Boost&lt;/a>. This is something I have had in mind since February 2005, when I first discovered Boost. I was planning to do this as my final computer science degree next Spring, but applied for it now so that I could free myself from this idea. (I have other projects in mind that are currently blocked by the lack of Boost.Process.)&lt;/li>&lt;li>&lt;a href="http://www.netbsd.org/~jmmv/soc2006/netbsd.txt">Application 3&lt;/a>: Improve NetBSD's &lt;a href="http://www.netbsd.org/contrib/projects.html#regression-framework">regression testing framework&lt;/a>. After looking at the list of suggested projects for NetBSD and evaluating them, I felt that working on this area could have been very useful for the project, improving its overall quality; I like and enjoy writing software that is able to test itself as much as possible.&lt;/li>&lt;/ul>The decision between the Boost and NetBSD projects was quite hard to make, so I opted to send both in and let luck decide. Strictly speaking, I stated in my applications that I preferred to do the Boost project for several reasons and I guess Google made their choice based on that. But do not get me wrong: I enjoyed very much the time I spent hacking NetBSD, and I hope to continue doing so in the near future.&lt;br />&lt;br />Summarizing: I will be developing the Boost.Process library this summer! See the links above for more some information: the wiki page holds some ideas about its design and the application lists my reasons to want to work on this.&lt;br />&lt;br />I now feel sorry for not "being able" to work on NetBSD's regression testing framework. I do not know if anybody else has been picked to work on it, but if not, this project seems doomed... It was choosen past year but the student abandoned it half-way. This year it was also choosen by NetBSD but Google preferred me to work on Boost. However... while writing the application, my interest in this project raised, which means that I may retake it in the future if nobody else does; maybe as my CS final degree project? :-)&lt;br />&lt;br />Now... stay tuned for further news on Boost.Process!</description></item><item><title>MFC: Developing for Windows</title><link>https://jmmv.dev/2005/06/mfc-developing-for-windows.html</link><pubDate>Mon, 20 Jun 2005 17:05:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2005/06/mfc-developing-for-windows.html</guid><description>&lt;p>During the past two days, I've been working (again) on my &lt;a href="http://www.crystalclearsoftware.com/cgi-bin/boost_wiki/wiki.pl?BoostProcess">Boost Process library&lt;/a> idea. While doing so, I realized that I don't know anything at all about coding for &lt;a href="http://www.microsoft.com/windows/">Windows&lt;/a> using the MFC. I must learn how to handle processes under this platform to be able to design a correct abstraction layer for process management.&lt;/p> &lt;p>It's time to do so. I booted Windows XP, downloaded &lt;a href="http://www.borland.com/">Borland&lt;/a>'s C++ Builder 5 command line tools (that is, the C++ &lt;i>free&lt;/i> compiler) and installed it following the instructions (not a "trivial" task). Man, it's damn fast compared to &lt;a href="http://gcc.gnu.org/">GNU g++&lt;/a>, as seen while building some &lt;a href="http://www.boost.org/">Boost&lt;/a>'s code.&lt;/p></description></item></channel></rss>