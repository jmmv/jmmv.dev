<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>boost-process on jmmv.dev</title>
    <link>https://jmmv.dev/tags/boost-process/index/</link>
    <description>Recent content in boost-process on jmmv.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Jun 2009 13:40:00 -0400</lastBuildDate><atom:link href="https://jmmv.dev/tags/boost-process/index/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Child-process management in C for ATF</title>
      <link>https://jmmv.dev/2009/06/child-process-management-in-c-for-atf.html</link>
      <pubDate>Sun, 21 Jun 2009 13:40:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2009/06/child-process-management-in-c-for-atf.html</guid>
      <description>Let&#39;s face it: spawning child processes in Unix is a &#34;mess&#34;. Yes, the interfaces involved (fork, wait, pipe) are really elegant and easy to understand, but every single time you need to spawn a new child process to, later on, execute a random command, you have to write quite a bunch of error-prone code to cope with it. If you have ever used any other programming language with higher-level abstraction layers â€” just check Python&#39;s subprocess.</description>
    </item>
    
    <item>
      <title>Boost.Process and SIGCHLD</title>
      <link>https://jmmv.dev/2008/10/boostprocess-and-sigchld.html</link>
      <pubDate>Sat, 18 Oct 2008 21:46:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2008/10/boostprocess-and-sigchld.html</guid>
      <description>For some unknown reason, I&#39;m regaining interest in Boost.Process lately. I guess many of the people who have written me in the past asking for the status of the library will be happy to hear this, but I can&#39;t promise I will stick to coding it for long. I have to say that I have received compliments from quite a few people... thanks if you are reading and sorry if I did not reply you at all.</description>
    </item>
    
    <item>
      <title>Cross-platform development with Parallels</title>
      <link>https://jmmv.dev/2007/04/cross-platform-development-with.html</link>
      <pubDate>Mon, 02 Apr 2007 10:35:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2007/04/cross-platform-development-with.html</guid>
      <description>These days I&#39;m seizing some of my free time to continue what I did as my SoC 2006 project: the Boost.Process library. There is still a lot of work to be done, but some items are annoying enough to require early attention (well, I can&#39;t speak of &#34;early&#34; because I hadn&#39;t touched the code for months).
Boost.Process aims to be a cross-platform library and currently works under POSIX-based systems (such as Linux, NetBSD or Mac OS X) as well as under Win32 systems.</description>
    </item>
    
    <item>
      <title>Mac OS X vs. Ubuntu: Introduction</title>
      <link>https://jmmv.dev/2006/09/mac-os-x-vs-ubuntu-introduction.html</link>
      <pubDate>Thu, 28 Sep 2006 07:07:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2006/09/mac-os-x-vs-ubuntu-introduction.html</guid>
      <description>About a week ago, my desktop machine was driving me crazy because I couldn&#39;t comfortably work on anything other than NetBSD and pkgsrc themselves. With &#34;other work&#34; I&#39;m referring to Boost.Process and, most importantly, university assignments. Given my painless experience with the iBook G4 laptop I&#39;ve had for around a year, I was decided to replace the desktop machine with a Mac &amp;mdash; most likely a brand-new iMac 20&#34; &amp;mdash; to run Mac OS X on top of it exclusively &amp;mdash; OK, OK, alongside Windows XP to satisfy the eventual willingness to play some games.</description>
    </item>
    
    <item>
      <title>What have I learned during SoC?</title>
      <link>https://jmmv.dev/2006/08/what-have-i-learned-during-soc.html</link>
      <pubDate>Tue, 22 Aug 2006 05:05:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2006/08/what-have-i-learned-during-soc.html</guid>
      <description>One of SoC&#39;s most important goals is the introduction of students to the free software world; this way there are high chances that they will keep contributing even when SoC is over. Students already familiar with FOSS (as was my case both years) are also allowed to participate because they can seize the Summer to learn new stuff and improve their skills.
As I expected, the development of Boost.Process has taught me multiple new things.</description>
    </item>
    
    <item>
      <title>Boost.Process 0.1 published</title>
      <link>https://jmmv.dev/2006/08/boostprocess-01-published.html</link>
      <pubDate>Mon, 21 Aug 2006 16:36:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2006/08/boostprocess-01-published.html</guid>
      <description>SoC 2006 is officially over &amp;mdash; at least for me in my timezone. Given that the Subversion repository has some problems with public access, I&#39;ve tagged the current sources as the first public version and uploaded a couple of tarballs to the Boost Vault. Both the tag and the tarballs will also serve historical purposes, specially when newer ones come ;-)
You can download the archives from the Process directory in tar.</description>
    </item>
    
    <item>
      <title>Boost.Process tarballs posted</title>
      <link>https://jmmv.dev/2006/08/boostprocess-tarballs-posted.html</link>
      <pubDate>Thu, 17 Aug 2006 07:56:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2006/08/boostprocess-tarballs-posted.html</guid>
      <description>As everybody is not comfortable accessing Subversion repositories to download source code, I&#39;ve posted two tarballs with Boost.Process&#39; sources. They include an exported copy of the repository contents as well as prebuilt documentation in the libs/process/doc/html subdirectory.
You can download the compressed archive either in tar.gz format or in ZIP. Keep in mind that these will be updated very frequently so please do not use them to prepackage the library.</description>
    </item>
    
    <item>
      <title>SoC: Boost.Process published</title>
      <link>https://jmmv.dev/2006/08/soc-boostprocess-published.html</link>
      <pubDate>Wed, 16 Aug 2006 16:59:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2006/08/soc-boostprocess-published.html</guid>
      <description>In a rush to publish Boost.Process before the SoC deadline arrives, I&#39;ve been working intensively during the past two days to polish some issues raised by my mentor. First of all I&#39;ve added some Win32-specific classes so that the library does not seem Unix-only. These new classes provide functionality only available under Windows and, on the documentation side, they come with a couple of extra examples to demonstrate their functionality.</description>
    </item>
    
    <item>
      <title>SoC: Status report 3</title>
      <link>https://jmmv.dev/2006/08/soc-status-report-12.html</link>
      <pubDate>Sat, 12 Aug 2006 12:12:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2006/08/soc-status-report-12.html</guid>
      <description>Only 8 more days and SoC will be officially over... Time has passed very fast and my project required much more work than I initially thought. It certainly cannot be completed before the deadline but I assure you that it will not fall into oblivion afterwards; I have spent too much time on it to forget ;-)
There have been many changes in Boost.Process&#39; code base since the previous status report; let&#39;s see a brief summary:</description>
    </item>
    
    <item>
      <title>SoC: Playing with Doxygen</title>
      <link>https://jmmv.dev/2006/07/soc-playing-with-doxygen.html</link>
      <pubDate>Wed, 26 Jul 2006 12:10:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2006/07/soc-playing-with-doxygen.html</guid>
      <description>My Boost.Process prototype is almost feature complete; the major thing that is still not included is the ability to create pipelines. I should address that as soon as possible because I&#39;m afraid it will have some impact on the existing classes, but for now I wanted to start documenting some code. There are already 21 header files to document and doing so is by no means an easy task.
In order to document the library&#39;s API I&#39;ve decided to use Doxygen, a documentation system for multiple languages including, obviously, C++.</description>
    </item>
    
    <item>
      <title>SoC: Status report 2</title>
      <link>https://jmmv.dev/2006/07/soc-status-report-21.html</link>
      <pubDate>Fri, 21 Jul 2006 07:36:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2006/07/soc-status-report-21.html</guid>
      <description>Another week has passed and I&#39;m happy to announce that the Boost.Process prototype is now completely ported to the Win32 API. In other words, a program can use the current library to transparently manage child processes both from Windows and Unix systems.
There are still several rough edges and incomplete classes but the code passes the test suite on both systems :-) OK, you know that passing a test suite does not mean that the code is correct; it only means that it complies with the existing tests.</description>
    </item>
    
    <item>
      <title>SoC: Status report</title>
      <link>https://jmmv.dev/2006/07/soc-status-report.html</link>
      <pubDate>Thu, 13 Jul 2006 15:01:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2006/07/soc-status-report.html</guid>
      <description>Mmm... SoC. Multiple things have been going on lately in my SoC project, yet I&#39;ve kept you uninformed. As I already told you, my project aims to develop a C++ library for the Boost project to manage child processes; it&#39;s named Boost.Process.
During June I discussed with Jeff Garland &amp;mdash; my mentor &amp;mdash; the general design of the library. The design is surely not final but it is a lot better than it was at its first sketches.</description>
    </item>
    
    <item>
      <title>Win32: Mappings for Unicode support</title>
      <link>https://jmmv.dev/2006/06/win32-mappings-for-unicode-support.html</link>
      <pubDate>Wed, 14 Jun 2006 08:06:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2006/06/win32-mappings-for-unicode-support.html</guid>
      <description>I have spent some time during the past few days to play with the Win32 API again after a year since first looking at them. I must learn how to manage processes under Windows as part of my SoC project, Boost.Process, and this involves native Windows programming with the Win32 API.
After creating a fresh C++ Win32 console application project from Visual Studio 2005, I noticed that the template code had a _tmain function rather than a main one.</description>
    </item>
    
    <item>
      <title>SoC: Accepted, again!</title>
      <link>https://jmmv.dev/2006/05/soc-accepted-again.html</link>
      <pubDate>Wed, 24 May 2006 13:44:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2006/05/soc-accepted-again.html</guid>
      <description>I am very proud to annouce that I have been accepted into Google&#39;s Summer of Code program &amp;mdash; again! During Summer 2005 I developed an efficient, memory-based file system for the NetBSD operating system, baptized tmpfs. I must confess that I enjoyed very much hacking the NetBSD kernel and also learned a lot about file systems.
So this year I was eager to repeat the experience by taking part in SoC again.</description>
    </item>
    
    <item>
      <title>MFC: Developing for Windows</title>
      <link>https://jmmv.dev/2005/06/mfc-developing-for-windows.html</link>
      <pubDate>Mon, 20 Jun 2005 17:05:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2005/06/mfc-developing-for-windows.html</guid>
      <description>During the past two days, I&#39;ve been working (again) on my Boost Process library idea. While doing so, I realized that I don&#39;t know anything at all about coding for Windows using the MFC. I must learn how to handle processes under this platform to be able to design a correct abstraction layer for process management.
It&#39;s time to do so. I booted Windows XP, downloaded Borland&#39;s C++ Builder 5 command line tools (that is, the C++ free compiler) and installed it following the instructions (not a &#34;</description>
    </item>
    
  </channel>
</rss>
