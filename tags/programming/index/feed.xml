<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on jmmv.dev</title>
    <link>https://jmmv.dev/tags/programming/index/</link>
    <description>Recent content in programming on jmmv.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Dec 2020 10:00:00 -0800</lastBuildDate><atom:link href="https://jmmv.dev/tags/programming/index/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unit-testing a console app (a text editor)</title>
      <link>https://jmmv.dev/2020/12/unit-testing-a-console-app.html</link>
      <pubDate>Tue, 08 Dec 2020 10:00:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/12/unit-testing-a-console-app.html</guid>
      <description>The most notable feature in EndBASIC 0.3 is its new full-screen console-based text editor. It took longer than I wanted to start developing this, in part because I was busy moving, and in part because I dreaded the thought of having to unit test the text editor. (Yes, EndBASIC is a personal project and I develop it in my free time, but that doesn&amp;rsquo;t mean I don&amp;rsquo;t want it to be properly engineered!</description>
    </item>
    
    <item>
      <title>Using the builder pattern to define test scenarios</title>
      <link>https://jmmv.dev/2020/12/builder-pattern-for-tests.html</link>
      <pubDate>Fri, 04 Dec 2020 09:40:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/12/builder-pattern-for-tests.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been playing with the builder patter to express test scenarios in a succinct and declarative manner. I&amp;rsquo;ve liked the outcome and feel that this design can yield to pretty good test code, so I&amp;rsquo;ll dig through this idea here. Note that, while this post and the associated code talk about Rust, &lt;strong&gt;the ideas presented here apply to any language&lt;/strong&gt;. So don&amp;rsquo;t leave just because I said Rust!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EndBASIC 0.3 is here</title>
      <link>https://jmmv.dev/2020/11/endbasic-0.3.html</link>
      <pubDate>Sun, 29 Nov 2020 12:30:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/11/endbasic-0.3.html</guid>
      <description>After a 6-month long hiatus caused by me hunting and changing jobs and cities, I am pleased to announce the release of EndBASIC 0.3! The Thanksgiving break has been as fruitful as I had hoped üòÅ
There are two major changes in this release.
  The first is the official debut of the web-based interface. I introduced this months ago and have had it running on a &amp;ldquo;push on green&amp;rdquo; model, which means that the web deployment of EndBASIC is always tracking Git HEAD.</description>
    </item>
    
    <item>
      <title>Bridging the web gap in EndBASIC</title>
      <link>https://jmmv.dev/2020/05/bridging-the-web-gap-endbasic.html</link>
      <pubDate>Sat, 30 May 2020 08:50:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/05/bridging-the-web-gap-endbasic.html</guid>
      <description>After a ton of work, a lot of which was unexpected, I am ecstatic to announce that EndBASIC is now a reality on the web! The whole language interpreter can now run as a fully client-side web app on a computer, on a tablet&amp;hellip; and even on a phone. Yes: the whole thing, which is written in Rust (94%), works in a modern browser with just a tiny bit of JavaScript glue (1%).</description>
    </item>
    
    <item>
      <title>EndBASIC 0.2.0 is here</title>
      <link>https://jmmv.dev/2020/05/endbasic-0.2.0.html</link>
      <pubDate>Thu, 07 May 2020 06:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/05/endbasic-0.2.0.html</guid>
      <description>A couple of weeks ago, I announced EndBASIC: a simple BASIC language interpreter written in Rust with a goal to provide an environment for teaching my kids how to code. That first release provided what-I-think-is a robust interpreter, but that was about it: the language features were still minimal and the interactive features were non-existent.
Well, EndBASIC 0.2.0 is here and things are changing! It&amp;rsquo;s still far from the vision I want to reach, but it&amp;rsquo;s slowly moving towards that direction.</description>
    </item>
    
    <item>
      <title>What is Rust&#39;s Into&lt;T&gt; for?</title>
      <link>https://jmmv.dev/2020/04/rust-into-trait.html</link>
      <pubDate>Mon, 27 Apr 2020 18:50:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/04/rust-into-trait.html</guid>
      <description>Rust provides a bunch of traits that you may use or implement in your code, but unless you have experienced them first-hand, it can be hard to imagine what their real utility is. For example, if you go read Into&amp;rsquo;s documentation, all you find is:
 Trait std::convert::Into
A value-to-value conversion that consumes the input value. The opposite of From. [&amp;hellip;]
 Yay, very useful. This text tells me what this trait does, which is fine for a reference manual, but not when I could find it useful.</description>
    </item>
    
    <item>
      <title>Hello, EndBASIC!</title>
      <link>https://jmmv.dev/2020/04/hello-endbasic.html</link>
      <pubDate>Wed, 22 Apr 2020 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/04/hello-endbasic.html</guid>
      <description>INPUT&amp;#34;Did you ever experience BASIC (true/false)&amp;#34;;answer? IFanswer?THEN PRINT&amp;#34;Great; you are in for a treat!&amp;#34; ELSE PRINT&amp;#34;Oh noes; try today?&amp;#34; ENDIF I have pretty fond memories of my Amstrad CPC 6128 and its Locomotive BASIC 1.1. The experience was quite unique as the computer was ready to take commands in a couple of seconds, and those commands you typed had an immediate effect on the screen. Changing colors, drawing, playing sounds&amp;hellip; were all at your fingertips, which was pretty exciting for a young boy.</description>
    </item>
    
    <item>
      <title>The OSXFUSE, hard links, and dladdr puzzle</title>
      <link>https://jmmv.dev/2020/01/osxfuse-hardlinks-dladdr.html</link>
      <pubDate>Fri, 17 Jan 2020 16:30:00 +0500</pubDate>
      
      <guid>https://jmmv.dev/2020/01/osxfuse-hardlinks-dladdr.html</guid>
      <description>Hello everyone and welcome to this new decade!
It&amp;rsquo;s already 2020 and I&amp;rsquo;m only 17 days late in writing a first post. I was planning to start with an opinion article, but as its draft is taking longer than I wanted&amp;hellip; I&amp;rsquo;ll present you the story of a recent crazy bug that has kept me busy for the last couple of days.
Java crashes with Bazel and sandboxfs On a machine running macOS Catalina, install sandboxfs and build Bazel with sandboxfs enabled, like this:</description>
    </item>
    
    <item>
      <title>Resurrected ONLamp.com articles</title>
      <link>https://jmmv.dev/2019/10/onlamp-articles.html</link>
      <pubDate>Fri, 11 Oct 2019 10:40:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2019/10/onlamp-articles.html</guid>
      <description>Quite some time ago, I wrote a handful of guest posts for O&amp;rsquo;Reilly&amp;rsquo;s ONLamp.com online publication. Unfortunately, that site seems now gone from the interwebs and I only noticed by chance upon realizing that some of my links to those articles were now broken.
Fortunately, I was able to find copies of those articles via archive.org&amp;rsquo;s WayBack Machine. So I have now taken the chance to import those articles into this site.</description>
    </item>
    
    <item>
      <title>Sample REST interface in Rust and Go</title>
      <link>https://jmmv.dev/2019/09/rest-api-rust-go.html</link>
      <pubDate>Fri, 27 Sep 2019 06:45:40 +0500</pubDate>
      
      <guid>https://jmmv.dev/2019/09/rest-api-rust-go.html</guid>
      <description>Over the summer, I prototyped a bunch of web apps whose ideas had been floating in my mind for a long time. I spent some time reading through REST API documentation pages and, as part of these exercises, implemented sample RESTful web services in both Go and Rust. (Just for context, the last time I wrote a web app was in high school&amp;hellip; and it involved PHP, MySQL, and I think IE6?</description>
    </item>
    
    <item>
      <title>Safely restoring the previous working directory</title>
      <link>https://jmmv.dev/2019/09/safe-chdir-to-previous.html</link>
      <pubDate>Sat, 21 Sep 2019 15:47:41 +0000</pubDate>
      
      <guid>https://jmmv.dev/2019/09/safe-chdir-to-previous.html</guid>
      <description>The current working directory, or CWD for short, is a process-wide property. It is good practice to treat the CWD as read-only because it is essentially global state: if you change the CWD of your process at any point, any relative paths you might have stored in memory1 will stop working. I learned this first many years ago when using the Boost.Filesystem library: I could not find a function to change the CWD and that was very much intentional for this reason.</description>
    </item>
    
    <item>
      <title>The fallacy of forbidding assertions</title>
      <link>https://jmmv.dev/2018/07/forbidden-assertions-fallacy.html</link>
      <pubDate>Tue, 24 Jul 2018 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/07/forbidden-assertions-fallacy.html</guid>
      <description>There are two ways to handle abnormal conditions in a program: errors and assertions.
Errors are a controlled mechanism by which the program propagates details about a faulty condition up the call chain‚Äîbe it with explicit error return statements or with exceptions. Errors must be used to validate all conditions that might be possible but aren&amp;rsquo;t valid given the context. Examples include: sanitizing any kind of input (as provided by the user or incoming from the network), and handling error codes from system calls or libraries.</description>
    </item>
    
    <item>
      <title>Rust vs. Go</title>
      <link>https://jmmv.dev/2018/07/rust-vs-go.html</link>
      <pubDate>Fri, 13 Jul 2018 10:45:00 +0200</pubDate>
      
      <guid>https://jmmv.dev/2018/07/rust-vs-go.html</guid>
      <description>Welcome to the Rust Review&amp;rsquo;s bonus post, which I had promised from the very beginning. I&amp;rsquo;m here to cover the big elephant in the room: Rust vs. Go. Which one is better?
There is no good answer to this question because this comparison is unfounded. I think people tend to bundle the two languages together because they were released at about the same time and the release of Rust felt like a response to the release of Go.</description>
    </item>
    
    <item>
      <title>Rust review: Closing thoughts</title>
      <link>https://jmmv.dev/2018/07/rust-review-closing-thoughts.html</link>
      <pubDate>Tue, 10 Jul 2018 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/07/rust-review-closing-thoughts.html</guid>
      <description>Thought that the Rust review was over? Think again; I was just on vacation! I&amp;rsquo;m back now to conclude the series with a bunch of random thoughts and a surprise follow-up post.
 The series is coming to an end. It&amp;rsquo;s time to summarize everything we have discussed so far and to cover a few more items that didn&amp;rsquo;t really deserve full posts of their own. Most of these miscellaneous items were thoughts that I jotted down while reading TRPL book.</description>
    </item>
    
    <item>
      <title>Rust review: The ecosystem</title>
      <link>https://jmmv.dev/2018/06/rust-review-ecosystem.html</link>
      <pubDate>Fri, 22 Jun 2018 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/06/rust-review-ecosystem.html</guid>
      <description>In this part of the review, I would like to focus on Rust&amp;rsquo;s ecosystem: in other words, how Rust plays with other parts of a functioning system and how Rust&amp;rsquo;s standard library vs. external libraries interact with each other. There are a lot of pieces to cover in these areas and they have left me with mixed feelings. Let&amp;rsquo;s look at some.
The standard library The std library feels generally well-thought out and full of features.</description>
    </item>
    
  </channel>
</rss>
