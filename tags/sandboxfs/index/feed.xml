<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sandboxfs on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/sandboxfs/index.html</link><description>Recent content in Sandboxfs on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2025 Julio Merino</copyright><lastBuildDate>Mon, 27 Apr 2020 18:50:00 -0400</lastBuildDate><atom:link href="https://jmmv.dev/tags/sandboxfs/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>What is Rust's Into&lt;T> for?</title><link>https://jmmv.dev/2020/04/rust-into-trait.html</link><pubDate>Mon, 27 Apr 2020 18:50:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2020/04/rust-into-trait.html</guid><description>&lt;p>Rust provides a bunch of traits that you may use or implement in your code, but unless you have experienced them first-hand, it can be hard to imagine what their real utility is. For example, if you go read &lt;a href="https://doc.rust-lang.org/std/convert/trait.Into.html">Into&amp;rsquo;s documentation&lt;/a>, all you find is:&lt;/p>
&lt;blockquote>
&lt;p>Trait &lt;code>std::convert::Into&lt;/code>&lt;/p>
&lt;p>A value-to-value conversion that consumes the input value. The opposite of &lt;code>From&lt;/code>. [&amp;hellip;]&lt;/p>
&lt;/blockquote>
&lt;p>Yay, very useful. This text tells me what this trait does, which is fine for a reference manual, but not when I could find it useful. Mind you, during the initial code reviews for &lt;a href="https://github.com/bazelbuild/sandboxfs/">sandboxfs&lt;/a>, my reviewer pointed out a few times that I should be using &lt;code>into()&lt;/code> or &lt;code>into_iter()&lt;/code> in a few places but I never quite figured out why.&lt;/p></description></item><item><title>FOSDEM navigation 101</title><link>https://jmmv.dev/2020/02/fosdem-navigation-101.html</link><pubDate>Mon, 03 Feb 2020 18:20:00 +0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2020/02/fosdem-navigation-101.html</guid><description>&lt;p>&lt;a href="https://fosdem.org/2020/">FOSDEM 2020&lt;/a> is over. As I type this, I&amp;rsquo;m on my way back home from the conference in Brussels. And it has been nice. In the end. I must confess I was frustrated by the middle of the first day, though things got better after that.&lt;/p>
&lt;p>Here is the thing: FOSDEM is not your usual conference. There are lots of things going on at once and all of them are crowded. Really, really crowded&amp;mdash;to the point where the situation doesn&amp;rsquo;t make any sense unless you know how to work around it.&lt;/p></description></item><item><title>The OSXFUSE, hard links, and dladdr puzzle</title><link>https://jmmv.dev/2020/01/osxfuse-hardlinks-dladdr.html</link><pubDate>Fri, 17 Jan 2020 16:30:00 +0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2020/01/osxfuse-hardlinks-dladdr.html</guid><description>&lt;p>Hello everyone and welcome to this new decade!&lt;/p>
&lt;p>It&amp;rsquo;s already 2020 and I&amp;rsquo;m only 17 days late in writing a first post. I was planning to start with an opinion article, but as its draft is taking longer than I wanted&amp;hellip; I&amp;rsquo;ll present you the story of a recent crazy bug that has &lt;a href="https://twitter.com/jmmv/status/1217276457648521216">kept me busy&lt;/a> for the last couple of days.&lt;/p>
&lt;h1 id="java-crashes-with-bazel-and-sandboxfs">Java crashes with Bazel and sandboxfs&lt;/h1>
&lt;p>On a machine running macOS Catalina, install &lt;a href="https://github.com/bazelbuild/sandboxfs">sandboxfs&lt;/a> and build Bazel with sandboxfs enabled, like this:&lt;/p></description></item><item><title>Output conflicts and dynamic execution</title><link>https://jmmv.dev/2019/12/bazel-dynamic-execution-output-locking.html</link><pubDate>Fri, 27 Dec 2019 10:10:00 +0000</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2019/12/bazel-dynamic-execution-output-locking.html</guid><description>&lt;p>When the dynamic scheduler is active, Bazel runs the same &lt;em>spawn&lt;/em> (aka command line) remotely and locally at the same time via &lt;a href="https://jmmv.dev/2019/12/bazel-dynamic-execution-strategy.html">two separate strategies&lt;/a>. These two strategies want to write to the same output files (e.g. object files, archives, or final binaries) on the local disk. In computing, two things trying to affect the same thing require some kind of coÃ¶rdination.&lt;/p>
&lt;p>You might think, however, that because we assume that both strategies are equivalent and will write the same contents to disk&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, this is not problematic. But, in fact, it &lt;em>can&lt;/em> be, because file creations/writes are not atomic. So we need some form of mutual exclusion in place to avoid races.&lt;/p></description></item><item><title>What are Bazel's strategies?</title><link>https://jmmv.dev/2019/12/bazel-strategies.html</link><pubDate>Sat, 14 Dec 2019 18:00:00 +0000</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2019/12/bazel-strategies.html</guid><description>&lt;p>&amp;ldquo;Strategies? Will you talk about Bazel&amp;rsquo;s strategy for world domination ðŸ™€?&amp;rdquo; No&amp;hellip; not exactly that.&lt;/p>
&lt;p>Dynamic execution has been quite a hot topic in my work over the last few months and I am getting ready to publish a series of posts on it soon. But before I do that, I need to first review Bazel&amp;rsquo;s execution strategies because they play a big role in understanding what dynamic execution &lt;em>is&lt;/em> and how it&amp;rsquo;s &lt;em>implemented&lt;/em>.&lt;/p></description></item><item><title>Hello, sandboxfs 0.1.0</title><link>https://jmmv.dev/2019/02/sandboxfs-0-1-0.html</link><pubDate>Tue, 05 Feb 2019 09:00:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2019/02/sandboxfs-0-1-0.html</guid><description>&lt;p>I am pleased to announce that the first release of &lt;a href="https://github.com/bazelbuild/sandboxfs">sandboxfs&lt;/a>, 0.1.0, is &lt;em>finally&lt;/em> here! You can download the sources and prebuilt binaries from the &lt;a href="https://github.com/bazelbuild/sandboxfs/releases/tag/sandboxfs-0.1.0">0.1.0 release page&lt;/a> and you can read the &lt;a href="https://github.com/bazelbuild/sandboxfs/blob/master/INSTALL.md">installation instructions&lt;/a> for more details.&lt;/p>
&lt;p>The journey to this first release has been a long one. sandboxfs was first conceived over two years ago, was &lt;a href="https://jmmv.dev/2017/08/introducing-sandboxfs.html">first announced in August 2017&lt;/a>, showed its &lt;a href="https://blog.bazel.build/2018/04/13/preliminary-sandboxfs-support.html">first promising results in April 2018&lt;/a>, and has been undergoing a rewrite from Go to Rust. (And by the way, this has been my 20% project at Google so rest assured that they are still possible!)&lt;/p></description></item><item><title>Rust vs. Go</title><link>https://jmmv.dev/2018/07/rust-vs-go.html</link><pubDate>Fri, 13 Jul 2018 10:45:00 +0200</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2018/07/rust-vs-go.html</guid><description>There is no good answer to this question: people tend to put Go and Rust in the same bucket because they were released at around the same time, because Rust&amp;rsquo;s release felt like a response to Go&amp;rsquo;s, and because they are marketed to similar audiences. They are, however, vastly different. So let&amp;rsquo;s give in and compare them anyway.</description></item><item><title>Rust review: Protect the data</title><link>https://jmmv.dev/2018/06/rust-review-protect-the-data.html</link><pubDate>Tue, 05 Jun 2018 09:00:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2018/06/rust-review-protect-the-data.html</guid><description>&lt;p>&lt;em>The one thing&lt;/em> that blew my mind about Rust is its approach to data sharing in concurrent situations.&lt;/p>
&lt;p>I had always thought of mutexes as something that is easy to get wrong and was convinced that the use of a RAII pattern to prevent lock leaks never happen (like with &lt;a href="https://github.com/abseil/abseil-cpp/blob/59ae4d5a0e833bedd9d7cc059ac15a9dc130e3f7/absl/synchronization/mutex.h#L499">Abseil&amp;rsquo;s &lt;code>MutexLock&lt;/code>&lt;/a>) was the panacea. (I&amp;rsquo;m a fan of RAII in C++ by the way, in case you haven&amp;rsquo;t noticed.)&lt;/p>
&lt;p>As Rust has taught me, that&amp;rsquo;s far from the truth: &lt;strong>in Rust, you protect the &lt;em>data&lt;/em>, not the &lt;em>code&lt;/em>.&lt;/strong> What this means is that, e.g. a mutex is not an object to control access to a piece of data: &lt;strong>a mutex is a &lt;em>container&lt;/em> for a piece of data&lt;/strong>. It is impossible to access the data without going through the mutex.&lt;/p></description></item><item><title>Rust review: The borrow checker</title><link>https://jmmv.dev/2018/06/rust-review-borrow-checker.html</link><pubDate>Fri, 01 Jun 2018 09:00:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2018/06/rust-review-borrow-checker.html</guid><description>&lt;p>Aaaah, the borrow checker: the dreaded enemy lurking within the Rust compiler, ready to make its move to bring pain to your life by preventing your code from compiling. Or that&amp;rsquo;s what everyone seems to say, which is one of the reasons I put off learning Rust for so long. In reality&amp;hellip; the borrow checker is a blessing, but it is true that getting past its gates is difficult at first.&lt;/p></description></item><item><title>Rust review: Introduction</title><link>https://jmmv.dev/2018/05/rust-review-introduction.html</link><pubDate>Fri, 25 May 2018 09:00:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2018/05/rust-review-introduction.html</guid><description>&lt;p>I had been meaning to learn &lt;a href="https://www.rust-lang.org/en-US/">Rust&lt;/a> since &lt;a href="https://jmmv.dev/2016/03/golang-review.html">I first toyed with Go&lt;/a> a couple of years ago. During this period, I&amp;rsquo;ve written a non-trivial amount of Go code both inside and &lt;a href="https://jmmv.dev/2017/08/introducing-sandboxfs.html">outside Google&lt;/a>, but never found the chance to sit back and learn Rust.&lt;/p>
&lt;p>This changed a month ago during my yearly family trip to Korea. This time around, I decided upfront that I would &lt;em>not&lt;/em> work on any personal or work projects for the 2-week long vacation. Instead, I would focus all spare time in reading. And I would read &lt;a href="https://doc.rust-lang.org/book/second-edition/">&amp;ldquo;The Rust Programming Language&amp;rdquo;, second edition&lt;/a>. The plan worked: getting through the book took the two weeks and I barely wrote any code.&lt;/p></description></item><item><title>Preliminary sandboxfs support in Bazel</title><link>https://jmmv.dev/2018/04/preliminary-sandboxfs-support-in-bazel.html</link><pubDate>Fri, 13 Apr 2018 15:30:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2018/04/preliminary-sandboxfs-support-in-bazel.html</guid><description>&lt;p>During the summer of last year, &lt;a href="https://jmmv.dev/2017/08/introducing-sandboxfs.html">I hosted an intern who implemented sandboxfs&lt;/a>: a FUSE-based file system that exposes an arbitrary view of the host&amp;rsquo;s file system under the mount point. At the end of his internship, we had a functional sandboxfs implementation and some draft patches for integration in Bazel.&lt;/p>
&lt;p>The goal of sandboxfs in the context of Bazel is to improve the performance of builds when action sandboxing is enabled. The way in which we try to do so is by replacing the costly process of setting up the file system for each action using symlinks with a file system that does so &amp;ldquo;instantaneously&amp;rdquo;.&lt;/p></description></item><item><title>A case for writing Bazel's integration tests in Java, part 2</title><link>https://jmmv.dev/2018/03/bazel-tests-in-java-part-2.html</link><pubDate>Mon, 19 Mar 2018 08:00:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2018/03/bazel-tests-in-java-part-2.html</guid><description>&lt;p>In &lt;a href="https://jmmv.dev/2018/03/bazel-tests-in-java-part-1.html">part 1 of this series&lt;/a>, I made the case that you should &lt;strong>run away from the shell when writing integration tests&lt;/strong> for your software and that you should &lt;strong>embrace the primary language of your project&lt;/strong> to write those.&lt;/p>
&lt;p>Depending on the language you are using, doing this will mean significant more work upfront to lay out the foundations for your tests, but this work will pay off. You may also &lt;em>feel&lt;/em> that the tests could be more verbose than if they were in shell, though that&amp;rsquo;s not necessarily the case.&lt;/p></description></item><item><title>Fighting execs via sandboxfs on macOS</title><link>https://jmmv.dev/2017/10/fighting-execs-sandboxfs-macos.html</link><pubDate>Fri, 06 Oct 2017 16:27:34 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2017/10/fighting-execs-sandboxfs-macos.html</guid><description>Since the announcement of sandboxfs a few weeks ago, I&amp;rsquo;ve been stabilizing its integration with Bazel as a new sandboxing technique. As part of this work, I encountered issues when macOS was immediately killing signed binaries executed through the sandbox. Read on for the long troubleshooting process and the surprising trivial solution.</description></item><item><title>Introducing sandboxfs</title><link>https://jmmv.dev/2017/08/introducing-sandboxfs.html</link><pubDate>Fri, 25 Aug 2017 16:25:18 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2017/08/introducing-sandboxfs.html</guid><description>&lt;p>sandboxfs is a FUSE-based file system that exposes an arbitrary view of the
host&amp;rsquo;s file system under the mount point, and offers access controls that
differ from those of the host. You can think of sandboxfs as an advanced
version of &lt;a href="https://bindfs.org/">bindfs&lt;/a> (or &lt;code>mount --bind&lt;/code> or &lt;code>mount_null(8)&lt;/code>
depending on your system) in which you can combine and nest directories under
an arbitrary layout.&lt;/p>
&lt;p>The primary use case for this project is to provide a better file system
sandboxing technique for the Bazel build system. The goal here is to run each
build action (think compiler invocation) in a sandbox so that its inputs and
outputs are tightly controlled, and sandboxfs attempts to do this in a more
efficient manner than the current symlinks-based implementation.&lt;/p></description></item></channel></rss>