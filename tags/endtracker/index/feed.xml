<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>endtracker on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/endtracker/index/</link><description>Recent content in endtracker on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 23 Jun 2023 06:35:00 -0700</lastBuildDate><atom:link href="https://jmmv.dev/tags/endtracker/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>A persistent task queue in Rust</title><link>https://jmmv.dev/2023/06/iii-iv-task-queue.html</link><pubDate>Fri, 23 Jun 2023 06:35:00 -0700</pubDate><guid>https://jmmv.dev/2023/06/iii-iv-task-queue.html</guid><description>A couple of posts ago, I described why I built custom email subscriptions for this blog. I briefly mentioned that there is new automation that scrapes the RSS feed and sends new post notifications to you all. Today, it&amp;rsquo;s time to look into how this all works and how this is based on a new persistent task queuing service in Rust. The queue handles tasks to periodically scrape the RSS feed and schedule emails, all with various quota enforcers and retry policies in place. Read on for the design requirements and constraints of the task queue, how the client and worker Rust APIs look like, and how this all can be made to work inside the Azure Functions serverless runtime for minimal deployment hassle and cost.</description></item><item><title>In-house email subscriptions</title><link>https://jmmv.dev/2023/06/in-house-email-subscriptions.html</link><pubDate>Fri, 16 Jun 2023 06:30:00 -0700</pubDate><guid>https://jmmv.dev/2023/06/in-house-email-subscriptions.html</guid><description>Fellow readers! The radio silence for the last two months has an explanation. I&amp;rsquo;ve been busy creating a custom email subscription service for this blog, all so that you can be notified about new posts without the noise added by intermediaries. This feature is built into a little Rust web service that already offered analytics, page comments and more, and that can be potentially integrated into arbitrary static websites. Read on for what was involved, stay tuned for a deep dive on the internals, and&amp;hellip; upfront apologies if this first email does the wrong thing!</description></item><item><title>Comments are back and other news</title><link>https://jmmv.dev/2022/02/comments-and-ids.html</link><pubDate>Wed, 16 Feb 2022 10:00:00 -0800</pubDate><guid>https://jmmv.dev/2022/02/comments-and-ids.html</guid><description>Just a couple of weeks ago, I described my home-grown analytics service for this site. Today, I&amp;rsquo;m here to describe a couple of related updates: namely, the support for comments and the complete removal of client-side fingerprinting.</description></item><item><title>DIY web analytics</title><link>https://jmmv.dev/2022/02/diy-web-analytics.html</link><pubDate>Tue, 01 Feb 2022 09:15:00 -0800</pubDate><guid>https://jmmv.dev/2022/02/diy-web-analytics.html</guid><description>One thing that had been bothering me about my websites&amp;mdash;including this blog, but especially when launching https://www.endbasic.dev/ just a few months ago&amp;mdash;was this:
uBlock showing a warning that it blocked a tracker on the EndBASIC site. A tracking warning. uBlock complained that my properties had one tracker. And it&amp;rsquo;s true they had just one: it was Google Analytics, or GA for short.
GA is the de-facto standard for web analytics: it is extremely powerful and ubiquitous.</description></item></channel></rss>