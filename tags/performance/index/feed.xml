<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>performance on Julio Merino (jmmv.dev)</title>
    <link>https://jmmv.dev/tags/performance/index/</link>
    <description>Recent content in performance on Julio Merino (jmmv.dev)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Mar 2019 15:00:00 +0100</lastBuildDate>
    
	<atom:link href="https://jmmv.dev/tags/performance/index/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Optimizing tree deletions in Bazel</title>
      <link>https://jmmv.dev/2019/03/optimizing-tree-deletions.html</link>
      <pubDate>Fri, 22 Mar 2019 15:00:00 +0100</pubDate>
      
      <guid>https://jmmv.dev/2019/03/optimizing-tree-deletions.html</guid>
      <description>Bazel likes creating very deep and large trees on disk during a build. One example is the output tree, which naturally contains all the artifacts of your build. Another, more problematic example is the symlink forest trees created for every action when sandboxing is enabled. As garbage gets created, it must be deleted.
It turns out, however, that deleting file system trees can be very expensive&amp;mdash;and especially so on macOS. In fact, calls to our deleteTree algorithm routinely showed up in my profiling runs when trying to diagnose slowdowns using the dynamic scheduler.</description>
    </item>
    
    <item>
      <title>Darwin&#39;s QoS service classes and performance</title>
      <link>https://jmmv.dev/2019/03/macos-threads-qos-and-bazel.html</link>
      <pubDate>Wed, 06 Mar 2019 17:30:00 +0100</pubDate>
      
      <guid>https://jmmv.dev/2019/03/macos-threads-qos-and-bazel.html</guid>
      <description>Since the publication of Bazel a few years ago, users have reported (and I myself have experienced) general slowdowns when Bazel is running on Macs: things like the window manager stutter and others like the web browser cannot load new pages. Similarly, after the introduction of the dynamic spawn scheduler, some users reported slower builds than pure remote or pure local builds, which made no sense.
All along we guessed that these problems were caused by Bazel&amp;rsquo;s abuse of system threads, as it used to spawn 200 runnable threads during analysis and used to run 200 concurrent compiler subprocesses.</description>
    </item>
    
    <item>
      <title>CVS and fragmentation</title>
      <link>https://jmmv.dev/2007/01/cvs-and-fragmentation.html</link>
      <pubDate>Sun, 07 Jan 2007 10:07:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2007/01/cvs-and-fragmentation.html</guid>
      <description>First of all, happy new year to everybody!
I&#39;ve recently got a MacBook Pro and, while this little machine is great overall, the 5400 RPM hard disk is a noticeable performance bottleneck. Many people I&#39;ve talked to say that the difference from 5400 to 7200 RPM should not be noticeable because:These 2.5-inch drives use perpendicular recording, hence storing data with a higher bit density. This means that, theorically, they can read/write data more quickly achieving speeds similar to 7200 RPM drives.</description>
    </item>
    
  </channel>
</rss>