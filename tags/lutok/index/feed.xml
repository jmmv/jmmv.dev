<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lutok on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/lutok/index/</link><description>Recent content in lutok on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 08 Dec 2013 07:25:00 -0500</lastBuildDate><atom:link href="https://jmmv.dev/tags/lutok/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>lutok-0.3, kyua-testers-0.2 and kyua-cli-0.8</title><link>https://jmmv.dev/2013/12/lutok-03-kyua-testers-02-and-kyua-cli-08.html</link><pubDate>Sun, 08 Dec 2013 07:25:00 -0500</pubDate><guid>https://jmmv.dev/2013/12/lutok-03-kyua-testers-02-and-kyua-cli-08.html</guid><description>Yesterday was release day: I pushed out Lutok 0.3, Kyua Testers 0.2 and Kyua CLI 0.8.
There are not a lot of changes in these new releases. The reason I cut them was to publish the new TAP-compliant tester and make it available for use in FreeBSD as soon as possible. I will be using this new feature as part of the FreeBSD Test Suite in order to hook existing test programs without having to rewrite them to use the ATF libraries (or at least not as a first step).</description></item><item><title>Lutok 0.3 released</title><link>https://jmmv.dev/2013/06/lutok-03-released.html</link><pubDate>Sat, 15 Jun 2013 16:24:00 -0400</pubDate><guid>https://jmmv.dev/2013/06/lutok-03-released.html</guid><description>Lutok 0.3 was released yesterday evening. The packages in pkgsrc-current, Fedora 19 and Fedora rawhide have all been updated accordingly.
The major highlight of this new release is support for Lua 5.2 while retaining backwards compatibility with Lua 5.1. The incompatible changes between 5.1 and 5.2 only affected a small subset of the functionality in Lutok, which made this dual support possible.
For those that don't know what this project is about: Lutok is a lightweight C++ API for Lua.</description></item><item><title>Projects migrated to Git</title><link>https://jmmv.dev/2012/02/projects-migrated-to-git.html</link><pubDate>Sun, 26 Feb 2012 20:34:00 -0500</pubDate><guid>https://jmmv.dev/2012/02/projects-migrated-to-git.html</guid><description>I finally took the plunge. Yesterday night, I migrated the Kyua and Lutok repositories from Subversion to Git. And this morning I migrated ATF from Monotone and custom hosting to Git and Google Code; oh, and this took way longer than expected.
Migration of Kyua and Lutok
Migrating these two projects was straightforward. After preparing a fresh local Git repository following the instructions posted yesterday, pushing to Google Code is a simple matter:</description></item><item><title>Switching projects to Git</title><link>https://jmmv.dev/2012/02/switching-projects-to-git.html</link><pubDate>Sat, 11 Feb 2012 14:48:00 -0500</pubDate><guid>https://jmmv.dev/2012/02/switching-projects-to-git.html</guid><description>The purpose of this post is to tell you the story of the Version Control System (VCS) choices I have made while maintaining my open source projects ATF, Kyua and Lutok. It also details where my thoughts are headed to these days.
This is not a description of centralized vs. distributed VCSs, and it does not intend to be one. This does not intend to compare Monotone to Git either, although you'll probably feel like it while reading the text.</description></item><item><title>Kyua: Weekly status report</title><link>https://jmmv.dev/2012/02/kyua-weekly-status-report_207.html</link><pubDate>Tue, 07 Feb 2012 22:31:00 -0500</pubDate><guid>https://jmmv.dev/2012/02/kyua-weekly-status-report_207.html</guid><description>
Created an RPM package for Lutok for inclusion in Fedora.Created a preliminary RPM spec for ATF for Fedora. Now in discussions with the FPC to figure out how to install the tests on a Fedora system, as /usr/tests may not be appropriate.No activity on Kyua itself though, unfortunately.</description></item><item><title>Kyua: Weekly status report</title><link>https://jmmv.dev/2012/02/kyua-weekly-status-report_21.html</link><pubDate>Wed, 01 Feb 2012 16:08:00 -0500</pubDate><guid>https://jmmv.dev/2012/02/kyua-weekly-status-report_21.html</guid><description>This comes two days late... but anyway, I felt like posting it now instead of waiting until next Sunday/Monday.
The activity past week focused mostly on implementing support for the require.memory test-case metadata property recently introduced into ATF. This was non-trivial due to the need to write some tricky Autoconf code to make this "slightly portable".&amp;nbsp;Seriously: It's scary to see how hard it is to perform, in a portable manner, an operation as simple as "</description></item><item><title>Lutok 0.1 available</title><link>https://jmmv.dev/2012/01/lutok-01-available.html</link><pubDate>Sun, 29 Jan 2012 16:12:00 -0500</pubDate><guid>https://jmmv.dev/2012/01/lutok-01-available.html</guid><description>A few months ago, I introduced the Lutok project,&amp;nbsp;a simple C++ API for Lua. To recap: the major goal of this API, which does not mimic the Lua C API bit by bit, is to enforce correct coding practices on the client side. This is done by (ab)using the RAII programming pattern to automatically free resources when not needed and to ensure that the Lua stack is correctly managed. The library also adheres to common C++ programming idioms and exposes exceptions for error management and uses the pimpl idiom to completely hide the Lua C API from clients of Lutok (unless you use the c_gate backdoor!</description></item><item><title>Kyua: Weekly status report (db designdoc edition!)</title><link>https://jmmv.dev/2011/09/kyua-weekly-status-report-db-designdoc.html</link><pubDate>Sun, 18 Sep 2011 19:10:00 -0400</pubDate><guid>https://jmmv.dev/2011/09/kyua-weekly-status-report-db-designdoc.html</guid><description>Moved the code of utils::lua to a new project, Lutok.Attempted to integrate a copy of Lutok into the Kyua source code to simplify installing Kyua. I have been playing with Subversion externals and Autoconf/Automake hacks to make this happen, but unfortunately haven't got a pleasant solution yet.Modified Lutok to not expose the Lua C API at all from header files and cleaned up the Kyua code to cope with the changes.</description></item><item><title>Name your C++ auto-cleaners</title><link>https://jmmv.dev/2011/09/name-your-c-auto-cleaners.html</link><pubDate>Sat, 17 Sep 2011 23:26:00 -0400</pubDate><guid>https://jmmv.dev/2011/09/name-your-c-auto-cleaners.html</guid><description>As you may already know, RAII is a very powerful and popular pattern in the C++ language. With RAII, you can wrap non-stack-managed resources into a stack-managed object such that, when the stack-managed object goes out of scope, it releases the corresponding non-stack-managed object. Smart pointers are just one example of this technique, but so are IO streams too.
Before getting into the point of the article, bear with me for a second while I explain what the&amp;nbsp; stack_cleaner object of Lutok is.</description></item><item><title>Introducing Lutok: A lightweight C++ API for Lua</title><link>https://jmmv.dev/2011/09/introducing-lutok-lightweight-c-api-for.html</link><pubDate>Thu, 15 Sep 2011 15:18:00 -0400</pubDate><guid>https://jmmv.dev/2011/09/introducing-lutok-lightweight-c-api-for.html</guid><description>It has finally happened. Lutok is the result of what was promised in the "Splitting utils::lua from Kyua" web post.
Quoting the project web page:
Lutok provides thin C++ wrappers around the Lua C API to ease the interaction between C++ and Lua. These wrappers make intensive use of RAII to prevent resource leakage, expose C++-friendly data types, report errors by means of exceptions and ensure that the Lua stack is always left untouched in the face of errors.</description></item></channel></rss>