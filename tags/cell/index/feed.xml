<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cell on Julio Merino (jmmv.dev)</title>
    <link>https://jmmv.dev/tags/cell/index/</link>
    <description>Recent content in cell on Julio Merino (jmmv.dev)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Dec 2007 18:06:00 -0500</lastBuildDate>
    
	<atom:link href="https://jmmv.dev/tags/cell/index/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Past days&#39; work</title>
      <link>https://jmmv.dev/2007/12/past-days-work.html</link>
      <pubDate>Fri, 07 Dec 2007 18:06:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2007/12/past-days-work.html</guid>
      <description>Been tracking and resolving a bug in Linux&#39;s SPU scheduler for the last three days, and fixed it just a moment ago! I&#39;m happy and needed to mention this ;-)
More specifically, tracking it down was fairly easy using SystemTap and Paraver (getting the two to play well together was another source of headaches), but fixing it was the most complex thing due to deadlocks popping up over and over again.</description>
    </item>
    
    <item>
      <title>Thanks, SystemTap!</title>
      <link>https://jmmv.dev/2007/12/thanks-systemtap.html</link>
      <pubDate>Sun, 02 Dec 2007 09:52:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2007/12/thanks-systemtap.html</guid>
      <description>I started this week&#39;s work with the idea of instrumenting the spufs module found in Linux/Cell to be able to take some traces of the execution of Cell applications. At first, I modified that module to emit events at certain key points, which were later registered in a circular queue. Then, I implemented a file in /proc so that a user-space application could read from it and free space from the queue to prevent the loss of events when it was full.</description>
    </item>
    
    <item>
      <title>Hello world in Linux/ppc64</title>
      <link>https://jmmv.dev/2007/11/hello-world-in-linuxppc64.html</link>
      <pubDate>Sun, 25 Nov 2007 12:22:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2007/11/hello-world-in-linuxppc64.html</guid>
      <description>I&#39;m decided to improve my knowledge on the Cell platform, and the best way to get started seems to be to learn 64-bit PowerPC assembly given that the PPU uses this instruction set. Learning this will open the door to do some more interesting tricks with the architecture&#39;s low-level details.
There are some excellent articles at IBM developerWorks dealing with this subject, and thanks to the first one in an introductory series to PPC64 I&#39;ve been able to write the typical hello world program :-)</description>
    </item>
    
    <item>
      <title>Mad at the Cell SDK</title>
      <link>https://jmmv.dev/2007/11/mad-at-cell-sdk.html</link>
      <pubDate>Sun, 18 Nov 2007 09:46:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2007/11/mad-at-cell-sdk.html</guid>
      <description>I&#39;ve been installing the Cell SDK 3.0 on two Fedora 8 systems at home &amp;mdash; a PlayStation 3 and an old AMD box &amp;mdash; and I cannot understand how someone (IBM and BSC) can publish such an utterly broken piece of crap and be proud of it. Sorry, had to say it. (If you are one of those who wrote the installer, please excuse me, but that&#39;s what I really think.</description>
    </item>
    
    <item>
      <title>PFC report almost ready</title>
      <link>https://jmmv.dev/2007/06/pfc-report-almost-ready.html</link>
      <pubDate>Tue, 19 Jun 2007 11:25:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2007/06/pfc-report-almost-ready.html</guid>
      <description>The deadline for my PFC (the project that will conclude my computer science degree) is approaching. I have to hand out the final report next week and present the project on July 6th. Its title is &#34;Efficient resource management in heterogeneous multiprocessor systems&#34; and its basic goal is to inspect the poor management of such machines in current operating systems and how this situation could be improved in the future.</description>
    </item>
    
    <item>
      <title>Building the libspe2 on the PS3</title>
      <link>https://jmmv.dev/2007/03/building-libspe2-on-ps3.html</link>
      <pubDate>Wed, 14 Mar 2007 11:33:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2007/03/building-libspe2-on-ps3.html</guid>
      <description>The Linux kernel, when built for a Cell-based platform, provides the spufs pseudo-file system that allows userland applications to interact with the Synergistic Processing Engines (SPEs). However, this interface is too low-level to be useful for application-level programs and hence another level of abstraction is provided over it through the libspe library.
There are two versions of the libspe:
1.x: Distributed as part of the Cell SDK 2.0, is the most widely used nowadays by applications designed to run on the Cell architecture.</description>
    </item>
    
    <item>
      <title>PFC subject chosen</title>
      <link>https://jmmv.dev/2007/01/pfc-subject-chosen.html</link>
      <pubDate>Sat, 27 Jan 2007 03:49:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2007/01/pfc-subject-chosen.html</guid>
      <description>A while ago, I was doubtful about the subject of my undergraduate thesis (or PFC as we call it). At first, I wanted to work on a regression testing framework for NetBSD. This is something I really want to see done and I&#39;d work on it if I had enough free time now... Unfortunately, it didn&#39;t fit quite well my expectations for the PFC: it was a project not related at all with the current research subjects in my faculty, hence it was not appropriate enough to integrate into one of these work groups.</description>
    </item>
    
  </channel>
</rss>