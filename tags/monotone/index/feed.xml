<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Monotone on jmmv.dev</title>
    <link>https://jmmv.dev/tags/monotone/</link>
    <description>Recent content in Monotone on jmmv.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Feb 2012 14:48:00 -0500</lastBuildDate>
    
	<atom:link href="https://jmmv.dev/tags/monotone/index/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Switching projects to Git</title>
      <link>https://jmmv.dev/2012/02/switching-projects-to-git.html</link>
      <pubDate>Sat, 11 Feb 2012 14:48:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2012/02/switching-projects-to-git.html</guid>
      <description>The purpose of this post is to tell you the story of the Version Control System (VCS) choices I have made while maintaining my open source projects ATF, Kyua and Lutok. It also details where my thoughts are headed to these days.
This is not a description of centralized vs. distributed VCSs, and it does not intend to be one. This does not intend to compare Monotone to Git either, although you&#39;ll probably feel like it while reading the text.</description>
    </item>
    
    <item>
      <title>New version of the monotone-server package in pkgsrc</title>
      <link>https://jmmv.dev/2010/03/new-version-of-monotone-server-package.html</link>
      <pubDate>Fri, 12 Mar 2010 04:30:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2010/03/new-version-of-monotone-server-package.html</guid>
      <description>Wow, it has been a long time... 5 years ago, I created the monotone-server package in pkgsrc, a package that provided an interactive script to set up a monotone server from scratch with, what I though, minimal hassle.
My package did the job just fine, but past year I was blown away by the simplicity of the same package in Fedora: their init.d script provides a set of extra commands to initialize the server before starting it up, and that is it.</description>
    </item>
    
    <item>
      <title>Back to Stone Age</title>
      <link>https://jmmv.dev/2008/04/back-to-stone-age.html</link>
      <pubDate>Sat, 12 Apr 2008 15:15:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2008/04/back-to-stone-age.html</guid>
      <description>For a rather long while I had been able to avoid the use of the Subversion services offered by my research group even if they were omnipresent. But today, this lucky trend vanished. I have been &#34;forced&#34; to use one of these devilish repositories to add some of my stuff. Using this goes against my &#34;principles&#34;, as a colleague said.
If you don&#39;t know it, Subversion is a centralized version control system.</description>
    </item>
    
    <item>
      <title>Daggy fixes (in Monotone)</title>
      <link>https://jmmv.dev/2007/07/daggy-fixes-in-monotone.html</link>
      <pubDate>Tue, 17 Jul 2007 06:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2007/07/daggy-fixes-in-monotone.html</guid>
      <description>If you inspect the ATF&#39;s source code history, you&#39;ll see a lot of merges. But why is that, if I&#39;m the only developer working in the project? Shouldn&#39;t the revision history be linear?
Well, the thing is it needn&#39;t and it shouldn&#39;t; the subtle difference is important here :-) It needn&#39;t be linear because Monotone is a VCS that stores history in a DAG, so it is completely natural to have a non-linear history.</description>
    </item>
    
    <item>
      <title>Monotone&#39;s help rewrite merged</title>
      <link>https://jmmv.dev/2007/05/monotones-help-rewrite-merged.html</link>
      <pubDate>Sun, 20 May 2007 10:39:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2007/05/monotones-help-rewrite-merged.html</guid>
      <description>I have just merged my net.venge.monotone.help-rewrite branch into the mainline Monotone&#39;s source code. I already explained its purpose in a past post, so please refer to it to see what has changed.
There is still some work to do on the &#34;help rewrite&#34; area, but I won&#39;t have the time to do it in the near future. Hence I added some items to the ROADMAP file explaining what needs to be done, hoping that someone else can pick them up and do the work.</description>
    </item>
    
    <item>
      <title>Talk about Git</title>
      <link>https://jmmv.dev/2007/05/talk-about-git.html</link>
      <pubDate>Sat, 19 May 2007 10:58:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2007/05/talk-about-git.html</guid>
      <description>I&#39;ve been using Git (or better said Cogito) recently as part of my PFC and, although I don&#39;t like the way Git was started, I must confess I like it a lot. In some ways it is very similar to Monotone (the version control system I prefer now) but it has its own features that make it very interesting. One of these is the difference between local and remote branches, something I&#39;ll talk about in a future post.</description>
    </item>
    
    <item>
      <title>Monotone&#39;s help rewrite</title>
      <link>https://jmmv.dev/2007/04/monotones-help-rewrite.html</link>
      <pubDate>Mon, 23 Apr 2007 05:54:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2007/04/monotones-help-rewrite.html</guid>
      <description>A couple of weeks ago, I updated Monotone to 0.34 and noticed a small style problem in the help output: the line wrapping was not working properly, so some words got cut on the terminal&#39;s boundary. After resolving this minor issue, I realized that I didn&#39;t know what most of the commands shown in the main help screen did. Virtually all other command-line utilities that have integrated help show some form of an abstract description for each command which allows the novice to quickly see what they are about.</description>
    </item>
    
  </channel>
</rss>