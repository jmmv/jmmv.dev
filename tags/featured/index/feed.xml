<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>featured on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/featured/index/</link><description>Recent content in featured on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Jun 2022 17:20:00 -0700</lastBuildDate><atom:link href="https://jmmv.dev/tags/featured/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>EndBASIC 0.9: Run shared demos easily</title><link>https://jmmv.dev/2022/06/endbasic-0.9.html</link><pubDate>Sun, 05 Jun 2022 17:20:00 -0700</pubDate><guid>https://jmmv.dev/2022/06/endbasic-0.9.html</guid><description>&lt;p>It is with great pleasure that I announce the release of EndBASIC 0.9.0 😎️.&lt;/p>
&lt;p>The major feature in this new release is the ability to &lt;strong>launch publicly-shared files via a click of a URL&lt;/strong> without having to create an account first. Here, try running my &lt;a href="https://repl.endbasic.dev/?run=jmmv/bounce.bas">&lt;code>jmmv/bounce.bas&lt;/code>&lt;/a> or &lt;a href="https://repl.endbasic.dev/?run=jmmv/paint.bas">&lt;code>jmmv/paint.bas&lt;/code>&lt;/a> demos in your browser, now!&lt;/p></description></item><item><title>Rust is hard, yes, but does it matter?</title><link>https://jmmv.dev/2022/05/rust-is-hard-but-does-it-matter.html</link><pubDate>Fri, 06 May 2022 06:45:00 -0700</pubDate><guid>https://jmmv.dev/2022/05/rust-is-hard-but-does-it-matter.html</guid><description>Rust is infamous for having a steep learning curve. The borrow checker, preferred idioms and design patterns, the meaning of core traits&amp;hellip; these are all things one must learn before being proficient with the language and able to write code with ease. So, yes, Rust is hard, but does it matter in practical terms? Can we expect large-ish teams to succeed when adopting the language? I&amp;rsquo;d like to think that it does not matter much and that some initial difficulties in bringing people up to speed can pay off in the medium term.</description></item><item><title>Rust traits and dependency injection</title><link>https://jmmv.dev/2022/04/rust-traits-and-dependency-injection.html</link><pubDate>Fri, 22 Apr 2022 09:30:00 -0700</pubDate><guid>https://jmmv.dev/2022/04/rust-traits-and-dependency-injection.html</guid><description>Dependency injection is one of my favorite design patterns to develop highly-testable and modular code. Unfortunately, applying this pattern by taking Rust traits as arguments to public functions has unintended consequences on the visibility of private symbols. If you are not careful, most of your crate-internal APIs might need to become public just because you needed to parameterize a function with a trait. Let&amp;rsquo;s look at why this happens and what we can do about it.</description></item><item><title>A year on Windows: Introduction</title><link>https://jmmv.dev/2022/03/a-year-on-windows-intro.html</link><pubDate>Mon, 07 Mar 2022 06:30:00 -0800</pubDate><guid>https://jmmv.dev/2022/03/a-year-on-windows-intro.html</guid><description>&lt;ul>
&lt;li>&lt;b>2022-03-07&lt;/b>: &lt;a href="https://jmmv.dev/2022/03/a-year-on-windows-intro.html">Introduction&lt;/a>&lt;/li>
&lt;li>&lt;b>2022-03-08&lt;/b>: &lt;a href="https://jmmv.dev/2022/03/a-year-on-windows-shortcuts.html">Keyboard shortcuts&lt;/a>&lt;/li>
&lt;li>&lt;b>2022-03-09&lt;/b>: &lt;a href="https://jmmv.dev/2022/03/a-year-on-windows-input.html">Input methods&lt;/a>&lt;/li>
&lt;li>&lt;b>2022-03-10&lt;/b>: &lt;a href="https://jmmv.dev/2022/03/a-year-on-windows-gui.html">Look&amp;#39;n&amp;#39;feel&lt;/a>&lt;/li>
&lt;li>&lt;b>2022-03-11&lt;/b>: &lt;a href="https://jmmv.dev/2022/03/a-year-on-windows-alt-tab.html">Window switching&lt;/a>&lt;/li>
&lt;li>&lt;b>2022-03-12&lt;/b>: &lt;a href="https://jmmv.dev/2022/03/a-year-on-windows-powertoys.html">PowerToys&lt;/a>&lt;/li>
&lt;li>&lt;b>2022-03-13&lt;/b>: &lt;a href="https://jmmv.dev/2022/03/a-year-on-windows-tools.html">Miscellaneous tools&lt;/a>&lt;/li>
&lt;li>&lt;b>2022-03-14&lt;/b>: &lt;a href="https://jmmv.dev/2022/03/a-year-on-windows-devel.html">Development experience&lt;/a>&lt;/li>
&lt;li>&lt;b>2022-03-15&lt;/b>: &lt;a href="https://jmmv.dev/2022/03/a-year-on-windows-powershell.html">PowerShell&lt;/a>&lt;/li>
&lt;li>&lt;b>2022-03-16&lt;/b>: &lt;a href="https://jmmv.dev/2022/03/a-year-on-windows-networked-fs.html">Networked file systems&lt;/a>&lt;/li>
&lt;li>&lt;b>2022-03-17&lt;/b>: &lt;a href="https://jmmv.dev/2022/03/a-year-on-windows-debugging.html">System debugging&lt;/a>&lt;/li>
&lt;li>&lt;b>2022-03-18&lt;/b>: &lt;a href="https://jmmv.dev/2022/03/a-year-on-windows-winget.html">Software installation&lt;/a>&lt;/li>
&lt;li>&lt;b>2022-03-19&lt;/b>: &lt;a href="https://jmmv.dev/2022/03/a-year-on-windows-finale.html">Finale&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>A bit over a week ago, I narrated &lt;a href="https://jmmv.dev/2022/02/my-story-with-windows.html">my decades-long love and hate relationship with Windows&lt;/a>. Today, it&amp;rsquo;s time to &lt;em>start&lt;/em> covering my impressions of this platform after spending a year on it as my primary OS. This is noteworthy because I had been a Unix-only person for about 25 years and spent the last 15 on macOS alone. Switching to Windows 10 and 11 has been quite a change and&amp;hellip; for the most part, a positive one. I like what I&amp;rsquo;ve seen.&lt;/p></description></item><item><title>EndBASIC 0.8: Now, with graphics!</title><link>https://jmmv.dev/2021/11/endbasic-0.8.html</link><pubDate>Thu, 11 Nov 2021 09:45:00 -0800</pubDate><guid>https://jmmv.dev/2021/11/endbasic-0.8.html</guid><description>&lt;p>Graphics support has finally landed in EndBASIC and, with that, the 0.8 release is finally here.&lt;/p>
&lt;p>This release marks a huge milestone in the development of EndBASIC. Supporting graphics is something I&amp;rsquo;ve had in mind since the very beginning but had been procrastinating on until a couple of months ago. I feared everything that would be involved in delivering this feature, and to be fair, I was right: getting the desktop console to work on all platforms, and especially getting it to work in CI for automated testing, was tedious. But it&amp;rsquo;s done now.&lt;/p></description></item><item><title>EndBASIC 0.7: Hello, cloud!</title><link>https://jmmv.dev/2021/07/endbasic-0.7.html</link><pubDate>Sat, 03 Jul 2021 16:45:00 -0700</pubDate><guid>https://jmmv.dev/2021/07/endbasic-0.7.html</guid><description>&lt;p>Several months have passed since the last EndBASIC release and, since then, you might have seen me talk nonstop about an &amp;ldquo;EndBASIC service&amp;rdquo; in social media&amp;hellip; which has sounded like vaporware. That changes today.&lt;/p>
&lt;p>After about four months of work, I am ecstatic to announce that EndBASIC 0.7 is here. And these haven&amp;rsquo;t been four months of idle time. No, no, no. It has taken four months of my scarce free time to deliver this because 0.7 is a humongous release on various fronts.&lt;/p></description></item><item><title>Always be quitting</title><link>https://jmmv.dev/2021/04/always-be-quitting.html</link><pubDate>Mon, 12 Apr 2021 09:00:00 -0700</pubDate><guid>https://jmmv.dev/2021/04/always-be-quitting.html</guid><description>&lt;p>A good philosophy to live by at work is to &amp;ldquo;always be quitting&amp;rdquo;. No, don&amp;rsquo;t be constantly thinking of leaving your job 😱. But act as if you might leave on short notice 😎. Counterintuitively, this will make you a better engineer and open up growth opportunities. A thread 👇.&lt;/p></description></item><item><title>How does Google keep build times low?</title><link>https://jmmv.dev/2021/02/google-monorepos-and-caching.html</link><pubDate>Fri, 26 Feb 2021 09:50:00 -0800</pubDate><guid>https://jmmv.dev/2021/02/google-monorepos-and-caching.html</guid><description>Monorepos are an interesting beast. If mended properly, they enable a level of uniformity and code quality that is hard to achieve otherwise. If left unattended, however, they become unmanageable monsters of tangled dependencies, slow builds, and frustrating developer experiences. Whether you have a good or bad experience directly depends on the level of engineering support behind the monorepo. Simply put, monorepos require dedicated teams and tools to run nicely. In this post, I will look at how almost-perfect caching plays a key role in keeping build times manageable under such an environment.</description></item><item><title>How does Google avoid clean builds?</title><link>https://jmmv.dev/2020/12/google-no-clean-builds.html</link><pubDate>Thu, 31 Dec 2020 09:30:00 -0800</pubDate><guid>https://jmmv.dev/2020/12/google-no-clean-builds.html</guid><description>During my 11 years at Google, I can confidently count the number of times I had to do a &amp;ldquo;clean build&amp;rdquo; with one hand: their build system is so robust that incremental builds always work. Phrases like &amp;ldquo;clean everything and try building from scratch&amp;rdquo; are unheard of. So&amp;hellip; you can color me skeptical when someone says that incremental build problems are due to bugs in the build files and not due to a suboptimal build system. The answer lies in having a robust build system, and in this post I&amp;rsquo;ll examine the common causes behind incremental build breakages, what the build system can do to avoid them, and how Bazel accomplishes most of them.</description></item><item><title>Unit-testing a console app (a text editor)</title><link>https://jmmv.dev/2020/12/unit-testing-a-console-app.html</link><pubDate>Tue, 08 Dec 2020 10:00:00 -0800</pubDate><guid>https://jmmv.dev/2020/12/unit-testing-a-console-app.html</guid><description>The most notable feature in EndBASIC 0.3 is its new full-screen console-based text editor. In this post, I describe why it is important and useful to unit-test a console app like this, and I will dive into how to implement unit tests that catch regressions and inefficiencies. Code samples are in Rust, but the concepts presented here are applicable to any language with minimal data abstraction facilities.</description></item><item><title>Windows Subsystem for Linux: The lost potential</title><link>https://jmmv.dev/2020/11/wsl-lost-potential.html</link><pubDate>Fri, 13 Nov 2020 07:50:00 -0800</pubDate><guid>https://jmmv.dev/2020/11/wsl-lost-potential.html</guid><description>If you have followed Windows 10 at all during the last few years, you know that the Windows Subsystem for Linux, or WSL for short, is the hot topic among developers. You can finally run your Linux tooling on Windows as a first class citizen, which means you no longer have to learn PowerShell or, god forbid, suffer through the ancient CMD.EXE console.
Unfortunately, not everything is as rosy as it sounds.</description></item><item><title>Farewell, Google; hello, Microsoft!</title><link>https://jmmv.dev/2020/10/bye-google-hi-microsoft.html</link><pubDate>Mon, 19 Oct 2020 06:00:00 -0700</pubDate><guid>https://jmmv.dev/2020/10/bye-google-hi-microsoft.html</guid><description>After a little over 11 years, it&amp;rsquo;s time for a much longed change: I&amp;rsquo;m leaving Google and I&amp;rsquo;m joining Microsoft as a Principal Software Engineer for Azure. These job changes are effective as of this week, but my family and I already moved from New York City to Redmond, WA about three weeks ago. Read on for a recap on my tenure at Google, the whys behind my departure, and how I ended up choosing the position in Microsoft Azure after mulling over offers from Facebook, Twitter, and Microsoft.</description></item><item><title>Configuration files and .d directories</title><link>https://jmmv.dev/2020/08/config-files-vs-directories.html</link><pubDate>Mon, 17 Aug 2020 07:00:00 -0400</pubDate><guid>https://jmmv.dev/2020/08/config-files-vs-directories.html</guid><description>Have you ever wondered why an increasing number of programs are configured by placing small files in .d directories instead of by just editing a single file? Have you ever wondered why these .d directories seem to proliferate in Linux installations? Read on to understand what these are and why they are useful.</description></item><item><title>Bridging the web gap in EndBASIC</title><link>https://jmmv.dev/2020/05/bridging-the-web-gap-endbasic.html</link><pubDate>Sat, 30 May 2020 08:50:00 -0400</pubDate><guid>https://jmmv.dev/2020/05/bridging-the-web-gap-endbasic.html</guid><description>After a ton of work, a lot of which was unexpected, I am ecstatic to announce that EndBASIC is now a reality on the web! The whole language interpreter can now run as a fully client-side web app on a computer, on a tablet&amp;hellip; and even on a phone. Yes: the whole thing, which is written in Rust (94%), works in a modern browser with just a tiny bit of JavaScript glue (1%).</description></item><item><title>Hello, EndBASIC!</title><link>https://jmmv.dev/2020/04/hello-endbasic.html</link><pubDate>Wed, 22 Apr 2020 09:00:00 -0400</pubDate><guid>https://jmmv.dev/2020/04/hello-endbasic.html</guid><description>Introducing EndBASIC, a new interpreter for a BASIC-like language that is inspired by Amstrad&amp;rsquo;s Locomotive BASIC 1.1 and Microsoft&amp;rsquo;s QuickBASIC 4.5. Like the former, EndBASIC intends to provide an interactive environment that seamlessly merges coding with immediate visual feedback. Like the latter, EndBASIC offers higher-level programming constructs and strong typing. The main idea behind EndBASIC is to provide a playground for learning the foundations of programming in a simplified environment.</description></item></channel></rss>