<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>featured on jmmv.dev</title>
    <link>https://jmmv.dev/tags/featured/index/</link>
    <description>Recent content in featured on jmmv.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Nov 2020 07:50:00 -0800</lastBuildDate><atom:link href="https://jmmv.dev/tags/featured/index/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Windows Subsystem for Linux: The lost potential</title>
      <link>https://jmmv.dev/2020/11/wsl-lost-potential.html</link>
      <pubDate>Fri, 13 Nov 2020 07:50:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2020/11/wsl-lost-potential.html</guid>
      <description>If you have followed Windows 10 at all during the last few years, you know that the Windows Subsystem for Linux, or WSL for short, is the hot topic among developers. You can finally run your Linux tooling on Windows as a first class citizen, which means you no longer have to learn PowerShell or, god forbid, suffer through the ancient CMD.EXE console.
Unfortunately, not everything is as rosy as it sounds.</description>
    </item>
    
    <item>
      <title>Farewell, Google; hello, Microsoft!</title>
      <link>https://jmmv.dev/2020/10/bye-google-hi-microsoft.html</link>
      <pubDate>Mon, 19 Oct 2020 06:00:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2020/10/bye-google-hi-microsoft.html</guid>
      <description>After a little over 11 years, it&amp;rsquo;s time for a much longed change: I&amp;rsquo;m leaving Google and I&amp;rsquo;m joining Microsoft as a Principal Software Engineer üòä for Azure ‚òÅ. These job changes are effective as of this week, but my family and I already moved from New York City to Redmond, WA about three weeks ago.
 Me next to the Microsoft logo in front of the Visitor Center in Building 92 on a cloudy Saturday evening.</description>
    </item>
    
    <item>
      <title>Configuration files and .d directories</title>
      <link>https://jmmv.dev/2020/08/config-files-vs-directories.html</link>
      <pubDate>Mon, 17 Aug 2020 07:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/08/config-files-vs-directories.html</guid>
      <description>Have you ever wondered why an increasing number of programs are configured by placing small files in .d directories instead of by just editing a single file?
Have you ever wondered why these .d directories seem to proliferate in UnixLinux installations? Because a pretty bare-bones Debian installation (WSL) shows&amp;hellip; a ton of them:
debian:/etc&amp;gt; ls -ld *.d */*.d drwxr-xr-x 1 root root 4096 Aug 14 22:23 apparmor.d drwxr-xr-x 1 root root 4096 Aug 9 08:10 apt/apt.</description>
    </item>
    
    <item>
      <title>Bridging the web gap in EndBASIC</title>
      <link>https://jmmv.dev/2020/05/bridging-the-web-gap-endbasic.html</link>
      <pubDate>Sat, 30 May 2020 08:50:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/05/bridging-the-web-gap-endbasic.html</guid>
      <description>After a ton of work, a lot of which was unexpected, I am ecstatic to announce that EndBASIC is now a reality on the web! The whole language interpreter can now run as a fully client-side web app on a computer, on a tablet&amp;hellip; and even on a phone. Yes: the whole thing, which is written in Rust (94%), works in a modern browser with just a tiny bit of JavaScript glue (1%).</description>
    </item>
    
    <item>
      <title>Hello, EndBASIC!</title>
      <link>https://jmmv.dev/2020/04/hello-endbasic.html</link>
      <pubDate>Wed, 22 Apr 2020 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/04/hello-endbasic.html</guid>
      <description>INPUT&amp;#34;Did you ever experience BASIC (true/false)&amp;#34;;answer? IFanswer?THEN PRINT&amp;#34;Great; you are in for a treat!&amp;#34; ELSE PRINT&amp;#34;Oh noes; try today?&amp;#34; ENDIF I have pretty fond memories of my Amstrad CPC 6128 and its Locomotive BASIC 1.1. The experience was quite unique as the computer was ready to take commands in a couple of seconds, and those commands you typed had an immediate effect on the screen. Changing colors, drawing, playing sounds&amp;hellip; were all at your fingertips, which was pretty exciting for a young boy.</description>
    </item>
    
    <item>
      <title>Ensuring system rewrites are truly necessary</title>
      <link>https://jmmv.dev/2020/01/system-rewrites-and-tuning.html</link>
      <pubDate>Fri, 24 Jan 2020 17:10:00 +0000</pubDate>
      
      <guid>https://jmmv.dev/2020/01/system-rewrites-and-tuning.html</guid>
      <description>I think it&amp;rsquo;s safe to say that software engineers&amp;mdash;hey, I&amp;rsquo;m one one myself!&amp;mdash;often dream about what the rewrite of a system would look like if they had the chance to start over. Oh so much more usable. Oh so much better structured. Oh so much faster! We are architects after all.
And it might be true that a rewrite can deliver those benefits. But often enough, we are too quick to let our minds wander into that territory.</description>
    </item>
    
    <item>
      <title>Sample REST interface in Rust and Go</title>
      <link>https://jmmv.dev/2019/09/rest-api-rust-go.html</link>
      <pubDate>Fri, 27 Sep 2019 06:45:40 +0500</pubDate>
      
      <guid>https://jmmv.dev/2019/09/rest-api-rust-go.html</guid>
      <description>Over the summer, I prototyped a bunch of web apps whose ideas had been floating in my mind for a long time. I spent some time reading through REST API documentation pages and, as part of these exercises, implemented sample RESTful web services in both Go and Rust. (Just for context, the last time I wrote a web app was in high school&amp;hellip; and it involved PHP, MySQL, and I think IE6?</description>
    </item>
    
    <item>
      <title>Darwin&#39;s QoS service classes and performance</title>
      <link>https://jmmv.dev/2019/03/macos-threads-qos-and-bazel.html</link>
      <pubDate>Wed, 06 Mar 2019 17:30:00 +0100</pubDate>
      
      <guid>https://jmmv.dev/2019/03/macos-threads-qos-and-bazel.html</guid>
      <description>Since the publication of Bazel a few years ago, users have reported (and I myself have experienced) general slowdowns when Bazel is running on Macs: things like the window manager stutter and others like the web browser cannot load new pages. Similarly, after the introduction of the dynamic spawn scheduler, some users reported slower builds than pure remote or pure local builds, which made no sense.
All along we guessed that these problems were caused by Bazel&amp;rsquo;s abuse of system threads, as it used to spawn 200 runnable threads during analysis and used to run 200 concurrent compiler subprocesses.</description>
    </item>
    
    <item>
      <title>Hello, sandboxfs 0.1.0</title>
      <link>https://jmmv.dev/2019/02/sandboxfs-0-1-0.html</link>
      <pubDate>Tue, 05 Feb 2019 09:00:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2019/02/sandboxfs-0-1-0.html</guid>
      <description>I am pleased to announce that the first release of sandboxfs, 0.1.0, is finally here! You can download the sources and prebuilt binaries from the 0.1.0 release page and you can read the installation instructions for more details.
The journey to this first release has been a long one. sandboxfs was first conceived over two years ago, was first announced in August 2017, showed its first promising results in April 2018, and has been undergoing a rewrite from Go to Rust.</description>
    </item>
    
    <item>
      <title>Rust vs. Go</title>
      <link>https://jmmv.dev/2018/07/rust-vs-go.html</link>
      <pubDate>Fri, 13 Jul 2018 10:45:00 +0200</pubDate>
      
      <guid>https://jmmv.dev/2018/07/rust-vs-go.html</guid>
      <description>Welcome to the Rust Review&amp;rsquo;s bonus post, which I had promised from the very beginning. I&amp;rsquo;m here to cover the big elephant in the room: Rust vs. Go. Which one is better?
There is no good answer to this question because this comparison is unfounded. I think people tend to bundle the two languages together because they were released at about the same time and the release of Rust felt like a response to the release of Go.</description>
    </item>
    
    <item>
      <title>Stick to your project&#39;s core language in your tests</title>
      <link>https://jmmv.dev/2018/03/stick-to-projects-core-language-in-tests.html</link>
      <pubDate>Tue, 27 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://jmmv.dev/2018/03/stick-to-projects-core-language-in-tests.html</guid>
      <description>&lt;p&gt;&lt;em&gt;This post is a short, generalized summary of the preceeding two. I believe those two posts put readers off due to their massive length and the fact that they were seemingly tied to Bazel and Java, thus failing to communicate the larger point I wanted to make. Let&amp;rsquo;s try to distill their key points here in a language- and project-agnostic manner.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;</description>
    </item>
    
    <item>
      <title>Shell readability: strict mode</title>
      <link>https://jmmv.dev/2018/03/shell-readability-strict-mode.html</link>
      <pubDate>Fri, 09 Mar 2018 09:40:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/03/shell-readability-strict-mode.html</guid>
      <description>Some programming languages have a feature known as strict mode: a setting that makes the language interpreter disallow certain obviously-broken code that would otherwise work. The simplest examples are JavaScript and Perl but, as it turns out, the shell also has something akin to this feature. The &amp;ldquo;strict mode&amp;rdquo; name, however, is unofficial, so you won&amp;rsquo;t find many references to it online.
You can enable the shell&amp;rsquo;s strict mode by doing one of the following:</description>
    </item>
    
    <item>
      <title>Introducing pkg_comp 2.0 (and sandboxctl 1.0)</title>
      <link>https://jmmv.dev/2017/02/introducing-pkg_comp-2.0.html</link>
      <pubDate>Fri, 17 Feb 2017 16:37:06 -0500</pubDate>
      
      <guid>https://jmmv.dev/2017/02/introducing-pkg_comp-2.0.html</guid>
      <description>After many (many) years in the making, pkg_comp 2.0 and its companion sandboxctl 1.0 are finally here!
Read below for more details on this launch. I will publish detailed step-by-step tutorials on setting up periodic package rebuilds in separate posts.
What are these tools? pkg_comp is an automation tool to build pkgsrc binary packages inside a chroot-based sandbox. The main goal is to fully automate the process and to produce clean and reproducible packages.</description>
    </item>
    
    <item>
      <title>#! /usr/bin/env considered harmful</title>
      <link>https://jmmv.dev/2016/09/env-considered-harmful.html</link>
      <pubDate>Wed, 14 Sep 2016 07:07:46 -0400</pubDate>
      
      <guid>https://jmmv.dev/2016/09/env-considered-harmful.html</guid>
      <description>Many programming guides recommend to begin scripts with the #! /usr/bin/env shebang in order to to automatically locate the necessary interpreter. For example, for a Python script you would use #! /usr/bin/env python, and then the saying goes, the script would &amp;ldquo;just work&amp;rdquo; on any machine with Python installed.
The reason for this recommendation is that /usr/bin/env python will search the PATH for a program called python and execute the first one found&amp;hellip; and that usually works fine on one&amp;rsquo;s own machine.</description>
    </item>
    
    <item>
      <title>A look at Go from a newbie&#39;s perspective</title>
      <link>https://jmmv.dev/2016/03/golang-review.html</link>
      <pubDate>Tue, 22 Mar 2016 17:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2016/03/golang-review.html</guid>
      <description>I confess I am late to the game: the Go programming language came out in 2009 and I had not had the chance to go all in for a real project until two weeks ago. Here is a summary of my experience. Spoiler alert: I&amp;rsquo;m truly pleased.
The project What I set out to build is a read-only caching file system to try to solve the problems I presented in my previous analysis of large builds on SSHFS.</description>
    </item>
    
  </channel>
</rss>
