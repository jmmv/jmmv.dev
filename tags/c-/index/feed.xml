<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/c-/index.html</link><description>Recent content in C++ on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2025 Julio Merino</copyright><lastBuildDate>Wed, 24 Nov 2021 09:15:00 -0800</lastBuildDate><atom:link href="https://jmmv.dev/tags/c-/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Constructors and evil initializers in C++</title><link>https://jmmv.dev/2021/11/cpp-ctors-vs-init.html</link><pubDate>Wed, 24 Nov 2021 09:15:00 -0800</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2021/11/cpp-ctors-vs-init.html</guid><description>One of the three key tenets of Object Oriented Programming (OOP) is encapsulation: objects contain a state that, when observed from the outside, is always internally-consistent. Unfortunately, C++ codebases where exceptions are forbidden often violate this rule when they separate object initialization from construction. Let&amp;rsquo;s see why that&amp;rsquo;s a problem and how to address it.</description></item><item><title>Definitions and initializations in C++</title><link>https://jmmv.dev/2021/07/cpp-definition-initialization.html</link><pubDate>Mon, 12 Jul 2021 06:20:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2021/07/cpp-definition-initialization.html</guid><description>When reviewing an incoming C++ PR last week, I left a comment along the lines: &amp;ldquo;merge local variable declaration with its initialization&amp;rdquo;. But why? Is this just a stylistic issue or is there something deeper to warrant making the change? Let&amp;rsquo;s look at stack frames, C, and then C++ to answer these questions.</description></item></channel></rss>