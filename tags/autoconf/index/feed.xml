<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Autoconf on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/autoconf/index.html</link><description>Recent content in Autoconf on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&#150;2025 Julio Merino</copyright><lastBuildDate>Tue, 06 Sep 2011 18:05:00 -0400</lastBuildDate><atom:link href="https://jmmv.dev/tags/autoconf/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Diversions in Autoconf (actually, in M4sugar)</title><link>https://jmmv.dev/2011/09/diversions-in-autoconf-actually-in.html</link><pubDate>Tue, 06 Sep 2011 18:05:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2011/09/diversions-in-autoconf-actually-in.html</guid><description>Have you ever wondered how Autoconf reorganizes certain parts of your script regardless of the order in which you invoke the macros in your &lt;tt>configure.ac&lt;/tt> script? For example, how come you can define &lt;tt>--with-*&lt;/tt> and &lt;tt>--enable-*&lt;/tt> flags anywhere in your script and these are all magically moved to the option-processing section of the final shell script? After all, Autoconf is just a collection of M4 macros, and a macro preprocessor's only work is to expand macros in the input with predefined output texts. Isn't it?&lt;br />&lt;br />Enter &lt;a href="http://www.gnu.org/s/hello/manual/autoconf/Diversion-support.html#Diversion-support">M4sugar's diversions&lt;/a>. Diversions are a mechanism that allows M4 macros to output code to different text blocks, which are later concatenated in a specific order to form the final script.&lt;br />&lt;br />Let's consider an example (based on a few M4 macros to &lt;a href="http://mtn-host.prjek.net/viewmtn/atf/revision/file/7ae5fa10200ec66c26f08c27e4aeaf3facf3f031/atf-c/atf-common.m4">detect the ATF bindings&lt;/a> from your own configure scripts). Suppose you want to define a macro &lt;tt>FROB_ARG&lt;/tt> to provide a &lt;tt>--with-frob&lt;/tt> argument whose argument must be either "yes" or "no". Also suppose you want to have another macro &lt;tt>FROB_CHECK&lt;/tt> to detect whether &lt;tt>libfrob&lt;/tt> exists. Lastly, you want the user to be able to use these two independently: when &lt;tt>FROB_CHECK&lt;/tt> is used &lt;i>without&lt;/i> invoking &lt;tt>FROB_ARG&lt;/tt> first, you want it to unconditionally look for the library; otherwise, if &lt;tt>FROB_ARG&lt;/tt> has been used, you want to honor its value.&lt;br />&lt;br />We could define these macros as follows:&lt;br />&lt;br />&lt;pre>AC_DEFUN([FROB_ARG], [&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; AC_ARG_WITH([frob],&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; [AS_HELP_STRING([--with-frob=yes|no], [enable frob])],&lt;br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [with_frob=${withval}, [with_frob=yes]) &lt;br />])&lt;br />&lt;br />AC_DEFUN([FROB_CHECK], [&lt;br />&amp;nbsp; &amp;nbsp; m4_divert_text([DEFAULTS], [with_frob=yes])&lt;br />&lt;br />&amp;nbsp; &amp;nbsp; if test "${with_frob}" = yes; then&lt;br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ... code to search for libfrob ... &lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; elif test "${with_frob}" = no; then&lt;br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; :&amp;nbsp; # Nothing to do. &lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; else&lt;br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; AC_MSG_ERROR([--with-frob must be yes or not]) &lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; fi&lt;br />])&lt;/pre>&lt;br />Note the &lt;tt>m4_divert_text&lt;/tt> call above: this macro invocation tells M4sugar to store the given text (&lt;tt>with_frob=yes&lt;/tt>) in the &lt;tt>DEFAULTS&lt;/tt> diversion. When the script is later generated, this text will appear at the beginning of the script before the command-line options are processed, completely separated from the shell logic that consumes this value later on.&lt;br />&lt;br />With this we ensure that the &lt;tt>with_frob&lt;/tt> shell variable is always defined regardless of the call to the &lt;tt>FROB_ARG&lt;/tt> macro. If this macro is called, &lt;tt>with_frob&lt;/tt> will be defined during the processing of the options and will override the value of the variable defined in the &lt;tt>DEFAULTS&lt;/tt> section. However, if the macro has not been called, the variable will keep its default value for the duration of the script.&lt;br />&lt;br />Of course, this example is fictitious and could be simplified in other ways. But, as you can see in the &lt;a href="http://mtn-host.prjek.net/viewmtn/atf/revision/file/7ae5fa10200ec66c26f08c27e4aeaf3facf3f031/atf-c/atf-common.m4">referred change&lt;/a> and in the Autoconf code itself, diversions are extensively used for trickier purposes. In fact, Autoconf uses diversions to topologically sort macro dependencies in your script and output them in a specific order to satisfy cross-dependencies.&lt;br />&lt;br />Isn't that cool?&amp;nbsp; I can't cease to be amazed, but I also don't dare to look at how this works internally for my own sanity...</description></item></channel></rss>