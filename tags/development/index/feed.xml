<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/development/index.html</link><description>Recent content in Development on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 12 Mar 2021 06:30:00 -0800</lastBuildDate><atom:link href="https://jmmv.dev/tags/development/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Defining build time SLIs and SLOs</title><link>https://jmmv.dev/2021/03/build-time-slis-slos.html</link><pubDate>Fri, 12 Mar 2021 06:30:00 -0800</pubDate><guid>https://jmmv.dev/2021/03/build-time-slis-slos.html</guid><description>Companies grow, and with them do the software projects that support them. It should be no surprise that larger programs require longer build times. And, if I had to guess, you have seen how those build times eventually grow to unbearable levels, reducing productivity and degrading quality. In this post, I examine how we can leverage the common techniques we use for production services&amp;mdash;namely SLIs and SLOs&amp;mdash;to keep build times on track.</description></item><item><title>Visual Studio Code: A modern editor</title><link>https://jmmv.dev/2016/04/vscode.html</link><pubDate>Tue, 19 Apr 2016 11:30:00 -0400</pubDate><guid>https://jmmv.dev/2016/04/vscode.html</guid><description>&lt;p>On April 14th, 2016, Microsoft announced the &lt;a href="http://code.visualstudio.com/blogs/2016/04/14/vscode-1.0">1.0 release&lt;/a> of their open-source &lt;a href="http://code.visualstudio.com">Visual Studio Code (VSCode)&lt;/a> editor. I&amp;rsquo;ve been drive-testing it for a few months and have been quite pleased with it, so here go my impressions.&lt;/p>
&lt;h1 id="how-did-i-get-here">How did I get here?&lt;/h1>
&lt;p>Let&amp;rsquo;s backtrack a bit first. I&amp;rsquo;ve been a Vim and Emacs user for many years. Yes, I use both &lt;em>regularly&lt;/em> depending on what I have to achieve. For me, Vim shines in doing quick single-file changes and repetitive edits through many files, while Emacs shines in long-lived coding sessions that involve numerous open buffers. These editors are well-suited to &lt;a href="https://jmmv.dev/2015/09/my-coding-workflow.html">my remote-based coding workflow&lt;/a> because they run just fine in the terminal. However, sometimes I just &lt;em>would like to&lt;/em> take advantage of the desktop environment and the GUI of these two editors on OS X&amp;hellip; err.. sucks&amp;hellip; so I&amp;rsquo;ve been wanting to find something else.&lt;/p></description></item><item><title>My coding workflow</title><link>https://jmmv.dev/2015/09/my-coding-workflow.html</link><pubDate>Mon, 07 Sep 2015 12:00:00 -0400</pubDate><guid>https://jmmv.dev/2015/09/my-coding-workflow.html</guid><description>&lt;p>&lt;strong>How would you best organize your work environment for maximum productivity if you were tasked to develop a type of application you had never developed before?&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Wouldn&amp;rsquo;t it be nice if you could witness how an experienced developer manages the tools of the craft so that you could draw ideas and incorporate them into your own workflow?&lt;/strong>&lt;/p>
&lt;p>&lt;strong>This post aims to answer the above for the type of work I do by sharing how my workflow looks like. I want to compel you to share your own story in the comments section, and by doing so, create a collection of stories so that others can benefit from them.&lt;/strong>&lt;/p></description><enclosure url="https://jmmv.dev/images/2015-09-08-header.png" length="1242379" type="image/jpeg"/></item><item><title>How to commit a code hack and not perish along the way</title><link>https://jmmv.dev/2015/06/how-to-commit-a-code-hack.html</link><pubDate>Fri, 19 Jun 2015 12:00:00 -0400</pubDate><guid>https://jmmv.dev/2015/06/how-to-commit-a-code-hack.html</guid><description>&lt;p>&lt;strong>You are the developer in charge to resolve a problem and have prepared a &lt;em>&lt;a href="http://svnbook.red-bean.com/en/1.7/svn.advanced.changelists.html">changelist&lt;/a>&lt;/em> to fix the bug. You need the changelist to be reviewed by someone else before checkin. Your changelist &lt;em>is&lt;/em> an ugly hack.&lt;/strong>&lt;/p>
&lt;p>&lt;strong>What kind of response are you gonna get from your reviewer? Well as with everything: &lt;em>it depends!&lt;/em>&lt;/strong>&lt;/p>
&lt;p>(Cover image courtesy of &lt;a href="http://www.startupstockphotos.com/">http://www.startupstockphotos.com/&lt;/a>.)&lt;/p>
&lt;hr>
&lt;p>If you have:&lt;/p>
&lt;ol>
&lt;li>clearly stated upfront that the changelist &lt;em>is&lt;/em> a hack,&lt;/li>
&lt;li>explained &lt;em>how&lt;/em> it is a hack,&lt;/li>
&lt;li>&lt;em>justified&lt;/em> that the hack is the right thing to do at this moment, and&lt;/li>
&lt;li>outlined what the &lt;em>real solution&lt;/em> to get rid of the hack would be&lt;/li>
&lt;/ol>
&lt;p>&lt;em>then&lt;/em> your reviewer will most likely just accept the change without fuss (!) and will proceed to review its contents per se. But if you miss &lt;em>any&lt;/em> of those steps, then your reviewer is going to be super-critical about your changelist &lt;em>and&lt;/em> any further related changes you may want to commit.&lt;/p></description><enclosure url="https://jmmv.dev/images/2015-06-19-header.jpg" length="245551" type="image/jpeg"/></item></channel></rss>