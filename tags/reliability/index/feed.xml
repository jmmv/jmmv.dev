<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reliability on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/reliability/index.html</link><description>Recent content in Reliability on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2024 Julio Merino</copyright><lastBuildDate>Tue, 24 Jul 2018 09:00:00 -0400</lastBuildDate><atom:link href="https://jmmv.dev/tags/reliability/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>The fallacy of forbidding assertions</title><link>https://jmmv.dev/2018/07/forbidden-assertions-fallacy.html</link><pubDate>Tue, 24 Jul 2018 09:00:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2018/07/forbidden-assertions-fallacy.html</guid><description>&lt;p>There are two ways to handle abnormal conditions in a program: errors and assertions.&lt;/p>
&lt;p>&lt;strong>Errors are a controlled mechanism by which the program propagates details about a &lt;em>faulty condition&lt;/em> up the call chain&lt;/strong>â€”be it with explicit error return statements or with exceptions. Errors must be used to validate all &lt;em>conditions that might be possible but aren&amp;rsquo;t valid&lt;/em> given the context. Examples include: sanitizing any kind of input (as provided by the user or incoming from the network), and handling error codes from system calls or libraries.&lt;/p></description></item></channel></rss>