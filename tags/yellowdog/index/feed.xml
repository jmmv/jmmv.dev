<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Yellowdog on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/yellowdog/index.html</link><description>Recent content in Yellowdog on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2025 Julio Merino</copyright><lastBuildDate>Fri, 16 Mar 2007 04:25:00 -0400</lastBuildDate><atom:link href="https://jmmv.dev/tags/yellowdog/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Building an updated kernel for the PS3</title><link>https://jmmv.dev/2007/03/building-updated-kernel-for-ps3.html</link><pubDate>Fri, 16 Mar 2007 04:25:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2007/03/building-updated-kernel-for-ps3.html</guid><description>The mainstream Linux sources have some support for the PlayStation 3, but it is marked as incomplete. Trying to boot such a kernel results in a stalled machine, as the kernel configuration option says:&lt;br />&lt;blockquote>CONFIG_PPC_PS3: This option enables support for the Sony PS3 game console and other platforms using the PS3 hypervisor. Support for this platform is not yet complete, so enabling this will not result in a bootable kernel on a PS3 system.&lt;/blockquote>To make things easier, I'd simply have used the Linux sources provided by YellowDog Linux 5 (YDL5), which correspond to a modified 2.6.16 kernel. However, as I have to do some kernel development on this platform, I objected to using such old sources: when developing for an open source project, it is much better to use the development branch of the code — if available — because custom changes will remain synchronized with mainstream changes. This means that, if those changes are accepted by the maintainers, it will be a lot easier to later merge them with the upstream code.&lt;br />&lt;br />So, after a bit of fiddling, I found the public kernel branch used to develop for the PS3. It is named &lt;tt>ps3-linux&lt;/tt>, is maintained by Geoff Levand and can be found in the kernel's git repository under the project &lt;a href="http://git.kernel.org/?p=linux/kernel/git/geoff/ps3-linux.git;a=summary">linux/kernel/git/geoff/ps3-linux.git&lt;/a>.&lt;br />Fetching the code was "interesting". I was (and still am) a novice to &lt;a href="http://git.or.cz/">git&lt;/a>, but fortunately my prior experiences with CVS, Subversion and specially Monotone helped to understand what was going on.&lt;br />&lt;br />Let's now see how to fetch the code, cross-build a custom kernel and install it on the PS3 using YDL5.&lt;br />&lt;br />To checkout the latest code, which at this moment corresponds to a patched Linux 2.6.21-rc3 sources, do this:&lt;br />&lt;br />&lt;tt>$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/geoff/ps3-linux.git ps3-linux&lt;/tt>&lt;br />&lt;br />This will clone the &lt;tt>ps3-linux&lt;/tt> project from the main repository and leave it in a directory with the same name. You can keep it up to date by running &lt;tt>git pull&lt;/tt> within the directory, but I'm not going to talk about git any more today.&lt;br />&lt;br />As I cross-compile the PS3 kernel from a FC6 Intel-based machine with the Cell SDK 2.0, I need to tell it which is the target platform and which is the cross-compiler before being able to build or even configure a kernel. I manually add these lines to the top-level &lt;tt>Makefile&lt;/tt>, but setting them in the environment should work too:&lt;br />&lt;br />&lt;tt>ARCH=powerpc&lt;br />&lt;br />CROSS_COMPILE=ppu-&lt;/tt>&lt;br />&lt;br />Now you can create a sample configuration file by executing the following command inside the tree:&lt;br />&lt;br />&lt;tt>$ make ps3_defconfig&lt;/tt>&lt;br />&lt;br />Then proceed to modify the default configuration to your likings. To ease development, I want my kernels to be as small and easy to install as possible; this reduces the test-build-install-reboot cycle to the minimum (well, not exactly; see below). Therefore I disable all stuff I do not need, which includes modules support. Why? Keeping all the code in a single image will make later installation a lot easier.&lt;br />&lt;br />Once the kernel is configured, it is time to build it. But before doing so you need to install a helper utility used by the PS3 build code: the &lt;a href="http://dtc.ozlabs.org/">Device Tree Compiler&lt;/a> (or dtc). Fetch its sources from the git repository that appears in that page, run &lt;tt>make&lt;/tt> to build it and manually install the &lt;tt>dtc&lt;/tt> binary into &lt;tt>/usr/local/bin&lt;/tt>.&lt;br />&lt;br />With the above done, just run &lt;tt>make&lt;/tt> and wait until your kernel is built. Then copy the resulting &lt;tt>vmlinux&lt;/tt> file to your PS3; I put mine in &lt;tt>/boot/vmlinux-jmerino&lt;/tt> to keep its name version-agnostic and specific to my user account. Note that I do not have to mess with modules as I disabled them; otherwise I'd have to copy them all to the machine — or alternatively set up a NFS root for simplicity as described in &lt;a href="http://www.kernel.org/pub/linux/kernel/people/geoff/cell/ps3-nfs-root-howto.txt">Geoff Levand's HOWTO&lt;/a>.&lt;br />&lt;br />To boot the kernel, you should know that the PS3 uses the &lt;tt>kboot&lt;/tt> boot loader, a minimal Linux system that chainloads another Linux system by means of the &lt;tt>kexec&lt;/tt> functionality. It is very powerful, but the documentation is scarce. Your best bet is to mimic the entries already present in the file. With this in mind, I added the following line to &lt;tt>/etc/kboot.conf&lt;/tt>:&lt;br />&lt;br />&lt;tt>jmerino='/dev/sda1:/vmlinux-jmerino root=/dev/sda2 init=/sbin/init 4'&lt;/tt>&lt;br />&lt;br />I'd much rather fetch the kernel from a TFTP server, but I have not got this to work yet. Anyway, note that the above line does &lt;i>not&lt;/i> specify an &lt;tt>initrd&lt;/tt> image, although all the other entries in the file do. I did this on purpose: the less magic in the boot, the better. However, bypassing the &lt;tt>initrd&lt;/tt> results in a failed boot with:&lt;br />&lt;br />&lt;tt>Warning: Unable to open an initial console.&lt;/tt>&lt;br />&lt;br />This is because the &lt;tt>/dev&lt;/tt> directory on the root partition is unpopulated, as YDL5 uses udev. Hence the need for an &lt;tt>initrd&lt;/tt> image. Getting a workaround for this is trivial though: just create the minimum necessary devices on the disk — "below udev" &amp;mdash;, as shown below.&lt;br />&lt;br />&lt;tt># mount --bind / /mnt&lt;br />&lt;br /># MAKEDEV -d /mnt/dev console zero null&lt;br />&lt;br /># umount /mnt&lt;/tt>&lt;br />&lt;br />And that's it! Your new, fresh and custom kernel is ready to be executed. Reboot the PS3, wait for the &lt;tt>kboot&lt;/tt> prompt and type your configuration name (&lt;tt>jmerino&lt;/tt> in my case). If all goes fine, the kernel should boot and then start userland initialization.&lt;br />&lt;br />Thanks go to the guys at the &lt;a href="https://ozlabs.org/mailman/listinfo/cbe-oss-dev">cbe-oss-dev&lt;/a> mailing list for &lt;a href="http://ozlabs.org/pipermail/cbe-oss-dev/2007-March/001314.html">helping me&lt;/a> in building the kernel and solving the missing console problem.&lt;br />&lt;br />&lt;b>Update (23:01)&lt;/b>: Added a link to a NFS-root tutorial.</description></item><item><title>Building the libspe2 on the PS3</title><link>https://jmmv.dev/2007/03/building-libspe2-on-ps3.html</link><pubDate>Wed, 14 Mar 2007 11:33:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2007/03/building-libspe2-on-ps3.html</guid><description>The Linux kernel, when built for a Cell-based platform, provides the &lt;i>&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_0">spufs&lt;/span>&lt;/i> pseudo-file system that allows &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_1">userland&lt;/span> applications to interact with the Synergistic Processing Engines (&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_2">SPEs&lt;/span>). However, this interface is too low-level to be useful for application-level programs and hence another level of abstraction is provided over it through the &lt;i>&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_3">libspe&lt;/span>&lt;/i> library.&lt;br />&lt;br />There are two versions of the &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_4">libspe&lt;/span>:&lt;br />&lt;ul>&lt;li>1.x: Distributed as part of the Cell &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_5">SDK&lt;/span> 2.0, is the most widely used nowadays by applications designed to run on the Cell architecture.&lt;/li>&lt;li>2.x: A rewrite of the library that provides a better and cleaner interface — e.g. less black boxes —, but which is currently distributed for evaluation and testing purposes. Further development will happen on this version, so I needed to have it available.&lt;br />&lt;/li>&lt;/ul>The &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_6">YellowDog&lt;/span> Linux 5.0 (&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_7">YDL&lt;/span>5) distribution for the PlayStation 3 only provides an &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_8">SRPM&lt;/span> package for the 1.x version, but there is no support for 2.x. Fortunately, installing the &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_9">libspe&lt;/span>2 is trivial if you use the appropriate &lt;a href="http://www.bsc.es/plantillaH.php?cat_id=254">binary packages provided by &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_10">BSC&lt;/span>&lt;/a>, but things get interesting if you try to build it from sources. As I need to inspect its code and do some changes in it, I have to be able to rebuild its code, so I had to go with the latter option.&lt;br />&lt;br />Let's see how to build and install &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_11">libspe&lt;/span>2 from sources on a PS3 running &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_12">YDL&lt;/span>5.&lt;br />&lt;br />The first step is to download the most up-to-date &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_13">SRPM&lt;/span> package for the &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_14">libspe&lt;/span>2, which at the time of this writing was &lt;a href="http://www.bsc.es/projects/deepcomputing/linuxoncell/cellsimulator/sdk2.0/libspe2-2.0.1-1.src.rpm">libspe2-2.0.1-1.src.rpm&lt;/a>. Once downloaded, install it on the system:&lt;br />&lt;br />&lt;tt># rpm -i libspe2-2.0.1-1.src.rpm&lt;/tt>&lt;br />&lt;br />The above command leaves the original source tarball, any necessary patches and the &lt;i>spec&lt;/i> file all properly laid out inside the &lt;tt>/&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_15">usr&lt;/span>/&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_16">src&lt;/span>/&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_17">yellowdog&lt;/span>&lt;/tt> hierarchy.&lt;br />&lt;br />Now, before we can build the &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_18">libspe&lt;/span>2 package, we need to fulfill two requisites. The first is the installation of quilt (for which no binary package exists in the &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_19">YDL&lt;/span>5 repositories), a required tool in &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_20">libspe&lt;/span>2's build process. The second is the updating of bash to a newer version, as the one distributed in &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_21">YDL&lt;/span>5 has a quoting bug that prevents quilt from being built properly.&lt;br />&lt;br />The easiest way to solve these problems is to look for the corresponding &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_22">SRPM&lt;/span> packages for quilt and an updated bash. As &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_23">YDL&lt;/span>5 is based on Fedora Core, a safe bet is to fetch the necessary files from the Fedora Core 6 (FC6) repositories; these were: &lt;a href="ftp://ftp.rediris.es/mirror/fedora-extras/6/SRPMS/quilt-0.46-1.fc6.src.rpm">quilt-0.46-1.fc6.src.rpm&lt;/a> and &lt;a href="ftp://ftp.rediris.es/mirror/fedora/6/source/SRPMS/bash-3.1-16.1.src.rpm">bash-3.1-16.1.src.rpm&lt;/a>. After that, proceed with their installation as shown above for &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_24">libspe&lt;/span>2 (using &lt;tt>rpm -i&lt;/tt>).&lt;br />&lt;br />With all the sources in place, it is time to build and install them in the right order. Luckily the &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_25">FC&lt;/span>6 &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_26">SRPMs&lt;/span> we need work fine in &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_27">YDL&lt;/span>5, but this might not be true for other packages. Here is what to do:&lt;br />&lt;br />&lt;tt># &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_28">cd&lt;/span> /&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_29">usr&lt;/span>/&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_30">src&lt;/span>/&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_31">yellowdog&lt;/span>/&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_32">SRPMS&lt;/span>&lt;br /># &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_33">rpmbuild&lt;/span> -&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_34">ba&lt;/span> --target=&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_35">ppc&lt;/span> bash.spec&lt;br /># rpm -U ../RPMS/ppc/bash-3.1-16.1.ppc.rpm&lt;br /># &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_36">rpmbuild&lt;/span> -&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_37">ba&lt;/span> --target=&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_38">ppc&lt;/span> quilt.spec&lt;br /># rpm -i ../RPMS/ppc/quilt-0.46-1.ppc.rpm&lt;br /># &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_39">rpmbuild&lt;/span> -&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_40">ba&lt;/span> &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_41">libspe&lt;/span>2.spec&lt;br /># rpm -i ../RPMS/ppc64/libspe2-2.0.1-1.ppc64.rpm&lt;br /># rpm -i ../RPMS/ppc64/libspe2-devel-2.0.1-1.ppc64.rpm&lt;/tt>&lt;br />&lt;br />And that's it! &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_42">libspe&lt;/span>2 is now installed and ready to be used. Of course, with the build requisites in place, you compile &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_43">libspe&lt;/span>2 in your home directory for testing purposes by using the tar.&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_44">gz&lt;/span> package instead of the &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_45">SRPM&lt;/span>.&lt;br />&lt;br />At last, complete the installation by adding the &lt;a href="http://www.bsc.es/projects/deepcomputing/linuxoncell/cellsimulator/sdk2.0/elfspe2-2.0.1-1.ppc.rpm">elfspe2-2.0.1-1.ppc.rpm&lt;/a> package to the mix.</description></item></channel></rss>