<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/software/index.html</link><description>Recent content in Software on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2025 Julio Merino</copyright><lastBuildDate>Tue, 20 Jun 2023 10:00:00 -0700</lastBuildDate><atom:link href="https://jmmv.dev/tags/software/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>MVC but for non-UI apps</title><link>https://jmmv.dev/2023/06/mvc-non-ui-apps.html</link><pubDate>Tue, 20 Jun 2023 10:00:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2023/06/mvc-non-ui-apps.html</guid><description>&lt;p>In &lt;a href="https://collindonnell.com/mvc-isnt-mvc">MVC isn&amp;rsquo;t MVC&lt;/a>, which hit the &lt;a href="https://news.ycombinator.com/item?id=36397058">Hacker News front page overnight&lt;/a>, Collin Donnell describes how the MVC design pattern that we use today isn&amp;rsquo;t really what was originally &lt;a href="https://folk.universitetetioslo.no/trygver/1979/mvc-2/1979-12-MVC.pdf">envisioned in 1979 by Tyrgve Reenskaug&lt;/a>. This prompted me to think about how this architecture, if tweaked even further, maps pretty well to today&amp;rsquo;s designs of &lt;em>other kinds&lt;/em> of programs, and I want to explore two cases in this post: web services and CLI apps. I know I promised a post on the task queuing system I have written in Rust, but that will have to wait for a couple more days.&lt;/p></description></item><item><title>Introducing db_logger</title><link>https://jmmv.dev/2022/04/introducing-db-logger.html</link><pubDate>Tue, 12 Apr 2022 08:30:00 -0700</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2022/04/introducing-db-logger.html</guid><description>&lt;p>Over the last couple of weeks, I have been modernizing the codebase of the &lt;a href="https://jmmv.dev/2021/07/endbasic-0.7.html">EndBASIC cloud service&lt;/a> by applying many of the learnings I got from the &lt;a href="https://jmmv.dev/2022/02/diy-web-analytics.html">development of EndTRACKER&lt;/a>. The latter was a fork of the former and thus the foundations were the same, but as I iterated on the latter more recently, I got to refine my approach to writing a REST API in Rust.&lt;/p>
&lt;p>During this refactoring process, there was a small piece of the system that routinely got in the way for various reasons. This piece was the &amp;ldquo;database logger&amp;rdquo;.&lt;/p></description></item><item><title>Encode your assumptions</title><link>https://jmmv.dev/2019/02/encode-your-assumptions.html</link><pubDate>Thu, 07 Feb 2019 07:00:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2019/02/encode-your-assumptions.html</guid><description>&lt;p>The point of this post is simple and I&amp;rsquo;ll spoil it from the get go: &lt;strong>every time you make an assumption in a piece of code, make such assumption explicit in the form of an assertion or error check&lt;/strong>. If you cannot do that (are you sure?), then write a detailed comment.&lt;/p>
&lt;p>In fact, I&amp;rsquo;m exceedingly convinced that the amount of assertion-like checks in a piece of code is a good indicator of the programmer&amp;rsquo;s expertise.&lt;/p></description></item><item><title>Hello, sandboxfs 0.1.0</title><link>https://jmmv.dev/2019/02/sandboxfs-0-1-0.html</link><pubDate>Tue, 05 Feb 2019 09:00:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2019/02/sandboxfs-0-1-0.html</guid><description>&lt;p>I am pleased to announce that the first release of &lt;a href="https://github.com/bazelbuild/sandboxfs">sandboxfs&lt;/a>, 0.1.0, is &lt;em>finally&lt;/em> here! You can download the sources and prebuilt binaries from the &lt;a href="https://github.com/bazelbuild/sandboxfs/releases/tag/sandboxfs-0.1.0">0.1.0 release page&lt;/a> and you can read the &lt;a href="https://github.com/bazelbuild/sandboxfs/blob/master/INSTALL.md">installation instructions&lt;/a> for more details.&lt;/p>
&lt;p>The journey to this first release has been a long one. sandboxfs was first conceived over two years ago, was &lt;a href="https://jmmv.dev/2017/08/introducing-sandboxfs.html">first announced in August 2017&lt;/a>, showed its &lt;a href="https://blog.bazel.build/2018/04/13/preliminary-sandboxfs-support.html">first promising results in April 2018&lt;/a>, and has been undergoing a rewrite from Go to Rust. (And by the way, this has been my 20% project at Google so rest assured that they are still possible!)&lt;/p></description></item><item><title>A few extra system calls... and you lose 1% build time</title><link>https://jmmv.dev/2018/04/bazel-xcode-locations-cache.html</link><pubDate>Mon, 30 Apr 2018 13:45:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2018/04/bazel-xcode-locations-cache.html</guid><description>&lt;p>Blaze—the variant of &lt;a href="https://bazel.build/">Bazel&lt;/a> used internally at Google—was originally designed to build the &lt;a href="https://cacm.acm.org/magazines/2016/7/204032-why-google-stores-billions-of-lines-of-code-in-a-single-repository/fulltext">Google monorepo&lt;/a>. One of the beauties of sticking to a monorepo is code reuse, but this has the unfortunate side-effect of dependency bloat. As a result, Bazel and Blaze have evolved to support ever-increasingly-bigger pieces of software.&lt;/p>
&lt;p>The growth of the projects built by Bazel and Blaze has had the unsurprising consequence that our engineers all now have high-end workstations with access to massive amounts of distributed resources. And, as you can imagine, this has had an impact in the design of Blaze: many chunks of our codebase can—and do—assume that everyone has powerful hardware. These assumptions break down as soon as you move into Bazel&amp;rsquo;s open source land: while knowing where the product really runs is out of hand, we can safely assume it is certainly being used on slow&lt;em>er&lt;/em> hardware.&lt;/p></description></item><item><title>Preliminary sandboxfs support in Bazel</title><link>https://jmmv.dev/2018/04/preliminary-sandboxfs-support-in-bazel.html</link><pubDate>Fri, 13 Apr 2018 15:30:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2018/04/preliminary-sandboxfs-support-in-bazel.html</guid><description>&lt;p>During the summer of last year, &lt;a href="https://jmmv.dev/2017/08/introducing-sandboxfs.html">I hosted an intern who implemented sandboxfs&lt;/a>: a FUSE-based file system that exposes an arbitrary view of the host&amp;rsquo;s file system under the mount point. At the end of his internship, we had a functional sandboxfs implementation and some draft patches for integration in Bazel.&lt;/p>
&lt;p>The goal of sandboxfs in the context of Bazel is to improve the performance of builds when action sandboxing is enabled. The way in which we try to do so is by replacing the costly process of setting up the file system for each action using symlinks with a file system that does so &amp;ldquo;instantaneously&amp;rdquo;.&lt;/p></description></item><item><title>Stick to your project's core language in your tests</title><link>https://jmmv.dev/2018/03/stick-to-projects-core-language-in-tests.html</link><pubDate>Tue, 27 Mar 2018 10:00:00 +0900</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2018/03/stick-to-projects-core-language-in-tests.html</guid><description>&lt;p>&lt;em>This post is a short, generalized summary of the preceeding two. I believe those two posts put readers off due to their massive length and the fact that they were seemingly tied to Bazel and Java, thus failing to communicate the larger point I wanted to make. Let&amp;rsquo;s try to distill their key points here in a language- and project-agnostic manner.&lt;/em>&lt;/p>
&lt;hr></description></item><item><title>A case for writing Bazel's integration tests in Java, part 2</title><link>https://jmmv.dev/2018/03/bazel-tests-in-java-part-2.html</link><pubDate>Mon, 19 Mar 2018 08:00:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2018/03/bazel-tests-in-java-part-2.html</guid><description>&lt;p>In &lt;a href="https://jmmv.dev/2018/03/bazel-tests-in-java-part-1.html">part 1 of this series&lt;/a>, I made the case that you should &lt;strong>run away from the shell when writing integration tests&lt;/strong> for your software and that you should &lt;strong>embrace the primary language of your project&lt;/strong> to write those.&lt;/p>
&lt;p>Depending on the language you are using, doing this will mean significant more work upfront to lay out the foundations for your tests, but this work will pay off. You may also &lt;em>feel&lt;/em> that the tests could be more verbose than if they were in shell, though that&amp;rsquo;s not necessarily the case.&lt;/p></description></item><item><title>A case for writing Bazel's integration tests in Java, part 1</title><link>https://jmmv.dev/2018/03/bazel-tests-in-java-part-1.html</link><pubDate>Fri, 16 Mar 2018 14:00:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2018/03/bazel-tests-in-java-part-1.html</guid><description>&lt;p>My latest developer productivity &lt;del>rant&lt;/del> thesis is that &lt;strong>integration tests should be written in the exact same language as the thing they test&lt;/strong>. Specifically, &lt;strong>not&lt;/strong> shell.&lt;/p>
&lt;p>This theory applies mostly to tests that verify infrastructure software like servers or command line tools. It is too easy to fall into the trap of using the shell because it feels like the natural choice to interact with tools. But I argue that this is a big mistake that hurts the long-term health of the project, and once trapped, it&amp;rsquo;s hard to escape.&lt;/p></description></item><item><title>Don't rollback rollbacks</title><link>https://jmmv.dev/2018/03/dont-rollback-rollbacks.html</link><pubDate>Mon, 05 Mar 2018 06:45:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2018/03/dont-rollback-rollbacks.html</guid><description>&lt;p>In a version control system, &lt;strong>a rollback is a type of change that undoes the effects of a previous commit&lt;/strong>. In essence, a rollback is a commit that applies the inverse diff of another commit.&lt;/p>
&lt;p>At Google, our tools make it trivial to create rollbacks for a given &lt;em>changelist&lt;/em> or &lt;em>CL&lt;/em>. (A CL is similar to a commit but can be either pending—in review—or submitted.) Making it trivial to create rollback CLs is important in a culture where the standard upon encountering a problem is &amp;ldquo;rollback first, ask questions later&amp;rdquo; because it removes friction from the process of backing out problematic changes.&lt;/p></description></item><item><title>Fighting execs via sandboxfs on macOS</title><link>https://jmmv.dev/2017/10/fighting-execs-sandboxfs-macos.html</link><pubDate>Fri, 06 Oct 2017 16:27:34 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2017/10/fighting-execs-sandboxfs-macos.html</guid><description>Since the announcement of sandboxfs a few weeks ago, I&amp;rsquo;ve been stabilizing its integration with Bazel as a new sandboxing technique. As part of this work, I encountered issues when macOS was immediately killing signed binaries executed through the sandbox. Read on for the long troubleshooting process and the surprising trivial solution.</description></item><item><title>Introducing sandboxfs</title><link>https://jmmv.dev/2017/08/introducing-sandboxfs.html</link><pubDate>Fri, 25 Aug 2017 16:25:18 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2017/08/introducing-sandboxfs.html</guid><description>&lt;p>sandboxfs is a FUSE-based file system that exposes an arbitrary view of the
host&amp;rsquo;s file system under the mount point, and offers access controls that
differ from those of the host. You can think of sandboxfs as an advanced
version of &lt;a href="https://bindfs.org/">bindfs&lt;/a> (or &lt;code>mount --bind&lt;/code> or &lt;code>mount_null(8)&lt;/code>
depending on your system) in which you can combine and nest directories under
an arbitrary layout.&lt;/p>
&lt;p>The primary use case for this project is to provide a better file system
sandboxing technique for the Bazel build system. The goal here is to run each
build action (think compiler invocation) in a sandbox so that its inputs and
outputs are tightly controlled, and sandboxfs attempts to do this in a more
efficient manner than the current symlinks-based implementation.&lt;/p></description></item><item><title>Introducing sourcachefs</title><link>https://jmmv.dev/2017/07/introducing-sourcachefs.html</link><pubDate>Sun, 30 Jul 2017 20:30:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2017/07/introducing-sourcachefs.html</guid><description>Announcing the launch of sourcachefs, a FUSE-based persistent caching layer.</description></item><item><title>Easy pkgsrc on macOS with pkg_comp 2.0</title><link>https://jmmv.dev/2017/02/pkg_comp-2.0-tutorial-macos.html</link><pubDate>Thu, 23 Feb 2017 17:36:54 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2017/02/pkg_comp-2.0-tutorial-macos.html</guid><description>&lt;p>This is a tutorial to guide you through the &lt;a href="https://jmmv.dev/2017/02/introducing-pkg_comp-2.0.html">shiny new pkg_comp 2.0&lt;/a> on macOS &lt;a href="https://github.com/jmmv/pkg_comp/blob/master/INSTALL.md#using-the-macos-installer">using the macOS-specific self-installer&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Goals:&lt;/strong> to use pkg_comp 2.0 to build a binary repository of all the packages you are interested in; to keep the repository fresh on a daily basis; and to use that repository with pkgin to maintain your macOS system up-to-date and secure.&lt;/p></description></item><item><title>Keeping NetBSD up-to-date with pkg_comp 2.0</title><link>https://jmmv.dev/2017/02/pkg_comp-2.0-tutorial-netbsd.html</link><pubDate>Sat, 18 Feb 2017 11:51:55 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2017/02/pkg_comp-2.0-tutorial-netbsd.html</guid><description>&lt;p>This is a tutorial to guide you through the &lt;a href="https://jmmv.dev/2017/02/introducing-pkg_comp-2.0.html">shiny new pkg_comp 2.0&lt;/a> on NetBSD.&lt;/p>
&lt;p>&lt;strong>Goals:&lt;/strong> to use pkg_comp 2.0 to build a binary repository of all the packages you are interested in; to keep the repository fresh on a daily basis; and to use that repository with pkgin to maintain your NetBSD system up-to-date and secure.&lt;/p></description></item></channel></rss>