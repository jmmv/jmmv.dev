<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software on Julio Merino (jmmv.dev)</title>
    <link>https://jmmv.dev/tags/software/index/</link>
    <description>Recent content in software on Julio Merino (jmmv.dev)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Feb 2019 07:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://jmmv.dev/tags/software/index/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Encode your assumptions</title>
      <link>https://jmmv.dev/2019/02/encode-your-assumptions.html</link>
      <pubDate>Thu, 07 Feb 2019 07:00:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2019/02/encode-your-assumptions.html</guid>
      <description>The point of this post is simple and I&amp;rsquo;ll spoil it from the get go: every time you make an assumption in a piece of code, make such assumption explicit in the form of an assertion or error check. If you cannot do that (are you sure?), then write a detailed comment.
In fact, I&amp;rsquo;m exceedingly convinced that the amount of assertion-like checks in a piece of code is a good indicator of the programmer&amp;rsquo;s expertise.</description>
    </item>
    
    <item>
      <title>Hello, sandboxfs 0.1.0</title>
      <link>https://jmmv.dev/2019/02/sandboxfs-0-1-0.html</link>
      <pubDate>Tue, 05 Feb 2019 09:00:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2019/02/sandboxfs-0-1-0.html</guid>
      <description>I am pleased to announce that the first release of sandboxfs, 0.1.0, is finally here! You can download the sources and prebuilt binaries from the 0.1.0 release page and you can read the installation instructions for more details.
The journey to this first release has been a long one. sandboxfs was first conceived over two years ago, was first announced in August 2017, showed its first promising results in April 2018, and has been undergoing a rewrite from Go to Rust.</description>
    </item>
    
    <item>
      <title>A few extra system calls... and you lose 1% build time</title>
      <link>https://jmmv.dev/2018/04/bazel-xcode-locations-cache.html</link>
      <pubDate>Mon, 30 Apr 2018 13:45:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/04/bazel-xcode-locations-cache.html</guid>
      <description>Blaze—the variant of Bazel used internally at Google—was originally designed to build the Google monorepo. One of the beauties of sticking to a monorepo is code reuse, but this has the unfortunate side-effect of dependency bloat. As a result, Bazel and Blaze have evolved to support ever-increasingly-bigger pieces of software.
The growth of the projects built by Bazel and Blaze has had the unsurprising consequence that our engineers all now have high-end workstations with access to massive amounts of distributed resources.</description>
    </item>
    
    <item>
      <title>Preliminary sandboxfs support in Bazel</title>
      <link>https://jmmv.dev/2018/04/preliminary-sandboxfs-support-in-bazel.html</link>
      <pubDate>Fri, 13 Apr 2018 15:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/04/preliminary-sandboxfs-support-in-bazel.html</guid>
      <description>During the summer of last year, I hosted an intern who implemented sandboxfs: a FUSE-based file system that exposes an arbitrary view of the host&amp;rsquo;s file system under the mount point. At the end of his internship, we had a functional sandboxfs implementation and some draft patches for integration in Bazel.
The goal of sandboxfs in the context of Bazel is to improve the performance of builds when action sandboxing is enabled.</description>
    </item>
    
    <item>
      <title>Stick to your project&#39;s core language in your tests</title>
      <link>https://jmmv.dev/2018/03/stick-to-projects-core-language-in-tests.html</link>
      <pubDate>Tue, 27 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://jmmv.dev/2018/03/stick-to-projects-core-language-in-tests.html</guid>
      <description>&lt;p&gt;&lt;em&gt;This post is a short, generalized summary of the preceeding two. I believe those two posts put readers off due to their massive length and the fact that they were seemingly tied to Bazel and Java, thus failing to communicate the larger point I wanted to make. Let&amp;rsquo;s try to distill their key points here in a language- and project-agnostic manner.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;</description>
    </item>
    
    <item>
      <title>A case for writing Bazel&#39;s integration tests in Java, part 2</title>
      <link>https://jmmv.dev/2018/03/bazel-tests-in-java-part-2.html</link>
      <pubDate>Mon, 19 Mar 2018 08:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/03/bazel-tests-in-java-part-2.html</guid>
      <description>In part 1 of this series, I made the case that you should run away from the shell when writing integration tests for your software and that you should embrace the primary language of your project to write those.
Depending on the language you are using, doing this will mean significant more work upfront to lay out the foundations for your tests, but this work will pay off. You may also feel that the tests could be more verbose than if they were in shell, though that&amp;rsquo;s not necessarily the case.</description>
    </item>
    
    <item>
      <title>A case for writing Bazel&#39;s integration tests in Java, part 1</title>
      <link>https://jmmv.dev/2018/03/bazel-tests-in-java-part-1.html</link>
      <pubDate>Fri, 16 Mar 2018 14:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/03/bazel-tests-in-java-part-1.html</guid>
      <description>My latest developer productivity rant thesis is that integration tests should be written in the exact same language as the thing they test. Specifically, not shell.
This theory applies mostly to tests that verify infrastructure software like servers or command line tools. It is too easy to fall into the trap of using the shell because it feels like the natural choice to interact with tools. But I argue that this is a big mistake that hurts the long-term health of the project, and once trapped, it&amp;rsquo;s hard to escape.</description>
    </item>
    
    <item>
      <title>Don&#39;t rollback rollbacks</title>
      <link>https://jmmv.dev/2018/03/dont-rollback-rollbacks.html</link>
      <pubDate>Mon, 05 Mar 2018 06:45:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/03/dont-rollback-rollbacks.html</guid>
      <description>In a version control system, a rollback is a type of change that undoes the effects of a previous commit. In essence, a rollback is a commit that applies the inverse diff of another commit.
At Google, our tools make it trivial to create rollbacks for a given changelist or CL. (A CL is similar to a commit but can be either pending—in review—or submitted.) Making it trivial to create rollback CLs is important in a culture where the standard upon encountering a problem is &amp;ldquo;rollback first, ask questions later&amp;rdquo; because it removes friction from the process of backing out problematic changes.</description>
    </item>
    
    <item>
      <title>Fighting execs via sandboxfs on macOS</title>
      <link>https://jmmv.dev/2017/10/fighting-execs-sandboxfs-macos.html</link>
      <pubDate>Fri, 06 Oct 2017 16:27:34 -0400</pubDate>
      
      <guid>https://jmmv.dev/2017/10/fighting-execs-sandboxfs-macos.html</guid>
      <description>Since the announcement of sandboxfs a few weeks ago, I&amp;rsquo;ve been stabilizing its integration with Bazel as a new sandboxing technique.  As part of this work, I encountered issues when macOS was immediately killing signed binaries executed through the sandbox.  Read on for the long troubleshooting process and the surprising trivial solution.</description>
    </item>
    
    <item>
      <title>Introducing sandboxfs</title>
      <link>https://jmmv.dev/2017/08/introducing-sandboxfs.html</link>
      <pubDate>Fri, 25 Aug 2017 16:25:18 -0400</pubDate>
      
      <guid>https://jmmv.dev/2017/08/introducing-sandboxfs.html</guid>
      <description>sandboxfs is a FUSE-based file system that exposes an arbitrary view of the host&amp;rsquo;s file system under the mount point, and offers access controls that differ from those of the host. You can think of sandboxfs as an advanced version of bindfs (or mount --bind or mount_null(8) depending on your system) in which you can combine and nest directories under an arbitrary layout.
The primary use case for this project is to provide a better file system sandboxing technique for the Bazel build system.</description>
    </item>
    
    <item>
      <title>Introducing sourcachefs</title>
      <link>https://jmmv.dev/2017/07/introducing-sourcachefs.html</link>
      <pubDate>Sun, 30 Jul 2017 20:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2017/07/introducing-sourcachefs.html</guid>
      <description>Announcing the launch of sourcachefs, a FUSE-based persistent caching layer.</description>
    </item>
    
    <item>
      <title>Easy pkgsrc on macOS with pkg_comp 2.0</title>
      <link>https://jmmv.dev/2017/02/pkg_comp-2.0-tutorial-macos.html</link>
      <pubDate>Thu, 23 Feb 2017 17:36:54 -0500</pubDate>
      
      <guid>https://jmmv.dev/2017/02/pkg_comp-2.0-tutorial-macos.html</guid>
      <description>&lt;p&gt;This is a tutorial to guide you through the &lt;a href=&#34;https://jmmv.dev/2017/02/introducing-pkg_comp-2.0.html&#34;&gt;shiny new pkg_comp 2.0&lt;/a&gt; on macOS &lt;a href=&#34;https://github.com/jmmv/pkg_comp/blob/master/INSTALL.md#using-the-macos-installer&#34;&gt;using the macOS-specific self-installer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Goals:&lt;/strong&gt; to use pkg_comp 2.0 to build a binary repository of all the packages you are interested in; to keep the repository fresh on a daily basis; and to use that repository with pkgin to maintain your macOS system up-to-date and secure.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Keeping NetBSD up-to-date with pkg_comp 2.0</title>
      <link>https://jmmv.dev/2017/02/pkg_comp-2.0-tutorial-netbsd.html</link>
      <pubDate>Sat, 18 Feb 2017 11:51:55 -0500</pubDate>
      
      <guid>https://jmmv.dev/2017/02/pkg_comp-2.0-tutorial-netbsd.html</guid>
      <description>&lt;p&gt;This is a tutorial to guide you through the &lt;a href=&#34;https://jmmv.dev/2017/02/introducing-pkg_comp-2.0.html&#34;&gt;shiny new pkg_comp 2.0&lt;/a&gt; on NetBSD.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Goals:&lt;/strong&gt; to use pkg_comp 2.0 to build a binary repository of all the packages you are interested in; to keep the repository fresh on a daily basis; and to use that repository with pkgin to maintain your NetBSD system up-to-date and secure.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing pkg_comp 2.0 (and sandboxctl 1.0)</title>
      <link>https://jmmv.dev/2017/02/introducing-pkg_comp-2.0.html</link>
      <pubDate>Fri, 17 Feb 2017 16:37:06 -0500</pubDate>
      
      <guid>https://jmmv.dev/2017/02/introducing-pkg_comp-2.0.html</guid>
      <description>Announcing the launch of pkg_comp 2.0, how this differs from the 1.x series, why there was a rewrite, what sandboxctl 1.0 is, and more.</description>
    </item>
    
    <item>
      <title>Visual Studio Code: A modern editor</title>
      <link>https://jmmv.dev/2016/04/vscode.html</link>
      <pubDate>Tue, 19 Apr 2016 11:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2016/04/vscode.html</guid>
      <description>On April 14th, 2016, Microsoft announced the 1.0 release of their open-source Visual Studio Code (VSCode) editor. I&amp;rsquo;ve been drive-testing it for a few months and have been quite pleased with it, so here go my impressions.
How did I get here? Let&amp;rsquo;s backtrack a bit first. I&amp;rsquo;ve been a Vim and Emacs user for many years. Yes, I use both regularly depending on what I have to achieve. For me, Vim shines in doing quick single-file changes and repetitive edits through many files, while Emacs shines in long-lived coding sessions that involve numerous open buffers.</description>
    </item>
    
  </channel>
</rss>