<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Powerpc on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/powerpc/index.html</link><description>Recent content in Powerpc on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&#150;2025 Julio Merino</copyright><lastBuildDate>Mon, 15 Jul 2013 12:00:00 -0400</lastBuildDate><atom:link href="https://jmmv.dev/tags/powerpc/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Putting a PowerMac G5 to good use</title><link>https://jmmv.dev/2013/07/putting-powermac-g5-to-good-use.html</link><pubDate>Mon, 15 Jul 2013 12:00:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2013/07/putting-powermac-g5-to-good-use.html</guid><description>&lt;p>A few months ago I bought an old PowerMac G5 off of Craigslist and since
then I have been experimenting with various operating systems and
configurations. Before I tell you more about these, let me briefly
explain why I got such a machine.&lt;/p>
&lt;p>&lt;a href="http://en.wikipedia.org/wiki/File:Power_Mac_G5_open.jpg">&lt;img src="https://jmmv.dev/images/2013-07-15-Power_Mac_G5_open.jpg"
alt="Power Mac G5 open case"
class="float-right"
width="250px"
/>&lt;/a>&lt;/p>
&lt;p>I had always wanted one of these beasts. They look gorgeous (to me) and,
to convince myself to get it, I thought that I would play with the PPC64
architecture. How? By getting NetBSD to run properly on these machines
while learning enough to iron out the few rough edges that I thought
were left. Unfortunately, that story didn&amp;rsquo;t go well (more below), so I
ended up experimenting with various other operating systems.&lt;/p></description></item><item><title>Installing FreeBSD with a ZFS root on a PowerMac G5</title><link>https://jmmv.dev/2013/07/installing-freebsd-with-zfs-root-on.html</link><pubDate>Thu, 11 Jul 2013 12:00:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2013/07/installing-freebsd-with-zfs-root-on.html</guid><description>&lt;p>Suppose you have a nice PowerMac G5 big beast around and want to install a modern operating system on it. Suppose that you want FreeBSD to run on it. Suppose that you would like to use ZFS as much as possible, say to use the machine as a NAS.&lt;/p> &lt;p>If all of the above apply to you, you have come to the right place! Read on for how I got FreeBSD 10.0-CURRENT with a ZFS root to work on a PowerMac G5. I am pretty sure the instructions here apply to other PowerPC-based machines as well, although the specific details on how to set up the boot loader most likely differ.&lt;/p></description></item><item><title>Hello world in Linux/ppc64</title><link>https://jmmv.dev/2007/11/hello-world-in-linuxppc64.html</link><pubDate>Sun, 25 Nov 2007 12:22:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2007/11/hello-world-in-linuxppc64.html</guid><description>I'm decided to improve my knowledge on the Cell platform, and the best way to get started seems to be to learn 64-bit PowerPC assembly given that the PPU uses this instruction set. Learning this will open the door to do some more interesting tricks with the architecture's low-level details.&lt;br />&lt;br />There are some excellent articles at &lt;a href="http://www.ibm.com/developerworks/">IBM developerWorks&lt;/a> dealing with this subject, and thanks to the &lt;a href="http://www.ibm.com/developerworks/library/l-powasm1.html">first one in an introductory series to PPC64&lt;/a> I've been able to write the typical hello world program :-)&lt;br />&lt;br />Without further ado, here is the code!&lt;pre>#&lt;br /># The program's static data&lt;br />#&lt;br />&lt;br />.data&lt;br />&lt;br />msg: .string "Hello, world!n"&lt;br /> length = . - msg&lt;br />&lt;br />#&lt;br /># Special section needed by the linker due to the C calling&lt;br /># conventions in this platform.&lt;br />#&lt;br />&lt;br />.section ".opd", "aw" # aw = allocatable/writable&lt;br />&lt;br />.global _start&lt;br />_start:&lt;br /> .quad ._start, .TOC.@tocbase, 0&lt;br />&lt;br />#&lt;br /># The program's code&lt;br />#&lt;br />&lt;br />.text&lt;br />&lt;br />._start:&lt;br /> li 0, 4 # write(2)&lt;br /> li 3, 1 # stdout file descriptor&lt;br /> lis 4, msg@highest # load 64-bit buffer address&lt;br /> ori 4, 4, msg@higher&lt;br /> rldicr 4, 4, 32, 31&lt;br /> oris 4, 4, msg@h&lt;br /> ori 4, 4, msg@l&lt;br /> li 5, length # buffer length&lt;br /> sc&lt;br />&lt;br /> li 0, 1 # _exit(2)&lt;br /> li 3, 0 # return success&lt;br /> sc&lt;/pre>You can build it with the following commands:&lt;pre>$ as -a64 -o hello.o hello.s&lt;br />$ ld -melf64ppc -o hello hello.o&lt;/pre>I'm curious about as(1)'s &lt;tt>-a&lt;/tt> option; its purpose is pretty obvious, but it is not documented anywhere in the manual page nor in the info files.&lt;br />&lt;br />Anyway, back to coding! I guess I'll post more about this subject if I find interesting and/or non-obvious things that are not already documented clearly anywhere. But for beginner's stuff you already have the articles linked above.</description></item></channel></rss>