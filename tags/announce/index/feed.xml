<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>announce on jmmv.dev</title>
    <link>https://jmmv.dev/tags/announce/index/</link>
    <description>Recent content in announce on jmmv.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Feb 2015 15:06:00 -0500</lastBuildDate><atom:link href="https://jmmv.dev/tags/announce/index/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kyua turns parallel</title>
      <link>https://jmmv.dev/2015/02/kyua-turns-parallel.html</link>
      <pubDate>Sat, 28 Feb 2015 15:06:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2015/02/kyua-turns-parallel.html</guid>
      <description>After three months of intensive work on Kyua&#39;s executor Git branch, I am happy to announce that the new execution engine, whose crown feature is the ability to run test cases in parallel, has just landed in master and passes all self-tests!
You can head over to the commit message for more details on the merge, read the NEWS entries, and skim throught the history of the executor branch to understand how this feature has been built.</description>
    </item>
    
    <item>
      <title>shtk 1.6 is now available</title>
      <link>https://jmmv.dev/2014/11/shtk-16-is-now-available.html</link>
      <pubDate>Mon, 17 Nov 2014 15:28:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2014/11/shtk-16-is-now-available.html</guid>
      <description>The Shell Toolkit, or shtk for short, is a little project I introduced back in August of 2008 to support other tools such as sysbuild and sysupgrade. Since that time, the project has seen little activity because it did not have much to offer and because shtk&#39;s public interface was not documented (hence making it impossible for developers to get started with shtk).
Well, both are changing today with the brand-new release of shtk 1.</description>
    </item>
    
    <item>
      <title>Joining the FreeBSD committer ranks</title>
      <link>https://jmmv.dev/2013/11/joining-freebsd-committer-ranks.html</link>
      <pubDate>Mon, 04 Nov 2013 12:00:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2013/11/joining-freebsd-committer-ranks.html</guid>
      <description>About 11 years ago, I had the honor of becoming part of the NetBSD developer team. A week ago, the same offer was extended to me for FreeBSD and I could not refuse it... so, as of two days ago, I am jmmv at FreeBSD and will be working in src!
But how have I ended up here? The story goes back in time...
My beginnings with FreeBSD
FreeBSD was the first BSD system I tried after spending a couple of years with Linux.</description>
    </item>
    
    <item>
      <title>Introducing shtk</title>
      <link>https://jmmv.dev/2012/08/introducing-shtk.html</link>
      <pubDate>Wed, 15 Aug 2012 17:39:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2012/08/introducing-shtk.html</guid>
      <description>Have you ever wanted to have a collection of ready-to-use modules for shell scripts? I have, particularly because I keep reimplementing the same functions over and over and over and over again whenever I write non-trivial shell scripts, and I&#39;m tired of doing so.
That&#39;s why I have just abstracted all the common code in the aforementioned tools and put it into a new package called the &#34;Shell Toolkit&#34;, or shtk for short.</description>
    </item>
    
    <item>
      <title>Introducing sysupgrade for NetBSD</title>
      <link>https://jmmv.dev/2012/08/introducing-sysupgrade.html</link>
      <pubDate>Mon, 06 Aug 2012 13:32:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2012/08/introducing-sysupgrade.html</guid>
      <description>Over the last two weeks, you might have had fun rolling your own NetBSD binary releases with sysbuild. But what fun is that if you have no trivial way of upgrading your existing NetBSD installation to a newer version?
Upgrading NetBSD to a newer version from distribution sets generally looks like the following;
Fetch new distribution sets (or roll your own).Upgrade the kernel.Unpack the distribution sets over the root directory, without fat-fingering the command and unpacking etc.</description>
    </item>
    
    <item>
      <title>Introducing sysbuild for NetBSD</title>
      <link>https://jmmv.dev/2012/07/introducing-sysbuild-for-netbsd.html</link>
      <pubDate>Wed, 25 Jul 2012 08:26:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2012/07/introducing-sysbuild-for-netbsd.html</guid>
      <description>NetBSD&#39;s build system is close to awesome: after checking a source tree out from CVS on virtually any Unix-like operating sytem, building a full NetBSD release for any of the supported platforms is as simple as running the build.sh script with the right arguments.
There are, however, a few things that would deserve automation in this process, but that are not in build.sh&#39;s domain to solve. These are:
Fetching and keeping the source tree up to date: interacting with CVS is still the responsibility of the user.</description>
    </item>
    
    <item>
      <title>Introducing Lutok: A lightweight C&#43;&#43; API for Lua</title>
      <link>https://jmmv.dev/2011/09/introducing-lutok-lightweight-c-api-for.html</link>
      <pubDate>Thu, 15 Sep 2011 15:18:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2011/09/introducing-lutok-lightweight-c-api-for.html</guid>
      <description>It has finally happened. Lutok is the result of what was promised in the &#34;Splitting utils::lua from Kyua&#34; web post.
Quoting the project web page:
Lutok provides thin C++ wrappers around the Lua C API to ease the interaction between C++ and Lua. These wrappers make intensive use of RAII to prevent resource leakage, expose C++-friendly data types, report errors by means of exceptions and ensure that the Lua stack is always left untouched in the face of errors.</description>
    </item>
    
  </channel>
</rss>
