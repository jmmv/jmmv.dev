<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Atf on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/tags/atf/index.html</link><description>Recent content in Atf on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2024 Julio Merino</copyright><lastBuildDate>Wed, 12 Mar 2014 08:22:00 -0400</lastBuildDate><atom:link href="https://jmmv.dev/tags/atf/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>GSoC 2014 idea: Port FreeBSD's old-style tests to ATF</title><link>https://jmmv.dev/2014/03/gsoc-2014-idea-port-freebsds-old-style.html</link><pubDate>Wed, 12 Mar 2014 08:22:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2014/03/gsoc-2014-idea-port-freebsds-old-style.html</guid><description>&lt;p>Are you a student interested in contributing to a production-quality operating system by increasing its overall quality? If so, you have come to the right place!&lt;/p> &lt;p>As you may already know, the &lt;a href="https://www.google-melange.com/gsoc/homepage/google/gsoc2014">Google Summer of Code 2014 program&lt;/a> is on and &lt;a href="https://www.google-melange.com/gsoc/org2/google/gsoc2014/freebsd">FreeBSD has been accepted as a mentoring organization&lt;/a>. As it so happens, I have a project idea that may sound interesting to you.&lt;/p> &lt;p>During the last few months, we have been hard at work adding a standardized test suite to the FreeBSD upstream source tree as described in the &lt;a href="http://wiki.freebsd.org/TestSuite">TestSuite project page&lt;/a>. However, a test suite is of no use if it lacks a comprehensive collection of tests!&lt;/p></description></item><item><title>Killing the ATF deprecated tools code</title><link>https://jmmv.dev/2014/02/killing-atf-deprecated-tools-code.html</link><pubDate>Wed, 05 Feb 2014 22:11:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2014/02/killing-atf-deprecated-tools-code.html</guid><description>&lt;p>The time to kill the deprecated tools &amp;mdash;&lt;tt>atf-report&lt;/tt> and &lt;tt>atf-run&lt;/tt> principally&amp;mdash; from the upstream ATF distribution file has come. Unfortunately, this is not the trivial task that it may seem.&lt;/p> &lt;p>&lt;b>But wait, "Why?" and "Why now?"&lt;/b>&lt;/p> &lt;p>Because NetBSD still relies on the deprecated tools to run its test suite, they cannot just be killed. Removing them from the upstream distribution, however, is actually a good change for both ATF and NetBSD.&lt;/p></description></item><item><title>Three productive days on the Kyua front</title><link>https://jmmv.dev/2013/11/three-productive-days-on-kyua-front.html</link><pubDate>Thu, 28 Nov 2013 09:00:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2013/11/three-productive-days-on-kyua-front.html</guid><description>&lt;p>This being Thanksgiving week in the U.S. and Google giving us Thursday and Friday off, I decided to take Monday to Wednesday off as well to spend some time hacking on Kyua &amp;mdash; yes, finally, after months of being inactive. And what a three productive days!&lt;/p> &lt;p>Here comes a little briefing on the three fronts in which I made progress. (This puts on hold the &lt;a href="http://julipedia.meroh.net/search/label/header-files">header files&lt;/a> series until next Monday... but most of you are probably away anyway. Enjoy the holidays if they apply to you!)&lt;/p></description></item><item><title>Projects migrated to Git</title><link>https://jmmv.dev/2012/02/projects-migrated-to-git.html</link><pubDate>Sun, 26 Feb 2012 20:34:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2012/02/projects-migrated-to-git.html</guid><description>I finally took the plunge. Yesterday night, I migrated the &lt;a href="http://code.google.com/p/kyua/">Kyua&lt;/a> and &lt;a href="http://code.google.com/p/lutok/">Lutok&lt;/a> repositories from Subversion to Git. And this morning I migrated ATF from Monotone and custom hosting to Git and Google Code; oh, and this took way longer than expected.&lt;br />&lt;br />&lt;b>Migration of Kyua and Lutok&lt;/b>&lt;br />&lt;br />Migrating these two projects was straightforward. After preparing a fresh local Git repository following the &lt;a href="https://jmmv.dev/2012/02/converting-subversion-repository-to-git.html">instructions posted yesterday&lt;/a>, pushing to Google Code is a simple matter:&lt;br />&lt;br />&lt;pre>$ git remote add googlecode https://code.google.com/p/your-project&lt;br />$ git push googlecode --all&lt;br />$ git push googlecode --tags&lt;/pre>&lt;br />One of the nice things I discovered while doing this is that a Google Code project supports multiple repositories when the VCS system is set to Git or Mercurial. By default, the system creates the &lt;tt>default&lt;/tt> and &lt;tt>wiki&lt;/tt> repositories, but you can add more at will. This is understandable given that, in Subversion, you have the ability to check out individual directories of a project whereas you cannot do that in the other supported VCSs: you actually need different repositories to group different parts of the project.&lt;br />&lt;br />I performed the full migration under a Linux box so that I could avail of the most recent Git version along with a proven binary package. The migration went alright, but I encountered a little problem when attempting a fresh checkout from NetBSD: git under NetBSD will &lt;i>not&lt;/i> work correctly against SSL servers because it lacks the necessary CA certificates. The solution is to install the &lt;tt>security/mozilla-rootcerts&lt;/tt> package and follow the instructions printed during installation; why this does not happen automatically escapes my mind.&lt;br />&lt;br />&lt;b>Migration of ATF&lt;/b>&lt;br />&lt;br />I had been having doubts about migrating ATF itself, although if Kyua was moved to Git, it was a prerequisite to move ATF as well. &amp;nbsp;Certainly I could convert the repository to Git, but where could I host it afterwards? &amp;nbsp;Creating a new Google Code project just for this seemed too much of a hassle. My illumination came when I found out, as above, that Google Code supports an arbitrary amount of repositories in a particular project when converting it to Git.&lt;br />&lt;br />So, for ATF, I just ran &lt;tt>mtn git_export&lt;/tt> with appropriate flags, created a new &lt;tt>atf&lt;/tt> repository on the Kyua site, and pushed the contents there. Along the way, I also decided to kill the home-grown ATF web site and replace it by a &lt;a href="http://code.google.com/p/kyua/wiki/ATF">single page&lt;/a> containing all the relevant information. At this point, ATF and Kyua are supposed to work together quite tightly (in the sense that ATF is just a "subcomponent" of Kyua), so coupling the two projects on the same site makes sense.&lt;br />&lt;br />Now, let's drink the kool aid.</description></item><item><title>Switching projects to Git</title><link>https://jmmv.dev/2012/02/switching-projects-to-git.html</link><pubDate>Sat, 11 Feb 2012 14:48:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2012/02/switching-projects-to-git.html</guid><description>The purpose of this post is to tell you the story of the Version Control System (VCS) choices I have made while maintaining my open source projects ATF, Kyua and Lutok. It also details where my thoughts are headed to these days.&lt;br />&lt;br />This is not a description of centralized vs. distributed VCSs, and it does not intend to be one. This does not intend to compare Monotone to Git either, although you'll probably feel like it while reading the text.&amp;nbsp;Note that I have fully known the advantages of DVCSs over centralized systems for many years, but for some reason or another I have been "forced" to use centralized systems on and off. The Subversion hiccup explained below is... well... regrettable, but it's all part of the story!&lt;br />&lt;br />Hope you enjoy the read.&lt;br />&lt;b>&lt;br />&lt;/b>&lt;br />&lt;b>Looking back at Monotone (and ATF)&lt;/b>&lt;br />&lt;br />I still remember the moment&amp;nbsp;&lt;a href="https://jmmv.dev/2004/11/impressions-on-monotone.html">I discovered Monotone in 2004&lt;/a>: simply put, it blew my mind. It was clear to me that Distributed Version Control Systems (DVCSs) were going to be the future, and I eagerly adopted Monotone for my own projects. A year later, Git appeared and it took all the praise for DVCSs: developers all around started migrating en masse to Git, leaving behind other (D)VCSs. Many of these developers then went on to make Git usable (it certainly wasn't at first) and&amp;nbsp;well-documented.&amp;nbsp;(Note: I really dislike Git's origins... but I won't get into details; it has been many years since that happened.)&lt;br />&lt;br />One of the projects in which I chose to use &lt;a href="http://monotone.ca/">Monotone&lt;/a> was &lt;a href="http://www.netbsd.org/~jmmv/atf/">ATF&lt;/a>. That might have been a good choice at the time despite being very biased, but it has caused problems over time. These have been:&lt;br />&lt;ul>&lt;li>Difficulty to get Monotone installed: While most Linux distributions come with a Monotone binary package these days, it was not the case years ago. But even nowadays if all Linux distributions have binary packages, the main consumers of ATF are NetBSD users, and their only choice is to build their own binaries. This generates discomfort because there is a lot of FUD surrounding C++ and Boost.&lt;/li>&lt;li>High entry barrier to potential contributors: It is a fact that Monotone is not popular, which means that nobody is familiar with it. Monotone's CLI is very similar to CVS, and I'd say the knowledge transition for basic usage is trivial, but the process of cloning a remote project was really convoluted until "recently". The lack of binary packages, combined with complex instructions on just how to &lt;i>fetch&lt;/i> the sources of a project only help in scaring people away.&lt;/li>&lt;li>Missing features: Despite years have passed, Monotone still lacks some important features that impact its usability. For example, to my knowledge, it's still not possible to do work-directory merges and, while the interactive merges offered by the tool seem like a cool idea, they are not really practical as you get no chance to validate the merge. It is also not possible, for example, to reference the parent commit of any given commit without looking at the parent's ID. (Yeah, yeah, in a DAG there may be more than one parent, but that's not the common case.) Or know what a push/pull operation is going to change on both sides of the connection. And key management and trust has been broken since day one and is still not fixed. Etc, etc, etc.&lt;/li>&lt;li>No hosting: None of the major project hosting sites support Monotone. While there are some playground hosting sites, they are toys. I have also maintained my own servers sometimes, but it's certainly inconvenient and annoying.&lt;/li>&lt;li>No tools support: Pretty much no major development tools support Monotone as a VCS backend. Consider Ohloh, your favorite bug tracking system or your editor/IDE. (I attempted to install Trac with some alpha plugin to add Monotone support and it was a huge mess.)&lt;/li>&lt;li>No more active development: This is the drop that spills the cup. The developers of Monotone that created the foundations of the project left years ago. While the rest of the developers did a good job in coming up with a 1.0 release by March 2011, nothing else has happened since then. To me, it looks like a dead project at this point :-(&lt;/li>&lt;/ul>Despite all this, I have been maintaining ATF in its Monotone repository, but I have felt the pain points above for years.&lt;br />&lt;br />Furthermore, the few times some end user has approached ATF to offer some contribution, he has had tons of trouble getting a fresh checkout of the repository and given up. So staying with Monotone hurts the project more than it helps.&lt;br />&lt;br />&lt;b>The adoption of Subversion (in Kyua)&lt;/b>&lt;br />&lt;br />To fix this mess, when I created the &lt;a href="http://code.google.com/p/kyua/">Kyua&lt;/a> project two years ago, I decided to use Subversion instead of a DVCS. I knew upfront that it was a clear regression from a functionality point of view, but I was going to live with it. The rationale for this decision was to make the entry barrier to Kyua much lower by using off-the-shelf project hosting. And, because NetBSD developers use CVS (&lt;i>shrugh&lt;/i>), choosing Subversion was a reasonable choice because of the workflow similarities to CVS and thus, supposedly, the low entry barrier.&lt;br />&lt;br />Sincerely, the choice of Subversion has not fixed anything, and it has introduced its own trouble. Let's see why:&lt;br />&lt;ul>&lt;li>ATF continues to be hosted in a Monotone repository, and Kyua depends on ATF. You can spot the problem, can't you? It's a nightmare to check out all the dependencies of Kyua, using different tools, just to get the thing working.&lt;/li>&lt;li>As of today, Git is as popular, if not more, than Subversion. All the major operating systems have binary packages for Git and/or bundle Git in their base installation (hello, OS X!). Installing Git on NetBSD is arguably easier (at least faster!) than Subversion. Developers are used to Git. Or let me fix that: developers &lt;i>love&lt;/i> Git.&lt;/li>&lt;li>Subversion gets on the way more than it helps; it really does once you have experienced what other VCSs have to offer. I currently maintain independent checkouts of the repository (appropriately named 1, 2 and 3) so that I can develop different patches on each before committing the changes. This gets old really quickly. Not to mention when I have to fly for hours, as being stuck without an internet connection and plain-old Subversion... is suboptimal. Disconnected operation is key.&lt;/li>&lt;/ul>&lt;div>The fact that Subversion is slowing down development, and the fact that it really does not help in getting new contributors more than Git would, make me feel it is time to say Subversion goodbye.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>&lt;b>The migration to Git&lt;/b>&lt;/div>&lt;div>&lt;b>&lt;br />&lt;/b>&lt;/div>&lt;div>At this point, I am seriously considering switching all of ATF, Lutok and Kyua to Git. No Mercurial, no Bazaar, no Fossil, no anything else. Git.&lt;br />&lt;br />I am still not decided, and at this point all I am doing is toying around the migration process of the existing Monotone and Subversion repositories to Git while preserving as much of the history as possible. (It's not that hard, but there are a couple of details I want to sort out first.)&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>But why Git?&lt;/div>&lt;div>&lt;ul>&lt;li>First and foremost, because it is the most popular DVCS. I really want to have the advantages of disconnected development back. (I have tried git-svn and svk and they don't make the cut.)&lt;/li>&lt;li>At work, I have been using Git for a while to cope with the "deficiencies" of the centralized VCS of choice. We use the squashing functionality intensively, and I find this invaluable to constantly and shamelessly commit incomplete/broken pieces of code that no-one will ever see. Not everything deserves being in the recorded history!&lt;/li>&lt;li>Related to the above, I've grown accustomed to keeping unnamed, private branches in my local copy of the repository. These branches needn't match the public repository. In Monotone, you had this functionality in the form of "multiple heads for a given branch", but this approach is not as flexible as named private branches.&lt;/li>&lt;li>Monotone is able to export a repository to Git, so the transition is easy for ATF. I have actually been doing this periodically so that Ohloh can gather stats for ATF.&lt;/li>&lt;li>Lutok and ATF are hosted in Google Code, and this hosting platform now supports Git out of the box.&lt;/li>&lt;li>No Mercurial? Mercurial looks a lot like Monotone, and it is indeed very tempting. However, the dependency on Python is not that appropriate in the NetBSD context. Git, without its documentation, builds very quickly and is lightweight enough. Plus, if I have to change my habits, I would rather go with Git given that the other open source projects I am interested in use Git.&lt;/li>&lt;li>No Bazaar? No, not that popular. And the fact that this is based on GNU arch makes me cringe.&lt;/li>&lt;li>No Fossil? This tool looks awesome and provides much more than DVCS functionality: think about distributed wiki and bug tracking; cool, huh? It also appears to be a strong contender in the current discussions of what system should NetBSD choose to replace CVS. &lt;i>However&lt;/i>, it is a one-man effort, much like Monotone was. And few people are familiar with it, so Fossil wouldn't solve the issue of lowering the entry barrier. Choosing Fossil would mean repeating the same mistake as choosing Monotone.&lt;/li>&lt;/ul>&lt;div>So, while Git has its own deficiencies — e.g. I still don't like the fact that it is unable to record file moves (heuristics are not the same) — it seems like a very good choice. The truth is, it will ease development by a factor of a million (OK, maybe not that much) and, because the only person (right?) that currently cares about the upstream sources for any of these projects is me, nobody should be affected by the change.&lt;br />&lt;br />The decision may seem a bit arbitrary given that the points above don't provide too much rationale to compare Git against the other alternatives. But if I want to migrate, I have to make a choice and this is the one that seems most reasonable.&lt;br />&lt;br />Comments? Encouragements? Criticisms?&lt;/div>&lt;/div></description></item><item><title>Kyua: Weekly status report</title><link>https://jmmv.dev/2012/02/kyua-weekly-status-report_207.html</link><pubDate>Tue, 07 Feb 2012 22:31:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2012/02/kyua-weekly-status-report_207.html</guid><description>&lt;br />&lt;ul>&lt;li>Created an RPM package for Lutok for inclusion in Fedora.&lt;/li>&lt;li>Created a preliminary RPM spec for ATF for Fedora. Now in discussions with the FPC to figure out how to install the tests on a Fedora system, as &lt;tt>/usr/tests&lt;/tt> may not be appropriate.&lt;/li>&lt;li>No activity on Kyua itself though, unfortunately.&lt;/li>&lt;/ul></description></item><item><title>Kyua: Weekly status report</title><link>https://jmmv.dev/2012/01/kyua-weekly-status-report_23_2.html</link><pubDate>Mon, 23 Jan 2012 10:28:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2012/01/kyua-weekly-status-report_23_2.html</guid><description>&lt;br />&lt;ul>&lt;li>&lt;a href="http://www.netbsd.org/~jmmv/atf/news.html#20120116-atf-0-15-released">Released ATF 0.15&lt;/a> and imported it into NetBSD.&lt;/li>&lt;li>Added support for integer/float printf-like modifiers to the &lt;tt>utils::format&lt;/tt> module. These will be required to beautify size and time quantities in the reports and error messages.&lt;/li>&lt;ul>&lt;li>I spent way more time than I wanted on this. At first, I attempted to use &lt;tt>std::snprintf&lt;/tt> to parse and process the format modifiers for integers and floats so that I could avoid implementing a custom parser for them. While this sounds like a cool idea (yay, code reuse!), it resulted in a ugly, nasty and horrible mess. In the end, I just ended up implementing custom parsing of the formatters, which was way easier and "good enough" for Kyua's needs.&lt;/li>&lt;/ul>&lt;li>Started work on backporting ATF's new &lt;tt>require.memory&lt;/tt> property into Kyua. This needs having a way to parse and format byte quantities in user-friendly forms (e.g. 1k, 2m, etc.)... hence the previous work on &lt;tt>utils::format&lt;/tt>!&lt;/li>&lt;li>Set up a &lt;a href="https://plus.google.com/b/109170076014992185386/">Google+ Page for Kyua&lt;/a>. I have no idea what to use it for yet. Maybe the status reports should go in there. Ideas?&lt;/li>&lt;/ul></description></item><item><title>Kyua: Weekly status report</title><link>https://jmmv.dev/2012/01/kyua-weekly-status-report_15_2.html</link><pubDate>Sun, 15 Jan 2012 22:21:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2012/01/kyua-weekly-status-report_15_2.html</guid><description>Finally some progress!&lt;br />&lt;br />&lt;ul>&lt;li>Backported the &lt;tt>require.memory&lt;/tt> changes in NetBSD to the ATF upstream code, and extended them to support OS X as well.&lt;/li>&lt;li>Backported local pkgsrc patches to ATF into the upstream code.&lt;/li>&lt;li>Started to prepare ATF 0.15 by doing test runs of NetBSD/i386 and NetBSD/amd64 and by building the code in various Linux distributions. Several build bugs fixed along the way.&lt;/li>&lt;li>Spent a long while trying to figure out how the Fedora package maintainer procedure has changed since 3 years ago to create packages for ATF, Lutok and Kyua. Not very successful yet unfortunately.&lt;/li>&lt;/ul>&lt;div>Nothing on the Kyua front, but getting a new release of ATF out of the door has higher priority now!&lt;/div></description></item><item><title>Kyua: Weekly status report</title><link>https://jmmv.dev/2011/12/kyua-weekly-status-report_26_3.html</link><pubDate>Mon, 26 Dec 2011 06:38:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2011/12/kyua-weekly-status-report_26_3.html</guid><description>The post title should mention ATF instead of Kyua... but I'm keeping the usual one for consistency:&lt;br />&lt;br />&lt;ul>&lt;li>Integrated timestamps into the XML and HTML reports generated by &lt;tt>atf-report&lt;/tt>. These should soon show up in the continuous tests of NetBSD.&lt;/li>&lt;li>Work on integrating the use of POSIX timers into &lt;tt>atf-run&lt;/tt> after Christos Zoulas performed these changes in the NetBSD tree. The result is quite awful because I need to keep compatibility with systems that do not provide the "new" interface...&lt;/li>&lt;/ul></description></item><item><title>Kyua: Weekly status report</title><link>https://jmmv.dev/2011/12/kyua-weekly-status-report_19_2.html</link><pubDate>Mon, 19 Dec 2011 10:35:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2011/12/kyua-weekly-status-report_19_2.html</guid><description>Unfortunately, not much activity this week due to travel reasons. Anyway, some work went in:&lt;br />&lt;br />&lt;ul>&lt;li>Preliminary code to generate HTML reports from &lt;tt>kyua report&lt;/tt>. This is easy peasy but boring. The current code was written as a proof of concept and is awful, hence why it was not committed. I'm now working in cleaning it up.&lt;/li>&lt;li>Backported test program and test case timestamping into ATF based on a patch from Paul Goyette. This is a very useful feature to have, and it will have to be added to Kyua later. (It has always been planned to be added, but have not had the time yet.)&lt;/li>&lt;/ul></description></item><item><title>Kyua: Weekly status report</title><link>https://jmmv.dev/2011/12/kyua-weekly-status-report_11.html</link><pubDate>Sun, 11 Dec 2011 22:16:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2011/12/kyua-weekly-status-report_11.html</guid><description>Some significant improvements this week:&lt;br />&lt;ul>&lt;li>Finally submitted the code to store and load full test case definitions. This is quite tricky (and currently very, very ugly) but it works and it will allow the reports to include all kinds of information from the test cases.&lt;/li>&lt;li>Removed the &lt;tt>Atffile&lt;/tt>s from the tree; yay! For a long time, I had been using &lt;tt>atf-run&lt;/tt> to run broken tests because &lt;tt>atf-run&lt;/tt> allowed me to watch the output of the test case being debugged. However, this has been unnecessary since the &lt;a href="https://jmmv.dev/2011/08/kyua-weekly-status-report_22_2.html">introduction of the &lt;tt>debug&lt;/tt> command in late August&lt;/a>. I now feel confident that these files can go. (And &lt;tt>debug&lt;/tt> is much more powerful than &lt;tt>atf-run&lt;/tt> because you can target a single test case instead of a whole test program.)&lt;/li>&lt;li>Some crazy work attempting to hide the name of SQLite types from the &lt;tt>sqlite::statement&lt;/tt> interface. I've been only able to do so somewhat decently for &lt;tt>bind&lt;/tt>, but all my attempts at doing the same with &lt;tt>column&lt;/tt> result in horrible code so far. So no, such changes have not been submitted.&lt;/li>&lt;li>As of a few minutes ago, &lt;tt>kyua test&lt;/tt> now records the output of the test cases (stdout and stderr) into the database. These will be invaluable for debugging of test cases, particularly when the reports are posted online.&lt;/li>&lt;li>Some preliminary work at implementing HTML reports. This, however, has not received much progress due to the previous item requiring completion.&lt;/li>&lt;/ul>&lt;div>I'm quite excited at this point. HTML reports are a few weeks away &lt;i>at most&lt;/i>. Once that happens, it will be time to start considering replacing the &lt;tt>atf-run&lt;/tt> / &lt;tt>atf-report&lt;/tt> duo for good, particularly within NetBSD. This will certainly not be easy... but all the work that has gone into Kyua so far has this sole goal!&lt;/div></description></item><item><title>Kyua: Weekly status report</title><link>https://jmmv.dev/2011/11/kyua-weekly-status-report_14.html</link><pubDate>Mon, 14 Nov 2011 11:21:00 -0500</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2011/11/kyua-weekly-status-report_14.html</guid><description>Kyua has finally gained a &lt;tt>report&lt;/tt> subcommand, aimed at processing the output data of an action (stored in the database) and generating a user-friendly report in a variety of formats. This is still extremely incomplete, so don't get your hopes too high yet ;-) The current version of the &lt;tt>report&lt;/tt> command takes an action and all it does is dump its runtime context (run directory, environment variables, etc.). Consider it just a proof of concept.&lt;div>&lt;br />&lt;/div>&lt;div>I have now started work on loading the data of test case results for a particular action, and once that is done, the &lt;tt>report&lt;/tt> command will start yielding really useful data: i.e. it will actually tell you what happened during a particular execution of a test suite. The way I'm approaching the work these days is by building the skeleton code to implement the basic functionality first (which actually involves writing a lot of nasty code), with the goal of adding missing pieces later bit by bit.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>For example, at this moment I'm only targeting text-based outputs with a limited set of data. However, when that is done, adding extra data or different formats will be relatively easy. Generating HTML dashboards (without going through XML, as was the case of &lt;tt>atf-report&lt;/tt>!) is definitely highly prioritized.&lt;/div>&lt;div>&lt;br />&lt;/div>&lt;div>By the way: I just realized it has already been one year since Kyua saw life. Wow, time flies. And only now we are approaching a point where killing the &lt;tt>atf-run&lt;/tt> / &lt;tt>atf-report&lt;/tt> pair is doable. I'm excited.&lt;/div></description></item><item><title>Diversions in Autoconf (actually, in M4sugar)</title><link>https://jmmv.dev/2011/09/diversions-in-autoconf-actually-in.html</link><pubDate>Tue, 06 Sep 2011 18:05:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2011/09/diversions-in-autoconf-actually-in.html</guid><description>Have you ever wondered how Autoconf reorganizes certain parts of your script regardless of the order in which you invoke the macros in your &lt;tt>configure.ac&lt;/tt> script? For example, how come you can define &lt;tt>--with-*&lt;/tt> and &lt;tt>--enable-*&lt;/tt> flags anywhere in your script and these are all magically moved to the option-processing section of the final shell script? After all, Autoconf is just a collection of M4 macros, and a macro preprocessor's only work is to expand macros in the input with predefined output texts. Isn't it?&lt;br />&lt;br />Enter &lt;a href="http://www.gnu.org/s/hello/manual/autoconf/Diversion-support.html#Diversion-support">M4sugar's diversions&lt;/a>. Diversions are a mechanism that allows M4 macros to output code to different text blocks, which are later concatenated in a specific order to form the final script.&lt;br />&lt;br />Let's consider an example (based on a few M4 macros to &lt;a href="http://mtn-host.prjek.net/viewmtn/atf/revision/file/7ae5fa10200ec66c26f08c27e4aeaf3facf3f031/atf-c/atf-common.m4">detect the ATF bindings&lt;/a> from your own configure scripts). Suppose you want to define a macro &lt;tt>FROB_ARG&lt;/tt> to provide a &lt;tt>--with-frob&lt;/tt> argument whose argument must be either "yes" or "no". Also suppose you want to have another macro &lt;tt>FROB_CHECK&lt;/tt> to detect whether &lt;tt>libfrob&lt;/tt> exists. Lastly, you want the user to be able to use these two independently: when &lt;tt>FROB_CHECK&lt;/tt> is used &lt;i>without&lt;/i> invoking &lt;tt>FROB_ARG&lt;/tt> first, you want it to unconditionally look for the library; otherwise, if &lt;tt>FROB_ARG&lt;/tt> has been used, you want to honor its value.&lt;br />&lt;br />We could define these macros as follows:&lt;br />&lt;br />&lt;pre>AC_DEFUN([FROB_ARG], [&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; AC_ARG_WITH([frob],&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; [AS_HELP_STRING([--with-frob=yes|no], [enable frob])],&lt;br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [with_frob=${withval}, [with_frob=yes]) &lt;br />])&lt;br />&lt;br />AC_DEFUN([FROB_CHECK], [&lt;br />&amp;nbsp; &amp;nbsp; m4_divert_text([DEFAULTS], [with_frob=yes])&lt;br />&lt;br />&amp;nbsp; &amp;nbsp; if test "${with_frob}" = yes; then&lt;br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ... code to search for libfrob ... &lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; elif test "${with_frob}" = no; then&lt;br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; :&amp;nbsp; # Nothing to do. &lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; else&lt;br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; AC_MSG_ERROR([--with-frob must be yes or not]) &lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp; fi&lt;br />])&lt;/pre>&lt;br />Note the &lt;tt>m4_divert_text&lt;/tt> call above: this macro invocation tells M4sugar to store the given text (&lt;tt>with_frob=yes&lt;/tt>) in the &lt;tt>DEFAULTS&lt;/tt> diversion. When the script is later generated, this text will appear at the beginning of the script before the command-line options are processed, completely separated from the shell logic that consumes this value later on.&lt;br />&lt;br />With this we ensure that the &lt;tt>with_frob&lt;/tt> shell variable is always defined regardless of the call to the &lt;tt>FROB_ARG&lt;/tt> macro. If this macro is called, &lt;tt>with_frob&lt;/tt> will be defined during the processing of the options and will override the value of the variable defined in the &lt;tt>DEFAULTS&lt;/tt> section. However, if the macro has not been called, the variable will keep its default value for the duration of the script.&lt;br />&lt;br />Of course, this example is fictitious and could be simplified in other ways. But, as you can see in the &lt;a href="http://mtn-host.prjek.net/viewmtn/atf/revision/file/7ae5fa10200ec66c26f08c27e4aeaf3facf3f031/atf-c/atf-common.m4">referred change&lt;/a> and in the Autoconf code itself, diversions are extensively used for trickier purposes. In fact, Autoconf uses diversions to topologically sort macro dependencies in your script and output them in a specific order to satisfy cross-dependencies.&lt;br />&lt;br />Isn't that cool?&amp;nbsp; I can't cease to be amazed, but I also don't dare to look at how this works internally for my own sanity...</description></item><item><title>Kyua: Weekly status report</title><link>https://jmmv.dev/2011/08/kyua-weekly-status-report_28.html</link><pubDate>Sun, 28 Aug 2011 18:48:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2011/08/kyua-weekly-status-report_28.html</guid><description>Not a very active week: I've been on-call four days and they have been quite intense. Plus I have had to go through a "hurricane" in NYC. That said, I had some time to do a bit of work on Kyua and the results have been nice :-)
&lt;br />&lt;ul>&lt;li>Made calls to &lt;span style="font-weight: bold;">getopt_long(3)&lt;/span> work with GNU Getopt by using the correct value of optind to reset option processing.&lt;/li>&lt;li>Improved the configure script to error out in a clearer way when missing dependencies (pkg.m4 and Lua) are not found.&lt;/li>&lt;li>Did some portability fixes.&lt;/li>&lt;li>And &lt;a href="https://jmmv.dev/2011/08/kyua-02-released.html">released Kyua 0.2&lt;/a>! (along with a pkgsrc package)
&lt;br />&lt;/li>&lt;/ul>At this point, I have to start thinking how to implement test suite reporting within Kyua (i.e. how to replace &lt;span style="font-weight: bold;">atf-report&lt;/span>). This probably means learning SQLite and refreshing my incredibly rusty SQL skills.
&lt;br />
&lt;br />Also, it's time to (probably) split the &lt;span style="font-weight: bold;">utils::lua&lt;/span> library in a separate package because there is several people interested in this.
&lt;br /></description></item><item><title>Kyua: Weekly status report</title><link>https://jmmv.dev/2011/08/kyua-weekly-status-report_22_2.html</link><pubDate>Sun, 21 Aug 2011 23:47:00 -0400</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2011/08/kyua-weekly-status-report_22_2.html</guid><description>&lt;br />&lt;ul>&lt;li>Implemented the "debug" command. Still very rudimentary, this command allows the user to run a test case without capturing its stdout nor stderr to aid in debugging of failed test cases. In the future, this command will also allow things like keeping the work directory for manual inspection, or spawning a shell or a debugger in the work directory after a test case is executed.&lt;/li>
&lt;li>Many build fixes under different platforms in preparation for a 0.2 release. In particular, Kyua now builds under Ubuntu 10.04.1 LTS but some tests fail.&lt;/li>
&lt;li>Had to disable the execution of the bootstrap test suite within Kyua because it stalls in systems where the default shell is not bash. &amp;nbsp;I presume this is a bug in GNU Autotest, so I &lt;a href="https://lists.gnu.org/archive/html/bug-autoconf/2011-08/msg00009.html">filed a report&lt;/a>.&lt;/li>
&lt;/ul></description></item></channel></rss>