<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julio Merino (jmmv.dev)</title>
    <link>https://jmmv.dev/</link>
    <description>Recent content on Julio Merino (jmmv.dev)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Jul 2021 16:45:00 -0700</lastBuildDate>
    
	<atom:link href="https://jmmv.dev/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>EndBASIC 0.7: Hello, cloud!</title>
      <link>https://jmmv.dev/2021/07/endbasic-0.7.html</link>
      <pubDate>Sat, 03 Jul 2021 16:45:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2021/07/endbasic-0.7.html</guid>
      <description>&lt;p&gt;Several months have passed since the last EndBASIC release and, since then, you might have seen me talk nonstop about an &amp;ldquo;EndBASIC service&amp;rdquo; in social media&amp;hellip; which has sounded like vaporware. That changes today.&lt;/p&gt;
&lt;p&gt;After about four months of work, I am ecstatic to announce that EndBASIC 0.7 is here. And these haven&amp;rsquo;t been four months of idle time. No, no, no. It has taken four months of my scarce free time to deliver this because 0.7 is a humongous release on various fronts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>From FeedBurner to follow.it</title>
      <link>https://jmmv.dev/2021/07/feedburner-to-follow-it-migration.html</link>
      <pubDate>Fri, 02 Jul 2021 21:10:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2021/07/feedburner-to-follow-it-migration.html</guid>
      <description>An announcement that explains why this blog has had to migrate from FeedBurner-based email subscriptions to a new service offered by follow.it. If you were subscribed before, please read this; and if you weren&amp;rsquo;t, please consider subscribing now.</description>
    </item>
    
    <item>
      <title>Running a healthy production service</title>
      <link>https://jmmv.dev/2021/06/service-health.html</link>
      <pubDate>Fri, 18 Jun 2021 06:25:00 -1000</pubDate>
      
      <guid>https://jmmv.dev/2021/06/service-health.html</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://jmmv.dev/2021/03/oncall-wellbeing.html&#34;&gt;a previous thread&lt;/a&gt;, I covered some techniques to approach on-call shifts and maintain &lt;em&gt;your own&lt;/em&gt; well-being. In this thread, I will touch upon the things you can do, as a team, to make &lt;em&gt;your service&lt;/em&gt; more sustainable. ðŸ§µ ðŸ‘‡&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On software deadlines</title>
      <link>https://jmmv.dev/2021/04/on-software-deadlines.html</link>
      <pubDate>Tue, 20 Apr 2021 09:40:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2021/04/on-software-deadlines.html</guid>
      <description>&lt;p&gt;In my career so far (which isn&amp;rsquo;t that long&amp;hellip; but also not that short ðŸ˜‰), I&amp;rsquo;ve been lucky enough to not be subject to strict deadlines. That&amp;rsquo;s why I&amp;rsquo;m always in awe every time I talk to fellow long-time Microsoft employees. A thread! ðŸ§µ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Always be quitting</title>
      <link>https://jmmv.dev/2021/04/always-be-quitting.html</link>
      <pubDate>Mon, 12 Apr 2021 09:00:00 -0700</pubDate>
      
      <guid>https://jmmv.dev/2021/04/always-be-quitting.html</guid>
      <description>&lt;p&gt;A good philosophy to live by at work is to &amp;ldquo;always be quitting&amp;rdquo;. No, don&amp;rsquo;t be constantly thinking of leaving your job ðŸ˜±. But act as if you might leave on short notice ðŸ˜Ž. Counterintuitively, this will make you a better engineer and open up growth opportunities. A thread ðŸ‘‡.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Defining build time SLIs and SLOs</title>
      <link>https://jmmv.dev/2021/03/build-time-slis-slos.html</link>
      <pubDate>Fri, 12 Mar 2021 06:30:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/03/build-time-slis-slos.html</guid>
      <description>Companies grow, and with them do the software projects that support them. It should be no surprise that larger programs require longer build times. And, if I had to guess, you have seen how those build times eventually grow to unbearable levels, reducing productivity and degrading quality. In this post, I examine how we can leverage the common techniques we use for production services&amp;mdash;namely SLIs and SLOs&amp;mdash;to keep build times on track.</description>
    </item>
    
    <item>
      <title>Tips on well-being while on-call</title>
      <link>https://jmmv.dev/2021/03/oncall-wellbeing.html</link>
      <pubDate>Wed, 10 Mar 2021 09:30:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/03/oncall-wellbeing.html</guid>
      <description>&lt;p&gt;Last week, I was first-time on-call for a part of Azure Storage. My previous background as an SRE at Google helped me remain calm despite my inexperience. And as we have more first-time on-callers joining soon, I couldn&amp;rsquo;t resist writing some advice for them. Let&amp;rsquo;s start! ðŸ§µ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How does Google keep build times low?</title>
      <link>https://jmmv.dev/2021/02/google-monorepos-and-caching.html</link>
      <pubDate>Fri, 26 Feb 2021 09:50:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/02/google-monorepos-and-caching.html</guid>
      <description>Monorepos are an interesting beast. If mended properly, they enable a level of uniformity and code quality that is hard to achieve otherwise. If left unattended, however, they become unmanageable monsters of tangled dependencies, slow builds, and frustrating developer experiences. Whether you have a good or bad experience directly depends on the level of engineering support behind the monorepo. Simply put, monorepos require dedicated teams and tools to run nicely. In this post, I will look at how almost-perfect caching plays a key role in keeping build times manageable under such an environment.</description>
    </item>
    
    <item>
      <title>EndBASIC 0.6 release announcement</title>
      <link>https://jmmv.dev/2021/02/endbasic-0.6.html</link>
      <pubDate>Fri, 19 Feb 2021 06:30:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/02/endbasic-0.6.html</guid>
      <description>After a very active month of development since the 0.5 announcement, it is time to welcome EndBASIC 0.6!
This new 0.6 release is super-exciting for three reasons:
 preliminary GPIO support in the standard library specifically tailored to the Raspberry Pi; multidimensional array support in the language; and availability of binary releases for the most common platforms.  You can dive right in by:
 visiting https://repl.endbasic.dev/ for an interactive session, reading more about the project at https://www.</description>
    </item>
    
    <item>
      <title>Seeding a file server quickly</title>
      <link>https://jmmv.dev/2021/02/seeding-a-file-server.html</link>
      <pubDate>Fri, 05 Feb 2021 10:00:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/02/seeding-a-file-server.html</guid>
      <description>Say you want to copy a large collection of files to a file server on your same network. What&amp;rsquo;s the fastest way to do this initial copy? Physically attaching the drive to the server? Maybe, but will the file systems be compatible? What about using the network? If so, which protocol? Read on for more details and how tar plus Netcat delivered the best results.</description>
    </item>
    
    <item>
      <title>Embedding EndBASIC into a (Rust) program</title>
      <link>https://jmmv.dev/2021/01/embedding-endbasic.html</link>
      <pubDate>Tue, 26 Jan 2021 07:20:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/01/embedding-endbasic.html</guid>
      <description>One thing that bothers me quite a lot about various language implementations is that the core of their interpreter isn&amp;rsquo;t clearly separate from their standard library. This makes it hard to embed those interpreters into other programs because it&amp;rsquo;s not obvious how to limit their side-effects and because the interpreter dependency can be heavy. In this post, we will see how EndBASIC&amp;rsquo;s design tries hard to keep the core as small as possible, and we will see some examples on how to use EndBASIC from Rust and vice versa.</description>
    </item>
    
    <item>
      <title>EndBASIC 0.5 release announcement</title>
      <link>https://jmmv.dev/2021/01/endbasic-0.5.html</link>
      <pubDate>Sun, 24 Jan 2021 08:00:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/01/endbasic-0.5.html</guid>
      <description>A month has passed since the 0.4.0 announcement so it is about time to say hello to yet another EndBASIC release because 0.5.0 is here! So, what&amp;rsquo;s new? Not much&amp;hellip; unless you look under the covers, in which case a &lt;em&gt;ton&lt;/em&gt; has changed. About 30% of the codebase has been affected in one way or another to improve general quality, so read on to see how.</description>
    </item>
    
    <item>
      <title>Why am I wasting time on EndBASIC?</title>
      <link>https://jmmv.dev/2021/01/why-endbasic.html</link>
      <pubDate>Tue, 19 Jan 2021 07:10:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/01/why-endbasic.html</guid>
      <description>If you have been following this blog or my social profiles for the last year, you are probably aware that I have been working on something called EndBASIC. You also probably know that this is a retro-looking BASIC interpreter written in Rust that happens to run on the web. And if you know those two things, you are probably wondering, like some of my friends do: why am I wasting time developing such a useless project?</description>
    </item>
    
    <item>
      <title>Prevent accidental commits with DO NOT SUBMIT</title>
      <link>https://jmmv.dev/2021/01/do-not-submit.html</link>
      <pubDate>Mon, 11 Jan 2021 09:20:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/01/do-not-submit.html</guid>
      <description>&lt;p&gt;One of the teeny tiny features I miss from the Google development stack is something called &lt;code&gt;DO NOT SUBMIT&lt;/code&gt;. Here is what it is and how to replicate it in your projects.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Enforcing code health via GitHub Actions</title>
      <link>https://jmmv.dev/2021/01/github-actions-code-health.html</link>
      <pubDate>Fri, 08 Jan 2021 09:50:00 -0800</pubDate>
      
      <guid>https://jmmv.dev/2021/01/github-actions-code-health.html</guid>
      <description>It is no secret that, in software development, the edit+build+test cycle must be as short as possible. The delay between saving a file and seeing the results has to be minimal and in the order of a few seconds, or else developers lose focus and productivity suffers.
It&amp;rsquo;s equally important to ensure that the code is held to certain quality standards. Compiler warnings, for example, are part of any compilation and catch a set of common problems.</description>
    </item>
    
  </channel>
</rss>