<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jmmv.dev</title>
    <link>https://jmmv.dev/</link>
    <description>Recent content on jmmv.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Sep 2020 16:40:00 -0400</lastBuildDate>
    
	<atom:link href="https://jmmv.dev/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bazel UI locking and file downloads</title>
      <link>https://jmmv.dev/2020/09/bazel-ui-locking.html</link>
      <pubDate>Tue, 01 Sep 2020 16:40:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/09/bazel-ui-locking.html</guid>
      <description>&lt;p&gt;About a month ago, I was benchmarking the impact of a new Bazel feature and I noticed that a test build that should have taken only a few seconds took almost 10 minutes. My Internet connection was flaking out indeed, but something else didn&amp;rsquo;t seem right. So I looked and found that Bazel was doing network calls within a critical section, and these were the root cause behind the massive slowdown. But how did we get such an obvious no-no into the codebase? Read on to see how this happened and how gnarly it was to fix!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pkgdb belongs in libdata, not var</title>
      <link>https://jmmv.dev/2020/08/pkgdb-libdata-var.html</link>
      <pubDate>Wed, 26 Aug 2020 08:55:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/08/pkgdb-libdata-var.html</guid>
      <description>Right after discussing where rc.d should live, it&amp;rsquo;s time to tackle a different but related pet peeve of mine: the location of the installed packages database. For this, I&amp;rsquo;m going to focus on the system I know best, pkgsrc, which keeps its database under /var/db/pkg/ by default. I think this location is wrong and the database should move to /usr/pkg/libdata/pkgdb/.
From a cursory look, it seems that FreeBSD&amp;rsquo;s and OpenBSD&amp;rsquo;s ports databases, as well as dpkg&amp;rsquo;s and rpm&amp;rsquo;s, are also affected by this &amp;ldquo;problem&amp;rdquo;&amp;mdash;but I do not know enough about their internals to say with certainty.</description>
    </item>
    
    <item>
      <title>rc.d belongs in libexec, not etc</title>
      <link>https://jmmv.dev/2020/08/rcd-libexec-etc.html</link>
      <pubDate>Mon, 24 Aug 2020 06:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/08/rcd-libexec-etc.html</guid>
      <description>Let&amp;rsquo;s open with the controversy: the scripts that live under /etc/rc.d/ in FreeBSD, NetBSD, and OpenBSD are in the wrong place. They all should live in /libexec/rc.d/ because they are code, not configuration.
This misplacement is something that has bugged me for ages but I never had the energy to open this can of worms back when I was very involved in NetBSD. I suspect it would have been a draining discussion and a very difficult thing to change.</description>
    </item>
    
    <item>
      <title>A tour of directories as system-wide databases</title>
      <link>https://jmmv.dev/2020/08/database-directories.html</link>
      <pubDate>Fri, 21 Aug 2020 07:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/08/database-directories.html</guid>
      <description>In &amp;ldquo;Configuration files and .d directories&amp;rdquo;, we learned how .d directories permit programmatic edits to system-wide configuration with ease. But this same concept&amp;mdash;using directories with many individual files within instead of a single gigantic file&amp;mdash;can be applied to other kinds of system-wide tracking.
I know it&amp;rsquo;s a stretch, but if it helps you in these modern times, you can think of a directory as a NoSQL database or a key/value store where each file represents a row/key and its contents represent the value of that entity.</description>
    </item>
    
    <item>
      <title>Configuration files and .d directories</title>
      <link>https://jmmv.dev/2020/08/config-files-vs-directories.html</link>
      <pubDate>Mon, 17 Aug 2020 07:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/08/config-files-vs-directories.html</guid>
      <description>Have you ever wondered why an increasing number of programs are configured by placing small files in .d directories instead of by just editing a single file?
Have you ever wondered why these .d directories seem to proliferate in UnixLinux installations? Because a pretty bare-bones Debian installation (WSL) shows&amp;hellip; a ton of them:
debian:/etc&amp;gt; ls -ld *.d */*.d drwxr-xr-x 1 root root 4096 Aug 14 22:23 apparmor.d drwxr-xr-x 1 root root 4096 Aug 9 08:10 apt/apt.</description>
    </item>
    
    <item>
      <title>Internships para estudiantes espa√±oles</title>
      <link>https://jmmv.dev/2020/08/internships-de-verano.html</link>
      <pubDate>Thu, 13 Aug 2020 07:20:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/08/internships-de-verano.html</guid>
      <description>This post is in Spanish because I intentionally want to target the students in Spain, who I think are often unaware of what internships are and how they would benefit from taking one abroad. Or, if they are aware that they do exist, that getting into one is actually feasible for them.
Este art√≠culo es una rareza en este blog ya que es el primero que escribo en espa√±ol en 16 a√±os.</description>
    </item>
    
    <item>
      <title>Down the memory lane with OS/2</title>
      <link>https://jmmv.dev/2020/08/os2-memory-lane.html</link>
      <pubDate>Tue, 04 Aug 2020 17:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/08/os2-memory-lane.html</guid>
      <description>OS/2 Warp 3 was the operating system that led me into an adventure back in 1994. This OS made me escape MS-DOS and Windows, and then made me enter the Linux world when I couldn&amp;rsquo;t afford Warp 4. Let&amp;rsquo;s walk down the memory lane! üßµ
The thing I find most interesting about OS/2&amp;rsquo;s history is that it was a joint project between IBM and Microsoft (https://en.wikipedia.org/wiki/OS/2) and that, until some point, it shared the same GUI with Windows.</description>
    </item>
    
    <item>
      <title>My 18 steps to prepare a great presentation</title>
      <link>https://jmmv.dev/2020/07/presentation-preparation.html</link>
      <pubDate>Fri, 17 Jul 2020 07:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/07/presentation-preparation.html</guid>
      <description>A few days ago, I shared my tips to give great presentations. But how do I prepare to give one? That&amp;rsquo;s a different story so let&amp;rsquo;s take a look in this thread üßµ!
 üò¥ Procrastinate. No, really. It&amp;rsquo;s not something I do intentionally, but it happens. And all the time I spend not working on the presentation is time I spend thinking about its structure. And it works.
 üë• Think about the audience: What did they come to learn?</description>
    </item>
    
    <item>
      <title>My 18 tips to deliver great presentations</title>
      <link>https://jmmv.dev/2020/07/presentation-tips.html</link>
      <pubDate>Mon, 13 Jul 2020 07:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/07/presentation-tips.html</guid>
      <description>I used to dread üò∞ public speaking üé§ in middle and high school. College was OKish. Now&amp;hellip; even though I‚Äôm far from an expert, I really enjoy it. How? I forced myself to give talks and strive for improvement in each of them. Here are the things I learned üßµ:
 ‚è±Ô∏è Practice, practice, practice. At least 3 times. Be certain that you will finish in the allotted time: not sooner, not later.</description>
    </item>
    
    <item>
      <title>Shipping Bazel&#39;s new dynamic scheduler</title>
      <link>https://jmmv.dev/2020/06/shipping-bazel-new-dynamic-scheduler.html</link>
      <pubDate>Fri, 12 Jun 2020 16:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/06/shipping-bazel-new-dynamic-scheduler.html</guid>
      <description>Back in September 2019, I embarked into the task of rewriting Bazel&amp;rsquo;s dynamic scheduler to deal with slow and flaky networks. Initial testing had shown that dynamic builds might become slower, and it was all due to this feature having been designed for a different use case (in-office, high-speed network). We had to fix two different issues in the scheduler.
The first fix was making the downloads of the remote artifacts happen without holding the output lock.</description>
    </item>
    
    <item>
      <title>Black Lives Matter</title>
      <link>https://jmmv.dev/2020/06/black-lives-matter.html</link>
      <pubDate>Mon, 01 Jun 2020 22:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/06/black-lives-matter.html</guid>
      <description>Shamefully this is a first for me. I have never blogged or tweeted about politics, but somehow this time around the situation is truly settling in‚Äîand for good reason. It should affect you too.
You see, I&amp;rsquo;m a firm believer in equality, and seeing all that&amp;rsquo;s happening around is not acceptable. See Paradox of tolerance.
 
I don&amp;rsquo;t have much to say, in particular because saying things like &amp;ldquo;racism is wrong&amp;rdquo; or, as the image says, &amp;ldquo;Black Lives Matter&amp;rdquo; are like saying &amp;ldquo;the sky is blue&amp;rdquo;&amp;hellip; and I feel silly for stating the obvious.</description>
    </item>
    
    <item>
      <title>Bridging the web gap in EndBASIC</title>
      <link>https://jmmv.dev/2020/05/bridging-the-web-gap-endbasic.html</link>
      <pubDate>Sat, 30 May 2020 08:50:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/05/bridging-the-web-gap-endbasic.html</guid>
      <description>After a ton of work, a lot of which was unexpected, I am ecstatic to announce that EndBASIC is now a reality on the web! The whole language interpreter can now run as a fully client-side web app on a computer, on a tablet&amp;hellip; and even on a phone. Yes: the whole thing, which is written in Rust (94%), works in a modern browser with just a tiny bit of JavaScript glue (1%).</description>
    </item>
    
    <item>
      <title>Running codesign over SSH with a new key</title>
      <link>https://jmmv.dev/2020/05/codesign-and-ssh.html</link>
      <pubDate>Fri, 29 May 2020 15:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/05/codesign-and-ssh.html</guid>
      <description>I just spent sometime between 30 minutes and 1 hour convincing the Mac Pro that sits in my office to successfully codesign an iOS app via Bazel. This was after having to update the signing key to a newer one and after rebooting the machine due to the macOS 10.15.5 upgrade‚Äîall remotely thanks to COVID-19.
The build of the app was failing with an errSecInternalComponent error printed by codesign. It is not the first time I face this, but in all previous cases, I had either been at the computer to click through security popups, had had functional Chrome Remote Desktop access, or did not have to install a new signing key remotely.</description>
    </item>
    
    <item>
      <title>EndBASIC 0.2.0 is here</title>
      <link>https://jmmv.dev/2020/05/endbasic-0.2.0.html</link>
      <pubDate>Thu, 07 May 2020 06:30:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/05/endbasic-0.2.0.html</guid>
      <description>A couple of weeks ago, I announced EndBASIC: a simple BASIC language interpreter written in Rust with a goal to provide an environment for teaching my kids how to code. That first release provided what-I-think-is a robust interpreter, but that was about it: the language features were still minimal and the interactive features were non-existent.
Well, EndBASIC 0.2.0 is here and things are changing! It&amp;rsquo;s still far from the vision I want to reach, but it&amp;rsquo;s slowly moving towards that direction.</description>
    </item>
    
    <item>
      <title>What is Rust&#39;s Into&lt;T&gt; for?</title>
      <link>https://jmmv.dev/2020/04/rust-into-trait.html</link>
      <pubDate>Mon, 27 Apr 2020 18:50:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2020/04/rust-into-trait.html</guid>
      <description>Rust provides a bunch of traits that you may use or implement in your code, but unless you have experienced them first-hand, it can be hard to imagine what their real utility is. For example, if you go read Into&amp;rsquo;s documentation, all you find is:
 Trait std::convert::Into
A value-to-value conversion that consumes the input value. The opposite of From. [&amp;hellip;]
 Yay, very useful. This text tells me what this trait does, which is fine for a reference manual, but not when I could find it useful.</description>
    </item>
    
  </channel>
</rss>