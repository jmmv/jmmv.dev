<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/</link><description>Recent content on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 01 Feb 2022 09:15:00 -0700</lastBuildDate><atom:link href="https://jmmv.dev/feed.xml" rel="self" type="application/rss+xml"/><item><title>DIY web analytics</title><link>https://jmmv.dev/2022/02/diy-web-analytics.html</link><pubDate>Tue, 01 Feb 2022 09:15:00 -0700</pubDate><guid>https://jmmv.dev/2022/02/diy-web-analytics.html</guid><description>One thing that had been bothering me about my websites&amp;mdash;including this blog, but especially when launching https://www.endbasic.dev/ just a few months ago&amp;mdash;was this:
uBlock showing a warning that it blocked a tracker on the EndBASIC site. A tracking warning. uBlock complained that my properties had one tracker. And it&amp;rsquo;s true they had just one: it was Google Analytics, or GA for short.
GA is the de-facto standard for web analytics: it is extremely powerful and ubiquitous.</description></item><item><title>Fair on-call scheduling</title><link>https://jmmv.dev/2022/01/oncall-scheduling.html</link><pubDate>Mon, 10 Jan 2022 06:40:00 -0700</pubDate><guid>https://jmmv.dev/2022/01/oncall-scheduling.html</guid><description>Being part of an on-call rotation is a requirement for many software job positions and fulfilling this requirement should not come with stress. One process that can cause friction is how a team schedules its on-call shifts. If the on-call scheduling process is haphazard, team members will end up with shifts over their personal plans, and they&amp;rsquo;ll be unhappy. But there are ways to prevent this, which is what this post is about.</description></item><item><title>Constructors and evil initializers in C++</title><link>https://jmmv.dev/2021/11/cpp-ctors-vs-init.html</link><pubDate>Wed, 24 Nov 2021 09:15:00 -0800</pubDate><guid>https://jmmv.dev/2021/11/cpp-ctors-vs-init.html</guid><description>One of the three key tenets of Object Oriented Programming (OOP) is encapsulation: objects contain a state that, when observed from the outside, is always internally-consistent. Unfortunately, C++ codebases where exceptions are forbidden often violate this rule when they separate object initialization from construction. Let&amp;rsquo;s see why that&amp;rsquo;s a problem and how to address it.</description></item><item><title>EndBASIC 0.8: Now, with graphics!</title><link>https://jmmv.dev/2021/11/endbasic-0.8.html</link><pubDate>Thu, 11 Nov 2021 09:45:00 -0800</pubDate><guid>https://jmmv.dev/2021/11/endbasic-0.8.html</guid><description>&lt;p>Graphics support has finally landed in EndBASIC and, with that, the 0.8 release is finally here.&lt;/p>
&lt;p>This release marks a huge milestone in the development of EndBASIC. Supporting graphics is something I&amp;rsquo;ve had in mind since the very beginning but had been procrastinating on until a couple of months ago. I feared everything that would be involved in delivering this feature, and to be fair, I was right: getting the desktop console to work on all platforms, and especially getting it to work in CI for automated testing, was tedious. But it&amp;rsquo;s done now.&lt;/p></description></item><item><title>Useless use of GNU</title><link>https://jmmv.dev/2021/08/useless-use-of-gnu.html</link><pubDate>Wed, 25 Aug 2021 09:10:00 -0700</pubDate><guid>https://jmmv.dev/2021/08/useless-use-of-gnu.html</guid><description>The GNU project is the source of the Unix userland utilities used on most Linux distributions. Its compatibility with standards and other Unix systems, or lack thereof, directly impacts the overall portability of any piece of software developed from GNU/Linux installations. Unfortunately, the GNU userland does not closely adhere to standards, and its widespread usage causes little incompatibilities to creep into any software created on GNU/Linux systems. Read on for why this is a problem and the pitfalls you will encounter.</description></item><item><title>Should the browser use all available memory?</title><link>https://jmmv.dev/2021/08/using-all-memory-as-a-cache.html</link><pubDate>Thu, 12 Aug 2021 09:30:00 -0700</pubDate><guid>https://jmmv.dev/2021/08/using-all-memory-as-a-cache.html</guid><description>We have all seen discussions go like this: someone first complains that an application like Google Chrome is wasteful because it uses multiple GBs of memory. Someone else comes along and says that memory is there to be used for speed and therefore this is the correct behavior: if the computer has multiple GBs of free memory, an application such as Chrome should make use of all the available memory in the form of a cache to be as responsive as possible. Makes sense, right? Yes, it does makes sense&amp;mdash;as long as Chrome is the only application running. Let&amp;rsquo;s explore why this is not a great idea.</description></item><item><title/><link>https://jmmv.dev/software/endtracker.html</link><pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate><guid>https://jmmv.dev/software/endtracker.html</guid><description>Super-simple web analytics</description></item><item><title>Principal engineers should be on-call</title><link>https://jmmv.dev/2021/07/principal-engineers-oncall.html</link><pubDate>Wed, 14 Jul 2021 06:30:00 -0700</pubDate><guid>https://jmmv.dev/2021/07/principal-engineers-oncall.html</guid><description>&lt;p>A recent tweet that caught my attention read: &amp;ldquo;principal engineers should be on-call&amp;rdquo;. Of course they should be! I&amp;rsquo;m &amp;ldquo;surprised&amp;rdquo; they aren&amp;rsquo;t everywhere, but I can imagine some reasons to justify their situation. Let&amp;rsquo;s change that in this thread. ðŸ§µ ðŸ‘‡&lt;/p></description></item><item><title>Definitions and initializations in C++</title><link>https://jmmv.dev/2021/07/cpp-definition-initialization.html</link><pubDate>Mon, 12 Jul 2021 06:20:00 -0700</pubDate><guid>https://jmmv.dev/2021/07/cpp-definition-initialization.html</guid><description>When reviewing an incoming C++ PR last week, I left a comment along the lines: &amp;ldquo;merge local variable declaration with its initialization&amp;rdquo;. But why? Is this just a stylistic issue or is there something deeper to warrant making the change? Let&amp;rsquo;s look at stack frames, C, and then C++ to answer these questions.</description></item><item><title>macOS keyboard shortcuts for Windows</title><link>https://jmmv.dev/2021/07/macos-ahk.html</link><pubDate>Wed, 07 Jul 2021 09:00:00 -0700</pubDate><guid>https://jmmv.dev/2021/07/macos-ahk.html</guid><description>&lt;p>Are you a macOS user occasionally dealing with Windows systems or trying to switch platforms? Are you a Windows user that believes that the Windows-native keyboard shortcuts are objectively bad? Are you annoyed by something as simple as copy/pasting text not working consistently across apps?&lt;/p>
&lt;p>If so, this post will equip you with an &lt;a href="https://www.autohotkey.com/">AutoHotkey&lt;/a> configuration file that brings macOS keyboard shortcuts to Windows. Read on.&lt;/p></description></item><item><title>EndBASIC 0.7: Hello, cloud!</title><link>https://jmmv.dev/2021/07/endbasic-0.7.html</link><pubDate>Sat, 03 Jul 2021 16:45:00 -0700</pubDate><guid>https://jmmv.dev/2021/07/endbasic-0.7.html</guid><description>&lt;p>Several months have passed since the last EndBASIC release and, since then, you might have seen me talk nonstop about an &amp;ldquo;EndBASIC service&amp;rdquo; in social media&amp;hellip; which has sounded like vaporware. That changes today.&lt;/p>
&lt;p>After about four months of work, I am ecstatic to announce that EndBASIC 0.7 is here. And these haven&amp;rsquo;t been four months of idle time. No, no, no. It has taken four months of my scarce free time to deliver this because 0.7 is a humongous release on various fronts.&lt;/p></description></item><item><title>From FeedBurner to follow.it</title><link>https://jmmv.dev/2021/07/feedburner-to-follow-it-migration.html</link><pubDate>Fri, 02 Jul 2021 21:10:00 -0700</pubDate><guid>https://jmmv.dev/2021/07/feedburner-to-follow-it-migration.html</guid><description>An announcement that explains why this blog has had to migrate from FeedBurner-based email subscriptions to a new service offered by follow.it. If you were subscribed before, please read this; and if you weren&amp;rsquo;t, please consider subscribing now.</description></item><item><title>Running a healthy production service</title><link>https://jmmv.dev/2021/06/service-health.html</link><pubDate>Fri, 18 Jun 2021 06:25:00 -1000</pubDate><guid>https://jmmv.dev/2021/06/service-health.html</guid><description>&lt;p>In &lt;a href="https://jmmv.dev/2021/03/oncall-wellbeing.html">a previous thread&lt;/a>, I covered some techniques to approach on-call shifts and maintain &lt;em>your own&lt;/em> well-being. In this thread, I will touch upon the things you can do, as a team, to make &lt;em>your service&lt;/em> more sustainable. ðŸ§µ ðŸ‘‡&lt;/p></description></item><item><title>On software deadlines</title><link>https://jmmv.dev/2021/04/on-software-deadlines.html</link><pubDate>Tue, 20 Apr 2021 09:40:00 -0700</pubDate><guid>https://jmmv.dev/2021/04/on-software-deadlines.html</guid><description>&lt;p>In my career so far (which isn&amp;rsquo;t that long&amp;hellip; but also not that short ðŸ˜‰), I&amp;rsquo;ve been lucky enough to not be subject to strict deadlines. That&amp;rsquo;s why I&amp;rsquo;m always in awe every time I talk to fellow long-time Microsoft employees. A thread! ðŸ§µ&lt;/p></description></item><item><title>Always be quitting</title><link>https://jmmv.dev/2021/04/always-be-quitting.html</link><pubDate>Mon, 12 Apr 2021 09:00:00 -0700</pubDate><guid>https://jmmv.dev/2021/04/always-be-quitting.html</guid><description>&lt;p>A good philosophy to live by at work is to &amp;ldquo;always be quitting&amp;rdquo;. No, don&amp;rsquo;t be constantly thinking of leaving your job ðŸ˜±. But act as if you might leave on short notice ðŸ˜Ž. Counterintuitively, this will make you a better engineer and open up growth opportunities. A thread ðŸ‘‡.&lt;/p></description></item></channel></rss>