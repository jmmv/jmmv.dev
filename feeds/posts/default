<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julio Merino</title>
    <description>This is Julio Merino&#39;s homepage.  This site is primarily my personal blog and, secondarily, a gateway to my presence in the web.
</description>
    <link>http://julio.meroh.net/</link>
    <atom:link href="http://julio.meroh.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 22 Jul 2016 17:09:29 +0000</pubDate>
    <lastBuildDate>Fri, 22 Jul 2016 17:09:29 +0000</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Converting a Blogger site to Jekyll</title>
        
          <description>
            Exporting the contents of a Blogger blog is easy: you just click a button on the administrator’s site and then receive an XML file with a very complete representation of the blog contents and its configuration.

But no so fast: making use of this exported data for any purpose other than reimporting into Blogger is difficult, and is possibly the reason behind why the export functionality is called backup and not export. This is a bit sad but, with a bit of effort, one can convert the contents of the XML backup into a more manageable format.

In this post, I will describe the process I followed to turn the contents of a Blogger XML backup file into a collection of standalone .html pages, one per post, with Front Matter in them to describe their metadata. I will also describe how I turned a subset of them to Markdown. The results of the conversion can be directly served by Jekyll as a blog and witnessed in this site.

The conversion

The conversion process consists of three steps:


  
    Take the Blogger XML file and extract the posts within it, discarding everything else. Output a single text file that contains all posts in raw HTML format and their corresponding metadata in Front Matter.
  
  
    With a separate script, split the contents of the single text file into independent pages that Jekyll can serve as blog posts.
  
  
    Convert the individual posts from HTML to Markdown, with the side-effect of discarding a lot of unnecessary ad-hoc formatting.
  


Let’s get started. Beware: large chunks of code follow!

From Blogger XML to a text file with all posts

The Blogger backup feature generates an XML file that uses the Atom schema. The file includes an accurate representation of the whole blog, including the blog’s metadata, the blog’s templates, and the blog’s actual contents—i.e. its posts and comments. For our purposes, I’ll ignore everything that is not a post.

To do the conversion, I wrote a custom XSLT stylesheet and used the smallish xsltproc processor to execute it. The stylesheet descends into all entries that match the post properties, collects their metadata as variables for later formatting, and finally writes out the Front Matter for the post and the unquoted HTML contents.

Here comes my parse-blogger.xsl:

&lt;?xml version="1.0"?&gt;
&lt;!-- This stylesheet parses the Atom XML file that Blogger exports as a backup
  and generates a plain text file with the processed contents.

  In the plain text file, there are markers to indicate where each post and
  draft start.  Within these sections, there is Front Matter with the post
  metadata and then the raw content as exported by Blogger.

  Use the import-blogger.sh script to invoke this and deal with the output. --&gt;
&lt;xsl:stylesheet version="1.0"
                xmlns:app="http://purl.org/atom/app#"
                xmlns:atom="http://www.w3.org/2005/Atom"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:output method="text"/&gt;
  &lt;xsl:preserve-space elements="atom:content" /&gt;

  &lt;xsl:template match="atom:entry[atom:category[@scheme='http://schemas.google.com/g/2005#kind' and @term='http://schemas.google.com/blogger/2008/kind#post']]"&gt;

    &lt;xsl:param name="title"&gt;
      &lt;!-- Hack to workaround quoting issues below--&gt;
      &lt;xsl:variable name="apos"&gt;&amp;apos;&lt;/xsl:variable&gt;
      &lt;xsl:variable name="quot"&gt;&amp;quot;&lt;/xsl:variable&gt;

      &lt;xsl:call-template name="string-replace-all"&gt;
        &lt;xsl:with-param name="text" select="atom:title" /&gt;
        &lt;xsl:with-param name="replace" select="$quot" /&gt;
        &lt;xsl:with-param name="by" select="$apos" /&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:param&gt;

    &lt;xsl:param name="draft" select="app:control/app:draft"/&gt;

    &lt;xsl:param name="year" select="substring(atom:published, 1, 4)"/&gt;
    &lt;xsl:param name="month" select="substring(atom:published, 6, 2)"/&gt;
    &lt;xsl:param name="day" select="substring(atom:published, 9, 2)"/&gt;
    &lt;xsl:param name="hour" select="substring(atom:published, 12, 2)"/&gt;
    &lt;xsl:param name="minute" select="substring(atom:published, 15, 2)"/&gt;
    &lt;xsl:param name="second" select="substring(atom:published, 18, 2)"/&gt;
    &lt;xsl:param name="micros" select="substring(atom:published, 21, 3)"/&gt;
    &lt;xsl:param name="tz" select="concat(substring(atom:published, 24, 3), substring(atom:published, 28, 2))"/&gt;

    &lt;xsl:param name="url" select="atom:link[@rel='alternate' and @type='text/html']/@href"/&gt;
    &lt;xsl:param name="relurl" select="substring($url, 28)"/&gt;
    &lt;xsl:param name="name" select="substring($url, 36, string-length($url) - 40)"/&gt;

    &lt;xsl:param name="date" select="concat($year, '-', $month, '-', $day, ' ', $hour, ':', $minute, ':', $second, ' ', $tz)"/&gt;

    &lt;xsl:param name="output"&gt;
      &lt;xsl:if test="not($draft = 'yes')"&gt;
        &lt;xsl:value-of select="concat($year, '-', $month, '-', $day, '-', $name, '.html')"/&gt;
      &lt;/xsl:if&gt;
      &lt;xsl:if test="$draft = 'yes'"&gt;
        &lt;xsl:value-of select="concat($year, '-', $month, '-', $day, '-', $hour, '-', $minute, '-', $second, '-', $micros, '.html')"/&gt;
      &lt;/xsl:if&gt;
    &lt;/xsl:param&gt;

    &lt;xsl:param name="tags"&gt;
      &lt;xsl:for-each select="atom:category[@scheme='http://www.blogger.com/atom/ns#']"&gt;
        &lt;xsl:sort select="@term"/&gt;
        &lt;xsl:if test="position() &amp;gt; 1"&gt;&lt;xsl:text&gt; &lt;/xsl:text&gt;&lt;/xsl:if&gt;
        &lt;xsl:value-of select="@term"/&gt;
      &lt;/xsl:for-each&gt;
    &lt;/xsl:param&gt;

&lt;!-- Now, dump the post.  All these lines must start on the first column. --&gt;
&lt;xsl:text&gt;&lt;/xsl:text&gt;
&lt;xsl:if test="not($draft = 'yes')"&gt;
__BEGIN_POST__ &lt;xsl:value-of select="$output"/&gt;
&lt;/xsl:if&gt;
&lt;xsl:if test="$draft = 'yes'"&gt;
__BEGIN_DRAFT__ &lt;xsl:value-of select="$output"/&gt;
&lt;/xsl:if&gt;
---
layout: post
title: "&lt;xsl:value-of select="$title"/&gt;"
date: &lt;xsl:value-of select="$date"/&gt;
categories: &lt;xsl:value-of select="$tags"/&gt;
julipedia: &lt;xsl:value-of select="$relurl"/&gt;
excerpt_separator: &amp;lt;/p&amp;gt;
---
&lt;xsl:value-of select="atom:content/text()" disable-output-escaping="yes"/&gt;
__END__

&lt;xsl:text&gt;&lt;/xsl:text&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="/"&gt;
    &lt;xsl:apply-templates select="@*|node()"/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="@*|node()" priority="-1"&gt;
    &lt;xsl:apply-templates select="@*|node()"/&gt;
  &lt;/xsl:template&gt;

  &lt;!-- From: http://geekswithblogs.net/Erik/archive/2008/04/01/120915.aspx --&gt;
  &lt;xsl:template name="string-replace-all"&gt;
    &lt;xsl:param name="text" /&gt;
    &lt;xsl:param name="replace" /&gt;
    &lt;xsl:param name="by" /&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="contains($text, $replace)"&gt;
        &lt;xsl:value-of select="substring-before($text,$replace)" /&gt;
        &lt;xsl:value-of select="$by" /&gt;
        &lt;xsl:call-template name="string-replace-all"&gt;
          &lt;xsl:with-param name="text"
          select="substring-after($text,$replace)" /&gt;
          &lt;xsl:with-param name="replace" select="$replace" /&gt;
          &lt;xsl:with-param name="by" select="$by" /&gt;
        &lt;/xsl:call-template&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:value-of select="$text" /&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;




As you may have noticed, this stylesheet exports all posts into a single text file, and delimits them with unique start/end markers of the form __BEGIN_POST__, __BEGIN_DRAFT__, and __END__. I will show in the next section how to split them up. The reason for this lies in a limitation of xsltproc: this tool is an XSLT 1.0 processor so it does not have support for the multi-file (chunked) output present since XSLT 2.0. (This is not completely accurate though: the DocBook XSL does chunking and it used to work just fine with xsltproc; I didn’t investigate how.)

From the text file to individual HTML files

When we run the XSLT file above with the exported contents of a Blogger site, we end up with a text file that contains all posts separated by unique markers. The script below processes this text file and outputs individual HTML documents with Front Matter for each post. I called this import-blogger.sh:

# Imports the contents of a Blogger export.
#
# This script parses the XML file given as the input, which has to be downloaded
# from Blogger as a backup, and generates one file per post in the corresponding
# _drafts or _posts folder.

shtk_import cleanup
shtk_import cli

PARSE_BLOGGER_XSL="$(shtk_cli_dirname)/parse-blogger.xsl"

generate_files() {
    local chunks="${1}"; shift
    local basedir="${1}"; shift

    local chunk=
    while read line; do
        case "${line}" in
            __BEGIN_DRAFT__*)
                local chunk_name="$(echo "${line}" | cut -d ' ' -f 2-)"
                mkdir -p "${basedir}/_drafts"
                chunk="${basedir}/_drafts/${chunk_name}"
                [ ! -f "${chunk}" ] \
                    || shtk_cli_error "Draft ${chunk} already exists"
                shtk_cli_info "Writing draft ${chunk_name}"
                ;;

            __BEGIN_POST__*)
                local chunk_name="$(echo "${line}" | cut -d ' ' -f 2-)"
                mkdir -p "${basedir}/_posts"
                chunk="${basedir}/_posts/${chunk_name}"
                [ ! -f "${chunk}" ] \
                    || shtk_cli_error "Post ${chunk} already exists"
                shtk_cli_info "Writing post ${chunk_name}"
                ;;

            __END__)
                chunk=
                ;;

            *)
                [ -z "${chunk}" ] || echo "${line}" &gt;&gt;"${chunk}"
                ;;
        esac
    done &lt;"${chunks}"
}

main() {
    [ ${#} -eq 1 ] || shtk_cli_usage_error "Must provide name of Blogger" \
        "exported data file"
    local input="${1}"; shift

    local pattern="${TMPDIR:-/tmp}/$(shtk_cli_progname).XXXXXX"
    local tempdir="$(mktemp -d "${pattern}" 2&gt;/dev/null)"
    [ -d "${tempdir}" ] || shtk_cli_error "Failed to create temporary directory"

    eval "remove_tempdir() { rm -rf '${tempdir}'; }"
    shtk_cleanup_register remove_tempdir

    shtk_cli_info "Parsing contents of Blogger exported data"
    local chunks="${tempdir}/chunks.txt"
    xsltproc "${PARSE_BLOGGER_XSL}" "${input}" &gt;"${chunks}"

    generate_files "${chunks}" .
}




Running this script results in a bunch of .html files that can be placed directly into the Jekyll’s _posts directory and served as any other post. This was what I did for the first publication of this site.

From HTML to Markdown

The HTML produced by Blogger is far from optimal: it contains a lot of unnecessary formatting, especially if you have previously used their WYSIWYG editor; and even if you have typed the HTML by hand, sometimes Blogger decides to “fix” it.

After the first migration step, I decided to convert my most popular posts into Markdown for better looks and not to bother much with the rest. The reason was that, as part of the conversion, I would be sanitizing their markup both automatically via the translation tools and manually as an after-step. Sanity-checking the contents of a Markdown file for good markup is much easier than doing the same on a machine-generated HTML file.

To do this conversion, I used the following script which I appropriately named html-to-markdown.sh:

# Takes an HTML post and converts it to Markdown.
#
# This is intended to be used on posts imported from Blogger.

shtk_import cleanup
shtk_import cli

extract_content() {
    local input="${1}"; shift

    awk '
BEGIN {
    count = 0
}
/^---$/ {
    count += 1
    next
}
{
    if (count &lt; 2) {
        next
    }
    print
}
    ' &lt;"${input}"
}

extract_front_matter() {
    local input="${1}"; shift

    awk '
BEGIN {
    count = 0
}
/^---$/ {
    count += 1
    if (count &lt;= 2) {
        print
    }
    next
}
{
    if (count != 1) {
        next
    }
    print
}
    ' &lt;"${input}"
}

sed_in_place() {
    local file="${1}"; shift

    if sed "${@}" "${file}" &gt;"${file}.tmp"; then
        mv -f "${file}.tmp" "${file}"
    else
        rm -f "${file}.tmp"
        shtk_cli_error "Failed to modify ${file} in place"
    fi
}

# In The Julipedia posts, I did not use section headings because I was not
# clear on what Blogger expected.  In their place, I used single-line
# paragraphs in bold, which pandoc translates to section 4 levels.  Fix
# this here by "renumbering" the sections.
patch_sections() {
    local markdown="${1}"; shift

    sed_in_place "${markdown}" -E \
        -e 's,^####,#,' \
        -e 's,^\*\*(.*)\*\*$,# \1,'
}

patch_utf8() {
    local markdown="${1}"; shift

    sed_in_place "${markdown}" \
        -e "s,$(printf '\xc3\xa0'),\&amp;agrave;,g" \
        -e "s,$(printf '\xc3\xa1'),\&amp;aacute;,g" \
        -e "s,$(printf '\xc3\xa4'),\&amp;auml;,g" \
        -e "s,$(printf '\xc3\xa7'),\&amp;ccedil;,g" \
        -e "s,$(printf '\xc3\xa8'),\&amp;egrave;,g" \
        -e "s,$(printf '\xc3\xa9'),\&amp;eacute;,g" \
        -e "s,$(printf '\xc3\xab'),\&amp;euml;,g" \
        -e "s,$(printf '\xc3\xac'),\&amp;igrave;,g" \
        -e "s,$(printf '\xc3\xad'),\&amp;iacute;,g" \
        -e "s,$(printf '\xc3\xaf'),\&amp;iuml;,g" \
        -e "s,$(printf '\xc3\xb1'),\&amp;ntilde;,g" \
        -e "s,$(printf '\xc3\xb2'),\&amp;ograve;,g" \
        -e "s,$(printf '\xc3\xb3'),\&amp;oacute;,g" \
        -e "s,$(printf '\xc3\xb6'),\&amp;ouml;,g" \
        -e "s,$(printf '\xc3\xb9'),\&amp;ugrave;,g" \
        -e "s,$(printf '\xc3\xba'),\&amp;uacute;,g" \
        -e "s,$(printf '\xc3\xbc'),\&amp;uuml;,g" \
        -e "s,$(printf '\xe2\x80\x93'),\&amp;ndash;,g" \
        -e "s,$(printf '\xe2\x80\x94'),\&amp;mdash;,g" \
        -e "s,$(printf '\xe2\x80\xa6'),\&amp;hellip;,g"
}

main() {
    [ ${#} -eq 1 ] || shtk_cli_usage_error "Must provide an HTML input name"
    local html_input="${1}"; shift

    local markdown_output="$(echo "${html_input}" | sed -e 's,\.html$,.md,')"

    local front_matter="${markdown_output}.tmp1"
    local html_content="${markdown_output}.tmp2"
    local markdown_content="${markdown_output}.tmp3"
    eval "remove_temp_files() {" \
        "    rm -f '${front_matter}' '${html_content}' '${markdown_content}';" \
        "}"
    shtk_cleanup_register remove_temp_files

    extract_front_matter "${html_input}" \
        | grep -v '^excerpt_separator:' &gt;"${front_matter}"

    extract_content "${html_input}" &gt;"${html_content}"
    pandoc --from=html --to=markdown_strict --output="${markdown_content}" \
        --ascii "${html_content}" || shtk_cli_error "pandoc conversion failed"

    patch_sections "${markdown_content}"
    patch_utf8 "${markdown_content}"

    git mv "${html_input}" "${markdown_output}"
    cat "${front_matter}" "${markdown_content}" &gt;"${markdown_output}"
    git add "${markdown_output}"
}




This script relies on Pandoc to do the initial conversion and then performs some custom post-processing—in particular to fix the original markup in the Blogger posts and to strip out UTF-8 characters in favor of HTML entities.

Parting words

That’s all! Wasn’t it simple? No, not really… this all took me various days of work to obtain palatable results.

Note that you will need some stitching to put the various steps together: I purposely did not provide you with a fully-specified solution because the code above is rough and will surely need tuning for your own use case. Hopefully, though, this will serve as a decent starting point.

Also note that the scripts above need shtk to function so you will need to either install that first or remove the dependency.

Good luck!

            &lt;a href=&quot;http://julio.meroh.net/2016/07/blogger-to-jekyll.html&quot;&gt;[Continue reading]&lt;/a&gt;
          </description>
        
          <description>&lt;p&gt;Exporting the contents of a Blogger blog is easy: you just click a button on the administrator’s site and then receive an XML file with a very complete representation of the blog contents and its configuration.&lt;/p&gt;

&lt;p&gt;But no so fast: making use of this exported data for any purpose other than reimporting into Blogger is difficult, and is possibly the reason behind why the export functionality is called &lt;em&gt;backup&lt;/em&gt; and not &lt;em&gt;export&lt;/em&gt;. This is a bit sad but, with a bit of effort, one can convert the contents of the XML backup into a more manageable format.&lt;/p&gt;

&lt;p&gt;In this post, I will describe the process I followed to turn the contents of a Blogger XML backup file into a collection of standalone &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt; pages, one per post, with Front Matter in them to describe their metadata. I will also describe how I turned a subset of them to Markdown. The results of the conversion can be directly served by &lt;a href=&quot;jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; as a blog and &lt;a href=&quot;/2016/05/homepage-v3.html&quot;&gt;witnessed in this site&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-conversion&quot;&gt;The conversion&lt;/h1&gt;

&lt;p&gt;The conversion process consists of three steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Take the Blogger XML file and extract the posts within it, discarding everything else. Output a single text file that contains all posts in raw HTML format and their corresponding metadata in Front Matter.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With a separate script, split the contents of the single text file into independent pages that Jekyll can serve as blog posts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Convert the individual posts from HTML to Markdown, with the side-effect of discarding a lot of unnecessary ad-hoc formatting.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s get started. Beware: large chunks of code follow!&lt;/p&gt;

&lt;h2 id=&quot;from-blogger-xml-to-a-text-file-with-all-posts&quot;&gt;From Blogger XML to a text file with all posts&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://support.google.com/blogger/answer/41387&quot;&gt;Blogger backup feature&lt;/a&gt; generates an XML file that uses the Atom schema. The file includes an accurate representation of the whole blog, including the blog’s metadata, the blog’s templates, and the blog’s actual contents—i.e. its posts and comments. For our purposes, I’ll ignore everything that is not a post.&lt;/p&gt;

&lt;p&gt;To do the conversion, I wrote a custom XSLT stylesheet and used the smallish &lt;code class=&quot;highlighter-rouge&quot;&gt;xsltproc&lt;/code&gt; processor to execute it. The stylesheet descends into all entries that match the post properties, collects their metadata as variables for later formatting, and finally writes out the Front Matter for the post and the unquoted HTML contents.&lt;/p&gt;

&lt;p&gt;Here comes my &lt;code class=&quot;highlighter-rouge&quot;&gt;parse-blogger.xsl&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- This stylesheet parses the Atom XML file that Blogger exports as a backup
  and generates a plain text file with the processed contents.

  In the plain text file, there are markers to indicate where each post and
  draft start.  Within these sections, there is Front Matter with the post
  metadata and then the raw content as exported by Blogger.

  Use the import-blogger.sh script to invoke this and deal with the output. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;xmlns:app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://purl.org/atom/app#&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;xmlns:atom=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2005/Atom&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;xmlns:xsl=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/1999/XSL/Transform&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:preserve-space&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;elements=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;atom:content&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;atom:entry[atom:category[@scheme=&#39;http://schemas.google.com/g/2005#kind&#39; and @term=&#39;http://schemas.google.com/blogger/2008/kind#post&#39;]]&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Hack to workaround quoting issues below--&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:variable&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apos&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;apos;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:variable&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:variable&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;quot&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:variable&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:call-template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string-replace-all&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;atom:title&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;replace&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$quot&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;by&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$apos&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:call-template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:param&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;draft&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app:control/app:draft&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;year&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;substring(atom:published, 1, 4)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;month&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;substring(atom:published, 6, 2)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;day&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;substring(atom:published, 9, 2)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hour&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;substring(atom:published, 12, 2)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;minute&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;substring(atom:published, 15, 2)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;second&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;substring(atom:published, 18, 2)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;micros&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;substring(atom:published, 21, 3)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tz&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;concat(substring(atom:published, 24, 3), substring(atom:published, 28, 2))&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;atom:link[@rel=&#39;alternate&#39; and @type=&#39;text/html&#39;]/@href&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;relurl&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;substring($url, 28)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;substring($url, 36, string-length($url) - 40)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;date&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;concat($year, &#39;-&#39;, $month, &#39;-&#39;, $day, &#39; &#39;, $hour, &#39;:&#39;, $minute, &#39;:&#39;, $second, &#39; &#39;, $tz)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;not($draft = &#39;yes&#39;)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;concat($year, &#39;-&#39;, $month, &#39;-&#39;, $day, &#39;-&#39;, $name, &#39;.html&#39;)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:if&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$draft = &#39;yes&#39;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;concat($year, &#39;-&#39;, $month, &#39;-&#39;, $day, &#39;-&#39;, $hour, &#39;-&#39;, $minute, &#39;-&#39;, $second, &#39;-&#39;, $micros, &#39;.html&#39;)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:if&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:param&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tags&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:for-each&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;atom:category[@scheme=&#39;http://www.blogger.com/atom/ns#&#39;]&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:sort&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@term&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;position() &amp;amp;gt; 1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;xsl:text&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:text&amp;gt;&amp;lt;/xsl:if&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@term&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:for-each&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:param&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Now, dump the post.  All these lines must start on the first column. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:text&amp;gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;not($draft = &#39;yes&#39;)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
__BEGIN_POST__ &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$output&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:if&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$draft = &#39;yes&#39;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
__BEGIN_DRAFT__ &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$output&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:if&amp;gt;&lt;/span&gt;
---
layout: post
title: &quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&quot;
date: &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$date&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
categories: &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$tags&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
julipedia: &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$relurl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
excerpt_separator: &lt;span class=&quot;ni&quot;&gt;&amp;amp;lt;&lt;/span&gt;/p&lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&lt;/span&gt;
---
&lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;atom:content/text()&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;disable-output-escaping=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
__END__

&lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:text&amp;gt;&amp;lt;/xsl:text&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:apply-templates&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@*|node()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@*|node()&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;priority=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:apply-templates&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@*|node()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- From: http://geekswithblogs.net/Erik/archive/2008/04/01/120915.aspx --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string-replace-all&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;replace&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;by&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:choose&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:when&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contains($text, $replace)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;substring-before($text,$replace)&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$by&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:call-template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string-replace-all&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;substring-after($text,$replace)&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;replace&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$replace&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:with-param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;by&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$by&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:call-template&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:when&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:otherwise&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$text&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:otherwise&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:choose&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you may have noticed, this stylesheet exports all posts into a single text file, and delimits them with unique start/end markers of the form &lt;code class=&quot;highlighter-rouge&quot;&gt;__BEGIN_POST__&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;__BEGIN_DRAFT__&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;__END__&lt;/code&gt;. I will show in the next section how to split them up. The reason for this lies in a limitation of &lt;code class=&quot;highlighter-rouge&quot;&gt;xsltproc&lt;/code&gt;: this tool is an XSLT 1.0 processor so it does not have support for the multi-file (chunked) output present since XSLT 2.0. (This is not completely accurate though: the DocBook XSL does chunking and it used to work just fine with &lt;code class=&quot;highlighter-rouge&quot;&gt;xsltproc&lt;/code&gt;; I didn’t investigate how.)&lt;/p&gt;

&lt;h2 id=&quot;from-the-text-file-to-individual-html-files&quot;&gt;From the text file to individual HTML files&lt;/h2&gt;

&lt;p&gt;When we run the XSLT file above with the exported contents of a Blogger site, we end up with a text file that contains all posts separated by unique markers. The script below processes this text file and outputs individual HTML documents with Front Matter for each post. I called this &lt;code class=&quot;highlighter-rouge&quot;&gt;import-blogger.sh&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Imports the contents of a Blogger export.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This script parses the XML file given as the input, which has to be downloaded&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# from Blogger as a backup, and generates one file per post in the corresponding&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# _drafts or _posts folder.&lt;/span&gt;

shtk_import cleanup
shtk_import cli

&lt;span class=&quot;nv&quot;&gt;PARSE_BLOGGER_XSL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;shtk_cli_dirname&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/parse-blogger.xsl&quot;&lt;/span&gt;

generate_files&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;nb&quot;&gt;shift
    local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basedir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;nb&quot;&gt;shift

    local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;line; &lt;span class=&quot;k&quot;&gt;do
        case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
            &lt;/span&gt;__BEGIN_DRAFT__&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunk_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | cut -d &lt;span class=&quot;s1&quot;&gt;&#39; &#39;&lt;/span&gt; -f 2-&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
                mkdir -p &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basedir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/_drafts&quot;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basedir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/_drafts/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunk_name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -f &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; shtk_cli_error &lt;span class=&quot;s2&quot;&gt;&quot;Draft &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; already exists&quot;&lt;/span&gt;
                shtk_cli_info &lt;span class=&quot;s2&quot;&gt;&quot;Writing draft &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunk_name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

            __BEGIN_POST__&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunk_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | cut -d &lt;span class=&quot;s1&quot;&gt;&#39; &#39;&lt;/span&gt; -f 2-&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
                mkdir -p &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basedir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/_posts&quot;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basedir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/_posts/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunk_name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -f &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; shtk_cli_error &lt;span class=&quot;s2&quot;&gt;&quot;Post &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; already exists&quot;&lt;/span&gt;
                shtk_cli_info &lt;span class=&quot;s2&quot;&gt;&quot;Writing post &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunk_name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

            __END__&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -z &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &amp;lt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

main&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${#}&lt;/span&gt; -eq 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; shtk_cli_usage_error &lt;span class=&quot;s2&quot;&gt;&quot;Must provide name of Blogger&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;exported data file&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;nb&quot;&gt;shift

    local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TMPDIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/tmp&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;shtk_cli_progname&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.XXXXXX&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tempdir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;mktemp -d &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; 2&amp;gt;/dev/null&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -d &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tempdir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; shtk_cli_error &lt;span class=&quot;s2&quot;&gt;&quot;Failed to create temporary directory&quot;&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;remove_tempdir() { rm -rf &#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tempdir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&#39;; }&quot;&lt;/span&gt;
    shtk_cleanup_register remove_tempdir

    shtk_cli_info &lt;span class=&quot;s2&quot;&gt;&quot;Parsing contents of Blogger exported data&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tempdir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/chunks.txt&quot;&lt;/span&gt;
    xsltproc &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PARSE_BLOGGER_XSL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

    generate_files &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; .
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Running this script results in a bunch of &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt; files that can be placed directly into the Jekyll’s &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory and served as any other post. This was what I did for the first publication of this site.&lt;/p&gt;

&lt;h2 id=&quot;from-html-to-markdown&quot;&gt;From HTML to Markdown&lt;/h2&gt;

&lt;p&gt;The HTML produced by Blogger is far from optimal: it contains a lot of unnecessary formatting, especially if you have previously used their WYSIWYG editor; and even if you have typed the HTML by hand, sometimes Blogger decides to “fix” it.&lt;/p&gt;

&lt;p&gt;After the first migration step, I decided to convert my most popular posts into Markdown for better looks and not to bother much with the rest. The reason was that, as part of the conversion, I would be sanitizing their markup both automatically via the translation tools and manually as an after-step. Sanity-checking the contents of a Markdown file for good markup is much easier than doing the same on a machine-generated HTML file.&lt;/p&gt;

&lt;p&gt;To do this conversion, I used the following script which I appropriately named &lt;code class=&quot;highlighter-rouge&quot;&gt;html-to-markdown.sh&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Takes an HTML post and converts it to Markdown.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This is intended to be used on posts imported from Blogger.&lt;/span&gt;

shtk_import cleanup
shtk_import cli

extract_content&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;nb&quot;&gt;shift

    &lt;/span&gt;awk &lt;span class=&quot;s1&quot;&gt;&#39;
BEGIN {
    count = 0
}
/^---$/ {
    count += 1
    next
}
{
    if (count &amp;lt; 2) {
        next
    }
    print
}
    &#39;&lt;/span&gt; &amp;lt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

extract_front_matter&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;nb&quot;&gt;shift

    &lt;/span&gt;awk &lt;span class=&quot;s1&quot;&gt;&#39;
BEGIN {
    count = 0
}
/^---$/ {
    count += 1
    if (count &amp;lt;= 2) {
        print
    }
    next
}
{
    if (count != 1) {
        next
    }
    print
}
    &#39;&lt;/span&gt; &amp;lt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

sed_in_place&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;nb&quot;&gt;shift

    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;sed &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.tmp&quot;&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;mv -f &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.tmp&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else
        &lt;/span&gt;rm -f &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.tmp&quot;&lt;/span&gt;
        shtk_cli_error &lt;span class=&quot;s2&quot;&gt;&quot;Failed to modify &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; in place&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# In The Julipedia posts, I did not use section headings because I was not&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# clear on what Blogger expected.  In their place, I used single-line&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# paragraphs in bold, which pandoc translates to section 4 levels.  Fix&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this here by &quot;renumbering&quot; the sections.&lt;/span&gt;
patch_sections&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;nb&quot;&gt;shift

    &lt;/span&gt;sed_in_place &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -E &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s1&quot;&gt;&#39;s,^####,#,&#39;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s1&quot;&gt;&#39;s,^\*\*(.*)\*\*$,# \1,&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

patch_utf8&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;nb&quot;&gt;shift

    &lt;/span&gt;sed_in_place &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xa0&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;agrave;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xa1&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;aacute;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xa4&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;auml;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xa7&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ccedil;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xa8&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;egrave;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xa9&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;eacute;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xab&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;euml;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xac&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;igrave;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xad&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;iacute;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xaf&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;iuml;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xb1&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ntilde;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xb2&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ograve;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xb3&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;oacute;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xb6&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ouml;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xb9&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ugrave;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xba&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;uacute;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xc3\xbc&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;uuml;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xe2\x80\x93&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ndash;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xe2\x80\x94&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mdash;,g&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -e &lt;span class=&quot;s2&quot;&gt;&quot;s,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\xe2\x80\xa6&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hellip;,g&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

main&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${#}&lt;/span&gt; -eq 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; shtk_cli_usage_error &lt;span class=&quot;s2&quot;&gt;&quot;Must provide an HTML input name&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;html_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;nb&quot;&gt;shift

    local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown_output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;html_input&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | sed -e &lt;span class=&quot;s1&quot;&gt;&#39;s,\.html$,.md,&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;front_matter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown_output&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.tmp1&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;html_content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown_output&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.tmp2&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown_content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown_output&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.tmp3&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;remove_temp_files() {&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;    rm -f &#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;front_matter&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;html_content&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown_content&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&#39;;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;}&quot;&lt;/span&gt;
    shtk_cleanup_register remove_temp_files

    extract_front_matter &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;html_input&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        | grep -v &lt;span class=&quot;s1&quot;&gt;&#39;^excerpt_separator:&#39;&lt;/span&gt; &amp;gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;front_matter&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

    extract_content &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;html_input&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;html_content&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    pandoc --from&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;html --to&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;markdown_strict --output&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown_content&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        --ascii &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;html_content&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; shtk_cli_error &lt;span class=&quot;s2&quot;&gt;&quot;pandoc conversion failed&quot;&lt;/span&gt;

    patch_sections &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown_content&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    patch_utf8 &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown_content&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

    git mv &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;html_input&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown_output&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    cat &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;front_matter&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown_content&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown_output&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    git add &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;markdown_output&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This script relies on &lt;a href=&quot;http://pandoc.org/&quot;&gt;Pandoc&lt;/a&gt; to do the initial conversion and then performs some custom post-processing—in particular to fix the original markup in the Blogger posts and to strip out UTF-8 characters in favor of HTML entities.&lt;/p&gt;

&lt;h1 id=&quot;parting-words&quot;&gt;Parting words&lt;/h1&gt;

&lt;p&gt;That’s all! Wasn’t it simple? No, not really… this all took me various days of work to obtain palatable results.&lt;/p&gt;

&lt;p&gt;Note that you will need some stitching to put the various steps together: I purposely did not provide you with a fully-specified solution because the code above is rough and will surely need tuning for your own use case. Hopefully, though, this will serve as a decent starting point.&lt;/p&gt;

&lt;p&gt;Also note that the scripts above need &lt;a href=&quot;https://github.com/jmmv/shtk/&quot;&gt;shtk&lt;/a&gt; to function so you will need to either install that first or remove the dependency.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;
</description>
        
        <pubDate>Fri, 22 Jul 2016 14:46:10 +0000</pubDate>
        <link>http://julio.meroh.net/2016/07/blogger-to-jekyll.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2016/07/blogger-to-jekyll.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Welcome to my homepage, version 3.0</title>
        
          <description>
            Welcome to my updated homepage, this time at its third major version!

First iteration — a year ago

The first iteration of this site, which went live exactly a year ago, was a single static page that leveraged Twitter’s Bootstrap. I created that page for two reasons: to serve as the target for all the “homepage” links that online profiles require, and to learn Bootstrap. Due to the site’s simplicity and goals, its contents were not very interesting nor dynamic.

Second iteration — seven months ago

On the second iteration, I adopted Jekyll to manage the split of the monolithic page into various chunks with the goal of extending their content. Among the new content, I added a “news” section to leverage Jekyll’s functionality in managing blog-like sites and announced the site’s 2.0 release.

Not much later, I concluded that Medium was not the right place to host the original versions of my content—nor was Blogger or any other managed site, for that matter. The main reason was that using a third-party site to host the originals meant that I was at the mercy of that site for the fate of my content (Duh—I know). More importantly, which was the trigger, was that I could not retrieve my content in a format that permitted reuse, which I desired recently.

The realization above made me import all of my Medium posts into this site and, now, the time has come to take the leap and actually turn this site into my full-blown blog.

Third iteration — today

On this third iteration, this site has become my full-blown blog, deprecating the old Blogger-based The Julipedia.

What you will find in this third iteration is a revamped look that surfaces recent content more clearly with fewer highlights on my persona. Additionally, I have imported all the content from The Julipedia verbatim, respecting the URL schema, and will be redirecting the old Blogger address to this site at some point in the near future. (The plan is for existing links in the wild to not break, and for anyone subscribed to the old RSS feed to start picking up new entries automatically… we’ll see how well that works in practice.)

Thoughts on Markdown

Importing the content from Blogger and Medium was extremely painful. It is true that these sites provide an export feature, but the output they yield is incredibly user-hostile. I’m glad to have realized this now and not after several more years or blogging!



With my cynical hat on, the export feature exists primarily for backup purposes and secondarily for peace of mind; otherwise, it’s mostly useless for taking the content elsewhere. It took many contortions to extract the content and reconvert it into a version that I can consider canonical and reusable—i.e. either a Markdown document or a simplified HTML page.

Aside from the import, which I will cover on a separate post later on, authoring original content in Markdown has been rewarding so far. This platform makes me feel in full control (for better or worse) of the whole authoring, editing, and publication process, and I get a good feeling that the master copies of my articles will stand the test of time.

Unfortunately, I have to confess that the barrier to publication via Jekyll is higher, which has had the effect of me publishing less frequently and focusing on longer and more elaborate posts. Or… maybe that’s just correlation: I have been posting more infrequent but longer posts since before the birth of this site.



IMPORTANT: So has this site turned into my authoritative blog? I guess that’s the case!
Make sure to update your feed subscription now to not miss a beat.

Hope you enjoy the new site! There is new stuff coming up soon, including a detailed explanation on how I extracted my old Blogger contents and reposted them in Jekyll (which was far from trivial) and a formal “deactivation” of The Julipedia address.

            &lt;a href=&quot;http://julio.meroh.net/2016/05/homepage-v3.html&quot;&gt;[Continue reading]&lt;/a&gt;
          </description>
        
          <description>&lt;p&gt;Welcome to my updated homepage, this time at its third major version!&lt;/p&gt;

&lt;h1 id=&quot;first-iteration-----a-year-ago&quot;&gt;First iteration — a year ago&lt;/h1&gt;

&lt;p&gt;The first iteration of this site, which went live exactly a year ago, was a single static page that leveraged Twitter’s Bootstrap. I created that page for two reasons: to serve as the target for all the “homepage” links that online profiles require, and to learn Bootstrap. Due to the site’s simplicity and goals, its contents were not very interesting nor &lt;em&gt;dynamic&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;second-iteration-----seven-months-ago&quot;&gt;Second iteration — seven months ago&lt;/h1&gt;

&lt;p&gt;On the second iteration, I adopted &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to manage the split of the monolithic page into various chunks with the goal of extending their content. Among the new content, I added a “news” section to leverage Jekyll’s functionality in managing blog-like sites and &lt;a href=&quot;/2015/10/new-homepage.html&quot;&gt;announced the site’s 2.0 release&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not much later, I &lt;a href=&quot;/2016/01/medium-experiment-wrapup.html&quot;&gt;concluded that Medium&lt;/a&gt; was not the right place to host the original versions of my content—nor was Blogger or any other managed site, for that matter. The main reason was that using a third-party site to host the originals meant that I was at the mercy of that site for the fate of my content (&lt;em&gt;Duh&lt;/em&gt;—I know). More importantly, which was the trigger, was that I could not retrieve &lt;em&gt;my&lt;/em&gt; content in a format that permitted reuse, which I desired recently.&lt;/p&gt;

&lt;p&gt;The realization above made me import all of my Medium posts into this site and, now, the time has come to take the leap and actually turn this site into my full-blown blog.&lt;/p&gt;

&lt;h1 id=&quot;third-iteration-----today&quot;&gt;Third iteration — today&lt;/h1&gt;

&lt;p&gt;On this third iteration, this site has become my full-blown blog, deprecating the old Blogger-based &lt;a href=&quot;http://julipedia.meroh.net/&quot;&gt;The Julipedia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What you will find in this third iteration is a revamped look that surfaces recent content more clearly with fewer highlights on my persona. Additionally, I have imported all the content from The Julipedia verbatim, respecting the URL schema, and will be redirecting the old Blogger address to this site at some point in the near future. (The plan is for existing links in the wild to not break, and for anyone subscribed to the old RSS feed to start picking up new entries automatically… we’ll see how well that works in practice.)&lt;/p&gt;

&lt;h1 id=&quot;thoughts-on-markdown&quot;&gt;Thoughts on Markdown&lt;/h1&gt;

&lt;p&gt;Importing the content from Blogger and Medium was &lt;em&gt;extremely painful&lt;/em&gt;. It is true that these sites provide an export feature, but the output they yield is incredibly user-hostile. I’m glad to have realized this now and not after several more years or blogging!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://knowyourmeme.com/photos/976824-reaction-images&quot;&gt;&lt;img src=&quot;/images/2016-05-29-but-why.gif&quot; class=&quot;float-right&quot; alt=&quot;But why?&quot; width=&quot;30%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With my cynical hat on, the export feature exists primarily for backup purposes and secondarily for peace of mind; otherwise, it’s mostly useless for taking the content elsewhere. It took many contortions to extract the content and reconvert it into a version that I can consider canonical and reusable—i.e. either a Markdown document or a simplified HTML page.&lt;/p&gt;

&lt;p&gt;Aside from the import, which I will cover on a separate post later on, authoring original content in Markdown has been rewarding so far. This platform makes me feel in full control (for better or worse) of the whole authoring, editing, and publication process, and I get a good feeling that the master copies of my articles will stand the test of time.&lt;/p&gt;

&lt;p&gt;Unfortunately, I have to confess that the barrier to publication via Jekyll is higher, which has had the effect of me publishing less frequently and focusing on longer and more elaborate posts. Or… maybe that’s just correlation: I have been posting more infrequent but longer posts since before the birth of this site.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;IMPORTANT: &lt;strong&gt;&lt;em&gt;So has this site turned into my authoritative blog? I guess that’s the case!&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
Make sure to &lt;a href=&quot;/feed.xml&quot;&gt;update your feed subscription&lt;/a&gt; now to not miss a beat.&lt;/p&gt;

&lt;p&gt;Hope you enjoy the new site! There is new stuff coming up soon, including a detailed explanation on how I extracted my old Blogger contents and reposted them in Jekyll (which was far from trivial) and a formal “deactivation” of The Julipedia address.&lt;/p&gt;
</description>
        
        <pubDate>Sun, 29 May 2016 21:00:00 +0000</pubDate>
        <link>http://julio.meroh.net/2016/05/homepage-v3.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2016/05/homepage-v3.html</guid>
        
        
        <category>website</category>
        
      </item>
    
      <item>
        <title>Visual Studio Code: A modern editor</title>
        
          <description>
            On April 14th, 2016, Microsoft announced the 1.0 release of their open-source Visual Studio Code (VSCode) editor. I’ve been drive-testing it for a few months and have been quite pleased with it, so here go my impressions.

How did I get here?

Let’s backtrack a bit first. I’ve been a Vim and Emacs user for many years. Yes, I use both regularly depending on what I have to achieve. For me, Vim shines in doing quick single-file changes and repetitive edits through many files, while Emacs shines in long-lived coding sessions that involve numerous open buffers. These editors are well-suited to my remote-based coding workflow because they run just fine in the terminal. However, sometimes I just would like to take advantage of the desktop environment and the GUI of these two editors on OS X… err.. sucks… so I’ve been wanting to find something else.

As a result, with all the hype around GitHub’s Atom last year, I decided to jump on the bandwagon and gave it a try. My first encounters with Atom were not great: I found the environment bloated—just look at the endless settings and extensions panel—and clunky: the UI seemed convoluted, and Atom would routinely spit internal errors when performing “usual” editing tasks. Granted, these were probably caused by the extensions I had installed… but I don’t think I installed anything out of the ordinary!

No matter what, I carried on and used Atom to write the first version of this site. The experience didn’t “hook me” so I couldn’t be bothered to use Atom for anything else. But, soon after, VSCode entered the scene with a similar premise to Atom, and in fact built on the same platform. You may or may not like Microsoft, but they are pretty damn good at building IDEs… ergo VSCode deserved a try.

Enter VSCode

VSCode’s interface is pretty barebones. There is nothing particularly shiny about the editor when you open it the first time: a sidebar with four spartan sections and an empty content panel to display files. If you dare to launch the settings editor, you are met with two editing panels: one on the left to display the default settings in JSON format, and one on the right with an empty file waiting for your overrides. Uh huh?

That’s right. At first sight, VSCode can give the impression of being a joke—I certainly thought so when I encountered the, literally, settings editor—, but that’s very far from the truth.

Start using the command palette to navigate files and commands; it’s like Emacs’ M-x, but magical. Notice how non-intrusive but powerful the Git integration is—and I heard that it may be even better than Atom’s, which would be ironic… Navigate the editor with reasonable keyboard bindings, just as you would expect. Appreciate the utter simplicity of the configuration mechanism. And, the icing, install extensions: as I understand it, VSCode’s initial target was to support web-based languages, but production-quality extensions now exist for native languages—including C#, C++, and Go.

I’ve personally come to enjoy using VSCode. Part of this is because the editor made me so much more productive writing code in a new language, Go. As I hinted in a previous post, having semantic auto-completion, assisted code navigation, and automated code reformatting plus validation are invaluable features when navigating a new, unknown language. I’d have certainly written Go code in Emacs (and that’s exactly how I started), but it’d have been a much more painful experience.

There are also teeny tiny touches that help everyday tasks. One example is the preview of colors when entering color codes in CSS: the editor displays a little box next to the code filled with the color you provided. Another example is how hovering on CSS properties or JSON configuration properties pops up a bubble with more information about the symbol underneath and all possible values.

Open source project

Can Microsoft deliver an open source project without strange licenses and with development happening in the open? It indeed seems so, which is an 180-degree turn from what the company did a few years ago.

VSCode is an open source project in all regards: the code is released under the very liberal MIT license (but see these FAQs), the project is hosted on GitHub, and Microsoft has been able to create a community around the editor. Make no mistake: VSCode is not a code dump. (I’ve personally filed a few feature requests with them and, even though my requests were rejected, the rationales they provided were convincing and the timeliness of the responses was much appreciated.)

Workspaces

Back to the settings chatter, one particular detail I have come to like is the ability to trivially define and customize workspaces (aka projects): create a .vscode/settings.json file at the top of your tree with any project-specific configuration overrides (e.g. indentation tweaks) and VSCode will apply those transparently. I appreciate the fact that this has to be done explicitly and that the contents of the file are super-simple and human readable. Contrast this to, say, Android Studio, which creates an .idea directory with almost-unreadable contents.

With the right command-line alias, all you have to do is type code . at the top-level directory of your project to launch a new instance of VSCode ready to work on your project—and the editor remembers where you left off last time. In case you are curious, an alias for OS X would be:

alias code="open -a 'Visual Studio Code'"



Some bad parts

So what about the bad? I don’t have much to complain about, really.

Obviously, the fact that VSCode is a graphical editor means that it is not usable on the terminal, which is a blocker for doing remote work. Similarly, VSCode currently only supports Windows, OS X, and Linux; I don’t think there is any technical blocking the support of other systems, but the port needs to be done and is probably not super-easy.

Lastly, while the authors praise VSCode’s small size, I don’t really buy it: the fact that the editor is based on Electron, weights several megabytes, and takes a few seconds to start counters this. But, really, none of these have bothered me.

Parting words

If for any reason you would like to try a different editor, I’d certainly encourage you to give VSCode a chance. Make sure to go over the editor basics document to familiarize yourself with the environment and delve into the more advanced topics later on.

I, for one, will continue to use Vim and Emacs for a lot of my work, but VSCode has gained a spot for certain types of projects. How this split will balance in one direction or the other, only time will tell: there are things I like and dislike in both camps. But remember: it’s all about choosing the right tool for the job, so restricting yourself to just one editor is most likely counterproductive.

If you let me… I’ll conclude by saying that Atom is to Emacs what VSCode is to Vim. “What do you mean by this?” you say? Ah, I don’t know, you’ll have to figure it out yourself!

            &lt;a href=&quot;http://julio.meroh.net/2016/04/vscode.html&quot;&gt;[Continue reading]&lt;/a&gt;
          </description>
        
          <description>&lt;p&gt;On April 14th, 2016, Microsoft announced the &lt;a href=&quot;http://code.visualstudio.com/blogs/2016/04/14/vscode-1.0&quot;&gt;1.0 release&lt;/a&gt; of their open-source &lt;a href=&quot;http://code.visualstudio.com&quot;&gt;Visual Studio Code (VSCode)&lt;/a&gt; editor. I’ve been drive-testing it for a few months and have been quite pleased with it, so here go my impressions.&lt;/p&gt;

&lt;h1 id=&quot;how-did-i-get-here&quot;&gt;How did I get here?&lt;/h1&gt;

&lt;p&gt;Let’s backtrack a bit first. I’ve been a Vim and Emacs user for many years. Yes, I use both &lt;em&gt;regularly&lt;/em&gt; depending on what I have to achieve. For me, Vim shines in doing quick single-file changes and repetitive edits through many files, while Emacs shines in long-lived coding sessions that involve numerous open buffers. These editors are well-suited to &lt;a href=&quot;/2015/09/my-coding-workflow.html&quot;&gt;my remote-based coding workflow&lt;/a&gt; because they run just fine in the terminal. However, sometimes I just &lt;em&gt;would like to&lt;/em&gt; take advantage of the desktop environment and the GUI of these two editors on OS X… err.. sucks… so I’ve been wanting to find something else.&lt;/p&gt;

&lt;p&gt;As a result, with all the hype around GitHub’s &lt;a href=&quot;http://atom.io/&quot;&gt;Atom&lt;/a&gt; last year, I decided to jump on the bandwagon and gave it a try. My first encounters with Atom were not great: I found the environment bloated—just look at the endless settings and extensions panel—and clunky: the UI seemed convoluted, and Atom would routinely spit internal errors when performing “usual” editing tasks. Granted, these were probably caused by the extensions I had installed… but I don’t think I installed anything out of the ordinary!&lt;/p&gt;

&lt;p&gt;No matter what, I carried on and used Atom to write the first version of this site. The experience didn’t “hook me” so I couldn’t be bothered to use Atom for anything else. But, soon after, VSCode entered the scene with a similar premise to Atom, and in fact built on the same platform. You may or may not like Microsoft, but they are pretty damn good at building IDEs… ergo VSCode deserved a try.&lt;/p&gt;

&lt;h1 id=&quot;enter-vscode&quot;&gt;Enter VSCode&lt;/h1&gt;

&lt;p&gt;VSCode’s interface is pretty barebones. There is nothing particularly shiny about the editor when you open it the first time: a sidebar with four spartan sections and an empty content panel to display files. If you dare to launch the settings editor, you are met with two editing panels: one on the left to display the default settings in JSON format, and one on the right with an empty file waiting for your overrides. Uh huh?&lt;/p&gt;

&lt;p&gt;That’s right. At first sight, VSCode can give the impression of being a joke—I certainly thought so when I encountered the, literally, settings editor—, but that’s very far from the truth.&lt;/p&gt;

&lt;p&gt;Start using the &lt;strong&gt;command palette&lt;/strong&gt; to navigate files and commands; it’s like Emacs’ &lt;code class=&quot;highlighter-rouge&quot;&gt;M-x&lt;/code&gt;, but magical. Notice how non-intrusive but powerful the &lt;strong&gt;Git integration&lt;/strong&gt; is—and I heard that it may be even better than Atom’s, which would be ironic… Navigate the editor with &lt;strong&gt;reasonable keyboard bindings&lt;/strong&gt;, just as you would expect. Appreciate the utter &lt;strong&gt;simplicity of the configuration mechanism&lt;/strong&gt;. And, the icing, install &lt;strong&gt;extensions&lt;/strong&gt;: as I understand it, VSCode’s initial target was to support web-based languages, but production-quality extensions now exist for native languages—including C#, C++, and Go.&lt;/p&gt;

&lt;p&gt;I’ve personally come to enjoy using VSCode. Part of this is because the editor made me so much more productive writing code in a new language, Go. As I hinted &lt;a href=&quot;/2016/03/golang-review.html#a-note-on-visual-studio-code&quot;&gt;in a previous post&lt;/a&gt;, having &lt;strong&gt;semantic auto-completion&lt;/strong&gt;, &lt;strong&gt;assisted code navigation&lt;/strong&gt;, and &lt;strong&gt;automated code reformatting plus validation&lt;/strong&gt; are invaluable features when navigating a new, unknown language. I’d have certainly written Go code in Emacs (and that’s exactly how I started), but it’d have been a much more painful experience.&lt;/p&gt;

&lt;p&gt;There are also teeny tiny touches that help everyday tasks. One example is the preview of colors when entering color codes in CSS: the editor displays a little box next to the code filled with the color you provided. Another example is how hovering on CSS properties or JSON configuration properties pops up a bubble with more information about the symbol underneath and all possible values.&lt;/p&gt;

&lt;h2 id=&quot;open-source-project&quot;&gt;Open source project&lt;/h2&gt;

&lt;p&gt;Can Microsoft deliver an open source project without strange licenses and with development happening in the open? It indeed seems so, which is an 180-degree turn from what the company did a few years ago.&lt;/p&gt;

&lt;p&gt;VSCode is an open source project in all regards: the code is released under the very liberal MIT license (but &lt;a href=&quot;http://code.visualstudio.com/Docs/supporting/faq#_licensing&quot;&gt;see these FAQs&lt;/a&gt;), the project is &lt;a href=&quot;http://github.com/microsoft/vscode&quot;&gt;hosted on GitHub&lt;/a&gt;, and Microsoft has been able to create a community around the editor. Make no mistake: VSCode is not a code dump. (I’ve personally filed a few feature requests with them and, even though my requests were rejected, the rationales they provided were convincing and the timeliness of the responses was much appreciated.)&lt;/p&gt;

&lt;h2 id=&quot;workspaces&quot;&gt;Workspaces&lt;/h2&gt;

&lt;p&gt;Back to the settings chatter, one particular detail I have come to like is the ability to trivially define and customize workspaces (aka projects): create a &lt;code class=&quot;highlighter-rouge&quot;&gt;.vscode/settings.json&lt;/code&gt; file at the top of your tree with any project-specific configuration overrides (e.g. indentation tweaks) and VSCode will apply those transparently. I appreciate the fact that this has to be done explicitly and that the contents of the file are super-simple and human readable. Contrast this to, say, Android Studio, which creates an &lt;code class=&quot;highlighter-rouge&quot;&gt;.idea&lt;/code&gt; directory with almost-unreadable contents.&lt;/p&gt;

&lt;p&gt;With the right command-line alias, all you have to do is type &lt;code class=&quot;highlighter-rouge&quot;&gt;code .&lt;/code&gt; at the top-level directory of your project to launch a new instance of VSCode ready to work on your project—and the editor remembers where you left off last time. In case you are curious, an alias for OS X would be:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alias code=&quot;open -a &#39;Visual Studio Code&#39;&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;some-bad-parts&quot;&gt;Some bad parts&lt;/h2&gt;

&lt;p&gt;So what about the bad? I don’t have much to complain about, really.&lt;/p&gt;

&lt;p&gt;Obviously, the fact that VSCode is a graphical editor means that it is not usable on the terminal, which is a blocker for doing remote work. Similarly, VSCode currently only supports Windows, OS X, and Linux; I don’t think there is any technical blocking the support of other systems, but the port needs to be done and is probably not super-easy.&lt;/p&gt;

&lt;p&gt;Lastly, while the authors praise VSCode’s small size, I don’t really buy it: the fact that the editor is based on &lt;a href=&quot;http://electron.atom.io/&quot;&gt;Electron&lt;/a&gt;, weights several megabytes, and takes a few seconds to start counters this. But, really, none of these have bothered me.&lt;/p&gt;

&lt;h1 id=&quot;parting-words&quot;&gt;Parting words&lt;/h1&gt;

&lt;p&gt;If for any reason you would like to try a different editor, I’d certainly encourage you to give VSCode a chance. Make sure to go over the &lt;a href=&quot;https://code.visualstudio.com/docs/editor/codebasics&quot;&gt;editor basics document&lt;/a&gt; to familiarize yourself with the environment and delve into the more advanced topics later on.&lt;/p&gt;

&lt;p&gt;I, for one, will continue to use Vim and Emacs for a lot of my work, but VSCode has gained a spot for certain types of projects. How this split will balance in one direction or the other, only time will tell: there are things I like and dislike in both camps. But remember: it’s all about choosing the right tool for the job, so restricting yourself to just one editor is most likely counterproductive.&lt;/p&gt;

&lt;p&gt;If you let me… I’ll conclude by saying that Atom is to Emacs what VSCode is to Vim. “&lt;em&gt;What do you mean by this?&lt;/em&gt;” you say? Ah, I don’t know, you’ll have to figure it out yourself!&lt;/p&gt;
</description>
        
        <pubDate>Tue, 19 Apr 2016 15:30:00 +0000</pubDate>
        <link>http://julio.meroh.net/2016/04/vscode.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2016/04/vscode.html</guid>
        
        
        <category>development</category>
        
        <category>software</category>
        
        <category>workflow</category>
        
      </item>
    
      <item>
        <title>A look at Go from a newbie&#39;s perspective</title>
        
          <description>
            I confess I am late to the game: the Go programming language came out in 2009 and I had not had the chance to go all in for a real project until two weeks ago. Here is a summary of my experience. Spoiler alert: I’m truly pleased.

The project

What I set out to build is a read-only caching file system to try to solve the problems I presented in my previous analysis of large builds on SSHFS. The reasons I chose Go are simple: I had to write a low-level system component and, in theory, Go excels at this; I did not want to use plain C; Go had the necessary bindings (for FUSE and SQLite); and, heck, I just wanted to try it out!

It only took me a little over two days to get a fully-functional implementation of my file system, and this is without having ever written a FUSE-based file system before nor any non-toy Go code. That said, I had previously written a kernel file system in 2005 and that helped navigating the whole endeavor and tuning the resulting performance.

Where is the code you ask? Nowhere yet unfortunately; I hope to make it available once it is ready.

The Go language review

The summary of what follows is simple: after two weeks, I’m in love with Go.

I remember languages people dismiss Go back in 2009 on the grounds that it was a simplistic language without novel concepts… but there lies its beauty: Go lets you get things done quickly and safely with few performance penalties. I feel I can write much more robust code with Go than with any other comparable language.

Disclaimer: Keep in mind that I’m still a newbie. I’m sure that some of the items below are naïve, incomplete or plain incorrect. If so, please let me know!

The good


  
    Enforced coding style: You may or may not like Go’s coding style (I personally would change a few things), but the fact that it is chosen for you and that gofmt exists beats any personal preferences you may have. No more thinking about tabs vs. spaces; no more thinking about brace placement; no more thinking about the look of your code. It. Just. Does. Not. Matter. Focus on your code’s logic and let the machine format it in a consistent manner across the whole Go ecosystem.
  
  
    Explicit error handling: Yes, the if err != nil { return err } pattern gets old very quickly, but having to explicitly handle errors shows you how hard it is to write robust code.

    You’d say that C is similar in this regard, but not really. There are two key differences: the first is that Go functions can return more than one result, which makes it more difficult to ignore the error code if you want to use the actual result; and the second is the defer keyword, which helps avoid leaks in error paths. I personally prefer C++’s ability to implement the RAII pattern, but defer is a good compromise.

    Do I miss exceptions? Not really. While exceptions let you keep your main code path clean of error handling, they also relegate error handling to a secondary place. This is OKish if the language has provisions to ensure that exceptions are handled at some point like Java’s throws definition, but that’s not how the majority of languages work. Just think of how easy is for exceptions leak all the way through the program’s entry point in C++ or Python.
  
  
    Strong typing, even for native types: The fact that the equivalent of C’s typedef generates types that can’t be implicitly mixed, or the fact that numeric types are not automatically promoted to other types, is a good way to prevent subtle bugs. Having to explicitly convert among types forces you to think about the consequences of doing so: Integer overflow? Check. Sign issues? Check. Precision issues? Check.
  
  
    Builtin profiling with pprof: The pprof profiling tool was invaluable to diagnose performance and memory consumption deficiencies in my caching file system and the libraries I used. What’s best is that pprof was also incredibly easy to plug into my program.

    Honestly, I’m in awe to see that this tooling is open-source because I’ve gotten very accustomed to this particular way of debugging at Google.
  
  
    The standard library: While Go by itself is a decent language, it becomes excellent because of its extensive standard library. The existence of tooling to implement pretty much anything you want wins over any deficiencies you may think the language has. The same applies to Java, by the way.
  
  
    Simple package management: Getting started with a piece of code is easy, and pulling in additional dependencies is trivial. I actually do not like the underpinnings of this “modern” trend of language-specific package management systems, but I must admit that it has been a pleasure to just add new imports, call go get, and have everything up and running in a matter of seconds.
  
  
    Build speed: This item is not tied to my recent experience with Go but is worth mentioning. About two years ago, I built the Go language on my underpowered NetBSD VM. I was expecting horrendously long build times like those of GCC or Clang, but was pleasantly surprised to see that the Go compiler, along with its extensive standard library, compiled in a few minutes.
  


The bad


  
    GOPATH: Sorry but having to modify the environment to get a program to run in the default case is ridiculous in this day and age: things should “just work” and Go is different. I have mitigated my concerns about this by writing a Makefile that sets things up automatically so I do not have to worry about customizing my environment on a project basis.
  
  
    Package management: As we saw in the good parts, Go’s package management gets the job done but its views on the world are too simplistic. On the one hand, the development environment assumes that you will always want to use the HEAD versions of your dependencies; and on the other hand, the default is to merge the dependencies with your personal code in the same workspace.

    I’ve managed to work around the latter by splitting my dependencies in a separate directory and using GOPATH to find them. The excellent article So you want to write a packaging system is a great resource on this topic, and as you read through it, you will realize that it’s geared towards revamping Go’s package manager.
  
  
    The simplistic log module: It is good that the standard library provides a logging module, but it seems way too simple for anything other than trivial logging. Fortunately, the external glog module provides increased functionality such as level-based logging and persistent logging. Therefore, you may say that being able to choose between something simple and something more complex is good, right?!

    Unfortunately, that’s not the case and this is the reason I pinpoint this particular module from the standard library. The real benefits of using glog come when the whole stack uses the same logging infrastructure and principles. Because glog is not the standard module, some Go packages will use it and others will not. As a result, you do not get the full benefits of using glog in your project because most libraries you depend on will not do the same.
  
  
    Mutability by default (aka no const keyword): Before you say “hey, const is currently not present, but if we find the need for it later on, we’ll add it!”, that’s… not great. The problem with adding a const keyword post-facto is that this is the wrong keyword to add: state should be immutable by default, and what the language should have is a mutable keyword to clearly mark those variables that hold multiple values throughout their lifetime.

    The reason I point out this specific language feature is because I’ve mentally gotten very accustomed to separating constant vs. mutable variables in code. Reading code that adheres to this strict separation is easy to follow: you can quickly map the immutable state in your mind and then focus on the mutable pieces of the code to understand what’s happening. Without these clues, you need extra effort.
  


The ugly


  
    Short identifiers: A lot of Go code, including the snippets in the documentation, is plagued by extremely short identifiers. Those are used as local variables, function arguments, method receivers, and even structure members. Combined with the heavy use of interfaces, it is hard to read the code: What’s a c? And an r? And an s.wg? Yes, there is bad code all around, but when the official language documentation seems to recommend this approach, you can expect that others will follow the apparent recommendation in all cases.

    Remember that code is written to be read many more times than it is written. Fully spelled-out identifiers help significantly.
  
  
    Maximum line length: Even though Go has a predefined coding style, there is no pre-specified maximum line length. While it is great to want to abolish a custom that remains from the punch-card days, keeping code narrow has its benefits: think of two or three side-by-side editors in a small laptop screen.

    This would be a non-issue if editors were able to wrap long code lines in a way that made sense—just like word processors do with text—but current editors are terrible at this. So, personally, I will stick to the 80 character limit; I have given 100 a try per more modern recommendations… but when I opened the code in my laptop and couldn’t see two files at once without wrapping, I knew I had to go back to 80.
  


A note on Visual Studio Code

To conclude, let’s talk about editors. I’ve been a long-time Vim and Emacs user and now decided to give another editor a try. Heresy!

In fact, some time last year, I started playing with Atom after all the hype around this editor. It really is full-featured, but it also is overwhelming and fragile: overwhelming because there are knobs everywhere and fragile because I had never had an editor throw errors at me routinely during “normal” operation. (I’m sure I can blame some plugin I installed, but still.)

Soon after, Visual Studio Code (VSCode) came out: an open source editor from Microsoft no less. I installed VSCode just to take a look and I found much sought simplicity: just look at the way to configure the editor, which is by adding personal or project-specific overrides to an empty JSON file. I felt I’d enjoy this editor more than Atom though I did not have a use for it at the time: most of my development still happens over SSH so VSCode would not fit the bill.

This experiment with Go gave me the chance to use VSCode, particularly because I was writing the project primarily for OS X (my desktop) and because I wanted an IDE-like experience. As it turns out, VSCode has a pretty good Go plugin. The reason I wanted IDE integration is because writing code in an unknown language with an unknown standard library is a task that truly benefits from autocompletion and inline syntax validation. I wouldn’t have been able to prototype my file system as quickly as I did with a bare editor.

I know, I know, I could have set up Emacs to do the same thing, but I just wanted to give VSCode a ride. And, mind you, I just took a look at what’s involved to set Emacs up for Go and didn’t find it pleasing; way too much manual work involved.

Do you Go already?

            &lt;a href=&quot;http://julio.meroh.net/2016/03/golang-review.html&quot;&gt;[Continue reading]&lt;/a&gt;
          </description>
        
          <description>&lt;p&gt;I confess I am late to the game: the &lt;a href=&quot;https://golang.org/&quot;&gt;Go programming language&lt;/a&gt; came out in 2009 and I had not had the chance to go &lt;em&gt;all in&lt;/em&gt; for a real project until two weeks ago. Here is a summary of my experience. Spoiler alert: I’m truly pleased.&lt;/p&gt;

&lt;h1 id=&quot;the-project&quot;&gt;The project&lt;/h1&gt;

&lt;p&gt;What I set out to build is a read-only caching file system to try to solve the problems I presented in my previous &lt;a href=&quot;/2016/02/sshfs-performance-analysis-for-builds.html&quot;&gt;analysis of large builds on SSHFS&lt;/a&gt;. The reasons I chose Go are simple: I had to write a low-level system component and, in theory, Go excels at this; I did not want to use plain C; Go had the necessary bindings (for &lt;a href=&quot;https://bazil.org/fuse/&quot;&gt;FUSE&lt;/a&gt; and &lt;a href=&quot;https://github.com/mattn/go-sqlite3&quot;&gt;SQLite&lt;/a&gt;); and, heck, I &lt;em&gt;just&lt;/em&gt; wanted to try it out!&lt;/p&gt;

&lt;p&gt;It only took me a little over two days to get a fully-functional implementation of my file system, and this is without having ever written a FUSE-based file system before nor any non-toy Go code. That said, I had previously &lt;a href=&quot;http://netbsd-soc.sourceforge.net/projects/tmpfs/&quot;&gt;written a kernel file system in 2005&lt;/a&gt; and &lt;em&gt;that&lt;/em&gt; helped navigating the whole endeavor and tuning the resulting performance.&lt;/p&gt;

&lt;p&gt;Where is the code you ask? Nowhere yet unfortunately; I hope to make it available once it is ready.&lt;/p&gt;

&lt;h1 id=&quot;the-go-language-review&quot;&gt;The Go language review&lt;/h1&gt;

&lt;p&gt;The summary of what follows is simple: after two weeks, I’m in love with Go.&lt;/p&gt;

&lt;p&gt;I remember languages people dismiss Go back in 2009 on the grounds that it was a simplistic language without novel concepts… but there lies its beauty: Go lets you get things done quickly and safely with few performance penalties. I feel I can write much more robust code with Go than with any other comparable language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; Keep in mind that I’m still a newbie. I’m sure that some of the items below are naïve, incomplete or plain incorrect. If so, please let me know!&lt;/p&gt;

&lt;h2 id=&quot;the-good&quot;&gt;The good&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Enforced coding style:&lt;/strong&gt; You may or may not like Go’s coding style (I personally would change a few things), but the fact that it is chosen for you and that &lt;code class=&quot;highlighter-rouge&quot;&gt;gofmt&lt;/code&gt; exists beats any personal preferences you may have. No more thinking about tabs vs. spaces; no more thinking about brace placement; no more thinking about the look of your code. &lt;em&gt;It. Just. Does. Not. Matter.&lt;/em&gt; Focus on your code’s logic and let the machine format it in a consistent manner across the whole Go ecosystem.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Explicit error handling:&lt;/strong&gt; Yes, the &lt;code class=&quot;highlighter-rouge&quot;&gt;if err != nil { return err }&lt;/code&gt; pattern gets old very quickly, but having to explicitly handle errors shows you how hard it is to write robust code.&lt;/p&gt;

    &lt;p&gt;You’d say that C is similar in this regard, but not really. There are two key differences: the first is that Go functions can return more than one result, which makes it more difficult to ignore the error code if you want to use the actual result; and the second is the &lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; keyword, which helps avoid leaks in error paths. I personally prefer C++’s ability to implement &lt;a href=&quot;https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&quot;&gt;the RAII pattern&lt;/a&gt;, but &lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; is a good compromise.&lt;/p&gt;

    &lt;p&gt;Do I miss exceptions? Not really. While exceptions let you keep your main code path clean of error handling, they also relegate error handling to a secondary place. This is OKish if the language has provisions to ensure that exceptions are handled at some point like Java’s &lt;code class=&quot;highlighter-rouge&quot;&gt;throws&lt;/code&gt; definition, but that’s not how the majority of languages work. Just think of how easy is for exceptions leak all the way through the program’s entry point in C++ or Python.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Strong typing, even for native types:&lt;/strong&gt; The fact that the equivalent of C’s &lt;code class=&quot;highlighter-rouge&quot;&gt;typedef&lt;/code&gt; generates types that can’t be implicitly mixed, or the fact that numeric types are not automatically promoted to other types, is a good way to prevent subtle bugs. Having to explicitly convert among types forces you to think about the consequences of doing so: Integer overflow? Check. Sign issues? Check. Precision issues? Check.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Builtin profiling with pprof:&lt;/strong&gt; The &lt;a href=&quot;http://blog.golang.org/profiling-go-programs&quot;&gt;pprof profiling tool&lt;/a&gt; was invaluable to diagnose performance and memory consumption deficiencies in my caching file system &lt;em&gt;and&lt;/em&gt; the libraries I used. What’s best is that pprof was also incredibly easy to plug into my program.&lt;/p&gt;

    &lt;p&gt;Honestly, I’m in awe to see that this tooling is open-source because I’ve gotten very accustomed to this particular way of debugging at Google.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The standard library:&lt;/strong&gt; While Go by itself is a decent language, it becomes excellent because of its &lt;a href=&quot;https://golang.org/pkg/&quot;&gt;extensive standard library&lt;/a&gt;. The existence of tooling to implement pretty much anything you want wins over any deficiencies you may think the language has. The same applies to Java, by the way.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Simple package management:&lt;/strong&gt; Getting started with a piece of code is easy, and pulling in additional dependencies is &lt;em&gt;trivial&lt;/em&gt;. I actually do not like the underpinnings of this “modern” trend of language-specific package management systems, but I must admit that it has been a pleasure to just add new imports, call &lt;code class=&quot;highlighter-rouge&quot;&gt;go get&lt;/code&gt;, and have everything up and running in a matter of seconds.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Build speed:&lt;/strong&gt; This item is not tied to my recent experience with Go but is worth mentioning. About two years ago, I built the Go language on my underpowered NetBSD VM. I was expecting horrendously long build times like those of GCC or Clang, but was pleasantly surprised to see that the Go compiler, along with its extensive standard library, compiled in a few minutes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-bad&quot;&gt;The bad&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GOPATH&lt;/code&gt;:&lt;/strong&gt; Sorry but having to modify the environment to get a program to run in the default case is ridiculous in this day and age: things should “just work” and Go is different. I have mitigated my concerns about this by writing a &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt; that sets things up automatically so I do not have to worry about customizing my environment on a project basis.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Package management:&lt;/strong&gt; As we saw in the good parts, Go’s package management gets the job done but its views on the world are too simplistic. On the one hand, the development environment assumes that you will always want to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; versions of your dependencies; and on the other hand, the default is to merge the dependencies with your personal code in the same workspace.&lt;/p&gt;

    &lt;p&gt;I’ve managed to work around the latter by splitting my dependencies in a separate directory and using &lt;code class=&quot;highlighter-rouge&quot;&gt;GOPATH&lt;/code&gt; to find them. The excellent article &lt;a href=&quot;https://medium.com/@sdboyer/so-you-want-to-write-a-package-manager-4ae9c17d9527#.e666sl8yr&quot;&gt;So you want to write a packaging system&lt;/a&gt; is a great resource on this topic, and as you read through it, you will realize that it’s geared towards revamping Go’s package manager.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The simplistic &lt;code class=&quot;highlighter-rouge&quot;&gt;log&lt;/code&gt; module:&lt;/strong&gt; It is good that the standard library provides a logging module, but it seems way too simple for anything other than trivial logging. Fortunately, the external &lt;a href=&quot;https://github.com/golang/glog&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;glog&lt;/code&gt;&lt;/a&gt; module provides increased functionality such as level-based logging and persistent logging. Therefore, you may say that being able to choose between something simple and something more complex is good, right?!&lt;/p&gt;

    &lt;p&gt;Unfortunately, that’s not the case and this is the reason I pinpoint this particular module from the standard library. The real benefits of using &lt;code class=&quot;highlighter-rouge&quot;&gt;glog&lt;/code&gt; come when the &lt;em&gt;whole stack&lt;/em&gt; uses the same logging infrastructure and principles. Because &lt;code class=&quot;highlighter-rouge&quot;&gt;glog&lt;/code&gt; is not the standard module, some Go packages will use it and others will not. As a result, you do not get the full benefits of using &lt;code class=&quot;highlighter-rouge&quot;&gt;glog&lt;/code&gt; in your project because most libraries you depend on will not do the same.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Mutability by default (aka no &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; keyword):&lt;/strong&gt; Before you say “hey, &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; is currently not present, but if we find the need for it later on, we’ll add it!”, that’s… not great. The problem with adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; keyword post-facto is that this is the wrong keyword to add: &lt;em&gt;state should be immutable by default&lt;/em&gt;, and what the language should have is a &lt;code class=&quot;highlighter-rouge&quot;&gt;mutable&lt;/code&gt; keyword to clearly mark those variables that hold multiple values throughout their lifetime.&lt;/p&gt;

    &lt;p&gt;The reason I point out this specific language feature is because I’ve mentally gotten very accustomed to separating constant vs. mutable variables in code. Reading code that adheres to this strict separation is easy to follow: you can quickly map the immutable state in your mind and then focus on the mutable pieces of the code to understand what’s happening. Without these clues, you need extra effort.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-ugly&quot;&gt;The ugly&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Short identifiers:&lt;/strong&gt; A lot of Go code, including the snippets in the documentation, is plagued by extremely short identifiers. Those are used as local variables, function arguments, method receivers, and even structure members. Combined with the heavy use of interfaces, it is hard to read the code: What’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;? And an &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt;? And an &lt;code class=&quot;highlighter-rouge&quot;&gt;s.wg&lt;/code&gt;? Yes, there is bad code all around, but when the official language documentation seems to recommend this approach, you can expect that others will follow the apparent recommendation in all cases.&lt;/p&gt;

    &lt;p&gt;Remember that &lt;em&gt;code is written to be read many more times than it is written&lt;/em&gt;. Fully spelled-out identifiers help significantly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Maximum line length:&lt;/strong&gt; Even though Go has a predefined coding style, there is no pre-specified maximum line length. While it is great to want to abolish a custom that remains from the punch-card days, keeping code narrow has its benefits: think of two or three side-by-side editors in a small laptop screen.&lt;/p&gt;

    &lt;p&gt;This would be a non-issue if editors were able to wrap long code lines in a way that made sense—just like word processors do with text—but current editors are terrible at this. So, personally, I will stick to the 80 character limit; I have given 100 a try per more modern recommendations… but when I opened the code in my laptop and couldn’t see two files at once without wrapping, I knew I had to go back to 80.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;a-note-on-visual-studio-code&quot;&gt;A note on Visual Studio Code&lt;/h1&gt;

&lt;p&gt;To conclude, let’s talk about editors. I’ve been a long-time Vim and Emacs user and now decided to give another editor a try. Heresy!&lt;/p&gt;

&lt;p&gt;In fact, some time last year, I started playing with &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; after all the hype around this editor. It really is full-featured, but it also is overwhelming and fragile: overwhelming because there are knobs everywhere and fragile because I had never had an editor throw errors at me routinely during “normal” operation. (I’m sure I can blame some plugin I installed, but still.)&lt;/p&gt;

&lt;p&gt;Soon after, &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code (VSCode)&lt;/a&gt; came out: an open source editor from Microsoft no less. I installed VSCode just to take a look and I found much sought simplicity: just look at the way to configure the editor, which is by adding personal or project-specific overrides to an empty JSON file. I felt I’d enjoy this editor more than Atom though I did not have a use for it at the time: &lt;a href=&quot;https://medium.com/@jmmv/my-coding-workflow-f26f81235752&quot;&gt;most of my development still happens over SSH&lt;/a&gt; so VSCode would not fit the bill.&lt;/p&gt;

&lt;p&gt;This experiment with Go gave me the chance to use VSCode, particularly because I was writing the project primarily for OS X (my desktop) and because I wanted an IDE-like experience. As it turns out, VSCode has a pretty good &lt;a href=&quot;https://github.com/Microsoft/vscode-go&quot;&gt;Go plugin&lt;/a&gt;. The reason I wanted IDE integration is because writing code in an unknown language with an unknown standard library is a task that truly benefits from autocompletion and inline syntax validation. I wouldn’t have been able to prototype my file system as quickly as I did with a bare editor.&lt;/p&gt;

&lt;p&gt;I know, I know, I could have set up Emacs to do the same thing, but I just wanted to give VSCode a ride. And, mind you, I just took a look at what’s involved to set Emacs up for Go and &lt;a href=&quot;http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/&quot;&gt;didn’t find it pleasing&lt;/a&gt;; way too much manual work involved.&lt;/p&gt;

&lt;p&gt;Do you Go already?&lt;/p&gt;
</description>
        
        <pubDate>Tue, 22 Mar 2016 21:00:00 +0000</pubDate>
        <link>http://julio.meroh.net/2016/03/golang-review.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2016/03/golang-review.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Those pesky Makefiles</title>
        
          <description>
            As a software developer, you have probably disregarded the build system of your project—those pesky Makefiles—as unimportant. You have probably “chosen” to use the de-facto build tool make(1). And you have probably hacked your way around until things “seemingly worked”.

But hang on a second. Those build files are way more important than you may think and deserve a wee bit more attention.



What if… you lost them?

Let’s start with an exercise, one that I heard many years ago when parts of the Windows 2000 source code were leaked. What if you received massive amounts of source code without the build files? Could you be able use that code again? “Of course” you could, but it would take an extraordinary effort to make the pieces work again as originally intended. It would be even harder to recover the intended state if the original build system allowed any kind of customization—think building for different production or test environments—or had, say, cross-building functionality. And you could even be introducing new run-time bugs by getting the build wrong!

The reason this came to mind is because I spent all of last month fighting build rules to make Bazel build itself on a newly-supported environment. A month of fiddling with build rules and small portability fixes; a month without writing any substantial code.

Well, in reality I “only” spent a whole week ploughing hacks to make this happen… but then I spent the other three weeks cleaning up the hacks so that I could check them in. It was one thing to prove that the end goal was attainable, and it was a very different one to actually reach that goal in a reasonable manner. Extending build rules that work under multiple scenarios and that target different platforms is hard, especially while keeping existing functionality stable.

Another reason this came to mind is that, recently, I have been toying with writing a Go Appengine app. Running the trivial “Hello World” sample is easy: type some code in .go files, run goapp serve, and boom: the app (re)compiles in the background and is served on the web. Good? No.

Unfortunately, as soon as you start writing “the real stuff”, you end up requiring features not provided by the simplistic and basic toolchain. You may need to fetch dependencies depending on the developer’s needs; you may need to build auxiliary tools to set up the production environment; you may need to run those tools with specific flags for your project and for the developer machine; you may need to interact with the VCS system to install hooks and get those working; etc. All these require some form of plumbing, which I chose to do via make(1) and a hand-tuned configure script—purely out of routine, not because these are great tools—and they have grown more than originally expected.

Writing build files is… hard

Build systems are complex beasts and the average developer should not have to—or, in fact, does not want to—care about them. Regardless, most developers have to end up writing build rules for the software they write (who else would?) and they do so without understanding the fundamentals of the tools nor the implications of their code.

Take, for example, configure.ac scripts. GNU Autoconf has excellent documentation—and reading through it is a humbling exercise, especially if you are ever so tempted to write your own “simplified” configuration tool. (Spoiler: don’t.)

Anyway: the vast majority of (open source) projects end up requiring a configure.ac script… but the developers, understandably, won’t go through the hassle of learning all the details of Autoconf because writing a configuration script is not their goal: it’s just boilerplate. The end result is that the developers copy/paste other people’s scripts and/or snippets from shabby sources. Repeat this copy/paste process over a handful of projects and you end up with a Frankenstein-like configuration script that can barely stand on its own. Yet, it seems to work on the developer’s machine, and therefore gets shipped to the world… only to cause pain down the road.

The same applies to any script used to maintain the project. Think of the auxiliary scripts that invoke continuous tests under Travis, the scripts to sanitize your source tree, the scripts to package your software, or even your installation script. Because these are not part of the project’s “core functionality”, they are often thought as unimportant and are just hacked away. Just keep in mind that those scripts will fail due to their poor quality, and it’s no fun at all when they do so at, say, release time.

Stick to conventions

So how do you minimize the danger of hurting yourself? Do not reinvent the wheel. Stick to existing tools and conventions.

If you think your project is special enough to warrant a hand-tuned build system, think again. Writing your own build system is a recipe for disaster: first, because you are throwing away the collective wisdom of the people that wrote the existing tools; and, second, because you immediately make your package unbuildable out-of-the-box by any existing packaging system.

Let’s see some examples on the lots of conventions that exist: support for environment variables (CC, CFLAGS, CPPFLAGS, et. al.) and how they are later passed to the compiler, the linker, and the preprocessor; specific build targets that should exist (all, install, check, and the myriad required by the widespread GNU Coding Standards); the tools that you should end up invoking (e.g. install instead of plain cp to put your files in the destination location); the hierarchy of the installed files and the ability to tune the layout depending on the platform; support for build directories separate from the source tree; support for cross-compilation; support for dynamic detection of compiler and system features; and a long etc.

Note that the examples above only scratch the surface: I focused exclusively on what your standard software package for a Unix system would need, and nothing else. Take an interpreted language instead of C or C++ and, suddenly, the conventions are all different.

The problem here is that users of your package expect all these things to “just work” based on established conventions. If you change those conventions intentionally or just out of knowledge, your package will not behave as the user expects. And if that’s the case, can you guess what the user will think? Your software is broken.

Which conventions?

OK, so we need to follow conventions. Which ones? As always, it depends. It depends on the project you are writing, it depends on your target environment, and it depends on who your users will be.

There are dozens of build systems and each has gained a specific niche so you need to stick to your niche’s preferred set of tools. To name a few: if you are writing a low-level system package, or your package uses C/C++, use the GNU Autotools; if you are writing a Python package, stick to distutils or setuptools and PyPI; if you are writing a KDE component, use CMake; if you are writing an Android app, choose Android Studio and Gradle; if you want to go fancier and the Java requirement is not a concern, consider Bazel (really, it’s cool!).

You may or may not like the conventions of the tools used in the area you are working on, but you are better off by following the conventions than going against them: you’ll waste fewer time and your users will be happier. E.g. personally, I do not like how the standard way of using the Autotools is by shipping massive generated scripts, or the “strange” behavior of Python’s setup.py scripts… but I just use these in my software because they are what people—and, more importantly, packagers—expect.

This doesn’t mean the tools we have today are good; in fact, many aren’t. But if you spend a few minutes to learn about the shortcomings of your tools and how to make better use of them, the results will be palatable. Give the same care you give code to the build files of your project.

To conclude, follow onto the excellent-but-extremely-long article titled So you want to write a package manager. It does not talk about build systems per se, but it sheds light on the many complexities of managing a source tree and its dependencies, and how those should be hidden away from the developers.

            &lt;a href=&quot;http://julio.meroh.net/2016/03/those-pesky-makefiles.html&quot;&gt;[Continue reading]&lt;/a&gt;
          </description>
        
          <description>&lt;p&gt;As a software developer, you have probably disregarded the build system of your project—those pesky &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;s—as unimportant. You have probably “chosen” to use the de-facto build tool &lt;code class=&quot;highlighter-rouge&quot;&gt;make(1)&lt;/code&gt;. And you have probably hacked your way around until things “seemingly worked”.&lt;/p&gt;

&lt;p&gt;But hang on a second. Those build files are way more important than you may think and deserve a wee bit more attention.&lt;/p&gt;

&lt;!--end-of-excerpt--&gt;

&lt;h1 id=&quot;what-if-you-lost-them&quot;&gt;What if… you lost them?&lt;/h1&gt;

&lt;p&gt;Let’s start with an exercise, one that I heard many years ago when &lt;a href=&quot;http://news.microsoft.com/2004/02/12/statement-from-microsoft-regarding-illegal-posting-of-windows-2000-source-code/&quot;&gt;parts of the Windows 2000 source code were leaked&lt;/a&gt;. &lt;strong&gt;What if you received massive amounts of source code without the build files?&lt;/strong&gt; Could you be able use that code again? “Of course” you &lt;em&gt;could&lt;/em&gt;, but it would take an extraordinary effort to make the pieces work again as originally intended. It would be even harder to recover the intended state if the original build system allowed any kind of customization—think building for different production or test environments—or had, say, cross-building functionality. And you could even be introducing new run-time bugs by getting the build wrong!&lt;/p&gt;

&lt;p&gt;The reason this came to mind is because I spent all of last month fighting build rules to make &lt;a href=&quot;http://bazel.io/&quot;&gt;Bazel&lt;/a&gt; build itself on a newly-supported environment. A month of fiddling with build rules and small portability fixes; a month without writing any substantial code.&lt;/p&gt;

&lt;p&gt;Well, in reality I “only” spent a whole week ploughing hacks to make this happen… but then I spent the other three weeks cleaning up the hacks so that I could check them in. It was one thing to prove that the end goal was attainable, and it was a very different one to actually reach that goal in a reasonable manner. Extending build rules that work under multiple scenarios and that target different platforms is hard, especially while keeping existing functionality stable.&lt;/p&gt;

&lt;p&gt;Another reason this came to mind is that, recently, I have been toying with writing a Go Appengine app. Running the trivial “Hello World” sample is easy: type some code in &lt;code class=&quot;highlighter-rouge&quot;&gt;.go&lt;/code&gt; files, run &lt;code class=&quot;highlighter-rouge&quot;&gt;goapp serve&lt;/code&gt;, and boom: the app (re)compiles in the background and is served on the web. Good? No.&lt;/p&gt;

&lt;p&gt;Unfortunately, as soon as you start writing “the real stuff”, you end up requiring features not provided by the simplistic and basic toolchain. You may need to fetch dependencies depending on the developer’s needs; you may need to build auxiliary tools to set up the production environment; you may need to run those tools with specific flags for your project and for the developer machine; you may need to interact with the VCS system to install hooks and get those working; etc. All these require some form of plumbing, which I chose to do via &lt;code class=&quot;highlighter-rouge&quot;&gt;make(1)&lt;/code&gt; and a hand-tuned &lt;code class=&quot;highlighter-rouge&quot;&gt;configure&lt;/code&gt; script—purely out of routine, not because these are great tools—and they have grown more than originally expected.&lt;/p&gt;

&lt;h1 id=&quot;writing-build-files-is-hard&quot;&gt;Writing build files is… hard&lt;/h1&gt;

&lt;p&gt;Build systems are complex beasts and the average developer should not have to—or, in fact, does not want to—care about them. Regardless, most developers &lt;em&gt;have to&lt;/em&gt; end up writing build rules for the software they write (who else would?) and they do so without understanding the fundamentals of the tools nor the implications of their code.&lt;/p&gt;

&lt;p&gt;Take, for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;configure.ac&lt;/code&gt; scripts. GNU Autoconf has &lt;a href=&quot;http://www.gnu.org/software/autoconf/manual/index.html&quot;&gt;excellent documentation&lt;/a&gt;—and reading through it is a humbling exercise, &lt;em&gt;especially&lt;/em&gt; if you are ever so tempted to write your own “simplified” configuration tool. (Spoiler: &lt;em&gt;don’t&lt;/em&gt;.)&lt;/p&gt;

&lt;p&gt;Anyway: the vast majority of (open source) projects end up requiring a &lt;code class=&quot;highlighter-rouge&quot;&gt;configure.ac&lt;/code&gt; script… but the developers, understandably, won’t go through the hassle of learning all the details of Autoconf because writing a configuration script is not their goal: it’s just boilerplate. The end result is that the developers copy/paste other people’s scripts and/or snippets from shabby sources. Repeat this copy/paste process over a handful of projects and you end up with a Frankenstein-like configuration script that can barely stand on its own. Yet, it &lt;em&gt;seems&lt;/em&gt; to work on the developer’s machine, and therefore gets shipped to the world… only to cause pain down the road.&lt;/p&gt;

&lt;p&gt;The same applies to any script used to maintain the project. Think of the auxiliary scripts that invoke continuous tests under Travis, the scripts to sanitize your source tree, the scripts to package your software, or even your installation script. Because these are not part of the project’s “core functionality”, they are often thought as unimportant and are just hacked away. Just keep in mind that those scripts &lt;em&gt;will&lt;/em&gt; fail due to their poor quality, and it’s no fun at all when they do so at, say, release time.&lt;/p&gt;

&lt;h1 id=&quot;stick-to-conventions&quot;&gt;Stick to conventions&lt;/h1&gt;

&lt;p&gt;So how do you minimize the danger of hurting yourself? &lt;em&gt;Do not reinvent the wheel.&lt;/em&gt; &lt;strong&gt;Stick to existing tools and conventions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you think your project is special enough to warrant a hand-tuned build system, think again. Writing your own build system is a recipe for disaster: first, because you are throwing away &lt;em&gt;the collective&lt;/em&gt; wisdom of the people that wrote the existing tools; and, second, because you immediately make your package unbuildable out-of-the-box by any existing packaging system.&lt;/p&gt;

&lt;p&gt;Let’s see some examples on the lots of conventions that exist: support for environment variables (&lt;code class=&quot;highlighter-rouge&quot;&gt;CC&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CFLAGS&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CPPFLAGS&lt;/code&gt;, et. al.) and how they are later passed to the compiler, the linker, and the preprocessor; specific build targets that should exist (&lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;check&lt;/code&gt;, and the myriad required by the widespread &lt;a href=&quot;https://www.gnu.org/prep/standards/standards.html#Makefile-Conventions&quot;&gt;GNU Coding Standards&lt;/a&gt;); the tools that you should end up invoking (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt; instead of plain &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt; to put your files in the destination location); the hierarchy of the installed files and the ability to tune the layout depending on the platform; support for build directories separate from the source tree; support for cross-compilation; support for dynamic detection of compiler and system features; and a long etc.&lt;/p&gt;

&lt;p&gt;Note that the examples above only scratch the surface: I focused exclusively on what your standard software package for a Unix system would need, and nothing else. Take an interpreted language instead of C or C++ and, suddenly, the conventions are all different.&lt;/p&gt;

&lt;p&gt;The problem here is that users of your package &lt;em&gt;expect&lt;/em&gt; all these things to “just work” based on established conventions. If you change those conventions intentionally or just out of knowledge, your package will not behave as the user expects. And if that’s the case, can you guess what the user will think? &lt;em&gt;Your software is broken.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;which-conventions&quot;&gt;Which conventions?&lt;/h1&gt;

&lt;p&gt;OK, so we need to follow conventions. Which ones? As always, it depends. It depends on the project you are writing, it depends on your target environment, and it depends on who your users will be.&lt;/p&gt;

&lt;p&gt;There are dozens of build systems and each has gained a specific niche so you need to stick to your niche’s preferred set of tools. To name a few: if you are writing a low-level system package, or your package uses C/C++, use the GNU Autotools; if you are writing a Python package, stick to &lt;code class=&quot;highlighter-rouge&quot;&gt;distutils&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;setuptools&lt;/code&gt; and PyPI; if you are writing a KDE component, use CMake; if you are writing an Android app, choose Android Studio and Gradle; if you want to go fancier and the Java requirement is not a concern, consider Bazel (really, it’s cool!).&lt;/p&gt;

&lt;p&gt;You may or may not like the conventions of the tools used in the area you are working on, but you are better off by following the conventions than going against them: you’ll waste fewer time and your users will be happier. E.g. personally, I do not like how the standard way of using the Autotools is by shipping massive generated scripts, or the “strange” behavior of Python’s &lt;code class=&quot;highlighter-rouge&quot;&gt;setup.py&lt;/code&gt; scripts… but I just use these in my software because they are what people—and, more importantly, packagers—expect.&lt;/p&gt;

&lt;p&gt;This doesn’t mean the tools we have today are good; in fact, many aren’t. But if you spend a few minutes to learn about the shortcomings of your tools and how to make better use of them, the results will be palatable. Give the same care you give code to the build files of &lt;em&gt;your&lt;/em&gt; project.&lt;/p&gt;

&lt;p&gt;To conclude, follow onto the excellent-but-extremely-long article titled &lt;a href=&quot;https://medium.com/@sdboyer/so-you-want-to-write-a-package-manager-4ae9c17d9527&quot;&gt;So you want to write a package manager&lt;/a&gt;. It does not talk about build systems per se, but it sheds light on the many complexities of managing a source tree and its dependencies, and how those should be hidden away from the developers.&lt;/p&gt;
</description>
        
        <pubDate>Wed, 02 Mar 2016 14:45:00 +0000</pubDate>
        <link>http://julio.meroh.net/2016/03/those-pesky-makefiles.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2016/03/those-pesky-makefiles.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Analysis of SSHFS performance for large builds</title>
        
          <description>
            Last week, I spent some time looking at the feasibility of using SSHFS on OS X to access Google’s centralized source tree for the purpose of issuing local builds. My goals were two-fold: first, to avoid having to “clone” the large source code of the apps I wanted to build; and, second, to avoid having to port the source file system (a FUSE module) to the Mac.

What I found highlights that SSHFS is not the right choice for locally building a remote source tree. That said, the overall study process was interesting, fun, and I am now tempted to make SSHFS viable for this use case. Read on for the details.



Obligatory disclaimer: There is not much specific to Google here and any opinions are my own. In fact, I had used SSHFS in the past for similar purposes: to expose a NetBSD source tree from the host machine to a VM running on it, using the virtual network interface. Knowing these details at the time would have been very helpful in understanding the behavior of the setup.

The source file system

The Google source tree is exposed to developer machines by a FUSE file system that exposes the (very) large centralized repository at any desired revision; think of paths of the form .../src/&lt;revision&gt;/. Let’s call this FUSE file system the source file system, about which you can learn more in the Build in the cloud: Accessing source code blog post and in the following presentation:


  
    
  
  
    Tools for Continuous Integration at Google Scale.
  


The key characteristics, for the understanding of this article, of the source file system are:


  
    The file system contents under a given revision are read-only.
  
  
    Because the file system is read-only, the FUSE server implements aggressive caching of file metadata and contents.
  
  
    Because the file system is read-only, and due to the way the repository data is stored internally, each file holds an extended attribute that exposes its MD5 digest in constant time. This allows the build system to quickly determine if a file has changed across builds.
  


If this sounds interesting, there is a similar filesystem in spirit available in GitHub under the hanwen/p4fuse repository.

Experimental setup

In order to quantify if the source file system mounted over SSHFS is a workable environment for large builds, I tested various configurations and measured the build times of different iOS applications.

In particular, I used the following configurations:


  
    Source file system over SSHFS: This configuration mounts the source tree directly on SSHFS. There is no local persistent caching of data; only whatever SSHFS’s cache does (more on this important topic below).
  
  
    Souce file system over SSHFS with a pCacheFS layer on top: This configuration mounts the remote source tree onto a .../src-remote/ directory and then layers pCacheFS on top of it to offer the actual .../src/ directory. This setup offers persistent caching of the contents of all source files accessed durng the build, and those are stored in a matching .../src-cache/ directory.
  


In the text below, the local machine is always the OS X system; the remote machine (hosting the source file system) is always a Linux machine.

The experiments were done on a Mac Pro (Late 2013) with a 6-core Intel Xeon X5 CPU @ 3.5 GHz and 32GB of RAM using a remote Linux workstation of similar hardware. Both machines were physically connected to the same network offering average ping times of 0.5ms and a throughput around 50MB/s for SSH-based file copies. The Linux machine was running OpenSSH 7.1.

Results

The table below illustrates the time it took to build some iOS apps under the tested configurations. The numbers shown in the tables are the best numbers in multiple runs, some of which involved tweaked versions of both SSHFS and pCacheFS to obtain higher performance from them.

Colums showing Not tested are for measurements that were not taken because previous measurements on other configurations showed that they would be worthless: i.e. that no performance gain would be obtained. The SSHFS cold/hot references account for both SSHFS and the remote source file system being hot or cold in unison because they are tightly related in the common case.


  
    
      Target
      Local
      SSHFS (cold)
      SSHFS (hot)
      SSHFS+pCacheFS (cold)
      SSHFS+pCacheFS (hot)
    
  
  
    
      Small app
      5m
      23m
      6m
      18m
      13m
    
    
      Larger app
      5m
      54m
      25m
      Not tested
      Not tested
    
  


Yes, I only tested two builds because these were enough to yield conclusions. The Demo app showed some promising results when the caches were hot, but as soon as I tried a real-world app (the Larger app), it became clear that this setup was unfeasible.

As you can see in the table above, the results are disheartening. For the small build, the source file system over SSHFS is a feasible choice assuming the caches are hot. For any larger build, SSHFS introduces a significant performance penalty on the build times. This negative impact does not justify the simplicity of using the SSHFS-based setup and developers should just resort to local checkouts of the parts of the tree they need.

Knowing this, let’s move on to the more interesting part of this article, which is all the learnings I got from the file systems implementations and all the tweaks I made in an attempt to obtain higher performance.

SSHFS observations


  
    Neither SSHFS, the SFTP protocol, nor the sshd daemon support extended attributes. As a consequence, the build system is unable to obtain digests for the source files in constant time. It is unclear if this has a performance impact on the build times themselves because other deficiencies of the system are likely to be the bottleneck.
  
  
    The local SSHFS is threaded and will easily consume 1.5 or 2 CPUs during a build. The remote sshd server is not threaded for a single SSHFS connection and will continuously consume a full CPU, potentially being the bottleneck.
  
  
    A maximum of 3.5 MB/s was observed on the network download link of the OS X workstation when SSHFS was busiest. The fact that the remote sshd server was at a peak of 100% CPU usage indicates that the bottleneck was on the server-side SSH connection, not on the SSHFS client nor on the remote FUSE file system. However, it is quite likely, from the following notes on caching, that the SSHFS client was inducing this on itself.
  
  
    SSHFS implements caching but neither the open nor read operations are cached. In fact, SSHFS is only caching directory contents and file attributes. This drops the potential of the cache: remember that the remote source file system is read only.
  
  
    SSHFS was modified to never evict anything from its in-memory cache in an attempt to maximize cache hits and thus approach best-case performance. There was no appreciable difference in build times.
  
  
    SSHFS was modified to implement caching of file contents for reads. This did not result in any visible performance difference, pointing at the bottleneck being elsewhere as described in the next bullet.
  
  
    SSHFS implements caching for stat (getattr in FUSE terminology), and might be suboptimal. Logging was added to track cache hits for stat operations and, out of various thousands of files that were stated during the build of the Larger app, there were several orders of magnitude more getattr calls that did not hit the cache. The majority of these duplicate calls were for directories, so it is likely that these operations were not issued by the build system, but instead were issued by SSHFS itself. This is, in all likelihood, the source of contention: all these cache misses incurred a round-trip to the remote sshd server and they would explain the high CPU load on the sshd server and the low throughput in the network link.
  
  
    Repointing the local source tree at a different repository revision blows away any in-memory information cached by SSHFS because the SSHFS cache uses path names as keys. Remember that the revision identifier is part of the .../src/&lt;revision&gt;/ path.
  


pCacheFS observations


  
    Builds with pCacheFS enabled are not as fast as one would expect, even when the cache is hot. The expectation would be for this scenario to yield build times that are similar to those using local source copies; however, as the numbers above show, build times were twice as large, if not more.
  
  
    pCacheFS is written in Python, and this shows: the daemon can only saturate a single CPU, and it does.
  
  
    Disk usage in the pCacheFS case is lower than what is required when the source tree is checked out locally. This is expected of any build: the size of the dependencies is larger than the size of the files strictly required for the build. Think about any source package that includes documentation in it, for example.
  
  
    pCacheFS does not currently implement the readlink call. This call is necessary to properly support the remote source file system: the file system exposes a .../src/head symbolic link that points to the head revision. Reading this link is how one determines the revision to access via a .../src/&lt;revision&gt;/ path for a consistent view of the tree. Implementing this call in pCacheFS should not be difficult, but I did not bother to do so due to the poor performance observed when using this layer.
  
  
    pCacheFS is purely read-only and has no cache invalidation. This is not a problem for our use case because the remote source file system is read-only, but highlights that pCacheFS is not usable for the general case.
  
  
    As SSHFS, pCacheFS does not implement extended attributes so the same problems apply.
  
  
    As SSHFS, pCacheFS uses paths as keys for the cache so repointing the source tree to a different revision blows away the cache.
  


Conclusions

Neither the SSHFS client file system, the sshd server, nor the pCacheFS file system have been optimized for the workload of a large build using a source tree mounted over SSHFS. There are performance bottlenecks in various areas and there are missing features in all layers.

Here are some ideas on how the current situation could be improved:


  
    Implement extended attributes in SSHFS and the SFTP server. This is potentially difficult because it requires changes to the OpenSSH server and a previous attempt in 2011 resulted in a patch that was not accepted mainline. At the very least, it would be nice to revive this patch on recent OpenSSH sources; a simple attempt I made at rebasing it resulted in conflicts that didn’t seem trivial to resolve.
  
  
    Add a remote-file-system-is-immutable setting to SSHFS to enable “perfect caching”. Turning this option on would cache the contents of files so that all file system operations on a file were local after fetching it. As a side-effect, the immense number of getattr operations issued to the server should become minimal and this should shift the bottleneck elsewhere. With caching of contents, the SSHFS could then expose the MD5 digests as extended attributes in constant time without needing to communicate these to the SFTP server.
  
  
    Reimplement pCacheFS as a C FUSE file system with proper threading. The pCacheFS layer as a standalone concept seems to be a nicer design than the previous item. Unfortunately, the current pCacheFS implementation does not yield the necessary performance, but reimplementing it in C and making proper use of threads would. As a side-effect, one could cache file contents using their MD5 as the key so that accessing files across different repository revisions would not necessarily cause a cache miss. Similarly, pCacheFS could on its own expose the MD5 of the files via extended attributes.
  


I consider my experimentation on this area done for now, but all of the items above sound interesting. In fact, after spending so many hours studying this, I cannot help but think of implementing a solution and watching it work. Maybe I’ll give them a try… if I have the time.

Oh, and how easy this all was! Developing file system code using something like FUSE coughrumpcough is a joy. The last time I dealt with low level file system code was back in 2005 when I wrote tmpfs for NetBSD, and I did not have virtual machines nor user-space file systems available! That was painful.

Annex: Contributions

This work resulted in the following open source contributions so far:


  
    Pull request libfuse/sshfs#5: Merged the osxfuse/sshfs fork into libfuse’s copy. The differences between the two were minimal so it’s good to have the master copy be portable by itself. Along the way, I also improved some of the OS X-specific code.
  
  
    Pull request libfuse/sshfs#6: Implemented command-line options to tune the behavior of the SSHFS cache. The code had various built-in constants to limit the cache size and configure its cleanup policies. As part of my testing, I had to make these values larger to prevent evictions from the cache, and making these customizable by the user would be good.
  
  
    Pull request ibizaman/pcachefs#3: Fixed obvious breakage of pCacheFS after implementing an entry point.
  
  
    filesystems/fuse-cachefs package: Added a pCacheFS package to pkgsrc, for my own benefit in setting things up in OS X.
  


            &lt;a href=&quot;http://julio.meroh.net/2016/02/sshfs-performance-analysis-for-builds.html&quot;&gt;[Continue reading]&lt;/a&gt;
          </description>
        
          <description>&lt;p&gt;Last week, I spent some time looking at the &lt;strong&gt;feasibility of using SSHFS on OS X to access Google’s centralized source tree for the purpose of issuing local builds&lt;/strong&gt;. My goals were two-fold: first, to &lt;strong&gt;avoid having to “clone” the large source code&lt;/strong&gt; of the apps I wanted to build; and, second, to &lt;strong&gt;avoid having to port&lt;/strong&gt; the source file system (a FUSE module) to the Mac.&lt;/p&gt;

&lt;p&gt;What I found highlights that &lt;strong&gt;SSHFS is not the right choice for locally building a remote source tree&lt;/strong&gt;. That said, the overall study process was interesting, fun, and I am now tempted to make SSHFS viable for this use case. Read on for the details.&lt;/p&gt;

&lt;!--end-of-excerpt--&gt;

&lt;p&gt;&lt;em&gt;Obligatory disclaimer:&lt;/em&gt; There is not much specific to Google here and any opinions are my own. In fact, I had used SSHFS in the past for similar purposes: to expose a NetBSD source tree from the host machine to a VM running on it, using the virtual network interface. Knowing these details at the time would have been very helpful in understanding the behavior of the setup.&lt;/p&gt;

&lt;h1 id=&quot;the-source-file-system&quot;&gt;The source file system&lt;/h1&gt;

&lt;p&gt;The Google source tree is exposed to developer machines by a FUSE file system that exposes the (very) large centralized repository at any desired revision; think of paths of the form &lt;code class=&quot;highlighter-rouge&quot;&gt;.../src/&amp;lt;revision&amp;gt;/&lt;/code&gt;. Let’s call this FUSE file system the &lt;strong&gt;source file system&lt;/strong&gt;, about which you can learn more in the &lt;a href=&quot;http://google-engtools.blogspot.com/2011/06/build-in-cloud-accessing-source-code.html&quot;&gt;Build in the cloud: Accessing source code&lt;/a&gt; blog post and in the following presentation:&lt;/p&gt;

&lt;div class=&quot;frame&quot;&gt;
  &lt;div class=&quot;content&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/b52aXZ2yi08&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/div&gt;
  &lt;div class=&quot;footer&quot;&gt;
    &lt;p&gt;Tools for Continuous Integration at Google Scale.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The key characteristics, for the understanding of this article, of the source file system are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The file system contents under a given revision are read-only.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Because the file system is read-only, the FUSE server implements aggressive caching of file metadata and contents.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Because the file system is read-only, and due to the way the repository data is stored internally, each file holds an extended attribute that exposes its MD5 digest in constant time. This allows the build system to quickly determine if a file has changed across builds.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If this sounds interesting, there is a similar filesystem in spirit available in GitHub under the &lt;a href=&quot;https://github.com/hanwen/p4fuse&quot;&gt;hanwen/p4fuse&lt;/a&gt; repository.&lt;/p&gt;

&lt;h1 id=&quot;experimental-setup&quot;&gt;Experimental setup&lt;/h1&gt;

&lt;p&gt;In order to quantify if the source file system mounted over SSHFS is a workable environment for large builds, I tested various configurations and measured the build times of different iOS applications.&lt;/p&gt;

&lt;p&gt;In particular, I used the following configurations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Source file system over SSHFS&lt;/strong&gt;: This configuration mounts the source tree directly on SSHFS. There is no local persistent caching of data; only whatever SSHFS’s cache does (more on this important topic below).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Souce file system over SSHFS with a &lt;a href=&quot;https://github.com/ibizaman/pcachefs&quot;&gt;pCacheFS&lt;/a&gt; layer on top&lt;/strong&gt;: This configuration mounts the remote source tree onto a &lt;code class=&quot;highlighter-rouge&quot;&gt;.../src-remote/&lt;/code&gt; directory and then layers pCacheFS on top of it to offer the actual &lt;code class=&quot;highlighter-rouge&quot;&gt;.../src/&lt;/code&gt; directory. This setup offers persistent caching of the contents of all source files accessed durng the build, and those are stored in a matching &lt;code class=&quot;highlighter-rouge&quot;&gt;.../src-cache/&lt;/code&gt; directory.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the text below, the &lt;strong&gt;local machine&lt;/strong&gt; is always the OS X system; the &lt;strong&gt;remote machine&lt;/strong&gt; (hosting the source file system) is always a Linux machine.&lt;/p&gt;

&lt;p&gt;The experiments were done on a &lt;em&gt;Mac Pro (Late 2013) with a 6-core Intel Xeon X5 CPU @ 3.5 GHz and 32GB of RAM&lt;/em&gt; using a remote Linux workstation of similar hardware. Both machines were physically connected to the same network offering average ping times of 0.5ms and a throughput around 50MB/s for SSH-based file copies. The Linux machine was running OpenSSH 7.1.&lt;/p&gt;

&lt;h1 id=&quot;results&quot;&gt;Results&lt;/h1&gt;

&lt;p&gt;The table below illustrates the time it took to build some iOS apps under the tested configurations. The numbers shown in the tables are the best numbers in multiple runs, some of which involved tweaked versions of both SSHFS and pCacheFS to obtain higher performance from them.&lt;/p&gt;

&lt;p&gt;Colums showing &lt;em&gt;Not tested&lt;/em&gt; are for measurements that were not taken because previous measurements on other configurations showed that they would be worthless: i.e. that no performance gain would be obtained. The SSHFS cold/hot references account for &lt;em&gt;both&lt;/em&gt; SSHFS and the remote source file system being hot or cold in unison because they are tightly related in the common case.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Target&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Local&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;SSHFS (cold)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;SSHFS (hot)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;SSHFS+pCacheFS (cold)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;SSHFS+pCacheFS (hot)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Small app&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5m&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;23m&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6m&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;18m&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13m&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Larger app&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5m&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;54m&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;25m&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Not tested&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Not tested&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Yes, I only tested two builds because these were enough to yield conclusions. The &lt;em&gt;Demo app&lt;/em&gt; showed some promising results when the caches were hot, but as soon as I tried a real-world app (the &lt;em&gt;Larger app&lt;/em&gt;), it became clear that this setup was unfeasible.&lt;/p&gt;

&lt;p&gt;As you can see in the table above, the results are disheartening. For the small build, the source file system over SSHFS is a feasible choice assuming the caches are hot. For any larger build, SSHFS introduces a significant performance penalty on the build times. This negative impact does not justify the simplicity of using the SSHFS-based setup and developers should just resort to local checkouts of the parts of the tree they need.&lt;/p&gt;

&lt;p&gt;Knowing this, let’s move on to the more interesting part of this article, which is all the learnings I got from the file systems implementations and all the tweaks I made in an attempt to obtain higher performance.&lt;/p&gt;

&lt;h2 id=&quot;sshfs-observations&quot;&gt;SSHFS observations&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Neither SSHFS, the SFTP protocol, nor the &lt;code class=&quot;highlighter-rouge&quot;&gt;sshd&lt;/code&gt; daemon support extended attributes. As a consequence, the build system is unable to obtain digests for the source files in constant time. It is unclear if this has a performance impact on the build times themselves because other deficiencies of the system are likely to be the bottleneck.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The local SSHFS is threaded and will easily consume 1.5 or 2 CPUs during a build. The remote &lt;code class=&quot;highlighter-rouge&quot;&gt;sshd&lt;/code&gt; server is not threaded for a single SSHFS connection and will continuously consume a full CPU, potentially being the bottleneck.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A maximum of 3.5 MB/s was observed on the network download link of the OS X workstation when SSHFS was busiest. The fact that the remote &lt;code class=&quot;highlighter-rouge&quot;&gt;sshd&lt;/code&gt; server was at a peak of 100% CPU usage indicates that the bottleneck was on the server-side SSH connection, not on the SSHFS client nor on the remote FUSE file system. However, it is quite likely, from the following notes on caching, that the SSHFS client was inducing this on itself.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SSHFS implements caching but neither the &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; nor &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; operations are cached. In fact, SSHFS is only caching directory contents and file attributes. This drops the potential of the cache: remember that the remote source file system is read only.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SSHFS was modified to never evict anything from its in-memory cache in an attempt to maximize cache hits and thus approach best-case performance. There was no appreciable difference in build times.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SSHFS was modified to implement caching of file contents for reads. This did not result in any visible performance difference, pointing at the bottleneck being elsewhere as described in the next bullet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SSHFS implements caching for &lt;code class=&quot;highlighter-rouge&quot;&gt;stat&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;getattr&lt;/code&gt; in FUSE terminology), and might be suboptimal. Logging was added to track cache hits for &lt;code class=&quot;highlighter-rouge&quot;&gt;stat&lt;/code&gt; operations and, out of various thousands of files that were &lt;code class=&quot;highlighter-rouge&quot;&gt;stat&lt;/code&gt;ed during the build of the &lt;em&gt;Larger app&lt;/em&gt;, there were several orders of magnitude more &lt;code class=&quot;highlighter-rouge&quot;&gt;getattr&lt;/code&gt; calls that did not hit the cache. The majority of these duplicate calls were for directories, so it is likely that these operations were not issued by the build system, but instead were issued by SSHFS itself. This is, in all likelihood, the source of contention: all these cache misses incurred a round-trip to the remote &lt;code class=&quot;highlighter-rouge&quot;&gt;sshd&lt;/code&gt; server and they would explain the high CPU load on the &lt;code class=&quot;highlighter-rouge&quot;&gt;sshd&lt;/code&gt; server and the low throughput in the network link.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Repointing the local source tree at a different repository revision blows away any in-memory information cached by SSHFS because the SSHFS cache uses path names as keys. Remember that the revision identifier is part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;.../src/&amp;lt;revision&amp;gt;/&lt;/code&gt; path.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pcachefs-observations&quot;&gt;pCacheFS observations&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Builds with pCacheFS enabled are not as fast as one would expect, even when the cache is hot. The expectation would be for this scenario to yield build times that are similar to those using local source copies; however, as the numbers above show, build times were twice as large, if not more.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pCacheFS is written in Python, and this shows: the daemon can only saturate a single CPU, and it does.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Disk usage in the pCacheFS case is lower than what is required when the source tree is checked out locally. This is expected of any build: the size of the dependencies is larger than the size of the files strictly required for the build. Think about any source package that includes documentation in it, for example.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pCacheFS does not currently implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;readlink&lt;/code&gt; call. This call is necessary to properly support the remote source file system: the file system exposes a &lt;code class=&quot;highlighter-rouge&quot;&gt;.../src/head&lt;/code&gt; symbolic link that points to the head revision. Reading this link is how one determines the revision to access via a &lt;code class=&quot;highlighter-rouge&quot;&gt;.../src/&amp;lt;revision&amp;gt;/&lt;/code&gt; path for a consistent view of the tree. Implementing this call in pCacheFS should not be difficult, but I did not bother to do so due to the poor performance observed when using this layer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pCacheFS is purely read-only and has no cache invalidation. This is not a problem for our use case because the remote source file system is read-only, but highlights that pCacheFS is not usable for the general case.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As SSHFS, pCacheFS does not implement extended attributes so the same problems apply.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As SSHFS, pCacheFS uses paths as keys for the cache so repointing the source tree to a different revision blows away the cache.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;Neither the SSHFS client file system, the &lt;code class=&quot;highlighter-rouge&quot;&gt;sshd&lt;/code&gt; server, nor the pCacheFS file system have been optimized for the workload of a large build using a source tree mounted over SSHFS. There are performance bottlenecks in various areas and there are missing features in all layers.&lt;/p&gt;

&lt;p&gt;Here are some ideas on how the current situation could be improved:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Implement extended attributes in SSHFS and the SFTP server. This is potentially difficult because it requires changes to the OpenSSH server and &lt;a href=&quot;https://bugzilla.mindrot.org/show_bug.cgi?id=1953&quot;&gt;a previous attempt in 2011&lt;/a&gt; resulted in a patch that was not accepted mainline. At the very least, it would be nice to revive this patch on recent OpenSSH sources; a simple attempt I made at rebasing it resulted in conflicts that didn’t seem trivial to resolve.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add a &lt;em&gt;remote-file-system-is-immutable&lt;/em&gt; setting to SSHFS to enable “perfect caching”. Turning this option on would cache the contents of files so that all file system operations on a file were local after fetching it. As a side-effect, the immense number of &lt;code class=&quot;highlighter-rouge&quot;&gt;getattr&lt;/code&gt; operations issued to the server should become minimal and this should shift the bottleneck elsewhere. With caching of contents, the SSHFS could then expose the MD5 digests as extended attributes in constant time without needing to communicate these to the SFTP server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reimplement pCacheFS as a C FUSE file system with proper threading. The pCacheFS layer as a standalone concept seems to be a nicer design than the previous item. Unfortunately, the current pCacheFS implementation does not yield the necessary performance, but reimplementing it in C and making proper use of threads would. As a side-effect, one could cache file contents using their MD5 as the key so that accessing files across different repository revisions would not necessarily cause a cache miss. Similarly, pCacheFS could on its own expose the MD5 of the files via extended attributes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I consider my experimentation on this area done for now, but all of the items above sound interesting. In fact, after spending so many hours studying this, I cannot help but think of implementing a solution and watching it work. Maybe I’ll give them a try… if I have the time.&lt;/p&gt;

&lt;p&gt;Oh, and how easy this all was! Developing file system code using something like FUSE &lt;em&gt;cough&lt;/em&gt;&lt;a href=&quot;http://rumpkernel.org/&quot;&gt;rump&lt;/a&gt;&lt;em&gt;cough&lt;/em&gt; is a joy. The last time I dealt with low level file system code was &lt;a href=&quot;http://netbsd-soc.sourceforge.net/projects/tmpfs/&quot;&gt;back in 2005 when I wrote tmpfs for NetBSD&lt;/a&gt;, and I did not have virtual machines nor user-space file systems available! &lt;em&gt;That&lt;/em&gt; was painful.&lt;/p&gt;

&lt;h1 id=&quot;annex-contributions&quot;&gt;Annex: Contributions&lt;/h1&gt;

&lt;p&gt;This work resulted in the following open source contributions &lt;em&gt;so far&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/libfuse/sshfs/pull/5&quot;&gt;Pull request libfuse/sshfs#5&lt;/a&gt;: &lt;strong&gt;Merged the &lt;a href=&quot;https://github.com/osxfuse/sshfs/&quot;&gt;osxfuse/sshfs&lt;/a&gt; fork into libfuse’s copy.&lt;/strong&gt; The differences between the two were minimal so it’s good to have the master copy be portable by itself. Along the way, I also improved some of the OS X-specific code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/libfuse/sshfs/pull/6&quot;&gt;Pull request libfuse/sshfs#6&lt;/a&gt;: &lt;strong&gt;Implemented command-line options to tune the behavior of the SSHFS cache.&lt;/strong&gt; The code had various built-in constants to limit the cache size and configure its cleanup policies. As part of my testing, I had to make these values larger to prevent evictions from the cache, and making these customizable by the user would be good.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ibizaman/pcachefs/pull/3&quot;&gt;Pull request ibizaman/pcachefs#3&lt;/a&gt;: &lt;strong&gt;Fixed obvious breakage of pCacheFS&lt;/strong&gt; after implementing an entry point.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://pkgsrc.se/filesystems/fuse-pcachefs&quot;&gt;filesystems/fuse-cachefs package&lt;/a&gt;: &lt;strong&gt;Added a pCacheFS package to pkgsrc&lt;/strong&gt;, for my own benefit in setting things up in OS X.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        
        <pubDate>Wed, 17 Feb 2016 13:30:00 +0000</pubDate>
        <link>http://julio.meroh.net/2016/02/sshfs-performance-analysis-for-builds.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2016/02/sshfs-performance-analysis-for-builds.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>The Medium experiment wrap-up</title>
        
          <description>
            Eight months ago, I decided to try
Medium as the platform on which to
post my essays.  Over this time I have published a handful of posts in
there—8, to be precise, which is… a very shy number—but the
results have been quite satisfactory: the WYSIWYG composer is excellent,
the analytics tools are simple but to the point, the looks are great, and
the community is nice (though I haven’t been able to tap into it just yet).
But where have things failed?

The failure

Regardless of all the good things, the experiment overall has failed.  To
summarize it:


  Medium has failed as the place where I want to post my articles
first though it remains a great secondary place for content
redistribution and promotion.


Let’s go over the reasons.

Post classification

The first problem I have with Medium, which is a minor one, is that I see
it as a place for high-quality, large-form essays—not the average
blog post with the musings of the day.  In other words: I see myself
posting long opinion pieces (as I have done) and not something like the
announcement of a new release of a personal project or incomplete thoughts
on a topic.  In turn, this means that I have restrained the kind of content
I have posted there and thus not been able to completely replace my blog.

It’s completely true that this is my own point of view and I’d just need
to let go of it and post more.  But there is an implementation detail of
Medium that bothers me enough to prevent me from doing this, and it is a
simple one: posts cannot be classified.  As a result, as soon as you
start posting short replies to other people’s posts, your own profile gets
cluttered with such replies-as-first-class-posts and your original,
long-form content gets lost in the noise.

It would be great if Medium provided a mechanism to say “show these and
those stories on my profile, but nothing else” so that you could carefully
craft what you want displayed on your persona.  Otherwise it is hard for
readers to see what other good stuff from you they may consume.  Maybe a
publication is the answer to this, I don’t know, but I don’t really want
to dig further because of the second problem.

Data liberation

The second problem, and this is a much more serious issue, is about data
liberation.  If you write first on Medium, your posts are stuck there
unless you put significant effort to take them out.

But why is so?  After all, it’s just text!  Well, you see… Medium
provides functionality to export your content, but the exported posts are
unusable garbage: the exported HTML can be read on a browser and it renders
similarly to what you could view originally in Medium, but that’s about it.
The HTML is littered with unnecessary tags, and to prove that suffices to
say that the exported HTML for a post takes double the space than the raw
text.  As a result, the exported copies are unusable for anything else
should you ever want to reuse your text for other purposes or in other
venues.

Importing the posts into this site

For these reasons, I have spent a significant amount of time “taking out”
my posts from Medium and reformatting them to fit this site.  The result
are Markdown posts that are easier to deal with and are future-proof: the
Markdown format is simple enough and readable enough that one can imagine
the text being perfectly usable and parseable years down the road.

This was an excruciating process and I was lucky to only have 8 posts to
export.  I started by using
html2text to convert the Medium
export into Markdown files.  Then I had to manually strip out Unicode
characters and fix spacing issues in the text itself caused by their
presence.  Then, the worst part, I had to deal with images and embeds.
And, lastly, I had to update this site to tie things together properly.

I do intend to keep posting to Medium but the process will be the other way
around: first write the master copy in a format I control and then
import it into Medium for promotion.  Maybe this will prompt me to update
the Markdown2Social tool to
support direct publication to Medium.

For your reference, here is the list of posts taken out:


  
    2015-10-23:
Compilers in the (BSD) base system
  
  
    2015-09-24:
An open letter to online support staff
  
  
    2015-09-20:
“Your English is pretty good!”, they said
  
  
    2015-09-07:
My coding workflow
  
  
    2015-06-19:
How to commit a code hack and not perish along the way
  
  
    2015-06-06:
Get a handle on email subscriptions
  
  
    2015-05-26:
Six years at Google
  
  
    2015-05-24:
Hello, Medium!
  


What about The Julipedia?

Unfortunately, the complaints above do not apply to Medium alone.

The data liberation issue applies equally to Blogger, and thus to The
Julipedia.  It is true that Blogger is in a
better position than Medium because one can compose posts directly in HTML
(as I have been doing) so you can actually take out almost-exactly what you
put in.  Unfortunately, Blogger has a tendency to mess up the HTML you type
if you happen to embed verbatim text or use the WYSIWYG editor by mistake.
Therefore, I am also thinking of taking some of the posts out from there
and putting them here… but I will not call The Julipedia dead until that
happens.

To tie things together, I have done a few improvements to this site and
made the blog section a first-class citizen.  In particular, I have added
excerpts to all the posts, improved the posts index, and added
commenting support via Disqus.  (What?  I am complaining about Data
liberation above and I still resorted to an external commenting system that
I do not run?  Yes, that’s a fair point…  but I’m not ready to run a
dynamic web site yet.)


  Subscribe via RSS right now to not miss a beat.  And if you
happen to read this, would you provide the very first comments to this
site via the comment box below?


            &lt;a href=&quot;http://julio.meroh.net/2016/01/medium-experiment-wrapup.html&quot;&gt;[Continue reading]&lt;/a&gt;
          </description>
        
          <description>&lt;p&gt;Eight months ago, &lt;a href=&quot;/2015/05/hello-medium.html&quot;&gt;I decided to try
Medium&lt;/a&gt; as the platform on which to
post my essays.  Over this time I have published a handful of posts in
there—8, to be precise, which is… a very shy number—but the
results have been quite satisfactory: the WYSIWYG composer is excellent,
the analytics tools are simple but to the point, the looks are great, and
the community is nice (though I haven’t been able to tap into it just yet).
But where have things failed?&lt;/p&gt;

&lt;h1 id=&quot;the-failure&quot;&gt;The failure&lt;/h1&gt;

&lt;p&gt;Regardless of all the good things, the experiment overall has failed.  To
summarize it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Medium has &lt;em&gt;failed as the place where I want to post my articles
&lt;strong&gt;first&lt;/strong&gt;&lt;/em&gt; though it remains a &lt;em&gt;great &lt;strong&gt;secondary&lt;/strong&gt; place for content
redistribution and promotion&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s go over the reasons.&lt;/p&gt;

&lt;h2 id=&quot;post-classification&quot;&gt;Post classification&lt;/h2&gt;

&lt;p&gt;The first problem I have with Medium, which is a minor one, is that &lt;em&gt;I&lt;/em&gt; see
it as a place for high-quality, large-form essays—not the average
blog post with the musings of the day.  In other words: I see myself
posting long opinion pieces (as I have done) and not something like the
announcement of a new release of a personal project or incomplete thoughts
on a topic.  In turn, this means that I have restrained the kind of content
I have posted there and thus not been able to completely replace my blog.&lt;/p&gt;

&lt;p&gt;It’s completely true that &lt;em&gt;this is my own point of view&lt;/em&gt; and I’d just need
to let go of it and post more.  But there is an implementation detail of
Medium that bothers me enough to prevent me from doing this, and it is a
simple one: &lt;strong&gt;posts cannot be classified&lt;/strong&gt;.  As a result, as soon as you
start posting short replies to other people’s posts, your own profile gets
cluttered with such replies-as-first-class-posts and your original,
long-form content gets lost in the noise.&lt;/p&gt;

&lt;p&gt;It would be great if Medium provided a mechanism to say “show these and
those stories on my profile, but nothing else” so that you could carefully
craft what you want displayed on your persona.  Otherwise it is hard for
readers to see what other good stuff from you they may consume.  Maybe a
publication is the answer to this, I don’t know, but I don’t really want
to dig further because of the second problem.&lt;/p&gt;

&lt;h2 id=&quot;data-liberation&quot;&gt;Data liberation&lt;/h2&gt;

&lt;p&gt;The second problem, and this is a much more serious issue, is about data
liberation.  If you write first on Medium, your posts are stuck there
&lt;em&gt;unless you put significant effort to take them out&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But why is so?  After all, it’s just text!  Well, you see… Medium
provides functionality to export your content, but the exported posts are
unusable garbage: the exported HTML can be read on a browser and it renders
similarly to what you could view originally in Medium, but that’s about it.
The HTML is littered with unnecessary tags, and to prove that suffices to
say that the exported HTML for a post takes &lt;em&gt;double the space&lt;/em&gt; than the raw
text.  As a result, the exported copies are unusable for anything else
should you ever want to reuse &lt;em&gt;your text&lt;/em&gt; for other purposes or in other
venues.&lt;/p&gt;

&lt;h1 id=&quot;importing-the-posts-into-this-site&quot;&gt;Importing the posts into this site&lt;/h1&gt;

&lt;p&gt;For these reasons, I have spent a significant amount of time “taking out”
my posts from Medium and reformatting them to fit this site.  The result
are Markdown posts that are easier to deal with and are future-proof: the
Markdown format is simple enough and readable enough that one can imagine
the text being perfectly usable and parseable years down the road.&lt;/p&gt;

&lt;p&gt;This was an excruciating process and I was lucky to only have 8 posts to
export.  I started by using
&lt;a href=&quot;https://pypi.python.org/pypi/html2text&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;html2text&lt;/code&gt;&lt;/a&gt; to convert the Medium
export into Markdown files.  Then I had to manually strip out Unicode
characters and fix spacing issues in the text itself caused by their
presence.  Then, the worst part, I had to deal with images and embeds.
And, lastly, I had to update this site to tie things together properly.&lt;/p&gt;

&lt;p&gt;I do intend to keep posting to Medium but the process will be the other way
around: &lt;em&gt;first&lt;/em&gt; write the master copy in a format I control and &lt;em&gt;then&lt;/em&gt;
import it into Medium for promotion.  Maybe this will prompt me to update
the &lt;a href=&quot;https://github.com/jmmv/markdown2social/&quot;&gt;Markdown2Social&lt;/a&gt; tool to
support direct publication to Medium.&lt;/p&gt;

&lt;p&gt;For your reference, here is the list of posts taken out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;2015-10-23:
&lt;a href=&quot;/2015/10/compilers-in-the-bsd-base-system.html&quot;&gt;Compilers in the (BSD) base system&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2015-09-24:
&lt;a href=&quot;/2015/09/open-letter-to-online-support.html&quot;&gt;An open letter to online support staff&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2015-09-20:
&lt;a href=&quot;/2015/09/your-english-is-pretty-good-they-said.html&quot;&gt;“Your English is pretty good!”, they said&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2015-09-07:
&lt;a href=&quot;/2015/09/my-coding-workflow.html&quot;&gt;My coding workflow&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2015-06-19:
&lt;a href=&quot;/2015/06/how-to-commit-a-code-hack.html&quot;&gt;How to commit a code hack and not perish along the way&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2015-06-06:
&lt;a href=&quot;/2015/06/get-a-handle-on-email-subscriptions.html&quot;&gt;Get a handle on email subscriptions&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2015-05-26:
&lt;a href=&quot;/2015/05/six-years-at-google.html&quot;&gt;Six years at Google&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2015-05-24:
&lt;a href=&quot;/2015/05/hello-medium.html&quot;&gt;Hello, Medium!&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-about-the-julipedia&quot;&gt;What about The Julipedia?&lt;/h1&gt;

&lt;p&gt;Unfortunately, the complaints above do not apply to Medium alone.&lt;/p&gt;

&lt;p&gt;The data liberation issue applies equally to Blogger, and thus to &lt;a href=&quot;http://julipedia.meroh.net/&quot;&gt;The
Julipedia&lt;/a&gt;.  It is true that Blogger is in a
better position than Medium because one can compose posts directly in HTML
(as I have been doing) so you can actually take out almost-exactly what you
put in.  Unfortunately, Blogger has a tendency to mess up the HTML you type
if you happen to embed verbatim text or use the WYSIWYG editor by mistake.
Therefore, I am also thinking of taking some of the posts out from there
and putting them here… but I will not call The Julipedia dead until that
happens.&lt;/p&gt;

&lt;p&gt;To tie things together, I have done a few improvements to this site and
made the blog section a first-class citizen.  In particular, I have added
excerpts to all the posts, improved the &lt;a href=&quot;/blog&quot;&gt;posts index&lt;/a&gt;, and added
commenting support via Disqus.  (What?  I am complaining about Data
liberation above and I still resorted to an external commenting system that
I do not run?  Yes, that’s a fair point…  but I’m not ready to run a
dynamic web site yet.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;/feed.xml&quot;&gt;Subscribe via RSS right now&lt;/a&gt; to not miss a beat.  And if you
happen to read this, would you provide the very first comments to this
site via the comment box below?&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        
        <pubDate>Fri, 29 Jan 2016 03:30:00 +0000</pubDate>
        <link>http://julio.meroh.net/2016/01/medium-experiment-wrapup.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2016/01/medium-experiment-wrapup.html</guid>
        
        
        <category>blog</category>
        
        <category>writing</category>
        
      </item>
    
      <item>
        <title>Joining the Blaze team</title>
        
          <description>
            It has been over 6 years since I joined
Google and
throughout this time I have been in the Storage SRE family: first with GFS,
then with Colossus, and last with Persistent Disk.  Even though this counts as
3 different teams, the reality is that I have been doing mostly the same type
of work all around.

I had pondered the idea of switching to a pure Software Engineer (SWE) role for
all these years and never taken any action.  Until now.  Things change, and the
time has come for me to make a move and pursue that thought in an effort to
grow in a different direction.  And why now, you ask?  Well, simply because I
have found a role in the NYC office for a project that I am personally
passionate about.



The new team

So, without further ado, today is my first day in the Blaze development
team.  The specific details of what I’ll be doing is something I cannot share
here, if only because they are still blurry to me!

What I can say, though, is that Blaze was released as open source in March of
2015 under the Bazel project.  Around that time, I wrote an
article titled On Bazel and Open
Source which
introduced Bazel and then went on to describe some of the shortcomings that
would prevent wide adoption in the open source world if those issues went
infixed

That article was seen as unnecessarily negative by some. So, as I like to think
about it: the time has come for me to put my efforts where my mouth and
interests are.  I don’t know if I’ll have the time to address the issues I
described in that article about Bazel, but I surely hope to have a chance to
contribute to the open source project.

Writing Java

As you may know, Blaze/Bazel are Java.  Some of my peers have made fun of this
fact, but you know what?  Modern Java is quite nice and enjoyable to write with
a proper IDE, so I’m looking forward to that.

I have recently come to this conclusion while working on the Nudgy Timer
Android app I announced a month
ago.  I had not coded in Java for 7 years and I started doing so again for this
app, resulting in a pretty nice experience.  (Not because Android Studio, which
I’d rant about… but because of Java itself and IntelliJ’s coding aids.)

Looking back

I don’t leave my previous SRE position without realizing that I have learned a
damn lot over these 6 years in this role.  You know, when I joined Google I
wondered why I ended up in SRE because my expertise “didn’t line up well” (ha,
ha, now I know it did in fact).  I have also had friends routinely ask if I got
a lot of training at Google, to which my answer always was “no, not really”.
But the truth is that the training has happened and now I know much more about
running a production system than I ever thought I would.

And because of this, I want this same stealthy process to improve my software
development skills.  It’s true that I have been working as a software engineer
in a multitude of distributed open source project like NetBSD, but being an
enthusiast is one thing and developing professionally for a project whose
developers sit in the same cube as oneself is a very different one—and I
have never done the latter yet.

Exciting times lie ahead.

            &lt;a href=&quot;http://julio.meroh.net/2016/01/joining-blaze-team.html&quot;&gt;[Continue reading]&lt;/a&gt;
          </description>
        
          <description>&lt;p&gt;It has been &lt;a href=&quot;https://medium.com/@jmmv/six-years-at-google-8b06563fab08&quot;&gt;over 6 years since I joined
Google&lt;/a&gt; and
throughout this time I have been in the Storage SRE family: first with GFS,
then with Colossus, and last with Persistent Disk.  Even though this counts as
3 different teams, the reality is that I have been doing mostly the same type
of work all around.&lt;/p&gt;

&lt;p&gt;I had pondered the idea of switching to a pure Software Engineer (SWE) role for
all these years and never taken any action.  Until now.  Things change, and the
time has come for me to make a move and pursue that thought in an effort to
grow in a different direction.  And why now, you ask?  Well, simply because I
have found a role in the NYC office for a project that I am personally
passionate about.&lt;/p&gt;

&lt;!--end-of-excerpt--&gt;

&lt;h1 id=&quot;the-new-team&quot;&gt;The new team&lt;/h1&gt;

&lt;p&gt;So, without further ado, &lt;strong&gt;today is my first day in the Blaze development
team&lt;/strong&gt;.  The specific details of what I’ll be doing is something I cannot share
here, if only because they are still blurry to me!&lt;/p&gt;

&lt;p&gt;What I can say, though, is that Blaze was released as open source in March of
2015 under the &lt;a href=&quot;http://bazel.io/&quot;&gt;Bazel&lt;/a&gt; project.  Around that time, I wrote an
article titled &lt;a href=&quot;/2015/04/on-bazel-and-open-source.html&quot;&gt;On Bazel and Open
Source&lt;/a&gt; which
introduced Bazel and then went on to describe some of the shortcomings that
would prevent wide adoption in the open source world if those issues went
infixed&lt;/p&gt;

&lt;p&gt;That article was seen as unnecessarily negative by some. So, as I like to think
about it: the time has come for me to put my efforts where my mouth and
interests are.  I don’t know if I’ll have the time to address the issues I
described in that article about Bazel, but I surely hope to have a chance to
contribute to the open source project.&lt;/p&gt;

&lt;h1 id=&quot;writing-java&quot;&gt;Writing Java&lt;/h1&gt;

&lt;p&gt;As you may know, Blaze/Bazel are Java.  Some of my peers have made fun of this
fact, but you know what?  Modern Java is quite nice and enjoyable to write with
a proper IDE, so I’m looking forward to that.&lt;/p&gt;

&lt;p&gt;I have recently come to this conclusion while working on the &lt;a href=&quot;/2015/12/introducing-nudgytimer.html&quot;&gt;Nudgy Timer
Android app&lt;/a&gt; I announced a month
ago.  I had not coded in Java for 7 years and I started doing so again for this
app, resulting in a pretty nice experience.  (Not because Android Studio, which
I’d rant about… but because of Java itself and IntelliJ’s coding aids.)&lt;/p&gt;

&lt;h1 id=&quot;looking-back&quot;&gt;Looking back&lt;/h1&gt;

&lt;p&gt;I don’t leave my previous SRE position without realizing that I have learned a
damn lot over these 6 years in this role.  You know, when I joined Google I
wondered why I ended up in SRE because my expertise “didn’t line up well” (ha,
ha, now I know it did in fact).  I have also had friends routinely ask if I got
a lot of training at Google, to which my answer always was “no, not really”.
But the truth is that the training has happened and now I know much more about
running a production system than I ever thought I would.&lt;/p&gt;

&lt;p&gt;And because of this, I want this same stealthy process to improve my software
development skills.  It’s true that I have been working as a software engineer
in a multitude of distributed open source project like NetBSD, but being an
enthusiast is one thing and developing professionally for a project whose
developers sit in the same cube as oneself is a very different one—and I
have never done the latter yet.&lt;/p&gt;

&lt;p&gt;Exciting times lie ahead.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 19 Jan 2016 13:30:00 +0000</pubDate>
        <link>http://julio.meroh.net/2016/01/joining-blaze-team.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2016/01/joining-blaze-team.html</guid>
        
        
        <category>google</category>
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Introducing Nudgy Timer</title>
        
          <description>
            

For the last two years, I had been meaning to write an Android app just for
the sake of it.  I had attempted to do so in short chunks of “free time”,
but that never played out well: I had to force myself to sit down for a few
hours straight to fight Android Studio and overcome the initial
difficulties in coding for an unknown platform.  That’s why, during the
last Thanksgiving week, I took three days off of work to focus on writing
my first Android app.  The goal was to get a basic app that could later be
built on iteratively as open source.  The specifics of the app did not
matter much for this exercise, but I had a simple idea in mind.



And those three days played out really well.  After three intense days, I
had a functional application running on my phone, ready to be demoed on
Thanksgiving day!  Granted, the code was garbage and the app had some
serious fundamental bugs, but I had gotten a prototype that I could show
around.  In particular, I got the background timer working, various
activities and their workflow, some basic unit tests for auxiliary support
classes, and data persistency via SQLite.

Since then, I have been working hard on reworking the core logic of the app
to be robust, cleaning up the code, and adding some tests, all in
preparation for publishing the code so that I can continue work on GitHub
instead of in an internal “unclean” repository.

And, today, I am finally open-sourcing the Nudgy Timer project:


  https://github.com/jmmv/nudgytimer/


The app is now barely functional but I think its foundations are “good
enough” to keep building on it step by step.  The UI is suboptimal though,
so while the app might work, it will not deliver a pleasant experience.

For the time being, you can only find this app in GitHub in source form:
there are still a bunch of important to-do items to be addressed before it
can go live into the Google Play Store and be easily available.  (One of
which is for me to run the app on my real phone for a few days to see how
it behaves.)  Bear with me for a bit longer before you try it out.

Lastly: this is my very first Android app and the first Java code I
write since 2008.  I would like to invite you to take a look at the
sources and be brutaly honest about what things are not good and how to
make them better.  Please file bugs if you do so, and thank you!

            &lt;a href=&quot;http://julio.meroh.net/2015/12/introducing-nudgytimer.html&quot;&gt;[Continue reading]&lt;/a&gt;
          </description>
        
          <description>&lt;p&gt;&lt;img src=&quot;/images/2015-12-17-nudgytimer.png&quot; alt=&quot;Nudgy Timer screenshot&quot; class=&quot;float-right with-border&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the last two years, I had been meaning to write an Android app just for
the sake of it.  I had attempted to do so in short chunks of “free time”,
but that never played out well: I had to force myself to sit down for a few
hours straight to fight Android Studio and overcome the initial
difficulties in coding for an unknown platform.  That’s why, during the
last Thanksgiving week, I took three days off of work to focus on writing
my first Android app.  The goal was to get a basic app that could later be
built on iteratively as open source.  The specifics of the app did not
matter much for this exercise, but I had a simple idea in mind.&lt;/p&gt;

&lt;!--end-of-excerpt--&gt;

&lt;p&gt;And those three days played out really well.  After three intense days, I
had a functional application running on my phone, ready to be demoed on
Thanksgiving day!  Granted, the code was garbage and the app had some
serious fundamental bugs, but I had gotten a prototype that I could show
around.  In particular, I got the background timer working, various
activities and their workflow, some basic unit tests for auxiliary support
classes, and data persistency via SQLite.&lt;/p&gt;

&lt;p&gt;Since then, I have been working hard on reworking the core logic of the app
to be robust, cleaning up the code, and adding some tests, all in
preparation for publishing the code so that I can continue work on GitHub
instead of in an internal “unclean” repository.&lt;/p&gt;

&lt;p&gt;And, today, I am finally open-sourcing the &lt;strong&gt;Nudgy Timer project&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/jmmv/nudgytimer/&quot;&gt;https://github.com/jmmv/nudgytimer/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The app is now barely functional but I think its foundations are “good
enough” to keep building on it step by step.  The UI is suboptimal though,
so while the app might work, it will not deliver a pleasant experience.&lt;/p&gt;

&lt;p&gt;For the time being, you can only find this app in GitHub in source form:
there are still a bunch of important to-do items to be addressed before it
can go live into the Google Play Store and be easily available.  (One of
which is for me to run the app on my real phone for a few days to see how
it behaves.)  Bear with me for a bit longer before you try it out.&lt;/p&gt;

&lt;p&gt;Lastly: &lt;strong&gt;this is my very first Android app&lt;/strong&gt; and the first Java code I
write since 2008.  &lt;strong&gt;I would like to invite you to take a look at the
sources and be brutaly honest&lt;/strong&gt; about what things are not good and how to
make them better.  &lt;strong&gt;Please file bugs&lt;/strong&gt; if you do so, and thank you!&lt;/p&gt;
</description>
        
        <pubDate>Thu, 17 Dec 2015 22:30:00 +0000</pubDate>
        <link>http://julio.meroh.net/2015/12/introducing-nudgytimer.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2015/12/introducing-nudgytimer.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Introducing Markdown2Social</title>
        
          <description>
            During the course of this year, I have experimented with writing internal
long-form “opinion” posts at Google.  In doing so, I have also experimented
with posting such content in Google+ instead of in a blog, and the results
have been quite satisfying: content posted in this way received much more
engagement than a post hosting just a link to an equivalent external
document.

Unfortunately, Google+’s formatting features are extremely limited, and
composing such long posts within its editor is painful.  For this reason,
I wrote a tool called md2gplus which would take a Markdown-formatted
document with limited markup and convert it to a Google+ post.  This tool
has been helpful in making it easier for me to write such articles and
also has improved the visual quality of the results.

Today, I am open-sourcing the md2gplus tool under the Markdown2Social
project and you can find it both in GitHub and in PyPI:


  https://github.com/jmmv/markdown2social/



  https://pypi.python.org/pypi/markdown2social/


This new tool is very rudimentary and of very limited usage, but I hope
you might find it useful!  If you do, please let me know.

            &lt;a href=&quot;http://julio.meroh.net/2015/12/introducing-markdown2social.html&quot;&gt;[Continue reading]&lt;/a&gt;
          </description>
        
          <description>&lt;p&gt;During the course of this year, I have experimented with writing internal
long-form “opinion” posts at Google.  In doing so, I have also experimented
with posting such content in Google+ instead of in a blog, and the results
have been quite satisfying: content posted in this way received much more
engagement than a post hosting just a link to an equivalent external
document.&lt;/p&gt;

&lt;p&gt;Unfortunately, Google+’s formatting features are extremely limited, and
composing such long posts within its editor is painful.  For this reason,
I wrote a tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;md2gplus&lt;/code&gt; which would take a Markdown-formatted
document with limited markup and convert it to a Google+ post.  This tool
has been helpful in making it easier for me to write such articles and
also has improved the visual quality of the results.&lt;/p&gt;

&lt;p&gt;Today, I am open-sourcing the &lt;code class=&quot;highlighter-rouge&quot;&gt;md2gplus&lt;/code&gt; tool under the &lt;strong&gt;Markdown2Social
project&lt;/strong&gt; and you can find it both in GitHub and in PyPI:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/jmmv/markdown2social/&quot;&gt;https://github.com/jmmv/markdown2social/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://pypi.python.org/pypi/markdown2social/&quot;&gt;https://pypi.python.org/pypi/markdown2social/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This new tool is very rudimentary and of very limited usage, but I hope
you might find it useful!  If you do, please &lt;a href=&quot;/about&quot;&gt;let me know&lt;/a&gt;.&lt;/p&gt;
</description>
        
        <pubDate>Thu, 10 Dec 2015 15:00:00 +0000</pubDate>
        <link>http://julio.meroh.net/2015/12/introducing-markdown2social.html</link>
        <guid isPermaLink="true">http://julio.meroh.net/2015/12/introducing-markdown2social.html</guid>
        
        
        <category>software</category>
        
      </item>
    
  </channel>
</rss>
