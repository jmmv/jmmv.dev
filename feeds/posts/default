<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jmmv.dev</title>
    <link>https://jmmv.dev/</link>
    <description>Recent content on jmmv.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Oct 2019 10:40:00 -0400</lastBuildDate>
    
	<atom:link href="https://jmmv.dev/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Resurrected ONLamp.com articles</title>
      <link>https://jmmv.dev/2019/10/onlamp-articles.html</link>
      <pubDate>Fri, 11 Oct 2019 10:40:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2019/10/onlamp-articles.html</guid>
      <description>Quite some time ago, I wrote a handful of guest posts for O&amp;rsquo;Reilly&amp;rsquo;s ONLamp.com online publication. Unfortunately, that site seems now gone from the interwebs and I only noticed by chance upon realizing that some of my links to those articles were now broken.
Fortunately, I was able to find copies of those articles via archive.org&amp;rsquo;s WayBack Machine. So I have now taken the chance to import those articles into this site.</description>
    </item>
    
    <item>
      <title>Sample REST API in Rust and Go</title>
      <link>https://jmmv.dev/2019/09/rest-api-rust-go.html</link>
      <pubDate>Fri, 27 Sep 2019 06:45:40 +0500</pubDate>
      
      <guid>https://jmmv.dev/2019/09/rest-api-rust-go.html</guid>
      <description>Over the summer, I prototyped a bunch of web apps whose ideas had been floating in my mind for a long time. I spent quite a bit of time learning about REST APIs and, as part of these exercises, implemented skeletons of REST servers in both Go and Rust. (Just for context, the last time I wrote a web app was in high school&amp;hellip; and it involved PHP, MySQL, and I think IE6?</description>
    </item>
    
    <item>
      <title>Safely restoring the previous working directory</title>
      <link>https://jmmv.dev/2019/09/safe-chdir-to-previous.html</link>
      <pubDate>Sat, 21 Sep 2019 15:47:41 +0000</pubDate>
      
      <guid>https://jmmv.dev/2019/09/safe-chdir-to-previous.html</guid>
      <description>The current working directory, or CWD for short, is a process-wide property. It is good practice to treat the CWD as read-only because it is essentially global state: if you change the CWD of your process at any point, any relative paths you might have stored in memory1 will stop working. I learned this first many years ago when using the Boost.Filesystem library: I could not find a function to change the CWD and that was very much intentional for this reason.</description>
    </item>
    
    <item>
      <title>Optimizing tree deletions in Bazel</title>
      <link>https://jmmv.dev/2019/03/optimizing-tree-deletions.html</link>
      <pubDate>Fri, 22 Mar 2019 15:00:00 +0100</pubDate>
      
      <guid>https://jmmv.dev/2019/03/optimizing-tree-deletions.html</guid>
      <description>Bazel likes creating very deep and large trees on disk during a build. One example is the output tree, which naturally contains all the artifacts of your build. Another, more problematic example is the symlink forest trees created for every action when sandboxing is enabled. As garbage gets created, it must be deleted.
It turns out, however, that deleting file system trees can be very expensive&amp;mdash;and especially so on macOS. In fact, calls to our deleteTree algorithm routinely showed up in my profiling runs when trying to diagnose slowdowns using the dynamic scheduler.</description>
    </item>
    
    <item>
      <title>Darwin&#39;s QoS service classes and performance</title>
      <link>https://jmmv.dev/2019/03/macos-threads-qos-and-bazel.html</link>
      <pubDate>Wed, 06 Mar 2019 17:30:00 +0100</pubDate>
      
      <guid>https://jmmv.dev/2019/03/macos-threads-qos-and-bazel.html</guid>
      <description>Since the publication of Bazel a few years ago, users have reported (and I myself have experienced) general slowdowns when Bazel is running on Macs: things like the window manager stutter and others like the web browser cannot load new pages. Similarly, after the introduction of the dynamic spawn scheduler, some users reported slower builds than pure remote or pure local builds, which made no sense.
All along we guessed that these problems were caused by Bazel&amp;rsquo;s abuse of system threads, as it used to spawn 200 runnable threads during analysis and used to run 200 concurrent compiler subprocesses.</description>
    </item>
    
    <item>
      <title>Using setenv equals setting global variables</title>
      <link>https://jmmv.dev/2019/02/setenv-and-global-variables.html</link>
      <pubDate>Fri, 22 Feb 2019 15:30:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2019/02/setenv-and-global-variables.html</guid>
      <description>This is the tale of yet another Bazel bug, this time involving environment variables, global state, and gRPC. Through it, I&amp;rsquo;ll argue that you should never use setenv within a program unless you are doing so to execute something else (and even then with caveats). Before we start, I hope we can agree upfront that using global variables to pass state within a program is bad; can&amp;rsquo;t we?
Bazel is a build tool and, as such, is a program that runs on your computer&amp;mdash;quite likely as an interactive tool on the command line.</description>
    </item>
    
    <item>
      <title>Encode your assumptions</title>
      <link>https://jmmv.dev/2019/02/encode-your-assumptions.html</link>
      <pubDate>Thu, 07 Feb 2019 07:00:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2019/02/encode-your-assumptions.html</guid>
      <description>The point of this post is simple and I&amp;rsquo;ll spoil it from the get go: every time you make an assumption in a piece of code, make such assumption explicit in the form of an assertion or error check. If you cannot do that (are you sure?), then write a detailed comment.
In fact, I&amp;rsquo;m exceedingly convinced that the amount of assertion-like checks in a piece of code is a good indicator of the programmer&amp;rsquo;s expertise.</description>
    </item>
    
    <item>
      <title>Hello, sandboxfs 0.1.0</title>
      <link>https://jmmv.dev/2019/02/sandboxfs-0-1-0.html</link>
      <pubDate>Tue, 05 Feb 2019 09:00:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2019/02/sandboxfs-0-1-0.html</guid>
      <description>I am pleased to announce that the first release of sandboxfs, 0.1.0, is finally here! You can download the sources and prebuilt binaries from the 0.1.0 release page and you can read the installation instructions for more details.
The journey to this first release has been a long one. sandboxfs was first conceived over two years ago, was first announced in August 2017, showed its first promising results in April 2018, and has been undergoing a rewrite from Go to Rust.</description>
    </item>
    
    <item>
      <title>Open files limit, macOS, and the JVM</title>
      <link>https://jmmv.dev/2019/01/open-files-limit-macos-and-jvm.html</link>
      <pubDate>Tue, 29 Jan 2019 17:15:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2019/01/open-files-limit-macos-and-jvm.html</guid>
      <description>Bazel&amp;rsquo;s original raison d&amp;rsquo;etre was to support Google&amp;rsquo;s monorepo. A consequence of using a monorepo is that some builds will become very large. And large builds can be very resource hungry, especially when using a tool like Bazel that tries to parallelize as many actions as possible for efficiency reasons. There are many resource types in a system, but today I&amp;rsquo;d like to focus on the number of open files at any given time (nofiles).</description>
    </item>
    
    <item>
      <title>On smartphones and email procrastination</title>
      <link>https://jmmv.dev/2019/01/smartphones-email-procrastination.html</link>
      <pubDate>Tue, 22 Jan 2019 06:30:00 -0500</pubDate>
      
      <guid>https://jmmv.dev/2019/01/smartphones-email-procrastination.html</guid>
      <description>I used to be good at replying to emails on time.
When tens of emails came in every day, I would sort them out and I would reply right away to anything that needed or caught my attention. The so-called Inbox Zero wasn&amp;rsquo;t a specific goal that required effort: &amp;ldquo;it just was&amp;rdquo;.
Things have changed over the years and I am now quite awful at dealing with personal email. Some emails can go weeks (or, I confess, months) before getting a reply.</description>
    </item>
    
    <item>
      <title>The fallacy of forbidding assertions</title>
      <link>https://jmmv.dev/2018/07/forbidden-assertions-fallacy.html</link>
      <pubDate>Tue, 24 Jul 2018 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/07/forbidden-assertions-fallacy.html</guid>
      <description>There are two ways to handle abnormal conditions in a program: errors and assertions.
Errors are a controlled mechanism by which the program propagates details about a faulty condition up the call chainâ€”be it with explicit error return statements or with exceptions. Errors must be used to validate all conditions that might be possible but aren&amp;rsquo;t valid given the context. Examples include: sanitizing any kind of input (as provided by the user or incoming from the network), and handling error codes from system calls or libraries.</description>
    </item>
    
    <item>
      <title>Rust vs. Go</title>
      <link>https://jmmv.dev/2018/07/rust-vs-go.html</link>
      <pubDate>Fri, 13 Jul 2018 10:45:00 +0200</pubDate>
      
      <guid>https://jmmv.dev/2018/07/rust-vs-go.html</guid>
      <description>Welcome to the Rust Review&amp;rsquo;s bonus post, which I had promised from the very beginning. I&amp;rsquo;m here to cover the big elephant in the room: Rust vs. Go. Which one is better?
There is no good answer to this question because this comparison is unfounded. I think people tend to bundle the two languages together because they were released at about the same time and the release of Rust felt like a response to the release of Go.</description>
    </item>
    
    <item>
      <title>Rust review: Closing thoughts</title>
      <link>https://jmmv.dev/2018/07/rust-review-closing-thoughts.html</link>
      <pubDate>Tue, 10 Jul 2018 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/07/rust-review-closing-thoughts.html</guid>
      <description>Thought that the Rust review was over? Think again; I was just on vacation! I&amp;rsquo;m back now to conclude the series with a bunch of random thoughts and a surprise follow-up post.
The series is coming to an end. It&amp;rsquo;s time to summarize everything we have discussed so far and to cover a few more items that didn&amp;rsquo;t really deserve full posts of their own. Most of these miscellaneous items were thoughts that I jotted down while reading TRPL book.</description>
    </item>
    
    <item>
      <title>Rust review: The ecosystem</title>
      <link>https://jmmv.dev/2018/06/rust-review-ecosystem.html</link>
      <pubDate>Fri, 22 Jun 2018 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/06/rust-review-ecosystem.html</guid>
      <description>In this part of the review, I would like to focus on Rust&amp;rsquo;s ecosystem: in other words, how Rust plays with other parts of a functioning system and how Rust&amp;rsquo;s standard library vs. external libraries interact with each other. There are a lot of pieces to cover in these areas and they have left me with mixed feelings. Let&amp;rsquo;s look at some.
The standard library The std library feels generally well-thought out and full of features.</description>
    </item>
    
    <item>
      <title>Rust review: The book</title>
      <link>https://jmmv.dev/2018/06/rust-review-book.html</link>
      <pubDate>Tue, 19 Jun 2018 09:00:00 -0400</pubDate>
      
      <guid>https://jmmv.dev/2018/06/rust-review-book.html</guid>
      <description>&amp;ldquo;The Rust Programming Language&amp;rdquo; is one of the free books that the community has put together to teach the language. The book does a good job in general, but there are some things that could be better. Let&amp;rsquo;s cover these, but first, some background.
A couple of years ago, right after getting started with Rust, I tried to go through the book&amp;rsquo;s first few chapters. It all sounded cool&amp;hellip; but the first edition of the book moved at a glacially slow pace because it covered things in excruciating detail.</description>
    </item>
    
  </channel>
</rss>