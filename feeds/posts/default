<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julio Merino</title>
    <link>http://julio.meroh.net/</link>
    <description>Recent content on Julio Merino</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Mar 2018 09:40:00 -0400</lastBuildDate>
    
	<atom:link href="http://julio.meroh.net/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shell readability: strict mode</title>
      <link>http://julio.meroh.net/2018/03/shell-readability-strict-mode.html</link>
      <pubDate>Fri, 09 Mar 2018 09:40:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/03/shell-readability-strict-mode.html</guid>
      <description>Some programming languages have a feature known as strict mode: a setting that makes the language interpreter disallow certain obviously-broken code that would otherwise work. The simplest examples are JavaScript and Perl but, as it turns out, the shell also has something akin to this feature. The &amp;ldquo;strict mode&amp;rdquo; name, however, is unofficial, so you won&amp;rsquo;t find many references to it online.
You can enable the shell&amp;rsquo;s strict mode by doing one of the following:</description>
    </item>
    
    <item>
      <title>Don&#39;t rollback rollbacks</title>
      <link>http://julio.meroh.net/2018/03/dont-rollback-rollbacks.html</link>
      <pubDate>Mon, 05 Mar 2018 06:45:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/03/dont-rollback-rollbacks.html</guid>
      <description>In a version control system, a rollback is a type of change that undoes the effects of a previous commit. In essence, a rollback is a commit that applies the inverse diff of another commit.
At Google, our tools make it trivial to create rollbacks for a given changelist or CL. (A CL is similar to a commit but can be either pending—in review—or submitted.) Making it trivial to create rollback CLs is important in a culture where the standard upon encountering a problem is &amp;ldquo;rollback first, ask questions later&amp;rdquo; because it removes friction from the process of backing out problematic changes.</description>
    </item>
    
    <item>
      <title>My self-powered commute</title>
      <link>http://julio.meroh.net/2018/03/my-self-powered-commute.html</link>
      <pubDate>Sat, 03 Mar 2018 12:10:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/03/my-self-powered-commute.html</guid>
      <description>&lt;p&gt;People tell me I&amp;rsquo;m crazy. Maybe. But this is the only way I&amp;rsquo;ve found to consistently fit exercise into the hectic schedule of my daily life with two young kids.&lt;/p&gt;

&lt;p&gt;I live in Brooklyn about 10 kilometers (6 miles) away from the Google office in Manhattan. Here is my commute:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shell readability: function parameters</title>
      <link>http://julio.meroh.net/2018/03/shell-readability-function-parameters.html</link>
      <pubDate>Fri, 02 Mar 2018 06:35:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/03/shell-readability-function-parameters.html</guid>
      <description>&lt;p&gt;The shell supports defining functions, which, &lt;a href=&#34;http://julio.meroh.net/2018/02/shell-readability-main.html&#34;&gt;as we learned in the previous post&lt;/a&gt;, you should embrace and use. Unfortunately, they are fairly primitive and their use can, paradoxically, introduce other readability problems.&lt;/p&gt;

&lt;p&gt;One specific problem is that &lt;strong&gt;function parameters are numbered, not named&lt;/strong&gt;, so the risk of cryptic code is high. Let&amp;rsquo;s see why this is a problem.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shell readability: main</title>
      <link>http://julio.meroh.net/2018/02/shell-readability-main.html</link>
      <pubDate>Mon, 26 Feb 2018 05:15:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/02/shell-readability-main.html</guid>
      <description>Our team develops Bazel, a Java-based tool. We do have, however, a significant amount of shell scripting. The percentage is small at only 3.6% of our codebase&amp;hellip; but given the size of our project, that&amp;rsquo;s about 130,000 lines—a lot, really.
Pretty much nobody likes writing these integration tests in shell. Leaving aside that our infrastructure is clunky, the real problem is that the team at large is not familiar with writing shell per se.</description>
    </item>
    
    <item>
      <title>From Jekyll to Hugo</title>
      <link>http://julio.meroh.net/2018/02/from-jekyll-to-hugo.html</link>
      <pubDate>Sat, 24 Feb 2018 06:00:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2018/02/from-jekyll-to-hugo.html</guid>
      <description>It is done. This site is now powered by Hugo instead of Jekyll. It took me a full week&amp;rsquo;s worth of early mornings to achieve, but the results are great&amp;hellip; internally, that is, because as a reader you should notice no changes other than minor style tweaks.
Performance differences As of today, this site hosts 711 posts totaling 3.4MB of text. The style sheet is based on Bootstrap and is built from scratch using SASS.</description>
    </item>
    
    <item>
      <title>Looking to replace Jekyll</title>
      <link>http://julio.meroh.net/2018/02/looking-to-replace-jekyll.html</link>
      <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://julio.meroh.net/2018/02/looking-to-replace-jekyll.html</guid>
      <description>&lt;p&gt;Back in &lt;a href=&#34;http://julio.meroh.net/2015/05/hello-medium.html&#34;&gt;May 2015&lt;/a&gt;, I was lured to Medium by its simplicity and growing community, which resulted in me posting a bunch of articles there and enjoying every moment of it. But, eventually, I noticed that &lt;a href=&#34;http://julio.meroh.net/2016/01/medium-experiment-wrapup.html&#34;&gt;I was losing control of my content&lt;/a&gt;. So &lt;a href=&#34;http://julio.meroh.net/2016/05/homepage-v3.html&#34;&gt;a year later&lt;/a&gt;, my experiments to create static homepage resulted in me moving from Blogger and Medium to a &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;-managed site.&lt;/p&gt;

&lt;p&gt;Almost two years have passed since that migration and I can only count 7 miserable new posts. This ridiculously-low number, unfortunately, doesn&amp;rsquo;t track my willingness to write—but &lt;strong&gt;the friction to posting has become so high&lt;/strong&gt; that I fear composing new essays.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fighting execs via sandboxfs on macOS</title>
      <link>http://julio.meroh.net/2017/10/fighting-execs-sandboxfs-macos.html</link>
      <pubDate>Fri, 06 Oct 2017 16:27:34 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2017/10/fighting-execs-sandboxfs-macos.html</guid>
      <description>A few weeks ago, we announced sandboxfs: a FUSE file system to expose an arbitrary view of the host&amp;rsquo;s file system. We intend to use this file system in Bazel to provide a faster and more correct sandboxing technique for build actions.
Since then, I&amp;rsquo;ve been actively working on stabilizing sandboxfs per se and its integration with Bazel. The first milestone, which we haven&amp;rsquo;t reached yet, is to get Bazel to self-build on macOS with sandboxfs.</description>
    </item>
    
    <item>
      <title>Introducing sandboxfs</title>
      <link>http://julio.meroh.net/2017/08/introducing-sandboxfs.html</link>
      <pubDate>Fri, 25 Aug 2017 16:25:18 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2017/08/introducing-sandboxfs.html</guid>
      <description>sandboxfs is a FUSE-based file system that exposes an arbitrary view of the host&amp;rsquo;s file system under the mount point, and offers access controls that differ from those of the host. You can think of sandboxfs as an advanced version of bindfs (or mount --bind or mount_null(8) depending on your system) in which you can combine and nest directories under an arbitrary layout.
The primary use case for this project is to provide a better file system sandboxing technique for the Bazel build system.</description>
    </item>
    
    <item>
      <title>Introducing sourcachefs</title>
      <link>http://julio.meroh.net/2017/07/introducing-sourcachefs.html</link>
      <pubDate>Sun, 30 Jul 2017 20:30:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2017/07/introducing-sourcachefs.html</guid>
      <description>You may remember a post from over a year ago titled Analysis of SSHFS performance for large builds, in which I outlined how Google exposes its gigantic source monorepo via a FUSE file system and in which I analyzed the performance of large builds using SSHFS to access such file system.
As part of those experiments, I played with pCacheFS, a Python-based FUSE file system that provides a persistent caching layer on to top of a slow mount point.</description>
    </item>
    
    <item>
      <title>Easy pkgsrc on macOS with pkg_comp 2.0</title>
      <link>http://julio.meroh.net/2017/02/pkg_comp-2.0-tutorial-macos.html</link>
      <pubDate>Thu, 23 Feb 2017 17:36:54 -0500</pubDate>
      
      <guid>http://julio.meroh.net/2017/02/pkg_comp-2.0-tutorial-macos.html</guid>
      <description>&lt;p&gt;This is a tutorial to guide you through the &lt;a href=&#34;http://julio.meroh.net/2017/02/introducing-pkg_comp-2.0.html&#34;&gt;shiny new pkg_comp 2.0&lt;/a&gt; on macOS &lt;a href=&#34;https://github.com/jmmv/pkg_comp/blob/master/INSTALL.md#using-the-macos-installer&#34;&gt;using the macOS-specific self-installer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goals:&lt;/strong&gt; to use pkg_comp 2.0 to build a binary repository of all the packages you are interested in; to keep the repository fresh on a daily basis; and to use that repository with pkgin to maintain your macOS system up-to-date and secure.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Keeping NetBSD up-to-date with pkg_comp 2.0</title>
      <link>http://julio.meroh.net/2017/02/pkg_comp-2.0-tutorial-netbsd.html</link>
      <pubDate>Sat, 18 Feb 2017 11:51:55 -0500</pubDate>
      
      <guid>http://julio.meroh.net/2017/02/pkg_comp-2.0-tutorial-netbsd.html</guid>
      <description>&lt;p&gt;This is a tutorial to guide you through the &lt;a href=&#34;http://julio.meroh.net/2017/02/introducing-pkg_comp-2.0.html&#34;&gt;shiny new pkg_comp 2.0&lt;/a&gt; on NetBSD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goals:&lt;/strong&gt; to use pkg_comp 2.0 to build a binary repository of all the packages you are interested in; to keep the repository fresh on a daily basis; and to use that repository with pkgin to maintain your NetBSD system up-to-date and secure.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing pkg_comp 2.0 (and sandboxctl 1.0)</title>
      <link>http://julio.meroh.net/2017/02/introducing-pkg_comp-2.0.html</link>
      <pubDate>Fri, 17 Feb 2017 16:37:06 -0500</pubDate>
      
      <guid>http://julio.meroh.net/2017/02/introducing-pkg_comp-2.0.html</guid>
      <description>After many (many) years in the making, pkg_comp 2.0 and its companion sandboxctl 1.0 are finally here!
Read below for more details on this launch. I will publish detailed step-by-step tutorials on setting up periodic package rebuilds in separate posts.
What are these tools? pkg_comp is an automation tool to build pkgsrc binary packages inside a chroot-based sandbox. The main goal is to fully automate the process and to produce clean and reproducible packages.</description>
    </item>
    
    <item>
      <title>#! /usr/bin/env considered harmful</title>
      <link>http://julio.meroh.net/2016/09/env-considered-harmful.html</link>
      <pubDate>Wed, 14 Sep 2016 07:07:46 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2016/09/env-considered-harmful.html</guid>
      <description>Many programming guides recommend to begin scripts with the #! /usr/bin/env shebang in order to to automatically locate the necessary interpreter. For example, for a Python script you would use #! /usr/bin/env python, and then the saying goes, the script would &amp;ldquo;just work&amp;rdquo; on any machine with Python installed.
The reason for this recommendation is that /usr/bin/env python will search the PATH for a program called python and execute the first one found&amp;hellip; and that usually works fine on one&amp;rsquo;s own machine.</description>
    </item>
    
    <item>
      <title>Welcome to my homepage, version 3.0</title>
      <link>http://julio.meroh.net/2016/05/homepage-v3.html</link>
      <pubDate>Sun, 29 May 2016 17:00:00 -0400</pubDate>
      
      <guid>http://julio.meroh.net/2016/05/homepage-v3.html</guid>
      <description>Welcome to my updated homepage, this time at its third major version!
First iteration &amp;mdash; a year ago The first iteration of this site, which went live exactly a year ago, was a single static page that leveraged Twitter&amp;rsquo;s Bootstrap. I created that page for two reasons: to serve as the target for all the &amp;ldquo;homepage&amp;rdquo; links that online profiles require, and to learn Bootstrap. Due to the site&amp;rsquo;s simplicity and goals, its contents were not very interesting nor dynamic.</description>
    </item>
    
  </channel>
</rss>