<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/</link><description>Recent content on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 16 Aug 2023 06:20:00 -0700</lastBuildDate><atom:link href="https://jmmv.dev/feed.xml" rel="self" type="application/rss+xml"/><item><title>Raspberry Pi 3, rfkill, and real root causing</title><link>https://jmmv.dev/2023/08/rpi3-rfkill-root-causing.html</link><pubDate>Wed, 16 Aug 2023 06:20:00 -0700</pubDate><guid>https://jmmv.dev/2023/08/rpi3-rfkill-root-causing.html</guid><description>&lt;p>I&amp;rsquo;ve had a Raspberry Pi 3 in the garage running Raspbian so it was attached to Ethernet for a long time. A few weeks ago, however, I wanted to bring the Pi into the house so that my kid, who was showing interest in robotics, and I could play with it. That required having the ability to place the device onto the dining table, next to a laptop, which meant connecting it to WiFi. Easy peasy, right?&lt;/p>
&lt;p>Well&amp;hellip; while that should have been trivial, it did not work right away and the solutions I found online back then were all nonsensical. I gave up in desperation because I did not have enough time to find the root cause, and all interest was lost. Until last weekend when I gave this ordeal another try. At this point, I found once again the same nonsensical solutions online, got equally frustrated about the fact that they even existed, and decided to find the real answer to my problem on my own.&lt;/p>
&lt;p>Yes, this is mostly a rant about the Internet being littered with misleading answers of the kind &amp;ldquo;I reinstalled glibc and my problem is gone!&amp;rdquo;. But this is also the tale of a troubleshooting session&amp;mdash;and you know I like to blog about those.&lt;/p>
&lt;h1 id="first-steps">First steps&lt;/h1>
&lt;p>Before even unplugging the Pi from its physical network link, I had to configure its WiFi connection so that I could use it on the dining table. To do so, I was going to need to run more than one command as root so, in preparation for that, I started a root shell. I was helpfully greeted by the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">jmmv@rpi3:~$ sudo su -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Wi-Fi is currently blocked by rfkill.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Use raspi-config to set the country before use.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jmmv@rpi3:~#
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nice. Somehow Raspbian expects that what one most likely wants to do after becoming root is to configure the WiFi and it points us in the right direction. That&amp;rsquo;s&amp;hellip; a bold assumption, but hey, it was pretty accurate.&lt;/p>
&lt;p>In any case, this was the first time I heard of rfkill. From the name, I assumed that this controlled some kind of kill switch for all radio devices in the system&amp;mdash;the kind of switch you would need to implement an &amp;ldquo;airplane mode&amp;rdquo; feature. I further assumed, based on this message, that rfkill was active because one needs to know the location of the device to decide which radio frequencies can be used.&lt;/p>
&lt;p>I did as told: I ran &lt;code>raspi-config&lt;/code>, went into the network configuration options to set up the WiFi, selected the right country, joined a WiFi network, and dropped back into the shell. As I did that, the WiFi connection was up and running and &lt;code>rfkill&lt;/code> reported the right thing:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">root@rpi3:~# ifconfig | grep wlan0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wlan0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@rpi3:~# rfkill
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ID TYPE DEVICE SOFT HARD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0 wlan phy0 unblocked unblocked
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1 bluetooth hci0 blocked unblocked
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Seeing this and knowing from past experience that the &lt;code>raspi-config&lt;/code> setting changes are permanent, I tried to SSH into the Pi over the WiFi adapter, confirmed that it was working, shut the system down, unplugged the Raspberry Pi from the network, brought it into the house from the garage, turned it on and&amp;hellip; it wasn&amp;rsquo;t reachable over WiFi anymore. What the&amp;hellip;!?&lt;/p>
&lt;h1 id="thinking-about-the-problem">Thinking about the problem&lt;/h1>
&lt;p>This did not make any sense. The instructions told me to configure a country and I had set one up, but somehow that was insufficient. Interestingly, though, logging back in as &lt;code>root&lt;/code> showed me the same warning about having to configure a country&amp;hellip; so I double-checked things.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">jmmv@rpi3:~$ sudo su -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Wi-Fi is currently blocked by rfkill.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Use raspi-config to set the country before use.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@rpi3:~# rg country /etc/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/etc/wpa_supplicant/wpa_supplicant.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3:country=US
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">... and more matches ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The country seemed to be configured properly in persistent storage in a place that made sense but:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">root@rpi3:~# rfkill
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ID TYPE DEVICE SOFT HARD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0 wlan phy0 blocked unblocked
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1 bluetooth hci0 blocked unblocked
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The WiFi adapter was indeed back to the blocked state. Why? As you might imagine, running the Raspberry Pi in a headless state and with a WiFi connection &lt;em>surely&lt;/em> has to be a well-anticipated scenario, which explains why logging in as root has, of all things, a check for the WiFi state and a pointer to configure it. The WiFi should work without extra effort.&lt;/p>
&lt;h1 id="initial-research">Initial research&lt;/h1>
&lt;p>I don&amp;rsquo;t remember how exactly I came across this, but I ended up noticing the following files:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">jmmv@rpi3:~# fd rfkill /lib/systemd/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/lib/systemd/system/systemd-rfkill.service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/lib/systemd/system/systemd-rfkill.socket
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/lib/systemd/systemd-rfkill
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As it turns out, there is a systemd service to manage the rfkill state. Looking at its manual page (while shocked that one even existed):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">SYSTEMD-RFKILL.SERVICE(8) systemd-rfkill.service SYSTEMD-RFKILL.SERVICE(8)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> systemd-rfkill.service, systemd-rfkill.socket, systemd-rfkill – Load
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> and save the RF kill switch state at boot and change
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>systemd-rfkill&lt;/code> is a shutdown service that saves the blocked/unblocked state of rfkill and restores it at system startup time. It seems that this whole rfkill thing was well-thought after all. But this finding meant that rfkill should have remained unblocked after the reboot. And it didn&amp;rsquo;t. So &lt;em>this&lt;/em> is the question that had to be answered.&lt;/p>
&lt;h1 id="trying-to-find-an-answer-online">Trying to find an answer online&lt;/h1>
&lt;p>Searching online for a solution, using obvious queries like &lt;code>raspberry pi enable wifi boot rfkill&lt;/code>, resulted in me finding the following &amp;ldquo;solutions&amp;rdquo;:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Disable rfkill via a kernel command line setting and ask systemd to not restore state.&lt;/strong> Sure, that&amp;rsquo;ll work. But it&amp;rsquo;s&amp;hellip; drastic? Why would I have to do that when the system seems to be prepared to &amp;ldquo;just work&amp;rdquo; after a &lt;code>raspi-config&lt;/code>? Why should I disable a core feature that&amp;rsquo;s installed by default to make headless WiFi work? This will &amp;ldquo;break&amp;rdquo; whatever thing is using rfkill during the boot process to disable the network, and it will possibly break any &amp;ldquo;airplane mode&amp;rdquo;-like toggles that might exist in the UI. Not that I care about the UI, but still.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Add a systemd startup script to force rfkill to the unblocked state.&lt;/strong> Another thing that will work. But why should I do that? This will just paper over whatever exists in the boot process that disables the network after &lt;code>systemd-rfkill&lt;/code> has done its thing. It does not address the root cause.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create a WiFi configuration file in the boot partition.&lt;/strong> OK, maybe this one makes sense. Maybe if the system knows to configure the WiFi early enough during the boot process, it knows that the WiFi must remain enabled later on. A bit of research proved this solution wrong too though. I stumbled upon &lt;code>/lib/systemd/system/raspberrypi-net-mods.service&lt;/code>, which is the boot code that handles this feature, and it reads like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Unit]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Description&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">Copy user wpa_supplicant.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">ConditionPathExists&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/boot/wpa_supplicant.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Before&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">dhcpcd.service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">After&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">systemd-rfkill.service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Service]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">oneshot&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">RemainAfterExit&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">yes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">ExecStart&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/bin/mv /boot/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">ExecStartPost&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/bin/chmod 600 /etc/wpa_supplicant/wpa_supplicant.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">ExecStartPost&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/usr/sbin/rfkill unblock wifi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Install]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">WantedBy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">multi-user.target&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This snippet runs when &lt;code>/boot/wpa_supplicant.conf&lt;/code> is present (&lt;code>ConditionPathExists&lt;/code>), but all it does is move that file to the right place and unblocks the WiFi using the &lt;code>rfkill unblock wifi&lt;/code> command&amp;mdash;the same one that &lt;code>raspi-config&lt;/code> invokes and the command I had already tried to run by hand. The key insight is that because this unit moves the file, &lt;em>it only runs once&lt;/em>. That makes sense if you look at this unit as a first-time setup action for headless installations, but it had no chance of fixing my problem.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>So no. None of these &amp;ldquo;solutions&amp;rdquo; address the root cause. They are hacks and workarounds that may achieve the desired outcome, but they don&amp;rsquo;t explain &lt;em>why&lt;/em> the &lt;code>systemd-rfkill&lt;/code> automation, which is built into the system and should restore the changes made by &lt;code>raspbi-config&lt;/code>, isn&amp;rsquo;t working as designed.&lt;/p>
&lt;h1 id="proper-troubleshooting">Proper troubleshooting&lt;/h1>
&lt;p>Given that these answers were all misguided, I had to do some extra work to reach the true solution.&lt;/p>
&lt;p>The first question to answer was: did the &lt;code>systemd-rfkill&lt;/code> service even work fine? It took me a bit of fiddling to discover how to enable debug logging in systemd, but once I did that, I could confirm that this service was indeed working fine. The service correctly persisted the disabled state to a file and restored it on the next boot.&lt;/p>
&lt;p>This meant that there had to be &lt;em>something else&lt;/em> in the boot process that disabled the WiFi after &lt;code>systemd-rfkill&lt;/code> had run. The question was finding what that was, and having this knowledge meant I could better scope my next searches a bit more accurately.&lt;/p>
&lt;p>My next thought took me to NetworkManager. I have had my previous fights with this service in the past, so I thought that maybe this was installed on the system to handle the state of network connections in the UI. I do have the standard Raspbian desktop installed but I had no easy way to log into it&amp;hellip; so verifying this wasn&amp;rsquo;t exactly trivial. (In retrospect, I think that if I had gone through the hassle of logging into the UI and clicked on whichever button exists to enable the WiFi, my problems would have been resolved immediately. But then I wouldn&amp;rsquo;t have gained all of this knowledge.)&lt;/p>
&lt;p>Fear not though. NetworkManager has a CLI to manipulate its state so I could use that. Except for the fact that NetworkManager was nowhere to be seen on the system. Dead end.&lt;/p>
&lt;p>My next step was to look into the standard Debian configuration under &lt;code>/etc/network/&lt;/code>, but I couldn&amp;rsquo;t find anything obvious either. Actually, I couldn&amp;rsquo;t find &lt;em>anything&lt;/em> because the interfaces aren&amp;rsquo;t apparently configured there at all anymore. Yay for modern Linux?&lt;/p>
&lt;p>It is then that I reverted to searching online (I don&amp;rsquo;t remember the right search terms though) and I ended in yet another forum that talked about connman. And bingo! I did have connman installed and it sounded like the same NetworkMannager thing I had seen before. Running a &lt;code>connman enable wifi&lt;/code> was all it took to mark the WiFi link enabled and get the right fix in place. And by &amp;ldquo;right fix&amp;rdquo; I mean a fix that works in conjuction with the way the whole system is expected to run, not in spite of it.&lt;/p>
&lt;p>In other words: it was connman that was kicking in after the &lt;code>systemd-rfkill&lt;/code> startup script, and it was connman the one that was re-disabling the WiFi because connman thought that it had to be disabled. Now, as to why I have connman installed and whether it should be there or not&amp;hellip; I do not know. This Raspbian installation has been in place for years now and has been upgraded a few times, so my guess is that &lt;code>connman&lt;/code> is there to support the lightweight Raspbian desktop, and at some point in the past I logged into it and clicked on the button to disable the WiFi.&lt;/p>
&lt;h1 id="the-ai-future">The AI future&lt;/h1>
&lt;p>The Internet being polluted by wrong answers obviously impacts everyone, from beginner engineers and sysadmins that will not know/care enough to find the true root causes behind problems, to our new AI overlords which will outright lie to us.&lt;/p>
&lt;p>Or will they? Let&amp;rsquo;s try to get an answer from Bing&amp;rsquo;s AI-powered new search engine:&lt;/p>
&lt;blockquote>
&lt;p>Q: I enabled the WiFi on the Raspberry Pi with raspi-config but, after a reboot, rfkill reports that the WiFi is blocked. How do I fix it?&lt;/p>
&lt;p>A: You can try running the command sudo rfkill unblock wifi to unblock the wifi. If that doesn’t work, you can try adding the command rfkill unblock all to /etc/rc.local file before the line that says exit 0. This will ensure that the command is run at boot time and should unblock the wifi.&lt;/p>
&lt;/blockquote>
&lt;p>Yeah, no. While that might have the right effect as described earlier, it&amp;rsquo;s not the correct answer. But I &lt;em>know&lt;/em> the answer, so I can cheat and prompt the question towards what I think the problem really is:&lt;/p>
&lt;blockquote>
&lt;p>Q: But why doesn&amp;rsquo;t the rfkill unblocked state persist after the reboot? The systemd unit says it should.&lt;/p>
&lt;p>A: The reason why the rfkill unblocked state doesn&amp;rsquo;t persist after reboot is because the Network Manager is blocking it back¹. You can try creating a service to unblock the wifi devices at boot time. Here&amp;rsquo;s how you can do it:
&amp;hellip; snippet to modify systemd &amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>Oh wow, I&amp;rsquo;m actually surprised. This answer was pretty close!&lt;/p>
&lt;blockquote>
&lt;p>Q: But I do not have NetworkManager installed. What else could it be?&lt;/p>
&lt;p>A: If you don&amp;rsquo;t have NetworkManager installed, then it could be that the wifi is being blocked by the kernel. You can try adding the following line to &lt;code>/etc/modprobe.d/raspi-blacklist.conf&lt;/code> file:
&amp;hellip; more steps &amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>Back to the wrong heavy-handed solution of fully disabling rfkill. Bing&amp;hellip; you were soooo close, but yet so far. Finally:&lt;/p>
&lt;blockquote>
&lt;p>Q: Could it be connman?&lt;/p>
&lt;p>A: Yes, it could be connman. You can try disabling connman by running the following command:
&amp;hellip; steps to fully disable &amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>Of course it could obviously be connman&amp;rsquo;s fault, but the answer is wrong. I might want to have connman installed and the system ought to work with it (it was there by default after all). Uninstalling random system components isn&amp;rsquo;t usually the answer.&lt;/p>
&lt;hr>
&lt;p>Is there any moral to this story? Sure there is, the usual one: in order to solve a problem, you must always understand what the root cause really is. This typically requires understanding how the system works top-to-bottom and reasoning about what the behavior should be end-to-end. Only then you can come up with the right fix. Asking &amp;ldquo;why&amp;rdquo; several times in a row tends to work well in discovering what you might be missing. Oh, and this all applies to software bugs as well: the next time you find yourself adding a nullness check to fix a crash&amp;hellip; keep digging.&lt;/p>
&lt;p>It would be pretty funny if &lt;em>my&lt;/em> root-causing in this post was &lt;em>also&lt;/em> wrong. If that&amp;rsquo;s the case, don&amp;rsquo;t hesitate to say so!&lt;/p></description></item><item><title>A failed experiment with Rust static dispatch</title><link>https://jmmv.dev/2023/08/rust-static-dispatch-failed-experiment.html</link><pubDate>Sun, 06 Aug 2023 05:30:00 -0700</pubDate><guid>https://jmmv.dev/2023/08/rust-static-dispatch-failed-experiment.html</guid><description>&lt;p>Initial versions of the EndBASIC Service, and therefore initial versions of EndTRACKER, used dynamic dispatch to support abstract definitions of system services such as the database they talk to and the clock they use. This looked like a bunch of &lt;code>Arc&amp;lt;dyn Foo&amp;gt;&lt;/code> objects passed around and was done to &lt;a href="/2023/07/unit-testing-a-web-service.html">support extremely fast unit testing&lt;/a>.&lt;/p>
&lt;p>When I generalized the core logic of these services into the &lt;a href="/2023/03/introducing-iii-iv.html">III-IV framework&lt;/a>, I decided to experiment with a switch to static dispatch. The rationale was that using static dispatch better aligns with the design of well-regarded crates in the Rust ecosystem, and also because I wanted to avoid unnecessary runtime costs in the foundational pieces of my web services.&lt;/p>
&lt;p>Let me tell you that this decision was a huge mistake and that the experiment has utterly failed. Using static dispatch has been a constant source of frustration due to the difficulty in passing types around and reasoning about trait bounds. The situation had gotten so bad that I dreaded adding new functionality to my services whenever a change to a statically-typed &lt;code>struct&lt;/code> was needed, because that meant adding yet another type parameter and plumbing it through tens of source files.&lt;/p>
&lt;p>In lieu of the difficulties, which eventually turned into blockers to implementing new features, I made the choice of going back to dynamic dispatch. The goal was to gain ergonomics at the expense of a supposedly-negligible runtime cost. Let me tell you about the problems I faced, the refactoring journey, and some measurements I gathered after the rewrite.&lt;/p>
&lt;h1 id="initial-impressions">Initial impressions&lt;/h1>
&lt;p>The adoption of static dispatch in III-IV started pretty simple and it did the job well. Even though it took me days of fighting with the Rust type system, I eventually got it to work. The production binary was statically bound to the PostgreSQL database backend and the unit tests were bound to SQLite, all while respecting the type safety offered by &lt;code>sqlx&lt;/code> and without having virtual function calls anywhere.&lt;/p>
&lt;p>Let&amp;rsquo;s take a peek at what the &lt;a href="https://github.com/jmmv/iii-iv/tree/cba6775e489d2e015a5919b086278ee486589ee5/example/src">sample key/value store&lt;/a> core pieces looked like by going through the architectural layers described in &lt;a href="/2023/06/mvc-non-ui-apps.html">MVC but for non-UI apps&lt;/a>.&lt;/p>
&lt;p>At the bottom layer, the database, there was a transaction trait to supply the operations required by the business logic layer:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#[async_trait]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">BareTx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">get_keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">DbResult&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BTreeSet&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... more database operations ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This trait was separately implemented for PostgreSQL and SQLite by providing separate &lt;code>PostgresTx&lt;/code> and &lt;code>SqliteTx&lt;/code> specific types, and both the specific transaction type and the database backing it were chosen at build time where the database connection was established.&lt;/p>
&lt;p>Moving up to the business-logic layer, the &lt;code>Driver&lt;/code> was parameterized on the domain-specific &lt;code>Tx&lt;/code> so that it could have access to those operations (and only those):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#[derive(Clone)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Driver&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">Tx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>: &lt;span class="nc">D&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Driver&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">Tx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">get_keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">DriverResult&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BTreeSet&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get_keys&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commit&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// ... more impl blocks for different driver operations ...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note how, in the above, the &lt;code>db.begin()&lt;/code> method call returns an instance of a &lt;code>Tx&lt;/code> right away, ensuring that callers always issue database operations as part of a transaction. This had been a deliberate decision from the very beginning to prevent issuing standalone database calls that could compromise the correctness of the data, because there was no scenario in which a transaction was &lt;em>not&lt;/em> necessary.&lt;/p>
&lt;p>Finally, the upper REST layer took a &lt;code>Driver&lt;/code> as the engine to run the API requests through and, as a consequence, the REST handlers all had to be parameterized like the underlying &lt;code>Driver&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">handler&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">driver&lt;/span>&lt;span class="p">)&lt;/span>: &lt;span class="nc">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Driver&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">IntoResponse&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RestError&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">Tx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">driver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get_keys&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Json&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is where things started to look finicky because the REST layer now had to spell out the internals of the &lt;code>Driver&lt;/code>&amp;hellip; but it didn&amp;rsquo;t look so bad at the beginning. Combining this, the &lt;a href="https://en.wikipedia.org/wiki/Sunk_cost">sunken cost fallacy&lt;/a>&amp;mdash;it had taken me days to devise how to make the above work&amp;mdash;and the idea of avoiding an unnecessary abstraction at runtime made me plough ahead with this implementation.&lt;/p>
&lt;h1 id="the-problems">The problems&lt;/h1>
&lt;p>It soon wasn&amp;rsquo;t all roses. What you could see above was an extremely simplified view of how things ended looking like in a real service with more than just the database dependency. Without further ado, let me present to you the monstrosity that I ended up with in EndTRACKER. Here is the &lt;code>Driver&lt;/code> definition for the data plane microservice:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#[derive(Derivative)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[derivative(Clone(bound = &lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="cp">))]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Driver&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>: &lt;span class="nc">AbusePolicy&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>: &lt;span class="nc">Clock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">DataTx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">From&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">SqlxTx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">G&lt;/span>: &lt;span class="nc">GeoLocator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">ClientTx&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">BatchTask&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">From&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="no">QD&lt;/span>::&lt;span class="n">SqlxTx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>: &lt;span class="nc">D&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">clock&lt;/span>: &lt;span class="nc">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... more fields ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But that&amp;rsquo;s not all, oh no. This chunk also infected the REST layer, which in theory should not care about the specifics of the driver layer. Here, look at this &lt;code>RestState&lt;/code> type, which is a wrapper over the data that the REST API handlers need to operate:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#[derive(Derivative)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[derivative(Clone(bound = &lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="cp">))]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">RestState&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>: &lt;span class="nc">AbusePolicy&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>: &lt;span class="nc">Clock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">DataTx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">From&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">SqlxTx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">G&lt;/span>: &lt;span class="nc">GeoLocator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">ClientTx&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">BatchTask&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">From&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="no">QD&lt;/span>::&lt;span class="n">SqlxTx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">driver&lt;/span>: &lt;span class="nc">Driver&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... more fields ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are several problems with the above:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>It is Super Ugly (TM). There is no other way to put it. As much as I like Rust, things like this are painful and scary&amp;mdash;but not as painful as deranged modern C++.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>These &lt;code>where&lt;/code> declarations where repeated 44 times in 37 different files (that is, almost &lt;em>all&lt;/em> files). This polluted source files with details they don&amp;rsquo;t care about. Any small change to the &lt;code>Driver&lt;/code> required updating all these repeated chunks in sync. I&amp;rsquo;m not even sure why Rust requires the duplication and why it&amp;rsquo;s sometimes OK for the trait bounds to diverge among the various &lt;code>impl&lt;/code> blocks, but the duplication is necessary.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It poisoned the REST layer. As mentioned above, the REST layer wants to pass around a &lt;code>RestState&lt;/code> object that contains the &lt;code>Driver&lt;/code> and other data fields that are only necessary at that level. Yet&amp;hellip; to achieve this the &lt;code>REST&lt;/code> layer had to replicate all of the internal details of the &lt;code>Driver&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I had to use &lt;code>derivative&lt;/code> to remove unnecessary (?) clone trait bounds. The need to have a cloneable &lt;code>Driver&lt;/code> and &lt;code>RestState&lt;/code> comes from how the &lt;code>axum&lt;/code> HTTP framework dispatches route execution, and figuring this out took quite a while. Furthermore&amp;hellip; the way this &amp;ldquo;works&amp;rdquo; is still obscure to me.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It became impossible to compose transaction types. This is a problem with my design and not an inherent issue with static dispatch, but the use of static dispatch guided me towards this design. Note that, in the above, there are two database instances: &lt;code>D&lt;/code> and &lt;code>QD&lt;/code>, each with a different associated &lt;code>Tx&lt;/code> type. While I wrote some contortions to support sharing the same underlying database connection between them, I never got to replicating those to also share an open transaction. The complexity was already at unmanageable levels to push this design any further. But I needed a solution to this problem.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>All in all, the use of static dispatch was slowing me down in building new features as these constructs made me dread modifying certain aspects of the code. And what&amp;rsquo;s worse: certain initial design choices started showing up as true inefficiencies in production like the inability to issue standalone database calls outside of a transaction. The original goal of minimizing runtime costs was made significantly &lt;em>worse&lt;/em>. Fixing these issues required a redesign so it was time for a change.&lt;/p>
&lt;h1 id="switching-to-dynamic-dispatch">Switching to dynamic dispatch&lt;/h1>
&lt;p>The goal with the redesign was to drop all static type parameters and replace them with &lt;code>dyn&lt;/code> trait objects. In this way, the &lt;code>Driver&lt;/code> would encapsulate these details in just one place and all other code would not have to care about the specific field definitions within this type.&lt;/p>
&lt;p>It is easier said than done, but the results speak for themselves. Here is how the new &lt;code>Driver&lt;/code> for the &lt;a href="https://github.com/jmmv/iii-iv/tree/ba7aaf151fab3ff7aa1defde2454eab1550bda32/example/src">simplified key/value store&lt;/a> looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#[derive(Clone)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Driver&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>: &lt;span class="nc">Arc&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Driver&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">get_keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">DriverResult&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BTreeSet&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>::&lt;span class="n">get_keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="p">()).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commit&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And, similarly, this is how one of the REST API handlers looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">driver&lt;/span>&lt;span class="p">)&lt;/span>: &lt;span class="nc">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Driver&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">IntoResponse&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RestError&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">driver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get_keys&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Json&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s it. This is the way to declare the &lt;code>Driver&lt;/code> over a generic database, the way to write a business-logic operation on top of this database, and the way to write a REST API handler that calls into this operation. The &lt;code>Arc&lt;/code>s and the &lt;code>Send + Sync&lt;/code> annotations are somewhat ugly but they are nowhere as ugly as the previous disaster. In this version, there is no noise.&lt;/p>
&lt;p>What&amp;rsquo;s more: as part of the redesign, I could throw away the &amp;ldquo;everything behind a transaction&amp;rdquo; idea and allow the caller to choose the best execution mode for its needs. Note the &lt;code>tx.ex()&lt;/code> call above, which obtains an &amp;ldquo;executor&amp;rdquo; from the database and that can be used to talk to the database. This specific call obtains an executor from a transaction, but the same &lt;code>db.ex()&lt;/code> method also exists to obtain a standalone executor. Describing how this works is out of the scope of this post though.&lt;/p>
&lt;h1 id="show-me-the-metrics">Show me the metrics&lt;/h1>
&lt;p>The pervasiveness of static dispatch in the Rust ecosystem helps leverage &amp;ldquo;zero-cost abstractions&amp;rdquo;, but it &lt;em>does&lt;/em> come with a cost. Namely: programming time cost. It is great to have a choice, and it is great that many general-purpose Rust crates use static dispatch so that you don&amp;rsquo;t have to pay unnecessary taxes&amp;hellip; but it was not the right choice for me. I might have done things really wrong in my original design and these measurements may not be sustained for other projects, but let&amp;rsquo;s look at some numbers anyway.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Code size.&lt;/strong> This is how the refactoring looks like according to a &lt;code>git diff --stat&lt;/code>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Project&lt;/th>
&lt;th style="text-align:right">Files changed&lt;/th>
&lt;th style="text-align:right">Lines added&lt;/th>
&lt;th style="text-align:right">Lines deleted&lt;/th>
&lt;th style="text-align:right">Diff&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>iii-iv&lt;/td>
&lt;td style="text-align:right">32&lt;/td>
&lt;td style="text-align:right">1691&lt;/td>
&lt;td style="text-align:right">2115&lt;/td>
&lt;td style="text-align:right">-242 (-3%)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>endtracker&lt;/td>
&lt;td style="text-align:right">74&lt;/td>
&lt;td style="text-align:right">3751&lt;/td>
&lt;td style="text-align:right">4963&lt;/td>
&lt;td style="text-align:right">-1212 (-11%)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The changes to the III-IV framework are small because the use of static typing within the framework itself wasn&amp;rsquo;t pervasive: after all, the framework was just exposing the building blocks and not using them on its own. But the 11% code reduction in EndTRACKER alone is &lt;em>very&lt;/em> significant.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Binary size.&lt;/strong> Looking at the sizes of the main EndTRACKER binary and the supporting unit testing binaries, both under the &lt;code>release&lt;/code> and &lt;code>debug&lt;/code> configurations, we observe:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Binary&lt;/th>
&lt;th>Mode&lt;/th>
&lt;th style="text-align:right">Before (MBs)&lt;/th>
&lt;th style="text-align:right">After (MBs)&lt;/th>
&lt;th style="text-align:right">Diff&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>main binary&lt;/strong>&lt;/td>
&lt;td>release&lt;/td>
&lt;td style="text-align:right">23.30&lt;/td>
&lt;td style="text-align:right">26.47&lt;/td>
&lt;td style="text-align:right">+3.17&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>common tests&lt;/td>
&lt;td>release&lt;/td>
&lt;td style="text-align:right">16.75&lt;/td>
&lt;td style="text-align:right">17.11&lt;/td>
&lt;td style="text-align:right">+0.36&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>batch tests&lt;/td>
&lt;td>release&lt;/td>
&lt;td style="text-align:right">25.45&lt;/td>
&lt;td style="text-align:right">24.96&lt;/td>
&lt;td style="text-align:right">-0.49&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>control tests&lt;/td>
&lt;td>release&lt;/td>
&lt;td style="text-align:right">19.10&lt;/td>
&lt;td style="text-align:right">18.77&lt;/td>
&lt;td style="text-align:right">-0.33&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>data tests&lt;/td>
&lt;td>release&lt;/td>
&lt;td style="text-align:right">20.90&lt;/td>
&lt;td style="text-align:right">20.89&lt;/td>
&lt;td style="text-align:right">-0.01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>main binary&lt;/strong>&lt;/td>
&lt;td>debug&lt;/td>
&lt;td style="text-align:right">261.14&lt;/td>
&lt;td style="text-align:right">280.62&lt;/td>
&lt;td style="text-align:right">+19.48&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>common tests&lt;/td>
&lt;td>debug&lt;/td>
&lt;td style="text-align:right">169.27&lt;/td>
&lt;td style="text-align:right">171.62&lt;/td>
&lt;td style="text-align:right">+2.35&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>batch tests&lt;/td>
&lt;td>debug&lt;/td>
&lt;td style="text-align:right">239.72&lt;/td>
&lt;td style="text-align:right">238.07&lt;/td>
&lt;td style="text-align:right">-1.65&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>control tests&lt;/td>
&lt;td>debug&lt;/td>
&lt;td style="text-align:right">192.06&lt;/td>
&lt;td style="text-align:right">192.21&lt;/td>
&lt;td style="text-align:right">+0.15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>data tests&lt;/td>
&lt;td>debug&lt;/td>
&lt;td style="text-align:right">208.40&lt;/td>
&lt;td style="text-align:right">207.93&lt;/td>
&lt;td style="text-align:right">-0.47&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>I was expecting a slight increase in binary size with the move to dynamic dispatch because the compiler and linker don&amp;rsquo;t have as many opportunities for inlining and optimizing code. While the results seem to be all over the place, they seem to agree with my expectations: the binary sizes are larger when using dynamic dispatch. Some test binaries are smaller indeed, but this is most likely due to how the tests changed and not necessarily because of the switch from static to dynamic dispatch.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Compilation time.&lt;/strong> I measured an incremental build after modifying a core type in the EndTRACKER codebase to change its internal layout, starting from a &lt;code>cargo clean&lt;/code> slate and using the mold linker. With static dispatch, the incremental build times of the binary and tests were somewhere between 12 to 13 seconds, and with dynamic dispatch they dropped to just below 12 seconds. The difference is minimal, and the codebase isn&amp;rsquo;t large enough to obtain a good signal out of this metric.&lt;/p>
&lt;p>To be honest, I was hoping for a much larger improvement in incremental compilation times. My reasoning was that dealing with the type constraints that existed before must have been expensive, so removing them should reduce compiler execution times. My measurements did not prove this true, unfortunately. Or if they did, the improvements are negligible in this small codebase.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Refactoring effort.&lt;/strong> I spent a couple of days figuring out what the best abstraction was and then I spent many hours during a recent long flight doing all of the mostly-mechanical changes to the EndTRACKER codebase. As usual, updating the tests was the most painful part of all&amp;mdash;but also the one that gave me confidence to deploy a new build to production with ease.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Runtime cost.&lt;/strong> This one&amp;hellip; well, I haven&amp;rsquo;t been able to measure it. None of my web services are CPU-bound so the cost of the virtual function dispatch is negligible.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>To summarize: not much seems to have changed with this rewrite. Binaries are slightly larger indeed, but not by a lot. However&amp;hellip; the benefits in productivity are massive already.&lt;/p>
&lt;h1 id="productivity-benefits">Productivity benefits&lt;/h1>
&lt;p>One of the benefits of this rewrite is that I&amp;rsquo;ve been able to finally resolve a long-standing deficiency in test coverage, which I briefly mentioned it in the conclusion of the &lt;a href="/2023/07/unit-testing-a-web-service.html">Unit testing a web service&lt;/a> post. This deficiency was that the test suites for the driver and the REST layer ran against SQLite unconditionally and I did not have a way to run them against a real PostgreSQL instance. Well, I have an answer now. All it took after the switch to dynamic dispatch was to introduce a helper function like this one:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">connect_to_test_db&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Arc&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>: &lt;span class="nc">Arc&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">get_optional_var&lt;/span>::&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;TEST&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;DB&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;TEST_DB must be a string&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">as_deref&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;postgres&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Arc&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">postgres&lt;/span>::&lt;span class="n">testutils&lt;/span>::&lt;span class="n">setup&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sqlite&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Arc&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sqlite&lt;/span>::&lt;span class="n">testutils&lt;/span>::&lt;span class="n">setup&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">panic!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Invalid TEST_DB &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">super&lt;/span>::&lt;span class="n">init_schema&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="p">()).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip; use it to connect to the database in all tests, and configure a GitHub Actions job with &lt;code>TEST_DB=postgres&lt;/code> to run the test suites against the production database.&lt;/p>
&lt;p>Another benefit is that I have finally unstuck something I&amp;rsquo;ve been working on-and-off for months and that I had been procrastinating on due to its difficulty. That is: I&amp;rsquo;ve been trying to generalize the account creation and session management pieces of the EndBASIC Service into III-IV so that I can reuse those in EndTRACKER. This was made &lt;em>really&lt;/em> difficult due to static dispatch, but now it&amp;rsquo;s a piece of cake. Which means I should be able to add user accounts in EndTRACKER really soon now and maybe finally open it up to the public.&lt;/p>
&lt;p>All in all, I&amp;rsquo;m satisfied with the change. The code is much simpler now and I do not foresee the small costs at runtime nor in binary size to be problematic &lt;em>at all&lt;/em> for my specific use cases.&lt;/p></description></item><item><title>Unit-testing a web service in Rust</title><link>https://jmmv.dev/2023/07/unit-testing-a-web-service.html</link><pubDate>Fri, 07 Jul 2023 06:30:00 -0700</pubDate><guid>https://jmmv.dev/2023/07/unit-testing-a-web-service.html</guid><description>&lt;p>One of the things I&amp;rsquo;m most proud of the Rust web services I have written is how I can run their tests with zero setup and within milliseconds, all while making me confident that &lt;code>main&lt;/code> can always be shipped to production. I&amp;rsquo;ve previously touched upon how this all works in other articles, but it&amp;rsquo;s time for a deep dive.&lt;/p>
&lt;p>To make things specific, I&amp;rsquo;ll be describing the testing infrastructure of &lt;a href="/software/endtracker.html">EndTRACKER&lt;/a>, the &lt;a href="/2021/07/endbasic-0.7.html">EndBASIC Service&lt;/a>, and the &lt;a href="https://github.com/jmmv/iii-iv/tree/eec320cd02149f223d8a9c7f8d697845ec2114d8/example/">sample key/value store app of III-IV&lt;/a>. These services are all structured in three separate layers, and I&amp;rsquo;ll be covering the testing strategy for each of them.&lt;/p>
&lt;p>But before getting into how each layer is exercised on its way to production, let&amp;rsquo;s talk about external dependencies&amp;hellip; because dependencies are the root of all evil when it comes to the usual poor testing strategies you may encounter.&lt;/p>
&lt;h1 id="interacting-with-dependencies">Interacting with dependencies&lt;/h1>
&lt;p>Pretty much any web service relies on other services, which I&amp;rsquo;ll call &lt;em>dependencies&lt;/em>. These include databases, queuing systems, distributed storage, remote logging&amp;hellip; you name it. The list of dependencies may be long, and their direct use in tests is typically where the friction in testing comes from: most service implementations are unable to stub their dependencies out, so the developers end up having to run the real dependencies to execute any test.&lt;/p>
&lt;p>If you have worked on the development of any modern web service, particularly in a corporate environment, you&amp;rsquo;ve witnessed the issues that running real dependencies causes:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>You have had to carefully set up your development environment with the right versions of tools and services, wasting hours (or days!) of productive time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You have had to troubleshoot test failures caused by problems in your development environment. Any small deviation from the blessed configuration can lead to mysterious problems and you are on your own to figure them out. &amp;ldquo;Works on my machine!&amp;rdquo; is a common excuse to not get involved in solving a coworker&amp;rsquo;s issue.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You have had to rely on overly powerful machines to run the tests because all the dependencies are huge and consume large amounts of RAM and CPU. After all, each dependency assumes it will be running on its own server(s) and is likely written in a language different from all other dependencies, thus requiring its own heavy runtime. &lt;a href="/2023/06/fast-machines-slow-machines.html">Talk about waste, huh.&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You have had to patiently wait for many minutes every time you run tests while Docker downloads multi-GB images, starts the dependencies, and waits for them to be ready to serve requests after (re)starting from scratch.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You have had to suffer from flaky tests because the connections to the dependent services sometimes fail or the state of the dependent services has somehow been polluted by other tests.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You have had to witness entire teams being spun up and funded to deal with slow CI runs and flaky tests, all while spending countless machines to support these resource-hungry tests.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>These issues are all avoidable with proper &lt;em>upfront care&lt;/em>. I&amp;rsquo;m convinced that most developers want to do the right thing, but: one, many times they don&amp;rsquo;t &lt;em>know&lt;/em> what the right thing &lt;em>even is&lt;/em>; and, two, the pressure to &amp;ldquo;launch and iterate&amp;rdquo; often comes with an empty promise that there will be time &amp;ldquo;later&amp;rdquo; to address past cut corners. And you well know that automated tests are often ignored until they become truly necessary&amp;mdash;that is, when the product is crashing left and right and customers are threatening to leave&amp;mdash;at which point a solid testing infrastructure is non-existent and cannot be easily retrofit.&lt;/p>
&lt;p>A key foundation to avoid these problems is to architect the system in a way that puts all external dependencies behind interfaces from the ground up. These interfaces then let you plug in different implementations of the dependencies such that most tests can skip using the real dependencies. In other words, the key foundation is &lt;strong>Dependency Injection (DI)&lt;/strong>. And no, I&amp;rsquo;m not talking about fancy DI frameworks: all I&amp;rsquo;m talking about is the very basics of defining interfaces or traits and passing instances of those to constructors and functions.&lt;/p>
&lt;p>Now, of course, there is a balance between A) fast and deterministic tests that rely on fake services and B) slow and accurate tests that rely on real services: the more you stub out real dependencies, the less accurate tests become. The idea, though, is to have the &lt;em>choice&lt;/em> to pick one or the other on a test by test basis depending on the scenario to validate. And to make that choice, the system architecture must be in place to support it from the very beginning. With that in place, you can come up with the best testing strategy for each scenario, and you can choose how much of test collateral has to run every time you run tests and how much of it can be postponed to PR merge time or nightly runs.&lt;/p>
&lt;p>In my services, my goal is to make the vast majority of tests run with a simple &lt;code>cargo test&lt;/code> after a &lt;code>git clone&lt;/code>. No configuration necessary. A small subset of tests &lt;em>do&lt;/em> talk to the real dependencies and require configuration but, while these can run locally, I rarely need to do so because they are automated to run in CI at PR merge time.&lt;/p>
&lt;p>Let&amp;rsquo;s dive into the different layers of the architecture to see how these ideas play out. The layers are one for database access, one for business logic, and one for REST handling. You may want to read &lt;a href="/2023/03/introducing-iii-iv.html">&amp;ldquo;Introducing III-IV&amp;rdquo;&lt;/a> and &lt;a href="/2023/06/mvc-non-ui-apps.html">&amp;ldquo;MVC but for non-UI apps&amp;rdquo;&lt;/a> beforehand, both of which describe the general architecture of these services.&lt;/p>
&lt;h1 id="database-layer-testing">Database layer testing&lt;/h1>
&lt;p>My services use PostgreSQL in production. While setting up a local instance of this database is not difficult and it doesn&amp;rsquo;t consume any meaningful resources when idle, it&amp;rsquo;s still far from the zero setup experience I strive to achieve. So the first thing I had to do was hide the database queries behind an interface. The basic building blocks look like this and can be found in the &lt;a href="https://github.com/jmmv/iii-iv/blob/eec320cd02149f223d8a9c7f8d697845ec2114d8/core/src/db.rs">&lt;code>iii_iv_core::db&lt;/code>&lt;/a> module:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="sd">/// Abstraction over the database connection.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="cp">#[async_trait]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Type of the transaction wrapper type to generate.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">type&lt;/span> &lt;span class="nc">Tx&lt;/span>: &lt;span class="nc">BareTx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Begins a transaction.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">begin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">DbResult&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="bp">Self&lt;/span>::&lt;span class="n">Tx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="sd">/// Common operations for all transactions.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="cp">#[async_trait]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">BareTx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Commits the transaction.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">commit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">DbResult&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>Db&lt;/code> trait exposes a generic mechanism to open a transaction against a database via its &lt;code>begin&lt;/code> method. The returned transaction type is parameterized on &lt;code>Db::Tx&lt;/code>, which has to be a subtrait of &lt;code>BareTx&lt;/code>. In turn, &lt;code>BareTx&lt;/code> represents the common operations one can do with a generic transaction but does not have any domain-specific knowledge.&lt;/p>
&lt;p>Each web service is responsible for supplying its own transaction trait that extends &lt;code>BareTx&lt;/code> with the operations that make sense in its domain. For example, here is how the sample key/value store service that ships with III-IV exposes the database operations needed to implement the key retrieval and storage operations. Note that the upstream code uses the name &lt;code>Tx&lt;/code> for this trait, but I&amp;rsquo;ve renamed it to &lt;code>KVStoreTx&lt;/code> in this text for clarity:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#[async_trait]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">KVStoreTx&lt;/span>: &lt;span class="nc">BareTx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Gets the current value of the given `key`.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">get_key&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">key&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">Key&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">DbResult&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Sets `key` to `entry`, which includes its value and version.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">set_key&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">key&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">Key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">entry&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">Entry&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">DbResult&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... and several more ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There is nothing in these interfaces that points to database-specific behavior, which is intentional. The only thing that client code is allowed to do is create a transaction and call the business-specific methods on it, without knowing what the transaction is talking to. Going back to the example above, this snippet would fetch the value of a key from the key/value store:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get_key&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commit&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With the service-specific transaction type in place (&lt;code>KVStoreTx&lt;/code>), the service is also responsible for supplying separate implementations of it for all databases the service wishes to support. As mentioned earlier, this means providing a variant for PostgreSQL for production usage. But what about tests? Tests could use their own database-less implementation&amp;mdash;for this trivial example, a &lt;code>HashMap&lt;/code> would suffice&amp;mdash;but going this route becomes tricky once you want to reproduce more realistic OLTP database behavior, especially when concurrent operations take place. The other obvious alternative is to use SQLite: a real database that requires zero configuration, which fits the perfect bill for unit tests.&lt;/p>
&lt;p>As a result, I end up with the following types in the system:&lt;/p>
&lt;ul>
&lt;li>A generic &lt;code>PostgresDb&lt;/code> (provided by &lt;a href="https://github.com/jmmv/iii-iv/tree/eec320cd02149f223d8a9c7f8d697845ec2114d8/postgres/">&lt;code>iii_iv_postgres&lt;/code>&lt;/a>) and a service-specific &lt;code>PostgresKVStoreTx&lt;/code> for production.&lt;/li>
&lt;li>A generic &lt;code>SqliteDb&lt;/code> (provided by &lt;a href="https://github.com/jmmv/iii-iv/tree/eec320cd02149f223d8a9c7f8d697845ec2114d8/sqlite/">&lt;code>iii_iv_sqlite&lt;/code>&lt;/a>) and service-specific &lt;code>SqliteKVStoreTx&lt;/code> for tests.&lt;/li>
&lt;/ul>
&lt;p>Implementing the same database queries against two different database systems is annoying indeed, but forcing myself to do this keeps me honest in maintaining true abstractions. However, it is critical that these implementations behave as similarly as possible and, to guarantee this, I write extensive unit tests in a separate &lt;code>db/tests.rs&lt;/code> file. These tests look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">test_simplified_get_after_set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">db&lt;/span>: &lt;span class="nc">D&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">KVStoreTx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Key&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;the-key&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_owned&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Entry&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;insert&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_owned&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Version&lt;/span>::&lt;span class="n">from_u32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">set_key&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">assert_eq!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get_key&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commit&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, each tests is parameterized on a &lt;code>D&lt;/code> type. The &lt;code>D&lt;/code> type is an implementation of the &lt;code>Db&lt;/code> trait presented earlier, whose only purpose is to yield new transactions of its inner &lt;code>D::Tx&lt;/code> type based on a pre-established connection. The &lt;code>D::Tx&lt;/code> type is mapped to the domain-specific &lt;code>KVStoreTx&lt;/code> type so that tests have access to the primitives to be tested. Notably, though, the tests have no way of knowing which database they are talking to.&lt;/p>
&lt;p>With these generic tests in place, the question is: how are they executed against the individual database implementations? The &lt;code>db/postgres.rs&lt;/code> and &lt;code>db/sqlite.rs&lt;/code> modules of each service define &lt;code>#[test]&lt;/code> entry points for each test. These entry points are thin wrappers for the common test code in &lt;code>db/tests.rs&lt;/code> and their sole purpose is to establish a connection to the database and then delegate to the test implementation. Basically, each wrapper looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="sd">/// This is the specialization of a test for SQLite.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="cp">#[tokio::test]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">test_simplified_get_after_set&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Create a connection to the SQLite in-memory database.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">iii_iv_sqlite&lt;/span>::&lt;span class="n">testutils&lt;/span>::&lt;span class="n">setup&lt;/span>::&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">SqliteKVStoreTX&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Delegate to the common test code.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">crate&lt;/span>::&lt;span class="n">db&lt;/span>::&lt;span class="n">tests&lt;/span>::&lt;span class="n">test_simplified_get_after_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="sd">/// This is the specialization of a test for PostgreSQL.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">///
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">/// Note how the test is marked `ignore`. We&amp;#39;ll see why that is later on.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="cp">#[tokio::test]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[ignore = &lt;/span>&lt;span class="s">&amp;#34;Requires environment configuration and is expensive&amp;#34;&lt;/span>&lt;span class="cp">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">test_simplified_get_after_set&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Create a connection to PostgreSQL using the configuration specified via
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// environment variables. The connection is set up to use a temporary
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// schema so that tests are isolated from each other and don&amp;#39;t leave garbage
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// behind.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">iii_iv_postgres&lt;/span>::&lt;span class="n">testutils&lt;/span>::&lt;span class="n">setup&lt;/span>::&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PostgresKVStoreTx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Delegate to the common test code.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">crate&lt;/span>::&lt;span class="n">db&lt;/span>::&lt;span class="n">tests&lt;/span>::&lt;span class="n">test_simplified_get_after_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For a long while, this is actually how the test wrappers looked like and&amp;hellip; they were written by hand. At some point, I grew tired of copy/pasting these snippets over and over again and invested a wee bit of time learning how to leverage macros to cut down the repetition. It wasn&amp;rsquo;t as difficult as I imagined. You can see how this works in practice in the sample key/value store &lt;a href="https://github.com/jmmv/iii-iv/blob/eec320cd02149f223d8a9c7f8d697845ec2114d8/example/src/db/tests.rs">tests&lt;/a> and their &lt;a href="https://github.com/jmmv/iii-iv/blob/eec320cd02149f223d8a9c7f8d697845ec2114d8/example/src/db/sqlite.rs#L150">instantiation for SQLite&lt;/a>.&lt;/p>
&lt;h1 id="driver-layer-testing">Driver layer testing&lt;/h1>
&lt;p>Let&amp;rsquo;s jump one level up and look at the testing approach for the driver layer.&lt;/p>
&lt;p>The driver layer of each service typically exposes a single &lt;code>Driver&lt;/code> type. The &lt;code>Driver&lt;/code> maintains the state of the application and provides entry points for all REST operations, usually with a 1:1 mapping between REST API and driver method.&lt;/p>
&lt;p>To instantiate a &lt;code>Driver&lt;/code>, all service dependencies are injected at creation time. Here is an example of how the &lt;code>Driver&lt;/code> constructor looks like for the EndTRACKER data plane service, which is more interesting to analyze than the driver for the sample key/value store:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">pub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">crate&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>: &lt;span class="nc">D&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">clock&lt;/span>: &lt;span class="nc">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">geolocator&lt;/span>: &lt;span class="nc">G&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">abuse_policy&lt;/span>: &lt;span class="nc">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">queue_client&lt;/span>: &lt;span class="nc">Client&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BatchTask&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">clock&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">geolocator&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">abuse_policy&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">queue_client&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>See? A trivial constructor that &lt;em>does no work&lt;/em>, as it shall be done. Neat&amp;hellip; but what are all these type parameters? These type parameters are what allow injecting the different implementations of each dependency into the service for testing purposes.&lt;/p>
&lt;p>Now, why are they are type parameters? Simply because I wanted to &lt;em>try&lt;/em> using static dispatch, and&amp;hellip; things have gotten unwieldy. All references to the &lt;code>Driver&lt;/code> type in &lt;code>impl&lt;/code> blocks look like this awful chunk:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Driver&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>: &lt;span class="nc">AbusePolicy&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>: &lt;span class="nc">Clock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">DataTx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">From&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">SqlxTx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">G&lt;/span>: &lt;span class="nc">GeoLocator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">ClientTx&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">BatchTask&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">From&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="no">QD&lt;/span>::&lt;span class="n">SqlxTx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If I had to write this monstrosity &lt;em>just once&lt;/em>, it could be tolerable. But because I split the implementation of the &lt;code>Driver&lt;/code> across different files to keep them short&amp;hellip; this chunk is repeated across many files and keeping them in sync is a humongous hassle. I&amp;rsquo;m&amp;hellip; not happy. Fear not though: the alternative is to use &lt;code>Arc&amp;lt;Mutex&amp;lt;T&amp;gt;&amp;gt;&lt;/code> everywhere with &lt;code>T&lt;/code> being a type alias over the trait, which keeps the noise down significantly. Mind you, I used to do this and I&amp;rsquo;m not sure the switch to static dispatch was worth it. But I digress&amp;hellip;&lt;/p>
&lt;p>Because all these types are parameterized, it means I can instantiate a &lt;code>Driver&lt;/code> and back it by different implementations of each dependency. For example:&lt;/p>
&lt;ul>
&lt;li>The &lt;code>db&lt;/code> can be backed by PostgreSQL in production and SQLite in tests as I have already covered in the database layer section.&lt;/li>
&lt;li>The &lt;code>clock&lt;/code> can be backed by a &lt;code>SystemClock&lt;/code> that returns the system time, and also by a &lt;code>MonotonicClock&lt;/code> that exposes fake (and deterministic!) time.&lt;/li>
&lt;li>The &lt;code>geolocator&lt;/code> can be backed by an &lt;code>AzureGeoLocator&lt;/code> that talks to Azure Maps, and also by a &lt;code>MockGeoLocator&lt;/code> that returns pre-configured results and errors.&lt;/li>
&lt;/ul>
&lt;p>&amp;hellip; and similarly for any other resource needed by the &lt;code>Driver&lt;/code>.&lt;/p>
&lt;p>This, once again, allows: writing super-fast non-flaky unit tests because they do not reach out to real resources; running the tests with zero configuration; and avoiding the need to spawn resource-hungry dependencies on the local machine.&lt;/p>
&lt;p>So what do tests in the driver layer actually test? These tests are mostly responsible for validating the business logic. They cover all happy paths but, critically, they &lt;em>also&lt;/em> cover all error paths I can think about&amp;mdash;something that&amp;rsquo;s made trivial by the use of fake dependencies. These tests do not cover any HTTP interactions though; for those, we have to move up one layer.&lt;/p>
&lt;h1 id="rest-layer-testing">REST layer testing&lt;/h1>
&lt;p>The REST layer is the one interfacing with the user of the web services via the network. This is the layer where requests are deserialized, validated, routed to the driver, and where responses or errors are serialized back to the user with the correct HTTP status codes.&lt;/p>
&lt;p>This layer is currently written using the &lt;code>axum&lt;/code> web framework, whose fundamental building block is the &lt;code>Router&lt;/code>. Each web service creates a new &lt;code>Router&lt;/code> and registers all API endpoints plus an instance of the &lt;code>Driver&lt;/code> that gets passed to the API handlers as a state parameter. Take a look at the &lt;a href="https://github.com/jmmv/iii-iv/blob/eec320cd02149f223d8a9c7f8d697845ec2114d8/example/src/rest/mod.rs#L37">sample key/value store router creation&lt;/a>.&lt;/p>
&lt;p>Because the &lt;code>Driver&lt;/code> is injected into the REST &lt;code>Router&lt;/code>, it can be parameterized with all the non-production dependencies as described earlier&amp;mdash;and it is. Now, the question is: what do the tests of the REST layer look like and what do they do?&lt;/p>
&lt;p>For these, I used to spawn a local instance of the HTTP server, listening on a random unused port, and then made the tests call HTTP endpoints over the loopback interface with the &lt;code>reqwest&lt;/code> crate. Once I moved to &lt;code>axum&lt;/code> from &lt;code>warp&lt;/code>, things improved. I could start relying on the one-shot testing feature exposed by this framework, which allows calling the router endpoints without going through the network. Not a revolutionary change, but a nice improvement for simplicity indeed.&lt;/p>
&lt;p>To test this layer, I apply the &lt;a href="/2020/12/builder-pattern-for-tests.html">builder pattern to define test scenarios&lt;/a>. With this idiom, I can capture the parameters to an API call and the expectations of what it should return in a declarative manner. Here is one example of a test for the &amp;ldquo;put key&amp;rdquo; operation of the sample key/value store:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">route&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="p">(&lt;/span>&lt;span class="n">http&lt;/span>::&lt;span class="n">Method&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">http&lt;/span>::&lt;span class="n">Method&lt;/span>::&lt;span class="no">PUT&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">format!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/api/v1/keys/&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[tokio::test]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">test_create&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TestContext&lt;/span>::&lt;span class="n">setup&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OneShotBuilder&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">route&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;first&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">send_text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;new value&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">expect_status&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">http&lt;/span>::&lt;span class="n">StatusCode&lt;/span>::&lt;span class="no">CREATED&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">expect_json&lt;/span>::&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">exp_response&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Entry&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;new value&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_owned&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Version&lt;/span>::&lt;span class="n">initial&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">assert_eq!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exp_response&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">assert_eq!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exp_response&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get_key&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;first&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this test, &lt;code>TestContext&lt;/code> is a container that helps set up the &lt;code>Driver&lt;/code> with fake dependencies and instantiates the &lt;code>Router&lt;/code> around it. The most interesting part is the use of my own &lt;a href="https://github.com/jmmv/iii-iv/blob/eec320cd02149f223d8a9c7f8d697845ec2114d8/core/src/rest.rs#L223">&lt;code>OneShotBuilder&lt;/code>&lt;/a>, which implements the builder pattern for one-shot calls. With this at hand, the test says that it has to send a specific text document to a specific &lt;code>PUT&lt;/code> endpoint and then expects that the HTTP API call returns a &lt;code>CREATED&lt;/code> status code with a valid JSON response of type &lt;code>Entry&lt;/code>. Finally, the &lt;code>context.get_key&lt;/code> call is a helper method that &lt;em>pokes directly into the database&lt;/em> to see if the key is set, which validates the side-effects of the API call on persistent storage.&lt;/p>
&lt;p>The tests in this layer are responsible for validating anything that&amp;rsquo;s specific to the interactions with the user over HTTP, but these tests assume that both the driver and database layers work correctly. This is why these tests do not validate in excruciating detail all the possible corner cases that we can face in the driver or its interactions with external dependencies: the driver tests have that responsibility.&lt;/p>
&lt;h1 id="fidelity-problems">Fidelity problems&lt;/h1>
&lt;p>Alright, so that&amp;rsquo;s the majority of the current testing approach. We have seen how the foundational database layer is architected to support dual implementations via PostgreSQL and SQLite, how other supporting services are modeled with the same duality, and how the driver and REST layers leverage the in-memory / fake implementations to provide logical test coverage at all layers. As is, these provide very good coverage of the functionality of the web services and give me almost full confidence that &lt;code>main&lt;/code> is release-quality at any given time.&lt;/p>
&lt;p>But there are still some risks.&lt;/p>
&lt;p>The major risk in using SQLite for tests vs. PostgreSQL for production is that they are very different databases. Sure, they are both OLTP SQL databases, but their SQL languages are distinct dialects and SQLite is in-process whereas PostgreSQL runs on a server. Dealing with slightly-different SQL queries is easy because the differences are obvious, but there are subtle differences in behavior that influence how calls behave, especially in error conditions. For example: you will never experience a &amp;ldquo;maximum connections reached&amp;rdquo; error with SQLite, but you surely will with PostgreSQL. Similarly, SQLite might give you trouble with concurrent writes while PostgreSQL won&amp;rsquo;t. There are also risks when replacing the clock with a fake one, or when replacing other services such as the Azure Maps or SMTP clients with stub implementations.&lt;/p>
&lt;p>Now, you&amp;rsquo;d say: &lt;em>&amp;ldquo;Well, you are facing these fidelity issues because you don&amp;rsquo;t test against the real thing, duh. If all your tests used the real dependencies, then you&amp;rsquo;d be fine!&amp;rdquo;&lt;/em> Except&amp;hellip; that&amp;rsquo;s not how testing works. When writing a test, you can do two things:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>You can write tests for the &amp;ldquo;known knowns&amp;rdquo;: the happy and failure paths that you know can happen.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can write tests for the &amp;ldquo;known unknowns&amp;rdquo;: the scenarios you think might happen but for which you have no good answers and you need to discover what their behavior is.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>These are easy to model in tests, and if you are writing these tests, then you can make sure your real and fake dependencies behave in the same way.&lt;/p>
&lt;p>But there is another class of failures that you cannot test for with unit tests: the &amp;ldquo;unknown unknowns&amp;rdquo;. These are the situations you do not anticipate, and because you do not anticipate them, you cannot write tests for them. It doesn&amp;rsquo;t matter that you are using the real dependencies or fake dependencies. If you cannot imagine these scenarios, no test will cover them. And this is where I have encountered interesting bugs in production before.&lt;/p>
&lt;h1 id="real-system-testing">Real system testing&lt;/h1>
&lt;p>Thus, even though most of the testing I do in the web services is fast and requires no setup, there is still a need to validate &amp;ldquo;the real thing&amp;rdquo;: that is, the service talking to the real dependencies under real world conditions and usage.&lt;/p>
&lt;p>To accomplish this, I do two things.&lt;/p>
&lt;p>The first is I write tests that actually talk to the real services (oops). These tests all require manual configuration and are marked with &lt;code>#[ignore]&lt;/code> as we saw earlier so that a &lt;code>cargo test&lt;/code> won&amp;rsquo;t pick them up by default. The CI jobs are configured to supply the right settings for these tests, and the PR merge checks forcibly run these ignored tests. It is also possible to run these tests locally by manually configuring the environment in a &lt;code>config.env&lt;/code> file and using a trivial &lt;code>test.sh&lt;/code> script that hooks things up with &lt;code>cargo test&lt;/code>, but as said earlier, I rarely have to do so.&lt;/p>
&lt;p>The second is I deploy to a staging environment and do manual testing on it. Every commit merged into &lt;code>main&lt;/code> gets automatically deployed to a staging instance of the service (which is made easy by Azure Functions&amp;rsquo; slot feature), and I do some manual validation that things work. I could automate this testing, of course, but it is something that can still wait.&lt;/p>
&lt;h1 id="is-this-enough">Is this enough?&lt;/h1>
&lt;p>I know this is an overly simplistic view of the world, and that this testing approach can let some subtle bugs slip through. It has actually happened before. But thanks to this testing approach&amp;mdash;and Rust&amp;rsquo;s type system, whose help cannot be overstated&amp;mdash;every new feature I have launched &lt;em>has worked on the first try&lt;/em> and the web services have kept happily chugging along the years. This is critical to me because these web services are just side projects of mine, so I must ensure they cause me the least trouble possible in production.&lt;/p>
&lt;p>Finally, let me clarify one thing: I&amp;rsquo;ve been talking about &amp;ldquo;unit tests&amp;rdquo; throughout this post, but if we want to be pedantic, almost nothing of what I described are pure unit tests. Every test at every layer relies on the layers below it to behave correctly: the service&amp;rsquo;s own code is never stubbed out so, for example, a test for the REST layer will run code in the driver and database layers. The only thing that&amp;rsquo;s stubbed out are the connections to external services. I believe this style of testing provides much more realistic scenarios at the expense of making them more subtle to breakage when code changes.&lt;/p>
&lt;p>And that&amp;rsquo;s it for today. If you liked this post, you may also enjoy &lt;a href="/2020/12/unit-testing-a-console-app.html">&amp;ldquo;Unit-testing a console app (a text editor)&amp;rdquo;&lt;/a> from over 2 years ago. It is then that I came up with the idea of using the builder pattern to define tests, and that idea still proves very useful to this day.&lt;/p></description></item><item><title>ldd(1) and untrusted binaries</title><link>https://jmmv.dev/2023/07/ldd-untrusted-binaries.html</link><pubDate>Sat, 01 Jul 2023 16:30:00 -0700</pubDate><guid>https://jmmv.dev/2023/07/ldd-untrusted-binaries.html</guid><description>&lt;p>While diagnosing a non-determinism Bazel issue at work, I had to compare the dynamic libraries used by two builds of the same binary. To do so, I used &lt;code>ldd(1)&lt;/code>. The list of libraries printed by the tool was the same between the two builds, but the numbers next to them were different. Which numbers, you ask? Well, take a look at this sample output:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ldd /bin/ls
linux-vdso.so.1 (0x00007fff5bbed000)
libselinux.so.1 =&amp;gt; /lib64/libselinux.so.1 (0x00007f7786f48000)
libcap.so.2 =&amp;gt; /lib64/libcap.so.2 (0x00007f7786f3e000)
libc.so.6 =&amp;gt; /lib64/libc.so.6 (0x00007f7786d60000)
libpcre2-8.so.0 =&amp;gt; /lib64/libpcre2-8.so.0 (0x00007f7786cc6000)
/lib64/ld-linux-x86-64.so.2 (0x00007f7786fad000)
&lt;/code>&lt;/pre>&lt;p>Without prior knowledge, the numbers next to each library seemed to be the base addresses of the libraries once loaded into memory, and they probably differed across builds because of &lt;a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">ASLR&lt;/a>. If this was true, it meant that the differences were irrelevant from a build determinism perspective, but I had to confirm this claim because I had never given these numbers a second thought.&lt;/p>
&lt;p>To answer the question, I did what one should always do: read the official documentation. I typed &lt;code>man ldd&lt;/code> and was greeted by the following on the CentOS 7 machine I was working on:&lt;/p>
&lt;figure>
&lt;img src="/images/2023-07-01-ldd-manpage.png" width="100%">
&lt;figcaption>Screenshot of the beginning of the &lt;tt>ldd(1)&lt;/tt> manual page on CentOS 7 with the following text highlighted by me: "&lt;i>Be aware, however, that in some circumestances, some versions of &lt;tt>ldd&lt;/tt> may attempt to obtain the dependency information by directly executing the program. Thus, you should &lt;b>never&lt;/b> employ &lt;tt>ldd&lt;/tt> on an untrusted executable&lt;/i>."&lt;/figcaption>
&lt;/figure>
&lt;p>Wait, what? Under some circumstances (which ones?) and with some versions of &lt;code>ldd&lt;/code> (which ones again?&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>), &lt;code>ldd&lt;/code> may &lt;em>execute&lt;/em> the given binary to determine the libraries it uses. Which means that running &lt;code>ldd&lt;/code> on an untrusted binary could compromise your system. The manual page goes on to say that you should never run &lt;code>ldd&lt;/code> against untrusted binaries.&lt;/p>
&lt;p>Needless to say, this was really surprising to see. Why would &lt;code>ldd&lt;/code> execute &lt;em>anything&lt;/em> to print details about a file? I quickly posted this on &lt;a href="https://twitter.com/jmmv/status/1674889696294621184">Twitter&lt;/a> and &lt;a href="https://mastodon.online/@jmmv/110635380384812322">Mastodon&lt;/a>, and the higher-than-usual engagement made me think that many more people than I weren&amp;rsquo;t aware of this behavior&amp;hellip; so I had to investigate a bit more.&lt;/p>
&lt;hr>
&lt;p>This behavior was originally reported as a security vulnerability in &lt;a href="https://www.cvedetails.com/cve/CVE-2009-5064/">CVE-2009-5064&lt;/a> and the report was closed with the rationale: &lt;em>&amp;ldquo;not a security vulnerability because &lt;code>ldd&lt;/code> must not be run on untrusted binaries&amp;rdquo;&lt;/em>. While this may be literally true, I find the answer quite dismissive: how does one &lt;em>know&lt;/em> that, say, &lt;code>readelf&lt;/code> or &lt;code>objdump&lt;/code> can be run against untrusted binaries but &lt;code>ldd&lt;/code> cannot? When giving a file to a tool, the common expectation is that the tool will read and parse the file&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, not &lt;em>run&lt;/em> it. This violates the &lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment">Principle of least astonishment (POLA)&lt;/a>, for me at least.&lt;/p>
&lt;p>Even though upstream did not agree to the security vulnerability report, various people thought there was a real problem, so some Linux distributions &lt;em>did&lt;/em> patch &lt;code>ldd&lt;/code> to not execute binaries directly. I do not have access to an old-enough unpatched Linux system to verify this surprising behavior, but there is a trivial repro in the &lt;a href="https://www.openwall.com/lists/oss-security/2011/03/07/13">&amp;ldquo;ldd can execute an app unexpectedly&amp;rdquo;&lt;/a> email thread along with a simple fix.&lt;/p>
&lt;p>And if my reading is correct, this surprising behavior was removed from the upstream sources back in 2017 (eight years after the original report) in commit &lt;a href="https://sourceware.org/git/?p=glibc.git;a=commit;h=eedca9772e99c72ab4c3c34e43cc764250aa3e3c">&lt;code>eedca9772e&lt;/code>&lt;/a>. It&amp;rsquo;s quite hard to tell if this change was addressing the reported security issue because the commit has no written rationale nor reference to the CVE. Which makes the whole thing feel worse: what I sense is a security-fix-in-disguise begrudgingly accepted after many years of saying this was not a problem&amp;hellip; which is never great. But that&amp;rsquo;s just my read of the whole thing and I&amp;rsquo;m probably wrong.&lt;/p>
&lt;p>In any case, even if &lt;em>this&lt;/em> particular issue is fixed, &lt;strong>it is still unsafe to run &lt;code>ldd&lt;/code> against untrusted binaries&lt;/strong>. &lt;code>ldd&lt;/code> uses the dynamic linker to &lt;em>load&lt;/em> the binary and its dependencies into memory, and then relies on the dynamic linker itself to print details to the console. And because of this, this process can be abused in other working-as-intended ways to trigger code injection as explained in &lt;a href="https://www.cvedetails.com/cve/CVE-2019-1010023">CVE-2019-1010023&lt;/a>. All of these require social engineering though&amp;hellip; but we all know that humans are often the weakest link in security.&lt;/p>
&lt;hr>
&lt;p>So why does &lt;code>ldd&lt;/code> look so problematic anyway? Let&amp;rsquo;s look at the internals of this tool.&lt;/p>
&lt;p>My first surprise was to see that, on Linux, &lt;code>ldd&lt;/code> is a shell script&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&amp;mdash;and a very simple one at that. Poking through &lt;a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=elf/ldd.bash.in;h=e45dec5894fe561585da01ea64b651663128e8d5;hb=HEAD">the contents of &lt;code>/usr/bin/ldd&lt;/code>&lt;/a>, you&amp;rsquo;ll notice that all this script does is pass the given binary to a collection of built-in dynamic linkers (stored in &lt;code>RTLDLIST&lt;/code>) and, once it finds a dynamic linker that can process the binary, it runs the linker against the binary with the &lt;code>LD_TRACE_LOADED_OBJECTS=1&lt;/code> setting. The linker then lays out the binary inside a new process along &lt;em>all&lt;/em> the direct and indirect libraries it requires, dumps information to the console, and exits.&lt;/p>
&lt;p>We can do the same by hand:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ /lib64/ld-linux-x86-64.so.2 --verify /bin/ls &amp;amp;&amp;amp; echo &amp;#39;Supported!&amp;#39;
Supported!
$ LD_TRACE_LOADED_OBJECTS=1 /lib64/ld-linux-x86-64.so.2 /bin/ls
linux-vdso.so.1 (0x00007ffd28dc4000)
libselinux.so.1 =&amp;gt; /lib64/libselinux.so.1 (0x00007feb357d8000)
libcap.so.2 =&amp;gt; /lib64/libcap.so.2 (0x00007feb357ce000)
libc.so.6 =&amp;gt; /lib64/libc.so.6 (0x00007feb355f0000)
libpcre2-8.so.0 =&amp;gt; /lib64/libpcre2-8.so.0 (0x00007feb35556000)
/lib64/ld-linux-x86-64.so.2 (0x00007feb3583d000)
&lt;/code>&lt;/pre>&lt;p>Voila! We get the exact same output that &lt;code>ldd&lt;/code> would produce modulo differences in the addresses across different executions.&lt;/p>
&lt;hr>
&lt;p>I&amp;rsquo;ll probably continue to use &lt;code>ldd&lt;/code> because it is very convenient and I rarely face situations where I have to analyze untrusted binaries. But if those situations ever arise, here are some alternatives:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/haampie/libtree">&lt;code>libtree the-binary&lt;/code>&lt;/a>, which displays the direct and indirect libraries required by a binary as a tree.&lt;/li>
&lt;li>&lt;code>objdump -p the-binary | grep NEEDED&lt;/code>, which is the solution provided in the &lt;code>ldd(1)&lt;/code> manual page I quoted earlier but is not equivalent to &lt;code>ldd&lt;/code> because it can only handle direct dependencies.&lt;/li>
&lt;li>&lt;code>readelf -d the-binary | grep NEEDED&lt;/code>, which is a similar solution to the previous one with the same caveats.&lt;/li>
&lt;/ul>
&lt;p>Before parting, the question I have is: why doesn&amp;rsquo;t &lt;code>ldd&lt;/code> walk the library tree by inspecting ELF headers instead of loading the libraries into a process? The answer might be in the name: I&amp;rsquo;m guessing that &lt;code>ldd&lt;/code> stands for &amp;ldquo;&lt;code>ld&lt;/code> dump&amp;rdquo; and thus it is &lt;em>supposed&lt;/em> to run the dynamic linker.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>This type of unspecific language is what you get when the manual pages are written by a different set of people than those that write the code and when the manual pages are shipped separately from the tools they document. Thanks Linux. This type of nonsense does not happen on the BSDs.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>There is always the risk that the parser has bugs that can be exploited by a malicious file, resulting in untrusted code execution, but that&amp;rsquo;s a different class of issue than &amp;ldquo;let&amp;rsquo;s just run the binary!&amp;rdquo;.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>This might help explain my long-standing question on why macOS does not ship with &lt;code>ldd&lt;/code> and why I always had to use &lt;code>otool&lt;/code>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Fast machines, slow machines</title><link>https://jmmv.dev/2023/06/fast-machines-slow-machines.html</link><pubDate>Tue, 27 Jun 2023 06:50:00 -0700</pubDate><guid>https://jmmv.dev/2023/06/fast-machines-slow-machines.html</guid><description>&lt;p>Well, &lt;em>that&lt;/em> was unexpected. I recorded a couple of crappy videos in 5 minutes, &lt;a href="https://twitter.com/jmmv/status/1671670996921896960">posted them on a Twitter thread&lt;/a>, and went viral with 8.8K likes at this point. I really could not have predicted that, given that I&amp;rsquo;ve been posting what-I-believe-is interesting content for years and&amp;hellip; nothing, almost-zero interest. Now that things have cooled down, it&amp;rsquo;s time to stir the pot and elaborate on those thoughts a bit more rationally.&lt;/p>
&lt;p>To summarize, the Twitter thread shows two videos: one of an old computer running Windows NT 3.51 and one of a new computer running Windows 11. In each video, I opened and closed a command prompt, File Explorer, Notepad, and Paint. You can clearly see how apps on the old computer open up instantly whereas apps on the new computer show significant lag as they load. I questioned how computers are actually getting better when trivial things like this have regressed. And boom, the likes and reshares started coming in. Obviously some people had issues with my claims, but there seems to be an overwhelming majority of people that agree we have a problem.&lt;/p>
&lt;p>To open up, I&amp;rsquo;ll stand my ground: latency in modern computer interfaces, with modern OSes and modern applications, is terrible and getting worse. This applies to smartphones as well. At the same time, while UIs were much more responsible on computers of the past, those computers were also awful in many ways: new systems have changed our lives substantially. So, what gives?&lt;/p>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h1 id="the-original-comparison">The original comparison&lt;/h1>
&lt;p>Let&amp;rsquo;s address the elephant in the room first. The initial comparison I posted &lt;em>wasn&amp;rsquo;t&lt;/em> fair and I was aware of that going in. That said, I &lt;em>knew&lt;/em> repeating the experiment &amp;ldquo;properly&amp;rdquo; would yield the same results, so I plowed ahead with whatever I had right then. The videos were unplanned because the idea for the Tweets came to mind when I booted the old machine, clicked on Command Prompt, and was blown away by the immediacy to start the app.&lt;/p>
&lt;p>The original comparison videos showed:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>An AMD K7-600 with 128MB of RAM and a 5400 RPM HDD running Windows NT 3.51. This was a machine from the year 1999-2000 with an OS that was about 5 years older than it. Hardware was experiencing really fast improvements back then, particularly in CPU speeds, and you were kinda expected to keep up with the 2-year upgrade treadmill or suffer from incredibly slowness. All this is to say that this machine was indeed overpowered for the OS I used.&lt;/p>
&lt;blockquote class="twitter-tweet" data-conversation="none">&lt;p lang="en" dir="ltr">Please remind me how we are moving forward. In this video, a machine from the year ~2000 (600MHz, 128MB RAM, spinning-rust hard disk) running Windows NT 3.51. Note how incredibly snappy opening apps is. 👇 &lt;a href="https://t.co/YEO824vIqI">pic.twitter.com/YEO824vIqI&lt;/a>&lt;/p>&amp;mdash; Julio Merino (@jmmv) &lt;a href="https://twitter.com/jmmv/status/1671670996921896960?ref_src=twsrc%5Etfw">June 22, 2023&lt;/a>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>A Surface Go 2 with an Intel Core m3 CPU, 8GB of RAM, and an SSD running Windows 11. This is a 3-year old machine that shipped with Windows 10, but Windows 11 is officially supported on it&amp;mdash;and as you know, that means you are tricked into upgrading. This is &lt;em>not&lt;/em> a powerful machine by any means, but: first, it&amp;rsquo;s running the verbatim Microsoft experience, and second, it &lt;em>should&lt;/em> be much more powerful than the K7 system, shouldn&amp;rsquo;t it? We are continuously reminded that any computer or phone today has orders of magnitude more power than past machines.&lt;/p>
&lt;blockquote class="twitter-tweet" data-conversation="none">&lt;p lang="en" dir="ltr">Now look at opening the same apps on Windows 11 on a Surface Go 2 (quad-core i5 processor at 2.4GHz, 8GB RAM, SSD). Everything is super sluggish. &lt;a href="https://t.co/W722PNEGv0">pic.twitter.com/W722PNEGv0&lt;/a>&lt;/p>&amp;mdash; Julio Merino (@jmmv) &lt;a href="https://twitter.com/jmmv/status/1671671000730316800?ref_src=twsrc%5Etfw">June 22, 2023&lt;/a>&lt;/blockquote>
&lt;p>Oh, and yes, I quoted the wrong hardware specs in the original tweet. Looking again on how I made that mistake: I searched for &amp;ldquo;Surface Go 2&amp;rdquo; in Bing, I landed on the &amp;ldquo;Surface &lt;em>Laptop&lt;/em> Go 2&amp;rdquo; page, and copied what I saw there without noticing that it wasn&amp;rsquo;t accurate.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>All apps had been previously open, so they should all have been comfortably sitting in RAM.&lt;/p>
&lt;h1 id="the-better-comparison">The better comparison&lt;/h1>
&lt;p>Obviously various people noticed that there was something off with my comparison (unfair hardware configurations, wrong specs), so I redid the comparison once the thread started gaining attention:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Windows 2000 on the K7-600 machine (see &lt;a href="https://twitter.com/jmmv/status/1672046102923837440">installation thread&lt;/a>). This is an OS from 1999 running on hardware from that same year. And, if you ask me, this was the best Windows release of all times: super-clean UI on an NT core, carrying all of the features you would want around performance and stability (except with terrible boot times). As you can see, things still fare &lt;em>very&lt;/em> well for the old machine in terms of UI responsiveness.&lt;/p>
&lt;blockquote class="twitter-tweet" data-conversation="none">&lt;p lang="en" dir="ltr">For those thinking that the comparison was unfair, here is Windows 2000 on the same 600MHz machine. Both are from the same year, 1999. Note how the immediacy is still exactly the same and hadn’t been ruined yet. &lt;a href="https://t.co/Tpks2Hd1Id">pic.twitter.com/Tpks2Hd1Id&lt;/a>&lt;/p>&amp;mdash; Julio Merino (@jmmv) &lt;a href="https://twitter.com/jmmv/status/1672073678102872065?ref_src=twsrc%5Etfw">June 23, 2023&lt;/a>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Windows 11 on a Mac Pro 2013 (see &lt;a href="/2022/03/windows-10-mac-pro-2013.html">installation instructions&lt;/a>) with a 6-core Xeon E5-1650v2 at 3.5GHz, 32GB of RAM, dual GPUs, and an SSD that can sustain up to 1GB/s. I know, this is a 10-year old machine at this point running a more modern OS. But please, go ahead, tell me with a straight face how hardware with these specs cannot handle opening trivial desktop applications without delay. I&amp;rsquo;ll wait.&lt;/p>
&lt;blockquote class="twitter-tweet" data-conversation="none">&lt;p lang="en" dir="ltr">Oh, and one more thing. Yes, yes, the Surface Go 2 is underpowered and all you want. But look at this video. Same steps on a 6-core Mac Pro @ 3.5GHz with 32GB of RAM. All apps cached. Note how they get painted in chunks. It&amp;#39;s not because of animations or mediocre hardware. &lt;a href="https://t.co/9TOGAdaTXO">pic.twitter.com/9TOGAdaTXO&lt;/a>&lt;/p>&amp;mdash; Julio Merino (@jmmv) &lt;a href="https://twitter.com/jmmv/status/1672385064490127360?ref_src=twsrc%5Etfw">June 23, 2023&lt;/a>&lt;/blockquote>
&lt;p>The reason I used the Mac Pro is because it is the best machine I have running Windows right now and, in fact, it&amp;rsquo;s my daily driver. But again, I do not care about how running this comparison on an &amp;ldquo;old&amp;rdquo; machine might be &amp;ldquo;inaccurate&amp;rdquo;. Back when &lt;a href="/2022/10/bye-microsoft-hi-snowflake.html">I left Microsoft last year&lt;/a>, I was regularly using a Z4 desktop from 2022, a maxed-out quad-core i7 ThinkPad with 32GB of RAM, and an i7 Surface Laptop 3 with 16GB of RAM. Delays were shorter on these, of course, but interactions were still noticeably slow.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>So, in any case: I agree the original comparison was potentially flawed, but as you can see, a better comparison yields the same results&amp;mdash;which I knew it would. After years upon years of computer usage, you gain intuition on how things should behave, and trusting such intuition tends to work well as long as you &lt;em>validate&lt;/em> your assumptions later, don&amp;rsquo;t get me wrong!&lt;/p>
&lt;h1 id="computer-advancements">Computer advancements&lt;/h1>
&lt;p>Let&amp;rsquo;s put the tweets aside and talk about how things have changed since the 2000s. I jokingly asked how we are &amp;ldquo;moving forward&amp;rdquo; as an industry, so it&amp;rsquo;s worth looking into it.&lt;/p>
&lt;p>Indeed, we &lt;em>have&lt;/em> moved forward in many aspects: we now have incredible graphics and high-resolution monitors, super-fast networks, real-time video editing, and much more. All of these have improved over the years and it is very true that these advancements have allowed for certain life transformations to happen. Some examples: the ability to communicate with loved ones much more easily thanks to great-quality videoconferencing; the ability to have a streaming &amp;ldquo;cinema at home&amp;rdquo;; and the painless switch to remote work during the pandemic&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>We have also moved forward on the I/O side. Disk I/O had always been the weakest spot on past systems. Floppy disks were unreliable and slow. CDs and DVDs were slightly-more-reliable but also slow. HDDs were the bottleneck for lots of things: their throughput improved over time, allowing things like higher-resolution video editing and the like, but random I/O hit physical limits&amp;mdash;and fast random I/O is what essentially drives desktop responsiveness.&lt;/p>
&lt;p>Then, boom, SSDs appeared and started showing up on desktops. These were a game-changer because they fixed the problem of random I/O. All of a sudden, booting a computer, launching a heavy game, opening folders with lots of small photos, or simply just using your computer&amp;hellip; all improved massively. It&amp;rsquo;s hard to explain the usability improvements that these brought if you did not live through this transition, and it&amp;rsquo;s scary how those improvements are almost gone; more on that later.&lt;/p>
&lt;p>Other stuff also improved, like the simplicity to install new hardware, the pervasiveness of wireless connections and devices, the internationalization of text and apps (Unicode isn&amp;rsquo;t easy nor cheap, I&amp;rsquo;ll grant that)&amp;hellip; all providing more usable machines in more contexts than ever.&lt;/p>
&lt;p>So yeah, things are better in many areas and we have more power than ever. Otherwise, we couldn&amp;rsquo;t do things like ML-assisted photo processing on a tiny phone, which was unimaginable in the 2000s.&lt;/p>
&lt;h1 id="terrible-latency">Terrible latency&lt;/h1>
&lt;p>Yet&amp;hellip; none of these advancements justify why things are as excruciatingly slow as they are today in terms of UI latency. Old hardware from the year 1999, combined with an OS from that same year, shows that responsive systems have existed&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. If anything, all these hardware improvements I described should have made things &lt;em>better&lt;/em>, not worse, shouldn&amp;rsquo;t they?&lt;/p>
&lt;p>Some replied to the comparison telling me that graphical animations and bigger screens are &amp;ldquo;at fault&amp;rdquo; because we have to draw more pixels, and thus the fact that we have these new niceties means we have to tolerate slowness. Well, not quite. Witness for yourself:&lt;/p>
&lt;blockquote class="twitter-tweet" data-conversation="none">&lt;p lang="en" dir="ltr">And... one more thing? To those saying: &amp;quot;it&amp;#39;s the higher 4K resolution!&amp;quot; or &amp;quot;it&amp;#39;s the good-looking animations!&amp;quot; or &amp;quot;it&amp;#39;s the pretty desktop background!&amp;quot;—no, they aren&amp;#39;t at fault. See, the slowness is still visible with all of these disabled. In the end... blog post coming soon. &lt;a href="https://t.co/9BQy6IpK6a">pic.twitter.com/9BQy6IpK6a&lt;/a>&lt;/p>&amp;mdash; Julio Merino (@jmmv) &lt;a href="https://twitter.com/jmmv/status/1673326555702120448?ref_src=twsrc%5Etfw">June 26, 2023&lt;/a>&lt;/blockquote>
&lt;p>GPUs are a commodity now, and they lift the heavy burden of graphics management from the CPU. The kinds of graphical animations that a desktop renders are extremely cheap to compute, and this has been proven by macOS since its launch: all graphical effects on a macOS desktop feel instant. The effects &lt;em>do&lt;/em> delay interactions though&amp;mdash;the desktop switching animation is particularly intrusive, oh god how I hate that thing&amp;mdash;but the delays generally come from intentional pauses during the animation. And when the effects introduce latency because the GPU cannot keep up, such as when you attach a 4K display to a really old Mac, then it&amp;rsquo;s painfully obvious that animations stutter due to lack of power. I haven&amp;rsquo;t encountered the latter in any of the videos above though, which is why animations and the like have nothing to do with my concerns.&lt;/p>
&lt;p>So, please, think about it with a critical mind. How is the ability to edit multiple 4K video streams in real time or the ability to stream a 4K movie supposed to make starting apps like Notepad slower? Or opening the context menu in the desktop? Or reading your email? The new abilities we acquired much more power from the CPU and GPU, but they shouldn&amp;rsquo;t remove performance from tasks that are essentially I/O-bound. Opening a simple app shouldn&amp;rsquo;t be slower than it was more than 20 years ago; it really shouldn&amp;rsquo;t be. Yet here we are. The reasons for the desktop latency come from elsewhere, and I have some guesses for those. But first, a look at a couple of examples.&lt;/p>
&lt;h1 id="examples">Examples&lt;/h1>
&lt;p>On Windows land, there are two obvious examples I want to bring up and that were mentioned in the Twitter thread:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Notepad had been a native app until very recently, and it still opened pretty much instantaneously. With its rewrite as a UWP app, things went downhill. The before and after are apparent, and yet&amp;hellip; the app continues to be as unfeatureful as it had always been. This is extra slowness for no user benefit.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>As for Windows Terminal, sure, it is nicer than anything that came before it, but it is visibly much, much heavier than the old Command Prompt. And if you add PowerShell into the mix, we are talking about multiple &lt;em>seconds&lt;/em> for a new terminal window to be operational unless you have top-of-the-line hardware.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>macOS fares better than Windows indeed, but it still has its issues. See this example contributed by @AlexRugerMusic. Even the mighty M1 has trouble opening up the system settings app:&lt;/p>
&lt;blockquote class="twitter-tweet" data-conversation="none">&lt;p lang="en" dir="ltr">Another example:&lt;br>&lt;br>Left: 2006 MBP (2GHz Core 2 Duo, 2GB DDR2 RAM, Max OS X 10.6.8; has SSD)&lt;br>&lt;br>Right: 2021 MacBook Air (M1, 16GB RAM, macOS 13)&lt;br>&lt;br>Apps open about twice as fast on the Pro as they do on the Air (most, not just System Preferences/Settings). &lt;a href="https://t.co/PjMX1DI4uz">pic.twitter.com/PjMX1DI4uz&lt;/a>&lt;/p>&amp;mdash; rewgs (@AlexRugerMusic) &lt;a href="https://twitter.com/AlexRugerMusic/status/1673550864366309376?ref_src=twsrc%5Etfw">June 27, 2023&lt;/a>&lt;/blockquote>
&lt;p>Linux is probably the system that suffers the least from these issues as it still feels pretty snappy on modest hardware. Fedora Linux 38, released in April 2023, runs really well on a micro PC from 11 years ago&amp;mdash;even if Gnome or KDE had been resource hogs back in the day. That said, this is only an illusion. As soon as you start installing any modern app that wasn&amp;rsquo;t developed exclusively for Linux&amp;hellip; the slow app start times and generally poor performance show up.&lt;/p>
&lt;p>Related, but I feel this needs saying: the biggest shock for me was when I joined Google back in 2009. At the time, Google Search and GMail had stellar performance: they were examples to follow. From the inside though&amp;hellip; I was quite shocked by how all internal tools crawled, and in particular by how slow the in-house command line tools were. I actually fault Google for the situation we are in today due to their impressive internal systems and their relentless push for web apps at all costs, which brings us to&amp;hellip;&lt;/p>
&lt;h1 id="causes">Causes&lt;/h1>
&lt;p>How does this all happen? It&amp;rsquo;s easy to say &amp;ldquo;Bloat!&amp;rdquo;, but that&amp;rsquo;s a hard thing to define because bloat can be justified: what one person considers as bloat is not the same as what another person considers as bloat. After all, &amp;ldquo;80% of users only use 20% of the software they consume&amp;rdquo; (see &lt;a href="https://en.wikipedia.org/wiki/Pareto_principle">Pareto principle&lt;/a>), but the key insight is that the 20% that each user consumes is different from one another. So bloat isn&amp;rsquo;t necessarily in the features offered by the software; it&amp;rsquo;s elsewhere.&lt;/p>
&lt;p>So then we have frameworks and layers of abstraction, which seem to introduce bloat for bloat&amp;rsquo;s sake. But I&amp;rsquo;m not sure this is correct either: abstraction doesn&amp;rsquo;t inherently have to make things slower, as Rust has proven. What makes things slower are priorities. Nobody prioritizes performance anymore unless for the critical cases where it matters (video games, transcoding video, and the like). What people (companies) prioritize is developer time. For example: you might not want to use Rust because its steep learning curve means you&amp;rsquo;ll spend more time learning than delivering, or its higher compiler times mean that you&amp;rsquo;ll spend more time waiting for the compiler than &lt;del>shipping&lt;/del> debugging production. Or another example: you might not want to develop native apps because that means &amp;ldquo;duplicate work&amp;rdquo;, so you reach out for a cross-platform web framework. That is, Electron.&lt;/p>
&lt;p>I know it&amp;rsquo;s easy to dunk on Electron, but there are clear telltale signs that this platform is at fault for a lot of the damage done to desktop latency. Take 1Password&amp;rsquo;s 8th version, which many of users that migrated from the 7th version despise due to the slowness of the new interface. Or take Spotify, which used to prioritize startup and playback latency over anything else in its inception and, as you know if you use it, that&amp;rsquo;s not true any more:&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">2009 version: 20MB fully native cocoa app, launches in less than a second, instant feedback when you click stuff, playback usually starts within 50ms &lt;a href="https://t.co/Enzi40PDCX">pic.twitter.com/Enzi40PDCX&lt;/a>&lt;/p>&amp;mdash; Rasmus Andersson (@rsms) &lt;a href="https://twitter.com/rsms/status/1656340616731840513?ref_src=twsrc%5Etfw">May 10, 2023&lt;/a>&lt;/blockquote>
&lt;p>These apps were rewritten in Electron to offer a unified experience across desktops and to cut down costs&amp;hellip; but for whom? The cost cuts were for the companies owning the products, not for the users. Such cuts impose a tax on &lt;em>every one of us&lt;/em> due to our day-to-day frustrations and the need to unnecessarily upgrade our hardware. Couple these rewrites with the fact that OSes cannot reuse the heavy framework across apps (same idea as how &lt;a href="/2021/08/using-all-memory-as-a-cache.html">using all RAM as a cache&lt;/a> is a flawed premise)&amp;hellip; and the bloat quickly adds up when you run these apps concurrently.&lt;/p>
&lt;p>Leaving Electron aside, another decision that likely introduces latency is the mass adoption of managed and interpreted languages. I know these are easy to dunk on as well, but that&amp;rsquo;s because we have reasons to do so. Take Java or .NET: several Windows apps have been slowly rewritten in C# and, while I have no proof of this, I&amp;rsquo;m convinced from past experience that this can be behind the sluggishness we notice. The JDK and the CLR do amazing jobs at optimizing long-running processes (their &lt;a href="https://en.wikipedia.org/wiki/Just-in-time_compilation">JIT&lt;/a> can do &lt;a href="https://en.wikipedia.org/wiki/Profile-guided_optimization">PGO&lt;/a> with real time data), but handling quick startup times is not something they manage well. This is why, for example, Bazel spawns a background server process to paper over startup latency and why Android has gone through multiple iterations of &lt;a href="https://en.wikipedia.org/wiki/Ahead-of-time_compilation">AOT&lt;/a> compilation. (Edit: there must be other reasons though that I have not researched. As &lt;a href="https://news.ycombinator.com/item?id=36508282">someone pointed out&lt;/a>, my assumption that Windows Terminal was mostly C# is not true.)&lt;/p>
&lt;p>More on this in &lt;a href="https://en.wikipedia.org/wiki/Wirth%27s_law">Wirth&amp;rsquo;s law&lt;/a>.&lt;/p>
&lt;h1 id="one-off-improvements-eaten-away">One-off improvements eaten away&lt;/h1>
&lt;p>To conclude, let me end with a pessimistic note by going back to hardware advancements.&lt;/p>
&lt;p>The particular improvement that SSDs brought us was a one-off &lt;em>transformation&lt;/em>. HDDs kept getting faster for years indeed, but they never could deliver the kind of random I/O that desktops require to be snappy. The switch to SSDs brought a kind of improvement that was at a different level. Unfortunately&amp;hellip; we could only buy those benefits &lt;em>once&lt;/em>: there is no other technology to switch to that provides such a transformative experience. And thus, once the benefits brought by the new technology were eaten away by careless software, we are almost back to square one. Yes, SSDs are getting faster, but newer drives won&amp;rsquo;t bring the kind of massive differences that the change from HDDs to SSDs brought.&lt;/p>
&lt;p>You can see this yourself if you try using recent versions of Windows or macOS &lt;em>without&lt;/em> an SSD: it is nigh impossible. These systems now assume that computers have SSDs in them, which is a fair assumption, but a problematic one due to what I mentioned above. The same applies to &amp;ldquo;bloat&amp;rdquo; in apps: open up your favorite resource monitor, look for the disk I/O bandwidth graph, and launch any modern app. You&amp;rsquo;ll see a stream of MBs upon MBs being loaded from disk into memory, all of which must complete before the app is responsive. This is the kind of bloat that Electron adds and that SSDs permitted, but that could be avoided altogether with different design decisions.&lt;/p>
&lt;p>Which makes me worried about Apple Silicon. Remember all the rage with the M1 launch and how these new machines had superb performance, extremely long battery life, and no fan noise? Well, wait and see: these benefits will be eaten away if we continue on the same careless path. And once that has happened, it&amp;rsquo;ll be too late. Retrofitting performance into existing applications is very difficult technically, and almost impossible to prioritize organizationally.&lt;/p>
&lt;p>So&amp;hellip; will computer architects be able to save us with other revolutionary technology shifts? I wouldn&amp;rsquo;t want to rely on that. Not because the shifts might not exist, but because we &lt;em>shouldn&amp;rsquo;t need them&lt;/em>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Oh wait: remote work does not qualify. I&amp;rsquo;m sorry: if you did any kind of open source development in the 90s or 2000s, you &lt;em>know&lt;/em> that fully-distributed &lt;em>and&lt;/em> truly-async work was perfectly possible back then.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>For a more detailed analysis, Dan Luu already covered this type of slowdown introduced by latency in his famous article &amp;ldquo;&lt;a href="http://danluu.com/input-lag/">Computer latency: 1977-2017&lt;/a>&amp;rdquo;. Note how the article goes further back than 1999 and that the computer with the best latency he found is from 1983. But, yeah, that old computer cannot match the workloads we put our computers through these days, so I don&amp;rsquo;t think comparing it to a modern desktop would be fair.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>A persistent task queue in Rust</title><link>https://jmmv.dev/2023/06/iii-iv-task-queue.html</link><pubDate>Fri, 23 Jun 2023 06:35:00 -0700</pubDate><guid>https://jmmv.dev/2023/06/iii-iv-task-queue.html</guid><description>&lt;p>In a recent post, I announced the very non-exciting feature of having &lt;a href="/2023/06/in-house-email-subscriptions.html">custom-built email subscriptions&lt;/a> for this blog. Writing the subscription flow was easy, but developing the automation to, first, periodically scrape the blog&amp;rsquo;s RSS feed and, second, schedule email notifications to readers based on the items in the feed was really time-consuming and tricky to implement.&lt;/p>
&lt;p>You would say: &lt;em>&amp;ldquo;How is that hard? Just &lt;a href="https://github.com/rss2email/rss2email">set up a cron job&lt;/a> that fetches the RSS feed and sends emails!&amp;rdquo;&lt;/em> Yeah, yeah, of course, that can work. But when you add in other requirements, this approach is not so simple. Note a few things: you need to determine which posts in the feed are new and which aren&amp;rsquo;t, which means you have to keep track of all past-seen posts; my email gateway has daily limits on how many emails I can send, so I need to schedule the submissions across multiple days; and if the submission of one email fails, I want to retry sending that one email only. Add to that the fact that I run not one but multiple sites with their own subscription features, and these processes&amp;mdash;in particular, the email quota controls&amp;mdash;all have to somehow agree.&lt;/p>
&lt;p>The more you think about this problem, the more you realize having some sort of queue to track which emails have to be sent and which haven&amp;rsquo;t been sent yet could be very useful. At that point, you might as well realize that such a queuing system can also support all kinds of background operations that happen in a web service, not just email submissions, and I have been needing that ability for a while now.&lt;/p>
&lt;p>So let&amp;rsquo;s get into specifics. Here are the conceptual tasks I envisioned within the context of &lt;a href="/software/endtracker.html">EndTRACKER&lt;/a> (terrible name, I know), along with the names they actually got in the code, to convert an RSS feed into email notifications:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ProcessFeeds&lt;/code>: Loads all feeds from the database and enqueues new &lt;code>ScrapeFeed&lt;/code> and &lt;code>ProcessFeed&lt;/code> tasks for every feed. This is the entry point to the system, and this task is enqueued by a timer once an hour to start the processing flow.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ScrapeFeed(feed)&lt;/code>: Loads the details for &lt;code>feed&lt;/code>, downloads its registered RSS feed, and computes the delta against previously-known items. Newly-discovered feed items are inserted into a database and marked as &amp;ldquo;not yet notified&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ProcessFeed(feed)&lt;/code>: Loads all &amp;ldquo;not yet notified&amp;rdquo; posts for &lt;code>feed&lt;/code> from the database plus the list of verified email subscribers for the site that owns the feed. It then schedules one &lt;code>SendFeedItem&lt;/code> task for every post/subscriber pair and finally marks the feed item as notified.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SendEmailItem(feed, item, subscriber)&lt;/code>: Loads the &lt;code>feed&lt;/code>&amp;rsquo;s &lt;code>item&lt;/code> details from the database, composes an email for the &lt;code>subscriber&lt;/code> by formatting arbitrary HTML into text, and sends the result to them. This is where sanity-checks happen, such as ensuring we have enough email submission quota left or that the subscriber hasn&amp;rsquo;t unsubscribed, and thus this task must be retried at a later stage if it fails.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>With these task definitions in mind, it was time to go to the drawing board and design a queuing system to support them.&lt;/p>
&lt;hr>
&lt;p>Now, the question you surely have is: &lt;em>&amp;ldquo;Why bother? There are plenty of queuing services out there!&amp;rdquo;&lt;/em> And my answer is: &lt;em>&amp;quot;&lt;a href="/2021/01/why-endbasic.html">Because why not&lt;/a>&amp;quot;&lt;/em>. I wanted to have some fun designing and implementing this feature, and I don&amp;rsquo;t fancy the idea of marrying a specific cloud provider by relying on their cloud-native services: so far, the only thing I depend on for my web services is a hosted PostgreSQL instance and a bunch of Azure Functions deployments, and I could trivially move these to a VM in my home server if I had to.&lt;/p>
&lt;p>Anyhow. What &lt;em>is&lt;/em> a &amp;ldquo;persistent task queue&amp;rdquo; anyway, other than a mouthful? Let&amp;rsquo;s look at the words: it is a &lt;strong>queue&lt;/strong>, so it is an ordered record of &amp;ldquo;things&amp;rdquo;; it is &lt;strong>for tasks&lt;/strong>, so it needs to offer task-specific execution logic and tracking to ensure at-most-once semantics and the like; and it is &lt;strong>persistent&lt;/strong>, so the tasks and their statuses need to be stored somewhere.&lt;/p>
&lt;h1 id="key-ideas">Key ideas&lt;/h1>
&lt;p>As in any design, we have to start by enumerating the specific requirements I had for the solution to put the various design choices in context. These are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Service-agnostic.&lt;/strong> I run a few web services, all of which share common logic via &lt;a href="/software/iii-iv.html">the III-IV framework&lt;/a>. The queue implementation must live in this open-source framework. The framework must not know anything about the task specifics, so &lt;em>task descriptors&lt;/em> must be defined by the services and they need to be persisted in some generic way (JSON serialization).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Client and worker separation.&lt;/strong> Clients enqueuing tasks must not know anything about how to run them. Only the worker processes need to contain the code that processes the tasks. This means there ought to be two separate APIs, and there can be one or more client and/or workers running at any given time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Azure Functions deployment.&lt;/strong> The queue must run within existing services, not as a new standalone deployment. This is a restrictive requirement because my existing services are run by a serverless runtime, so the queue operations cannot rely on long-running processes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>At-most once execution.&lt;/strong> Tasks have side-effects so they must run at most once. It is OK if some are lost as long as it&amp;rsquo;s a rare occurrence, but it is &lt;em>not acceptable&lt;/em> to run the same task twice. The fact that we run in a serverless environment helps with this because Azure Functions enforces a maximum runtime for processes, which we will take advantage of.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Ability to retry tasks that fail.&lt;/strong> Some tasks will fail for expected reasons, such as when we have run out of outbound email quota for the day, and these must be postponed and retried at a later time. But some failures are not retriable, so whether a task needs to be retried or not has to be decided on an error-by-error basis.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Quarantining of problematic tasks.&lt;/strong> Tasks that fail repeatedly or that cause the queue worker to crash in unexpected ways need to be moved out of the way after a few execution attempts so that they do not cause future trouble.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Database-agnostic.&lt;/strong> As is the case for all of III-IV-based services, the choice of the database must be independent from the queue logic and both PostgreSQL (for production) and SQLite (for lightning-fast tests) must be supported. However, the database must be ACID because it will be used for synchronization.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>With these, you can start envisioning how the queue looks like. Beware that I&amp;rsquo;m no expert in queuing systems, so this design and implementation are possibly flawed or incomplete in various ways&amp;hellip; but it does the job for now. Let&amp;rsquo;s dive into its specifics.&lt;/p>
&lt;h1 id="azure-functions-integration">Azure Functions integration&lt;/h1>
&lt;p>The first consumer of the task queue was going to be EndTRACKER and, right now, EndTRACKER runs as an Azure Functions serverless service: I upload a tiny Rust binary that exposes an HTTP interface and the cloud runtime takes care of spinning up short-lived containers whenever the configured HTTP routes are accessed. The only magic involved is making the Rust HTTP server expose itself via the TCP/IP port given to it in the &lt;code>FUNCTIONS_CUSTOMHANDLER_PORT&lt;/code> environment variable&amp;mdash;and, after that, all communication between the Azure Functions runtime and the Rust binary happens over HTTP.&lt;/p>
&lt;p>This is great, but&amp;hellip; I had to clear some questions before even attempting to write the queue service in this environment.&lt;/p>
&lt;p>The first question was: was it even possible to build the queue runtime in a serverless environment? A worker is, in theory, a long-lived process that polls the queue every few seconds or minutes to detect work to do and executes such work. The answer is obviously &amp;ldquo;yes, you can do that&amp;rdquo;. Imagine exposing a &lt;code>/queue-loop&lt;/code> HTTP endpoint and having a timer that calls this endpoint periodically to trigger the queue&amp;rsquo;s processing loop. As long as the loop can execute at least one task within the maximum allowed container run time, the queue will make forward progress.&lt;/p>
&lt;p>The second question was: can we integrate this timer into Azure Functions without needing a separate cron job that pokes &lt;code>/queue-loop&lt;/code> every few minutes? The answer also seemed to be yes: Azure Functions endpoints can be exposed via different triggers. Some triggers are HTTP endpoint calls, but other triggers, such as timers, can be used. If we define a trigger like the following in a &lt;code>functions/queue-loop.json&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;bindings&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;timerTrigger&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;direction&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;in&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;req&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;schedule&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0 */10 * * * *&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then the Azure Functions runtime will call this &lt;code>queue-loop&lt;/code> function every 10 minutes given the &lt;code>schedule&lt;/code> stanza above.&lt;/p>
&lt;p>But then the third question was: this is not an HTTP trigger&amp;hellip; can it be processed at all from a custom Rust binary, or are the officially supported SDKs relying on some &lt;em>other&lt;/em> communication mechanism with the runtime engine to react to non-HTTP triggers?&lt;/p>
&lt;p>Fortunately, the answer is also yes. It took me a bit of fiddling, but in the end I found that the runtime will invoke the &lt;code>/queue-loop&lt;/code> POST HTTP handler (outside of the default &lt;code>/api&lt;/code> namespace for user-supplied handlers). However, after I got this hooked up, I noticed that the Azure Functions runtime claimed that my handler failed (even when it did return a &lt;code>200 OK&lt;/code> code) and kept re-invoking it every few seconds&amp;mdash;as if previous calls had been lost. This took some more effort to figure out, and I had to peek into the C# SDK code to find the answer: the endpoint needs to return a valid JSON payload, not an empty document. After figuring this out, changing the endpoint to return an empty &lt;code>{}&lt;/code> dictionary allowed the runtime to interact with my handler just fine.&lt;/p>
&lt;p>I was cleared to proceed with the original idea.&lt;/p>
&lt;h1 id="the-client-interface">The client interface&lt;/h1>
&lt;p>Defining the right interface for tasks, especially the internal interface to process them, took many iterations. As mentioned earlier, clients must not know anything about how tasks are executed, so there have to be two separate APIs: one that is public for clients, and one that is internal to the workers.&lt;/p>
&lt;p>In the end, I settled on the following client operations. Note that this is missing &lt;em>a ton&lt;/em> of details, so don&amp;rsquo;t take the Rust code too literally here:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="nc">TaskResult&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// The task succeeded with an optional diagnostic/status message.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Done&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// The task failed hard with the given error message.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Failed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// The task was abandoned after N failed retries with the given error message.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Abandoned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="no">DB&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Task&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Client&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="no">DB&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Task&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">DB&lt;/span>: &lt;span class="nc">Database&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Task&lt;/span>: &lt;span class="nc">Serialize&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Creates a new client that uses the `db` database for task persistence.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">db&lt;/span>: &lt;span class="nc">DB&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Enqueues a new `task` and returns the identifier assigned to it.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">enqueue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">task&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">T&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Uuid&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Checks if the task `id` has finished execution by querying the database.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">poll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>: &lt;span class="nc">Uuid&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TaskResult&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Waits for the task `id` to finish execution by polling it every `period`.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>: &lt;span class="nc">Uuid&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">period&lt;/span>: &lt;span class="nc">Duration&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TaskResult&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We have a &lt;code>Client&lt;/code> that is connected to a database of a generic type at construction time. This client provides a mechanism to enqueue a JSON-serializable task via an &lt;code>enqueue&lt;/code> method, which returns the identifier of the enqueued task, and also offers methods to &lt;code>poll&lt;/code> for the task&amp;rsquo;s status as it runs and to &lt;code>wait&lt;/code> until the task completes.&lt;/p>
&lt;p>All operations issued by the client happen by talking to the database. To avoid a potential hot spot in inserting tasks, tasks cannot be identified by a globally-unique counter because, otherwise, multiple concurrent clients would need to synchronize on that datum. This is why tasks use UUIDs as identifiers. (I suppose using the default &amp;ldquo;row id&amp;rdquo; of the database could have also worked here just fine, but I&amp;rsquo;m already using UUIDs for many other things, so that&amp;rsquo;s what I picked.)&lt;/p>
&lt;p>The above is the essence of the &lt;code>Client&lt;/code>, but it has other methods. Take a look at &lt;a href="https://github.com/jmmv/iii-iv/blob/eec320cd02149f223d8a9c7f8d697845ec2114d8/queue/src/driver/client.rs">the &lt;code>client&lt;/code> module&lt;/a> for more details.&lt;/p>
&lt;h1 id="the-worker-service-not-a-microservice">The worker service: not a microservice&lt;/h1>
&lt;p>The worker is exposed as a &lt;code>Worker&amp;lt;Task&amp;gt;&lt;/code> type which looks like this. Pardon my over-simplified Rust:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Task&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Worker&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Task&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Task&lt;/span>: &lt;span class="nc">Deserialize&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Creates a new worker process that uses the `db` database to extract
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// tasks and persist task state, uses `opts` for configuration, and
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// relies on `exec` for the task execution logic.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Exec&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ExecFut&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">db&lt;/span>: &lt;span class="nc">DB&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">opts&lt;/span>: &lt;span class="nc">WorkerOptions&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">exec&lt;/span>: &lt;span class="nc">Exec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">DB&lt;/span>: &lt;span class="nc">Database&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Exec&lt;/span>: &lt;span class="nb">Fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">ExecFut&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ExecFut&lt;/span>: &lt;span class="nc">Future&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Output&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ExecResult&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Tells the worker to look for runnable tasks in the database and to
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// run them.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">notify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The worker&amp;rsquo;s &lt;code>new&lt;/code> constructor spawns a Tokio background task that loops infinitely, polling tasks from the database &lt;code>db&lt;/code> and using the &lt;code>exec&lt;/code> closure to execute each runnable task. The user-configurable options provided in &lt;code>opts&lt;/code> tune the behavior of the loop, and all of these options can be provided via environment variables.&lt;/p>
&lt;p>But the infinite loop does nothing on its own. The worker loop starts idle and it only runs tasks whenever the &lt;code>notify&lt;/code> method is called. There is an async channel between the Tokio background task and the &lt;code>Worker&lt;/code> instance, which &lt;code>notify&lt;/code> uses to awaken the loop. This is where the previously-described HTTP API handler &lt;code>/queue-loop&lt;/code> comes into play: this handler wraps a &lt;code>Worker&lt;/code> and simply invokes &lt;code>notify&lt;/code> on it to trigger the processing loop.&lt;/p>
&lt;p>As for the &lt;code>exec&lt;/code> suppliers, these closures are intended to be stateless in memory, which simplifies their design. Remember that tasks can be executed from different workers, more than once if they have to be retried, and that the worker processes can die at any time&amp;hellip; so keeping state in memory is nonsensical. It &lt;em>is&lt;/em> possible to maintain state in memory in a very convoluted way, which I had to do for unit-testing purposes, but such difficulty is tolerable given this rationale.&lt;/p>
&lt;p>The most interesting thing about the &lt;code>exec&lt;/code> closure is its return type, which looks like the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="nc">ExecError&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// The task hard-failed with the given error message.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Failed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// The task asked to be retried after a certain delay with a diagnostic
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// message.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RetryAfterDelay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Duration&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// The task asked to be retried after a specific timestamp with a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// diagnostic message.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RetryAfterTimestamp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">OffsetDateTime&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">type&lt;/span> &lt;span class="nc">ExecResult&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ExecError&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are blanket conversions from database-layer errors (&lt;code>DbError&lt;/code>) and business logic errors (&lt;code>DriverError&lt;/code>) into &lt;code>ExecError&lt;/code> that classify these error types into either fatal failures or retriable failures. This allows the Rust try operator &lt;code>?&lt;/code> to do the right thing by default.&lt;/p>
&lt;p>As in the client section, the above is just a sketch of the &lt;code>Worker&lt;/code>. Take a look at &lt;a href="https://github.com/jmmv/iii-iv/blob/eec320cd02149f223d8a9c7f8d697845ec2114d8/queue/src/driver/worker.rs">the &lt;code>worker&lt;/code> module&lt;/a> for the real details.&lt;/p>
&lt;h1 id="safe-retries">Safe retries&lt;/h1>
&lt;p>One key requirement we haven&amp;rsquo;t covered yet is how to achieve at-most-once execution guarantees. For this, we need to ensure that only one worker can pick up a task at any given time.&lt;/p>
&lt;p>This is easy, right? We can implement a write-ahead journal for task processing, like this:&lt;/p>
&lt;ol>
&lt;li>Load a runnable (not-yet-running) task from the queue.&lt;/li>
&lt;li>Atomically mark the task as running (thanks, ACID transactions!).&lt;/li>
&lt;li>Run the task processing logic.&lt;/li>
&lt;li>If the task fails, atomically mark it as failed so that it can be retried later after a configurable delay.&lt;/li>
&lt;li>If the task succeeds, atomically mark it as done so that it is never considered as runnable again.&lt;/li>
&lt;/ol>
&lt;p>This ensures that only one worker will ever pick up a task so we are protected against multiple concurrent executions. All good, right? Well&amp;hellip; but what happens if the worker dies at any point after marking the task as running, for whatever reason? We will leave the task &amp;ldquo;running&amp;rdquo; so it won&amp;rsquo;t ever be considered as runnable again, which means it&amp;rsquo;ll never complete!&lt;/p>
&lt;p>Thankfully, this is where the serverless runtime provided by Azure Functions comes in very handy. We can rely on the fact that the runtime enforces a maximum runtime limit for any request and use that fact to detect &amp;ldquo;lost&amp;rdquo; tasks. In other words: if we find a task in the running state that has been running for longer than the maximum allowed runtime (5 minutes by default), then we can conclude that the worker was lost and that the task has to be retried.&lt;/p>
&lt;p>Which finally brings us to quarantining. A worker can die due to external reasons (exceeding its maximum runtime, hardware failure&amp;hellip;) or it can die because the &lt;code>exec&lt;/code> handler for the task crashed. It&amp;rsquo;s the latter case that&amp;rsquo;s worrying because we could have an ill-defined task that causes a repeated crash every time a worker picks it up. Such cases are rather common in large queuing systems and can cause slowdowns in task processing or a complete DOS of the service. This is why it&amp;rsquo;s important to discard a task if it has been retried more than N times, which is what&amp;rsquo;s represented by the &lt;code>Abandoned&lt;/code> task state.&lt;/p>
&lt;h1 id="putting-it-all-together">Putting it all together&lt;/h1>
&lt;p>Two requirements of the design were to separate the queue logic from the consumer services and to &lt;em>not&lt;/em> need extra services to be running. This posed an interesting problem.&lt;/p>
&lt;p>The queue processing loop (aka the &lt;code>Worker&lt;/code>) has to run in-process with the actual service. Now, while I do like a microservice-oriented design because it keeps responsibilities clear across components, deploying a bunch of services comes at a high maintenance cost&amp;mdash;one that I am not willing to pay for my side projects. This is why, in EndTRACKER, I have opted for a microservice-like design with a monolithic deployment. The way this works is that the &lt;em>code&lt;/em> in EndTRACKER is split into various REST services, and these services all get combined into one single HTTP router from &lt;code>main.rs&lt;/code>. The result is a single binary with trivial deployment practices, but leaving an easy way out of a monolith if the need to scale any of the internal services arises.&lt;/p>
&lt;p>In actual terms, this means that EndTRACKER now has an in-process &lt;code>batch&lt;/code> &amp;ldquo;microservice&amp;rdquo; that simply spawns the generic &lt;code>Worker&lt;/code> and exposes the &lt;code>/queue-loop&lt;/code> endpoint into the HTTP router, like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Spawn the worker, connecting it to system services and the `run_task`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// execution logic.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">worker&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">iii_iv_queue&lt;/span>::&lt;span class="n">driver&lt;/span>::&lt;span class="n">Worker&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">worker_db&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">clock&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">worker_opts&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">move&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">run_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">worker&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Arc&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Mutex&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">worker&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// Instantiate the service-independent queue worker from III-IV.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// This is the `/queue-loop` handler, essentially.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">queue_router&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">iii_iv_queue&lt;/span>::&lt;span class="n">rest&lt;/span>::&lt;span class="n">worker_cron_app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">worker&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// Create the HTTP router for the microservice, bundling the generic
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// III-IV endpoints with ours.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">router&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Router&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">route&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/hourly&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">axum&lt;/span>::&lt;span class="n">routing&lt;/span>::&lt;span class="n">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hourly&lt;/span>::&lt;span class="n">cron_post_handler&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">queue_router&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Verbose&amp;hellip; but not too complicated.&lt;/p>
&lt;p>But wait, what is that &lt;code>/hourly&lt;/code> endpoint that just showed up? That&amp;rsquo;s &lt;em>another&lt;/em> Azure Functions timer trigger that gets called every hour. &lt;em>This&lt;/em> is where the service injects the &lt;code>ProcessFeeds&lt;/code> master task into the queue to trigger the whole processing flow. With that task injected into the queue, the &lt;code>/queue-loop&lt;/code> then takes over every 10 minutes to discover and process all dependent tasks as they show up.&lt;/p>
&lt;h1 id="future-use-cases">Future use cases&lt;/h1>
&lt;p>Before concluding, let me briefly mention a couple of additional use cases that the queue could serve. It&amp;rsquo;s because these use cases exist that I pursued the queue solution instead of simply deploying &lt;code>rss2email&lt;/code> as a cron job in my home server.&lt;/p>
&lt;p>The first use case is going back to this long-standing to-do in the EndTRACKER codebase:&lt;/p>
&lt;pre tabindex="0">&lt;code>// Ideally we should get full visibility into all history, but that
// can be very costly and we can tolerate some error here. To fix
// this properly, though, we&amp;#39;d need some offline data preprocessing,
// which would benefit this whole function anyway.
&lt;/code>&lt;/pre>&lt;p>This comment is referring to the logic that computes the historical page views graphs &lt;em>on demand&lt;/em>. Right now, historical queries are limited to just one month because of this, but with deferred task processing, you can imagine having a daily task that calculates which data points are missing in a timeseries and spawns tasks to generate those precomputed data points&amp;hellip; which should be trivial to implement at this point. Furthermore, having this ability to compute summarized timeseries means I could change the service to fully discard request data after processing, further reducing the risk of keeping &lt;em>any&lt;/em> private data in the database.&lt;/p>
&lt;p>The other use case would arise if I start accepting &amp;ldquo;customers&amp;rdquo; in EndTRACKER. If that were the case, one feature I&amp;rsquo;d want to expose is an &amp;ldquo;export your data as a SQLite database&amp;rdquo; button so that you wouldn&amp;rsquo;t feel trapped in the platform. Implementing such a data dump cannot happen as part of a server request, so it would also benefit from happening via a deferred task.&lt;/p>
&lt;p>Finally, that&amp;rsquo;s all for today. Remember that &lt;a href="https://github.com/jmmv/iii-iv/">III-IV is open source&lt;/a>, so this queuing system is as well. Maybe you can now find use cases for this little framework yourself!&lt;/p></description></item><item><title>MVC but for non-UI apps</title><link>https://jmmv.dev/2023/06/mvc-non-ui-apps.html</link><pubDate>Tue, 20 Jun 2023 10:00:00 -0700</pubDate><guid>https://jmmv.dev/2023/06/mvc-non-ui-apps.html</guid><description>&lt;p>In &lt;a href="https://collindonnell.com/mvc-isnt-mvc">MVC isn&amp;rsquo;t MVC&lt;/a>, which hit the &lt;a href="https://news.ycombinator.com/item?id=36397058">Hacker News front page overnight&lt;/a>, Collin Donnell describes how the MVC design pattern that we use today isn&amp;rsquo;t really what was originally &lt;a href="https://folk.universitetetioslo.no/trygver/1979/mvc-2/1979-12-MVC.pdf">envisioned in 1979 by Tyrgve Reenskaug&lt;/a>. This prompted me to think about how this architecture, if tweaked even further, maps pretty well to today&amp;rsquo;s designs of &lt;em>other kinds&lt;/em> of programs, and I want to explore two cases in this post: web services and CLI apps. I know I promised a post on the task queuing system I have written in Rust, but that will have to wait for a couple more days.&lt;/p>
&lt;p>To recap, MVC stands for &lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Model-View-Controller&lt;/a> and is a software design pattern to structure the implementation of apps that provide a &amp;ldquo;user interface&amp;rdquo;. The core idea of this pattern is to separate the presentation of the app from its business logic, and this same idea can be applied to other types of apps as well.&lt;/p>
&lt;h1 id="mvc-in-web-services">MVC in web services&lt;/h1>
&lt;p>If we take a look at a web service&amp;mdash;not a web app; we are talking about the server side only here&amp;mdash;we can map the layers of the MVC pattern as follows:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The View layer is where communication with the world happens. This layer contains the code that receives inbound network requests and writes their responses. This layer is purely in charge of deserializing and validating requests, and serializing responses in whichever protocol the service exposes. The code in this layer must restrict itself to, for example, parsing and emitting JSON, obtaining session details, or converting error types (such as exceptions or &lt;code>Result&lt;/code>s) to HTTP status codes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The Controller layer is where business logic is implemented and is sometimes called the &amp;ldquo;service layer&amp;rdquo; or, as I call it, the &amp;ldquo;driver&amp;rdquo;. Oftentimes there will be a 1:1 mapping from APIs exposed through the View layer and entry points to the Controller, but not always. This is where all kinds of decisions happen, including authorization checks and coordination of access to the various external resources that the service may need. For example, if various database operations need to be grouped in a transaction and retried on failure, this is where the transaction is created and where the retry logic (policy) lives.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The Model layer is where access to the persisted data happens and is where the high level data types for the application may be defined. This is often an abstraction over a database, but it could also be an abstraction over whichever other dependent system the service needs to talk to. For this reason, this layer may also be referred to as the &amp;ldquo;data access&amp;rdquo; layer or, more generally, the &amp;ldquo;provider&amp;rdquo; layer because it&amp;rsquo;s where the service talks to other services that provide data.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>I saw this design in practice during my time in the Azure Storage team, where our frontend exposed the same set of storage facilities through a multitude of protocols with high code reuse. I have replicated this same design in my own web services with great results and factored out common code in the &lt;a href="/software/iii-iv.html">III-IV framework&lt;/a>, whose name is a direct direct reference to this architecture. See &lt;a href="https://github.com/jmmv/iii-iv/tree/main/example/src">the sample application sources&lt;/a> to witness the three layers in action.&lt;/p>
&lt;p>But careful: note that just because a piece of code &lt;em>formats data&lt;/em> does not make that code belong to the View layer. Imagine, for example, a web service that has an API to format HTML content as a PDF file. In such a service, the Controller layer would be the one fetching the HTML document and transforming it into the PDF (even if the PDF is a &amp;ldquo;view&amp;rdquo; of some data). The View layer would be in charge of taking the PDF as a blob from the Controller layer and bundling it in whichever output format the API exposes which, in this particular case, might be emitting the blob verbatim with an &lt;code>application/pdf&lt;/code> content type header.&lt;/p>
&lt;h1 id="mvc-in-cli-apps">MVC in CLI apps&lt;/h1>
&lt;p>If we take a look at a CLI app&amp;mdash;without a TUI, because if it has a TUI the original concept of &amp;ldquo;views&amp;rdquo; applies quite literally&amp;mdash;we can map the layers of the MVC pattern as follows:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The View layer is where interactions with the user happen. This is where the app processes the command line flags and arguments and converts them to internal data structures. This is also where help requests are handled, where input data is gathered if the app is interactive, and where progress reporting and error messages are formatted for display. I already &lt;a href="/2013/08/cli-design-cli-is-presentation-layer.html">mentioned this back in 2013&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The Controller layer is where the application logic belongs. Notably, this layer must not interact with the console at all: &lt;code>printf&lt;/code>s of any kind do not belong here.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The Model layer is where abstractions around the file system&amp;mdash;or whichever other external system the app talks to&amp;mdash;may live. For CLI apps wrapping a web service or a database, this is where the calls to those systems happen.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>CLI apps vary in complexity, however, so structuring the code in these layers may result in overengineering and not be a reasonable thing to do. That said, it is often possible to organize any kind of app in these layers and it is good to &lt;em>think about&lt;/em> how the code could be structured, because this thought process can lead to better design decisions. Take two examples:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Something as &amp;ldquo;simple&amp;rdquo; as &lt;code>ls(1)&lt;/code> could be organized into these three layers: it has a complex UI due to the myriad flags it supports; it has a certain high-level logic to coordinate various disk operations such as &lt;code>readdir(3)&lt;/code> and &lt;code>stat(2)&lt;/code> calls and order the results based on whichever criteria the user requested; and it needs to access the disk via the libc operations already mentioned.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Something as complex as Git could also be organized into these three layers if it&amp;rsquo;s already not so: the View layer could implement the code to handle the many different commands that the CLI has; the Model layer could implement the core worktree, repository, and index structures and the primitives to manipulate them; and the Controller layer could implement the business logic to do things like commit a change or coordinate with a remote server to synchronize repository contents.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>I am of the strong opinion that separating the View-specific code (command line handling) from the rest of the app is a good practice in general, and is critical to allow easier automated testing of the app&amp;rsquo;s logic. As for the separation of Controller and Model in a CLI app, well, it depends on the size of the codebase really.&lt;/p>
&lt;h1 id="tweaks">Tweaks&lt;/h1>
&lt;p>Now, in theory, given that MVC is a layered design, the View layer can only interact with the Controller layer, and the Controller layer can only interact with the Model layer. This sounds nice, but in practice, expressing these layers in code becomes tricky as soon as you introduce high-level data types to represent the in-memory state of the program. And I&amp;rsquo;m a fan of using high-level types to validate program correctness at compile time as much as possible.&lt;/p>
&lt;p>Consider this example: your service has a &lt;code>Person&lt;/code> structure. &lt;code>Person&lt;/code> instances are created in the Model layer based on a query to the database. The Controller layer calls into the model layer to obtain &lt;code>Person&lt;/code> instances, and returns those to the View layer. The View layer serializes those objects as JSON to return them as part of an API call. So, the question is: where is the &lt;code>Person&lt;/code> type defined? It needs to be defined under the Model layer because this is the lowest layer that needs the type&amp;hellip; but then&amp;hellip; the View layer must skip the Controller layer in order to reach for the &lt;code>Person&lt;/code> type definition. Conceptually that&amp;rsquo;s probably OK, but in code this means adding a build-time dependency between the View and Model layers&amp;mdash;a dependency that should not exist.&lt;/p>
&lt;p>This is why I have found it useful to extend this layered architecture with two extra &amp;ldquo;layers&amp;rdquo;: a Data model layer which provides dumb high-level data types to represent the data the application manages, and a Utilities layer that encapsulates code that&amp;rsquo;s not specific to the app and that could/should well live in a separate (possibly third-party) library. With these in mind, we end up with the following code structure:&lt;/p>
&lt;figure>
&lt;img src="/images/2023-06-20-mvc-layers.svg" class="with-border">
&lt;figcaption>Structure of the MVC layers with other layers.&lt;/figcaption>
&lt;/figure>
&lt;p>It&amp;rsquo;s critical to note that the objects in the Data model do &lt;em>not&lt;/em> encapsulate data access operations: &lt;em>they are not&lt;/em> &lt;a href="https://en.wikipedia.org/wiki/Data_access_object">DAOs&lt;/a> in the traditional sense of OOO programming. These types are pure in-memory representations of application data with no logic in them. Obtaining instances of these objects from storage and modifying their persisted representation must all happen via direct calls to database layer operations.&lt;/p>
&lt;p>Anyway. I do not like to get hung up with naming and trying to shoehorn designs into strict &amp;ldquo;patterns&amp;rdquo; when those do not apply. What I described isn&amp;rsquo;t really MVC if you are a purist, but it&amp;rsquo;s nice to see how old concepts from the 70s&amp;ndash;80s still make sense today with minor tweaks. What I will say, though, is that every time I&amp;rsquo;ve sensed this split made sense and cut corners anway because the split seemed to complicate things upfront&amp;hellip; I ended up suffering the consequences very quickly. In particular, development agility slows downs as it becomes hard to reason about changes, and unit testing soon becomes impossible.&lt;/p></description></item><item><title>In-house email subscriptions</title><link>https://jmmv.dev/2023/06/in-house-email-subscriptions.html</link><pubDate>Fri, 16 Jun 2023 06:30:00 -0700</pubDate><guid>https://jmmv.dev/2023/06/in-house-email-subscriptions.html</guid><description>&lt;p>In a move that&amp;rsquo;s &lt;a href="https://killedbygoogle.com/">typical of Google&lt;/a>, Feedburner received the &amp;ldquo;update&amp;rdquo; treatment two years ago: its support for RSS-to-email notifications was turned down. I had been relying on this service to offer email subscriptions for this blog for many years, but as the service vanished, I had to find a replacement.&lt;/p>
&lt;p>As I did not have a lot of time nor desire to assess alternatives, I took the bait from a salesperson from follow.it and I &lt;a href="/2021/07/feedburner-to-follow-it-migration.html">moved my subscribers to their free service&lt;/a>. And let me tell you that&amp;hellip; I have not been happy with it. If you have received any of their emails, you well know that they look like spam: my content appears as just one tiny text line among various sketchy links and large unrelated images. In fact, I have been ashamed of these emails.&lt;/p>
&lt;p>Was there an easy solution to this problem? Sure. I could have upgraded to the &amp;ldquo;Super-cool&amp;rdquo; follow.it plan in order to customize the look-and-feel of the emails&amp;hellip; but paying a subscription &lt;em>just for that one feature&lt;/em> seemed out of proportion: there are other features I want to offer in this blog that a static site cannot provide, and if I had to pay for one, I&amp;rsquo;d rather get others too.&lt;/p>
&lt;hr>
&lt;p>Over this same time period, you might recall that I have been working on a little service to support the dynamic aspects of this blog. In particular, this service has been taking care of &lt;a href="/2022/02/diy-web-analytics.html">privacy-respecting analytics&lt;/a>, post voting, and &lt;a href="/2022/02/comments-and-ids.html">comments&lt;/a>. Its name: EndTRACKER&amp;mdash;an awful name in retrospect because invasively tracking readers is the last thing I want to do, so the name has to change.&lt;/p>
&lt;p>Given that I already had a custom service supporting this blog, I thought the obvious: why not make it handle email subscriptions too? That would be the last feature I needed to have a dynamic-feeling blog without abandoning &lt;a href="/2018/02/from-jekyll-to-hugo.html">the static page builder I use&lt;/a>. And thus I got my hands dirty to make this work.&lt;/p>
&lt;p>The first thing I did was to add the subscription and unsubscription flows. This was ready pretty quickly because I could reuse code from the EndBASIC Service. Thus, at the beginning of May, I dropped follow.it altogether. As a little bonus of this migration, I was able to display the total number of subscribers next to the subscription box, and also add a subscription box to &lt;a href="https://endbasic.dev/">the EndBASIC web site&lt;/a> &amp;ldquo;for free&amp;rdquo;.&lt;/p>
&lt;p>But then what? After I made that (premature) move to a custom subscription process&amp;hellip; the next problem arose: how could I actually &lt;em>send&lt;/em> notifications to you all every time there is a new post?&lt;/p>
&lt;p>There are many trivial solutions to this problem, like manually copying the (small) list of subscribers into Outlook and composing an email, or creating a Google Groups read-only mailing list, or giving up altogether on self-hosting and moving to Substack. But&amp;hellip; none of these felt right. I wanted automation, so automation I built.&lt;/p>
&lt;hr>
&lt;p>Since then, I&amp;rsquo;ve been busy &lt;del>at work&lt;/del> in my very-limited free time coming up with the necessary automation to scrape the RSS feed of an arbitrary site and to reliably send email notifications for any new entries to that site&amp;rsquo;s subscribers.&lt;/p>
&lt;p>Does that sound like a trivial (and fun!) feature to build? Yes, yes it does. But making it work reliably and safely has been incredibly time-consuming. To give you a glimpse of what was involved:&lt;/p>
&lt;ul>
&lt;li>I started by creating a persistent task processing queue (because why not): a service that monitors a stored description of tasks and executes them in the context of a serverless runtime engine, with automatic retries if things go wrong.&lt;/li>
&lt;li>Then I bundled this new service into EndTRACKER to run periodic tasks and defined 1. a task to scrape RSS feeds, storing their processed contents into a database, and 2. another task that fans out and schedules finer-grained tasks for individual email notifications.&lt;/li>
&lt;li>Then I had to add safety measures to abort early if the notification logic decides to do the wrong thing (just in case).&lt;/li>
&lt;li>Then I had to add throttles to not exceed daily email submission limits.&lt;/li>
&lt;li>Then I had to write a small HTML processor to sanitize the content of the feed items before injecting them into emails.&lt;/li>
&lt;li>While, all along, writing a lot of test cases: 40% of the code supporting this feature are tests because I&amp;rsquo;m really concerned about the automation going rogue and spamming you all. And I still feel that test coverage is insufficient.&lt;/li>
&lt;/ul>
&lt;p>All of this so that you can be notified of this and future posts in the form of concise, spam-free emails. Yay?&lt;/p>
&lt;hr>
&lt;p>In the next post, I&amp;rsquo;ll take a deep dive into the teeny-tiny persistent task queue service I wrote, which I&amp;rsquo;ve open-sourced as part of &lt;a href="/software/iii-iv.html">III-IV&lt;/a>. This service is written in Rust, runs in the context of the Azure Functions serverless runtime, and is backed by PostgreSQL.&lt;/p>
&lt;p>Oh, and by the way: I&amp;rsquo;m planning on opening up EndTRACKER to fellow static site creators: if you have a static blog and have wanted to add select dynamic features to it, this may be the right choice for you! EndTRACKER is intended to be a collection of REST services you can pick and choose from, allowing you to integrate them into your site with whatever look-and-feel you like, all while providing a hosted admin interface. Take a look at the &lt;a href="https://endtracker.azurewebsites.net/">new WIP website&lt;/a>, which currently (only) includes a demo of the statistics features. Subscribe to updates to receive an early-adopter invite when it&amp;rsquo;s ready to launch!&lt;/p></description></item><item><title>Addressing Bazel OOMs</title><link>https://jmmv.dev/2023/03/addressing-bazel-ooms.html</link><pubDate>Thu, 16 Mar 2023 14:00:00 -0700</pubDate><guid>https://jmmv.dev/2023/03/addressing-bazel-ooms.html</guid><description>&lt;p>Here at Snowflake, the Developer Productivity organization (DPE for short) is tackling some important problems we face as a company: namely, lengthening build times and complex development environments. A key strategy we are pursuing to resolve these is the migration of key build processes from CMake and Maven to &lt;a href="https://bazel.build/">Bazel&lt;/a>.&lt;/p>
&lt;p>We are still in the early stages of this migration and cannot yet share many details or a success story, but we can start explaining some of the issues we encounter as we work through this ambitious project.&lt;/p>
&lt;p>More specifically, in today&amp;rsquo;s post I want to talk about how we diagnosed and fixed three different issues that made Bazel trip over the Linux OOM killer. These issues led to spurious build failures and made our workstations unusable due to memory thrashing.&lt;/p>
&lt;p>The guiding principle behind the fixes I&amp;rsquo;ll describe is that flaky builds are infinitely worse than slow builds. A build that passes 100% of the time but is slower than it could potentially be will convince developers that &lt;a href="/2020/12/google-no-clean-builds.html">&lt;code>make clean&lt;/code> can be a thing of the past&lt;/a>. A build that is really fast but breaks at random will do the opposite: it will show sloppiness and a lack of quality, leaving skeptical developers to wonder why adopting Bazel is worth the migration cost. Therefore, at this early stage in the migration process, it is fine for us to trade build speed for reliability.&lt;/p>
&lt;p>Let&amp;rsquo;s dive in.&lt;/p>
&lt;h1 id="concurrent-linkers">Concurrent linkers&lt;/h1>
&lt;p>The first problem we encountered was obvious from the onset given that our CMake builds had exhibited the same issue in the past and we had a workaround for it in place.&lt;/p>
&lt;p>As is common in the build graph of complex applications with many tests, we have a collection of C++ test targets that depend on heavy common libraries. Each of these tests is linked separately, and the linker consumes a significant amount of memory to process each one of them: about 8GB per linker invocation in the &lt;code>-c fastbuild&lt;/code> configuration. Unsurprisingly, if we concurrently run a handful of these on a local dev environment capped at, say, 16–20GB of RAM, we quickly run into OOM scenarios.&lt;/p>
&lt;p>But, if you know some Bazel internals, you&amp;rsquo;d expect this to not happen: Bazel has &lt;a href="/2019/12/bazel-local-resources.html">provisions to avoid overloading the host machine&lt;/a> when scheduling local actions so, in theory, we should not be seeing any issue. To summarize: the way this works is by making every build rule estimate how much resources its build actions will consume in the form of an &amp;ldquo;X CPUs and Y MBs of RAM&amp;rdquo; quantity. Bazel then compares these numbers against its own understanding of total machine capacity and uses this information to limit the parallelism of local actions.&lt;/p>
&lt;p>Sounds good, right? Unfortunately, this mechanism isn&amp;rsquo;t great because it relies on the build rules to provide an accurate estimate of their resource consumption. This estimation is hard to do upfront, especially when the rules support a multitude of toolchains with potentially different performance profiles. Let&amp;rsquo;s peek under the hood and see what the C++ rules do in order to compute the memory requirements of every linker action. Here is what the code in &lt;code>CppLinkAction.java&lt;/code> &lt;a href="https://cs.opensource.google/bazel/bazel/+/f3be7b16aa319676e56ec54fe0e9ca3d0e1fbf7a:src/main/java/com/google/devtools/build/lib/rules/cpp/CppLinkAction.java;l=131">had to say&lt;/a> circa 2021:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Linking uses a lot of memory; estimate 1 MB per input file,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// min 1.5 Gib. It is vital to not underestimate too much here,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// because running too many concurrent links can thrash the machine
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// to the point where it stops responding to keystrokes or mouse
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// clicks. This is primarily a problem with memory consumption, not
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// CPU or I/O usage.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ResourceSet&lt;/span> &lt;span class="n">LINK_RESOURCES_PER_INPUT&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ResourceSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createWithRamCpu&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// This defines the minimum of each resource that will be reserved.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ResourceSet&lt;/span> &lt;span class="n">MIN_STATIC_LINK_RESOURCES&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ResourceSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createWithRamCpu&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1536&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Dynamic linking should be cheaper than static linking.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ResourceSet&lt;/span> &lt;span class="n">MIN_DYNAMIC_LINK_RESOURCES&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ResourceSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createWithRamCpu&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This behavior &lt;a href="https://cs.opensource.google/bazel/bazel/+/01c10e030c1e453fa814d316f8f9950420bd3de7:src/main/java/com/google/devtools/build/lib/rules/cpp/CppLinkAction.java;l=420">changed in commit &lt;code>01c10e03&lt;/code>&lt;/a> in an attempt to improve the situation based on build performance data collected at Google:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">commit 01c10e030c1e453fa814d316f8f9950420bd3de7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Author: wilwell &amp;lt;wilwell@google.com&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Date: Fri Jul 16 05:41:57 2021 -0700
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Memory expectations for local CppLink action
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> During investigation we find out the better linear dependency
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> between number of inputs and memory.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Using our data we made linear estimation of form C + K * inputs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> such that 95% of actions used less memory than estimated.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> In case of memory overestimate we will make our builds slower,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> because of large amount unused memory, which we could use for
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> execution other actions.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> In case of memory underestimate we could overload system and get
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> OOMs during builds.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From a previous life, I knew that this piece of code was problematic for local linking, but this recent commit made me think that the new memory estimation in Bazel was close to reality: Google has a vast repository of build performance data from which to deduce a good model. Therefore, I was left to think that our build graph broke these assumptions for some reason.&lt;/p>
&lt;p>Yet&amp;hellip; something was off. As a first experiment, I tried to limit the RAM available to Bazel with &lt;code>--local_ram_resources=8192&lt;/code>, hoping that a much lower limit than the default would cap the number of concurrent linkers. Interestingly, this did not have any effect. I tried going lower, specifying 1GB as the limit, and the results were equally puzzling. Why wasn&amp;rsquo;t this flag limiting linker concurrency &lt;em>at all&lt;/em>? The answer is in the code logic described above: I patched the C++ link rule to print its thoughts on the resource limits and I found that the new rule concluded that &lt;em>all&lt;/em> of our link actions needed only 50 MBs of RAM each. 50MB is wrong by a factor of ~160 and explains why lowering &lt;code>--local_ram_resources&lt;/code> did not make a difference.&lt;/p>
&lt;p>The most likely explanation for this difference is that our Bazel configuration was stuck on the old-and-rusty &lt;code>ld&lt;/code> when I debugged this problem and Google drew its conclusions from &lt;code>gold&lt;/code> or &lt;code>lld&lt;/code>, but I do not know yet. Note that, at the time of this writing, we have already moved away from &lt;code>ld&lt;/code>. &lt;a href="https://github.com/bazelbuild/bazel/issues/17368">Issue #17368&lt;/a> tracks this.&lt;/p>
&lt;h1 id="real-fix-resource-set-overrides">Real fix: resource set overrides&lt;/h1>
&lt;p>The simplest solution to this problem would have been to tweak the C++ build rules and update their memory model for our scenario: if we could tell Bazel that our linker actions require 8GB of RAM, we could have done that and called it a day.&lt;/p>
&lt;p>And I tried. I researched if we could specify a tag of the form &lt;code>ram:Xmb&lt;/code> for the linker rules, hoping that tags like these would override the requirements computed by the rules. Support for a &lt;code>ram:Xmb&lt;/code> tag, however, does not exist. There is support for a &lt;code>cpu:N&lt;/code> tag, so as a compromise I thought of leveraging this to claim that the linker uses all CPUs on the machine. But&amp;hellip; &lt;code>cpu:N&lt;/code> only applies to tests and is not recognized in other kinds of targets. Digging deeper, I discovered the &lt;code>--experimental_allow_tags_propagation&lt;/code> option, which I hoped would cause the &lt;code>cpu:N&lt;/code> tag to be propagated to the actions and have the desired effect, but testing revealed that this was not the case either. (I&amp;rsquo;m actually not yet sure what this flag does.)&lt;/p>
&lt;p>If the C++ rules had been written in Starlark, and if &lt;a href="https://github.com/bazelbuild/bazel/issues/6477">issue #6477&lt;/a> from 2018 had been implemented, we could also have been able to paper over the problem. But the C++ rules are still native rules, which means that they cannot be modified without rebuilding Bazel. Not an option at this point.&lt;/p>
&lt;p>I hit a lot of dead ends. Short of modifying Bazel to special-case our requirements, which we are trying hard to avoid, I had to find another solution that could be implemented within the constraints of what Bazel allows today. Which, by the way, I kinda enjoy doing.&lt;/p>
&lt;h2 id="workaround-linker-wrapper-to-limit-concurrency">Workaround: linker wrapper to limit concurrency&lt;/h2>
&lt;p>The workaround came in the form of a wrapper over the linker plumbed through our own toolchain definition. This wrapper is a simple script that uses &lt;code>flock(1)&lt;/code> on the linker binary to allow just one linker invocation at a time. This is suboptimal because, by the time the wrapper runs, Bazel has already decided to run the action. As a result, Bazel is holding one of its job slots hostage to a script that may do nothing for many seconds, lowering overall throughput. In practice, however, this is not a problem because most link actions pile up towards the end of the build where parallelism is already minimal and where we really cannot afford to run linkers in parallel.&lt;/p>
&lt;p>Implementing this wrapper sounds simple but the devil lies in the details, as is usually the case. For example: given that the wrapper has to run a specific linker, I needed the wrapper to include the path to the linker. I wanted to do this using a &lt;code>genrule&lt;/code> to create the wrapper, but this seems impossible to achieve as described in &lt;a href="https://github.com/bazelbuild/bazel/issues/17401">issue #17401&lt;/a>. Additionally, even after working around that issue, I encountered further problems with the &lt;code>cmake&lt;/code> rule, which somehow ended up trying to invoke the wrapper script via a relative path and failed to do so. After reading the code of the &lt;code>cmake&lt;/code> rule, I found that if the paths to tools are from external repos, the rules will absolutize them&amp;hellip; so as yet-another-workaround, I created a nested workspace to hold the wrapper, which was sufficient to trick &lt;code>cmake&lt;/code> into doing the right thing.&lt;/p>
&lt;p>Remember: this solution was just a workaround that we could live with for a little while. We have adopted lld in our Bazel builds, just like our CMake builds do, since I wrote this draft and we have mostly adopted remote execution, both of which have made this issue invisible.&lt;/p>
&lt;h1 id="concurrent-foreign-builds">Concurrent foreign builds&lt;/h1>
&lt;p>The second problem we encountered was due to our use of &lt;code>rules_foreign_cc&lt;/code> to build a bunch of C++ external dependencies. We have a dozen or so of these using a combination of &lt;code>configure_make&lt;/code>, &lt;code>make&lt;/code>, and &lt;code>cmake&lt;/code>.&lt;/p>
&lt;p>Our first cut at building these dependencies was to pass &lt;code>-j $(nproc)&lt;/code> as an argument to the foreign rules. This works great when the actions spawned by these rules run in a remote build farm: each executor node will run the nested build in a container that will expose as many CPUs as it wants to expose and cause no harm to sibling processes. But this does not work so well in a local build. In the ideal case, these nested builds would end up evenly spaced throughout the build, spreading their resource overload to random points. Unfortunately, that&amp;rsquo;s not what we observed: our build graph has a choke point on these foreign dependencies so, during a build, it is easy to notice that Bazel has to run and wait for a bunch of these foreign compiles simultaneously.&lt;/p>
&lt;p>As you can imagine, this can turn into a problematic scenario. For example: if the host machine running Bazel has 8 CPUs in total and Bazel is running 6 nested builds (based on the default &lt;code>--local_cpu_resources&lt;/code> computation), each configured to run 8 parallel jobs via &lt;code>-j 8&lt;/code>, we potentially have &lt;em>6 * 8 = 42&lt;/em> resource-hungry processes in competition. If these processes compete for CPU alone, then they will take a long time to finish but nothing too bad will happen. If they compete for RAM, however, as happens with linkers as described earlier, then it&amp;rsquo;s easy to enter a thrashing situation that&amp;rsquo;s hard to get out of.&lt;/p>
&lt;h2 id="real-fix-cooperative-parallelism">Real fix: cooperative parallelism&lt;/h2>
&lt;p>The correct solution to this is to teach cooperative parallelism to Bazel &lt;a href="https://github.com/bazelbuild/bazel/issues/10443">issue #10443&lt;/a>: every time Bazel runs an action that can consume N CPUs, Bazel should be aware of this fact and schedule it accordingly.&lt;/p>
&lt;p>You can imagine this as a &lt;code>cpu:N&lt;/code> tag like the one described above, which would indicate the parallelism of each nested build and would sequence them when run through Bazel. Or it could be in the form of Bazel leveraging &lt;a href="https://www.gnu.org/software/make/manual/html_node/Job-Slots.html">GNU Make&amp;rsquo;s jobserver feature&lt;/a> to coordinate the parallelism of those submakes. I&amp;rsquo;m not going to design this feature in this post but&amp;hellip; are you interested in doing this? It sounds like an awesome intern project that I&amp;rsquo;d be pleased to mentor!&lt;/p>
&lt;h2 id="workaround-nested-make-job-limits">Workaround: nested make job limits&lt;/h2>
&lt;p>As a compromise, I went back to the wrapper approach. In this case, a wrapper checks for details of the running environment to determine whether the nested build can use all resources of the machine or not. If it can, such as on build farm workers, then the wrapper passes &lt;code>-j $(nproc)&lt;/code> to these nested builds and calls it a day. If it cannot, then the wrapper tries to be smart: for GNU Make, it passes &lt;code>-j $(nproc) -l $(nproc)&lt;/code> to try to use as many CPUs as possible while accounting for load average; and for CMake, it just passes &lt;code>-j 2&lt;/code> as I have not found out how to plumb through the &lt;code>-l&lt;/code> equivalent.&lt;/p>
&lt;p>Like before, adding such a wrapper sounds simple in theory but becomes hard to do in practice. A specific detail that turned out to be problematic is the way &lt;code>rules_foreign_cc&lt;/code> constructs wrapper scripts. The rules try to generate scripts that can work both on a POSIX Shell and on Windows&amp;rsquo; &lt;code>cmd.exe&lt;/code>&amp;hellip; which is a nightmare due to quoting differences, plus the resulting scripts become unreadable. In the end, I got this to work, which was quite nice.&lt;/p>
&lt;h1 id="concurrent-remote-actions">Concurrent remote actions&lt;/h1>
&lt;p>The third problem we encountered was the most puzzling of all. After resolving the other two issues, there was nothing else left in the build that could consume too much memory. Yet&amp;hellip; occasionally, the Linux OOM killer would show up and terminate Bazel. And it would &lt;em>always&lt;/em> terminate Bazel. Unfair, isn&amp;rsquo;t it?&lt;/p>
&lt;p>Fortunately, when the Linux OOM killer kicks in, it dumps the process table along with memory statistics to the kernel log. Looking there, I noticed two culprits:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">[648264.500883] Tasks state (memory values in pages):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[648264.500884] [ pid ] uid tgid total_vm rss pgtables_bytes swapents oom_score_adj name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[648264.500993] [ 10337] 1970 10337 5440032 3303604 34402304 585643 0 java
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[648264.501024] [ 30196] 1970 30196 1353096 1344352 10874880 0 0 ld
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[648264.501030] oom-kill:constraint=CONSTRAINT_NONE,nodemask=(null),cpuset=/,mems_allowed=0,global_oom,task_memcg=/user.slice/user-1970.slice,task=java,pid=10337,uid=1970
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[648264.501486] Out of memory: Killed process 10337 (java) total-vm:21760128kB, anon-rss:13214416kB, file-rss:0kB, shmem-rss:0kB, UID:1970 pgtables:33596kB oom_score_adj:0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[648265.100163] oom_reaper: reaped process 10337 (java), now anon-rss:0kB, file-rss:0kB, shmem-rss:0kB
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A single linker (thanks to the changes described earlier) and Bazel. If we do the math, because &lt;code>total_vm&lt;/code> and &lt;code>rss&lt;/code> are in &lt;em>pages&lt;/em> (because why would they not), we see that the linker is using 5GB of RAM and Bazel is using&amp;hellip; 13GB? Wait, what? Why?&lt;/p>
&lt;p>What I noticed from these crashes is that they seemed to happen when Bazel was running multiple remote &lt;code>Compiling&lt;/code> actions at once, at least as reported in the Bazel UI. This made me suspect (again, thanks to past experience) that the state Bazel was holding in memory for each running action was large, and when combined with hundreds of parallel actions, memory requirements ballooned. But still, 13GB was &lt;em>a lot&lt;/em>, and if this were true, there would be few options for us short of growing the total RAM of our dev environments.&lt;/p>
&lt;p>Looking closer, I noticed that during our initial deployment of our build farm, we bumped the max heap size that Bazel was allowed to use to 14GB. The rationale given at the time was that the build graph was too big and we needed more RAM due to the increased &lt;code>--jobs&lt;/code> number. Which might be true, but this had to be better substantiated: for one, the build graph doesn&amp;rsquo;t grow with an increase of &lt;code>--jobs&lt;/code>, and for another, coordinating remote jobs shouldn&amp;rsquo;t really require that much memory.&lt;/p>
&lt;p>Also note that a large JVM heap &lt;em>limit&lt;/em> doesn&amp;rsquo;t necessarily mean that all memory will be &lt;code>live&lt;/code>. An implication of a large heap is that the JRE will postpone GC cycles for longer. So by giving Bazel a max heap of 14GB on a 16–20GB environment, we were telling the JVM that it was allowed to hold onto most of the machine&amp;rsquo;s memory&amp;mdash;even if a lower limit could also have worked at the expense of additional GC cycles.&lt;/p>
&lt;h2 id="real-fix-measurement-and-tuning">Real fix: measurement and tuning&lt;/h2>
&lt;p>The first step to solving this last problem was to measure how big the build graph really was. Seeing that our Bazel analysis phase is pretty short compared to other horrors I&amp;rsquo;ve seen in the past, I did not expect the size to be too large. But it had to be measured. This is as easy as running a command like the following and looking at the heap size in VisualVM while the command runs:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">bazel build -k --nobuild //...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note the funnily-named &lt;code>--nobuild&lt;/code> flag given to the &lt;code>build&lt;/code> command. This flag causes Bazel to stop executing the build right after the analysis phase is done, which means that the only thing that Bazel will hold onto memory is the build graph. Armed with this knowledge, I noticed something reasonable in VisualVM: after GC, Bazel&amp;rsquo;s memory usage was a mere 500MB&amp;mdash;extremely far from the 13GB used during the build.&lt;/p>
&lt;p>This was promising, but the initial observation of needing more memory due to the increase in &lt;code>--jobs&lt;/code> was probably well-founded. What could we do about it? A good starting point, as with most things in Bazel, is to research what options exist to tune the feature we suspect is problematic, which in this case was Remote Execution. Among these flags I spotted &lt;code>-- experimental_remote_discard_merkle_trees&lt;/code> and &lt;a href="https://cs.opensource.google/bazel/bazel/+/4069a87611886532a19c7e558ab4c2f1e83f53f0">commit &lt;code>4069a876&lt;/code>&lt;/a>, which introduced it, described pretty much the same problem I faced. Unfortunately, this flag is not yet in a stable Bazel release (6.0.0 at the time of this writing).&lt;/p>
&lt;p>Luckily, this also made me find &lt;code>-- experimental_remote_merkle_tree_cache&lt;/code>, which was introduced much earlier in &lt;a href="https://cs.opensource.google/bazel/bazel/+/becd1494481b96d2bc08055d3d9d4d7968d9702e">commit &lt;code>becd1494&lt;/code>&lt;/a> and which was supposed to improve this scenario based on data collected at Google. Here is what the change had to say:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">commit becd1494481b96d2bc08055d3d9d4d7968d9702e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Author: Fredrik Medley &amp;lt;fredrik.medley@gmail.com&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Date: Tue Oct 26 19:44:10 2021 -0700
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Remote: Cache merkle trees
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> When --experimental_remote_merkle_tree_cache is set, Merkle tree
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> calculations are cached for each node in the input NestedSets
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (depsets). This drastically improves the speed when checking for
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> remote cache hits. One example reduced the Merkle tree calculation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> time from 78 ms to 3 ms for 3000 inputs.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> The memory foot print of the cache is controlled by
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --experimental_remote_merkle_tree_cache_size.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> The caching is discarded after each build to free up memory, the
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache setup time is negligible.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Giving this flag a try made Bazel consume less than 4GB of RAM throughout the build with a &lt;code>--jobs&lt;/code> value set to a much higher number than what we currently use by default. This is a 10GB of RAM savings, which also translated into a much, much faster build due to Bazel and Java having to compute and collect less garbage.&lt;/p>
&lt;p>No workarounds needed to solve this problem, and keeping RAM under control always feels nice.&lt;/p>
&lt;hr>
&lt;p>That&amp;rsquo;s about it for today! Our pilot Bazel builds are now speedier than they were and we have eliminated a major source of frustration for our users during our initial deployment of Bazel: namely, their workstations don&amp;rsquo;t melt under memory pressure any longer.&lt;/p>
&lt;p>As a personal tip: don&amp;rsquo;t ever give into the temptations of increasing memory limits &lt;em>before&lt;/em> understanding the cause behind growth&amp;mdash;even if you have enough memory to spare and what you are doing is &amp;ldquo;just&amp;rdquo; a small increase. Caving into these temptations without further investigation means you will be oblivious to real bugs that exist in your system and that need to be ironed out for better overall performance. Be skeptical, question assumptions, measure reality, and adjust as necessary.&lt;/p>
&lt;p>If you like what you read and would enjoy working on similar exciting problems, know that &lt;a href="https://careers.snowflake.com/us/en/job/5436043002/Senior-Software-Engineer-Developer-Productivity-Engineering">we are hiring in the Developer Productivity Engineering team&lt;/a> here at Snowflake.&lt;/p></description></item><item><title>Introducing III-IV</title><link>https://jmmv.dev/2023/03/introducing-iii-iv.html</link><pubDate>Mon, 13 Mar 2023 06:45:00 -0700</pubDate><guid>https://jmmv.dev/2023/03/introducing-iii-iv.html</guid><description>&lt;p>Over the last couple of years, I have developed two small web services in Rust: &lt;a href="/2021/07/endbasic-0.7.html">one for EndBASIC&lt;/a> and &lt;a href="/2022/02/diy-web-analytics.html">one for this blog&lt;/a>. Those two web services contained significant copy/pasted helper code, which always bothered me because small bug fixes in one rarely propagated to the other. But because this only impacted two inconsequential side projects, the hinderance wasn&amp;rsquo;t a big deal.&lt;/p>
&lt;p>Until now. I now face the need to write two more web services (details TBA), and duplicating those foundations twice more felt just wrong. So I spent the last couple of weeks pulling the common code out of the existing services into a&amp;hellip; you guessed it&amp;hellip; framework, which I have called III-IV (&amp;quot;&lt;em>three four&lt;/em>&amp;quot; if you read it out loud) and am ready to announce.&lt;/p>
&lt;blockquote>
&lt;p>Find the code in &lt;a href="https://github.com/jmmv/iii-iv">https://github.com/jmmv/iii-iv&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h1 id="this-is-weird">This is weird&lt;/h1>
&lt;p>But before getting into the details&amp;hellip; what&amp;rsquo;s up with this weird name? You know, picking a name has been &lt;a href="https://www.karlton.org/2017/12/naming-things-hard/">extremely difficult&lt;/a>: all of the &amp;ldquo;obvious&amp;rdquo; ideas that came to mind were either already in use by other crates or by other projects. After many drafts, I started zoning into 3 and 4, which represent the number of layers you have to implement to develop a service with this framework. And 3 and 4 also represent the third and fourth services that precipitated the creation of this framework. So these numbers seemed fitting. And as you cannot start identifiers with a digit, roman numerals fixed that. Yes, it&amp;rsquo;s a very obscure name, but that&amp;rsquo;s fine because&amp;hellip;&lt;/p>
&lt;p>Who asked for yet another framework? Aren&amp;rsquo;t there plenty of them out there already? &lt;em>Well akshually&lt;/em>, if you search the web for &amp;ldquo;Rust web framework&amp;rdquo;, you will find things like &lt;a href="https://rocket.rs">Rocket&lt;/a> and &lt;a href="https://github.com/tokio-rs/axum">Axum&lt;/a>, which are great for implementing the HTTP request handling of the service&amp;hellip; but they stop there. In my services, I need consistent features that span all parts of the app, from the HTTP router to the persistence layer, passing by support features like outbound email or OAuth flows&amp;mdash;all while supporting lightweight unit testing at every layer. Glueing all existing pieces together requires a non-trivial amount code, so that&amp;rsquo;s where this comes in.&lt;/p>
&lt;h1 id="what-is-iii-iv">What is III-IV?&lt;/h1>
&lt;p>III-IV is a rudimentary and &lt;em>very&lt;/em> opinionated framework with which to write web services in Rust. The framework is really just a thin layer over existing and well-established Rust libraries: all III-IV does is facilitate putting things together and removing boilerplate glue. The goal is to keep each service implementation focused on its business needs in order to more-easily reason about its functionality.&lt;/p>
&lt;p>&lt;em>Keep in mind that this framework exists to satisfy &lt;strong>my&lt;/strong> needs for &lt;strong>my&lt;/strong> web services.&lt;/em> It won&amp;rsquo;t be big and professional like &lt;a href="https://www.djangoproject.com/">Django&lt;/a> (&lt;a href="https://fossbytes.com/linus-torvaldss-famous-email-first-linux-announcement/">wink, wink&lt;/a>), and I do not expect it to be useful to anyone but me. That said, if you &lt;em>do&lt;/em> find any of this useful, by all means go ahead and use whichever parts you find interesting. Documentation is minimal at this point though. I&amp;rsquo;ll be happy to entertain contributions as well&amp;mdash;but let&amp;rsquo;s discuss any major changes first if you have any.&lt;/p>
&lt;p>So, what does III-IV offer and what makes it opinionated? This framework assumes that your web service will:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Adhere to a 3-layer architecture with the specific names: &lt;code>rest&lt;/code>, &lt;code>driver&lt;/code>, &lt;code>db&lt;/code>, and provide a fourth cross-cutting layer named &lt;code>model&lt;/code> to offer data types. This is where the III-IV name comes from.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use PostgreSQL for serving. SQLite could work too though but not in the context of serverless apps like the ones I&amp;rsquo;ve been deploying.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use SQLite for unit/integration testing. A major design decision has been to allow &lt;em>super-fast non-flaky testing with zero configuration&lt;/em>. I do not want to have to spin complex dev environments up just to work on my code whenever I have some spare time: all I want is for &lt;code>cargo test&lt;/code> to do the right thing and to do it milliseconds. And I have achieved this.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;a href="https://crates.io/crates/axum">the &lt;code>axum&lt;/code> crate&lt;/a> and its ecosystem for HTTP routing. The code in III-IV comes from years of using &lt;a href="https://crates.io/crates/warp">the &lt;code>warp&lt;/code> crate&lt;/a> and I only moved to &lt;code>axum&lt;/code> recently, so some warts may remain.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;a href="https://crates.io/crates/sqlx">the &lt;code>sqlx&lt;/code> crate&lt;/a> for database access.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;a href="https://crates.io/crates/tokio">the &lt;code>tokio&lt;/code> crate&lt;/a> as the async runtime.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;a href="https://crates.io/crates/lettre">the &lt;code>lettre&lt;/code> crate&lt;/a> for SMTP communication.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Be configured via environment variables from &lt;code>main.rs&lt;/code>, some of which have predefined names.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Take minimal dependencies on cloud services, although the provided template favors Azure Functions.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="example-and-template">Example and template&lt;/h1>
&lt;p>To illustrate how to use III-IV and how it keeps the code of a service free from boilerplate, I have written a tiny sample key/value store. You can find the source code for the example under &lt;a href="https://github.com/jmmv/iii-iv/tree/c37c096cf744072fd2db0abc3463035fd93c388c/example">jmmv/iii-iv/example&lt;/a>.&lt;/p>
&lt;p>Here are some of the highlights to look for:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The &lt;a href="https://github.com/jmmv/iii-iv/blob/c37c096cf744072fd2db0abc3463035fd93c388c/example/src/model.rs">&lt;code>model&lt;/code> module&lt;/a> provides high-level data types to represent the concepts in the problem domain. Abusing &lt;a href="https://doc.rust-lang.org/rust-by-example/generics/new_types.html">the newtype idiom&lt;/a> and named structures is a critical aspect of this framework to ensure data correctness throughout (particularly after data values have been interned by the REST layer).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;a href="https://github.com/jmmv/iii-iv/blob/c37c096cf744072fd2db0abc3463035fd93c388c/example/src/db/mod.rs">&lt;code>db&lt;/code> module&lt;/a> provides a &lt;code>Tx&lt;/code> type. This type offers &amp;ldquo;one shot&amp;rdquo; operations on the data types provided by the &lt;code>model&lt;/code>, and supplies implementations for both PostgreSQL and SQLite. The PostgreSQL variant is used when instantiating the app for serving in &lt;code>lib.rs&lt;/code> and the SQLite variant is used for unit testing with an in-memory database. Both implementations are validated by the exact same test collateral.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;a href="https://github.com/jmmv/iii-iv/blob/c37c096cf744072fd2db0abc3463035fd93c388c/example/src/driver/mod.rs">&lt;code>driver&lt;/code> module&lt;/a> provides a parameterized &lt;code>Driver&lt;/code> type that holds the state of the application and provides the business logic for the operations that the REST layer will need. This is where the various backend services (in this case, database transactions only) are coordinated.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;a href="https://github.com/jmmv/iii-iv/blob/c37c096cf744072fd2db0abc3463035fd93c388c/example/src/rest/mod.rs">&lt;code>rest&lt;/code> module&lt;/a> provides the HTTP API entry points and the HTTP router. This layer&amp;rsquo;s responsibility is to parse HTTP requests and write out HTTP responses. No application logic lives here. Of special interest in this layer is the use of the &lt;a href="https://github.com/jmmv/iii-iv/blob/c37c096cf744072fd2db0abc3463035fd93c388c/core/src/rest.rs#L150">&lt;code>OneShotBuilder&lt;/code> utility&lt;/a> to test every HTTP API end-to-end.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;a href="https://github.com/jmmv/iii-iv/blob/c37c096cf744072fd2db0abc3463035fd93c388c/example/src/lib.rs">&lt;code>top-level&lt;/code> module&lt;/a> instantiates the various layers for the production service.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;a href="https://github.com/jmmv/iii-iv/blob/c37c096cf744072fd2db0abc3463035fd93c388c/example/src/main.rs">&lt;code>main&lt;/code> entry point&lt;/a> extracts application configuration from environment variables (the variable for the port name assumes deployment to Azure Functions) and runs the app.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The main purpose of this example is to serve as a template for new services. As a result, its code is overly verbose, in the sense that it includes many more source files and tests than it really deserves. The verbosity is necessary, however, to enforce structure and to allow simpler copy/pasting of the code into new services.&lt;/p>
&lt;p>Note that the sample service does &lt;em>not&lt;/em> use all features of the framework so it may be hard to see how to leverage some of them. This might change in the future, either via this example or via additional examples. I&amp;rsquo;m finding &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples">the way &lt;code>axum&lt;/code> showcases functionality&lt;/a> to be very amenable to learning.&lt;/p>
&lt;h1 id="future">Future&lt;/h1>
&lt;p>The process to create III-IV has been incredibly painful: &lt;a href="https://twitter.com/jmmv/status/1630945190331715584">I spent way too long&lt;/a> figuring out how to remove superfluous &lt;code>Box&lt;/code>es and &lt;code>Arc&lt;/code>s used for polymorphism in favor of static dispatch. But, once I was able conquer this hill, new (to me) Rust concepts &amp;ldquo;clicked&amp;rdquo; and I&amp;rsquo;m pretty happy with the results. I&amp;rsquo;m a believer in keeping generic logic separate from domain-specific logic (even within a single project), so creating III-IV and using it to remove code duplication from multiple projects actually feels great.&lt;/p>
&lt;p>So, what&amp;rsquo;s next? For starters, there is still a bunch of logic in my existing services that would benefit from generalization to keep their clutter to a minimum. Shuffling this functionality into III-IV requires &amp;ldquo;actual&amp;rdquo; redesign work though, and so far I&amp;rsquo;ve only been moving code almost-verbatim. I will only tackle these features whenever I come back to work on these services.&lt;/p>
&lt;p>And then, well, whichever thing I happen to need for the new &lt;em>web&lt;/em> services I&amp;rsquo;m working on. If a piece of functionality looks generic enough and potentially reusable in other services, it will go into III-IV. Two things that I immediately need are: support for &lt;a href="https://github.com/ramosbugs/openidconnect-rs">OIDC user authentication&lt;/a> via &lt;a href="https://auth0.com/">Auth0&lt;/a> and seamless integration with &lt;a href="https://bootstrap-vue.org/">BootstrapVue&lt;/a> for the frontend components.&lt;/p>
&lt;p>With that, head to &lt;a href="https://github.com/jmmv/iii-iv">https://github.com/jmmv/iii-iv&lt;/a> for instructions on how to depend on this code from your &lt;code>Cargo.toml&lt;/code> files. Have fun!&lt;/p></description></item><item><title>BASIC parsing difficulties in EndBASIC</title><link>https://jmmv.dev/2023/01/endbasic-parsing-difficulties.html</link><pubDate>Fri, 13 Jan 2023 06:00:00 -0700</pubDate><guid>https://jmmv.dev/2023/01/endbasic-parsing-difficulties.html</guid><description>&lt;p>Happy new year and welcome to 2023!&lt;/p>
&lt;p>If you have followed me over the past&amp;hellip; three years already? (wow), you know I have been working on an implementation of a BASIC interpreter called EndBASIC. The parser for the language in the &lt;a href="/2020/04/hello-endbasic.html">0.1 release&lt;/a> started as very rudimentary and only supported: scalar variables and assignments; &lt;code>IF&lt;/code>, &lt;code>WHILE&lt;/code> and &lt;code>FOR&lt;/code> control flow primitives; and the ability to invoke built-in commands such as &lt;code>PRINT&lt;/code> and &lt;code>INPUT&lt;/code>. There was nothing else in the language, and I neglected improving it as I favored building the scaffolding around the interpreter&amp;mdash;features like a web UI and a cloud service seemed much more fun to build at the time.&lt;/p>
&lt;p>Unfortunately, due to the massive limitations of the core language, it was almost impossible to write anything of substance in it. EndBASIC rose to the top page of popular news sites a couple of times, but this criticism was common. So, for a few months before the holidays, I chipped away at the core of the interpreter and made major strides in what the language offers, culminating in the massive &lt;a href="/2022/12/endbasic-0.10.html">0.10 release&lt;/a>. To summarize, this new release brought features like &lt;code>GOTO&lt;/code> and &lt;code>GOSUB&lt;/code>, &lt;code>DO&lt;/code> and &lt;code>SELECT CASE&lt;/code>, and integer and double interop, to name a few.&lt;/p>
&lt;p>In the context of this post, however, I want to focus on the makings of the parser. In particular, I want to analyze various difficulties I encountered while implementing these improvements to the interpreter. And the reason I want to look into these is because, in various occasions, I got a glimpse of the design choices that the original language designers must have faced when coming up with BASIC in the 1960s given the limitations of the machines at the time. This has been fascinating and enlightening.&lt;/p>
&lt;p>But also unpleasant. During my implementation work, I have come across many oddities in the language that make it irregular and thus difficult to parse into an &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">AST&lt;/a>. All of these oddities have been &amp;ldquo;fixable&amp;rdquo;, but I can tell that BASIC didn&amp;rsquo;t originate with ASTs in mind. For all I can tell, BASIC seems to have been designed for line-by-line interpretation.&lt;/p>
&lt;h1 id="endbasic-self-inflicted-pain">EndBASIC self-inflicted pain&lt;/h1>
&lt;p>Before diving into the difficulties I have encountered so far in parsing BASIC, let me start by outlining some core design principles behind EndBASIC:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://github.com/endbasic/endbasic/tree/master/core">Core&lt;/a> vs. &lt;a href="https://github.com/endbasic/endbasic/tree/master/std">standard library&lt;/a> split:&lt;/strong> The core language, which involves parsing, &lt;a href="/2022/11/endbasic-bytecode.html">compiling into bytecode (as of 0.10)&lt;/a>, and executing the results, is supposed to be completely independent from the &amp;ldquo;standard library&amp;rdquo;. This is to ensure that the language remains &amp;ldquo;pure&amp;rdquo; and that nothing in the virtual machine can escape to do I/O unless explicitly allowed to do so by hooking individual standard library components into the interpreter. The consequence is that &lt;em>all&lt;/em> built-in commands and functions, &lt;em>including&lt;/em> &lt;code>PRINT&lt;/code> and &lt;code>INPUT&lt;/code>, cannot be part of the core.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>AST representation:&lt;/strong> The standard library, which provides all common commands and functions, is where the fun lives&amp;mdash;but remember, it is detached from the core. Anything in the standard library must be representable in the AST without command-specific special cases. As we will see later, this is&amp;hellip; tricky, because BASIC commands have some of the most inconsistent structure I&amp;rsquo;ve ever seen.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Hand-made recursive descent parser:&lt;/strong> I have intentionally handcrafted the lexer and parser because this whole project started just as a &amp;ldquo;how hard could it be&amp;rdquo; kind of situation. Nevertheless, I wanted to keep dependencies to a minimum to make the core (not the standard library) tiny and &lt;a href="/2021/01/embedding-endbasic.html">embeddable into other processes&lt;/a>, so I had to get a good grasp of everything involved in the process. This has worked OK so far, but it&amp;rsquo;s not trivial as we will see.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Context-free parsing:&lt;/strong> The parser should not know anything about the meaning of symbols, which is probably the most problematic constraint of all.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Once again, note that these are all self-imposed constraints. For all I can tell, none of these existed at the time BASIC was designed, and foregoing these constraints would make implementing the parser much simpler.&lt;/p>
&lt;p>The reason these constraints exist is because I dove into implementing the EndBASIC parser with rudimentary knowledge of BASIC. I had good memories of using BASIC more than 30 years ago but no mastery of the language, so I&amp;rsquo;ve been hitting new corner cases along the way and have had to retrofit support for them into the parser.&lt;/p>
&lt;p>At the end of this post, I&amp;rsquo;ll briefly discuss how I think these design constraints should change in order to evolve the language even further, but first, let&amp;rsquo;s look into the current parsing difficulties, which is the meat of this post.&lt;/p>
&lt;h1 id="oddities-and-difficulties">Oddities and difficulties&lt;/h1>
&lt;h2 id="argument-passing">Argument passing&lt;/h2>
&lt;p>The first difficulty in implementing the parser was representing commands in the AST and, in particular, their arguments. In any sane and modern language, arguments are separated from each other in one way&amp;mdash;and just one way. If you have a function &lt;code>print&lt;/code> and arguments &lt;code>bar&lt;/code> and &lt;code>baz&lt;/code>, you do things like &lt;code>print bar baz&lt;/code> or &lt;code>print(bar, baz)&lt;/code>, but the separators are all equal and have no special meaning.&lt;/p>
&lt;p>Things are not as simple in BASIC. You see, BASIC has two (ha ha, stay tuned) argument separators, and their meaning depends on the command being invoked. Here, take a look at the madness that &lt;code>PRINT&lt;/code> is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Print two arguments with a long separator in-between them.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Print two arguments with a short separator in-between them.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Mix and match separators, and even leave some empty fields.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">4&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Oh, and you can even have a trailing separator.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Tricky? Sure, but now look at &lt;code>INPUT&lt;/code>, which also supports the two separators but with completely different meanings:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Read a number with a &amp;#34;? &amp;#34; default prompt.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">INPUT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">INPUT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Read a number without a prompt.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">INPUT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Read a string with a prompt followed by &amp;#34;? &amp;#34;.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">INPUT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;What&amp;#39;s your name&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">t$&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Read a string with a prompt with nothing appended to it.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">INPUT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Enter some words: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">t$&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For a long time, support for these two separators are all that I had implemented in the language, but then&amp;hellip; I stumbled upon the &lt;code>NAME&lt;/code> command in QuickBASIC which is used to rename files. &lt;code>NAME&lt;/code> has this marvelous syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">NAME&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;old name&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;new name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Uh. There are not two, but &lt;em>three&lt;/em> argument separators, and which ones are valid where and what each means depends on the command being invoked. Things seem to get worse when you start looking at how to open files and represent their file handles, but I won&amp;rsquo;t get there for now because I haven&amp;rsquo;t even tried to implement this yet.&lt;/p>
&lt;h2 id="array-assignments">Array assignments&lt;/h2>
&lt;p>The next difficulty arose trying to handle array assignments, a feature that appeared in the &lt;a href="/2021/02/endbasic-0.6.html">0.6 release&lt;/a>. Array references in BASIC use parenthesis, not square brackets as is customary in most other languages. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">DIM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">10&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTEGER&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="vg">vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">12345&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">DIM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">matrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">10&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTEGER&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="vg">matrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">5&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">987&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">matrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is fine: who cares if accessing an array is done with &lt;code>vector[2]&lt;/code> or &lt;code>vector(2)&lt;/code>. Except&amp;hellip; remember the constraint that says that the EndBASIC parser must not know anything about commands? Consider what happens when you try to parse this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="vg">vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">12&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">&amp;#39; Array assignment.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">&amp;#39; Call to print with an argument wrapped in parenthesis.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here is the parser&amp;rsquo;s flow. The parser first sees &lt;code>vector&lt;/code> or &lt;code>PRINT&lt;/code>, which are symbol references for which it knows nothing about. Then the opening parenthesis comes. What are we trying to parse? Will we encounter an equal sign and conclude that this is an array assignment, or will there not be an equal sign and this translates to a command invocation with just one argument? You can&amp;rsquo;t tell until you encounter the equal sign.&lt;/p>
&lt;p>Obviously, this disambiguation was implemented in the parser as I just described, but it is not trivial. This is another case of self-inflicted pain that results from keeping the parser unaware of the symbols that have been defined so far. Otherwise, if we &lt;em>knew&lt;/em> that &lt;code>vector&lt;/code> is an array, we could immediately conclude that we are facing an array assignment as soon as we see it specified as the first token of a statement; and we could do similarly for &lt;code>PRINT&lt;/code> if we &lt;em>knew&lt;/em> that it is a command.&lt;/p>
&lt;h2 id="labels">Labels&lt;/h2>
&lt;p>Labels did not exist in original versions of BASIC, but they did appear in later implementations. One which brought labels is QuickBASIC, where labels are defined by appending a colon character to an identifier:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">label:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">INPUT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">foo&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Simple, right? Well, as it turns out&amp;hellip; the colon character is also the statement delimiter in BASIC and can be used to separate different statements in a single line.&lt;/p>
&lt;p>With that extra bit of knowledge, what does this mean?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">INPUT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">foo&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Are we trying to define a label called &lt;code>PRINT&lt;/code>, or are we calling the &lt;code>PRINT&lt;/code> command without arguments? This is impossible to tell without knowing upfront that &lt;code>PRINT&lt;/code> is a command, but that goes against the design constraints of the EndBASIC core language.&lt;/p>
&lt;p>This is an ambiguity that cannot be resolved if I stick to those design decisions. I could obviously damage the AST by representing argless commands and maybe-labels in a type like &lt;code>Statement::LabelOrArglessCommandCall&lt;/code>, but that sounds terrible. So, for now, EndBASIC requires labels to start with the &lt;code>@&lt;/code> sign; unorthodox, but it does the job given that I&amp;rsquo;m not targeting compatibility with other BASIC implementations.&lt;/p>
&lt;h2 id="end-statements-vs-control-flow">END statements vs. control flow&lt;/h2>
&lt;p>The next difficulty appeared in trying to parse the &lt;code>END&lt;/code> statement. You see, &lt;code>END&lt;/code> can be used like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Terminate program execution.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">END&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Terminate program execution with code 1 (a later extension).&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And it can also be used like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">TRUE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">THEN&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">END&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that &lt;code>END&lt;/code> has two very different meanings depending on the token that comes after it, if any.&lt;/p>
&lt;p>I &lt;em>suspect&lt;/em> that this is why other control flow primitives &lt;em>don&amp;rsquo;t&lt;/em> use &lt;code>END&lt;/code> to check for their termination: &lt;code>WHILE&lt;/code> uses &lt;code>WEND&lt;/code>, &lt;code>DO&lt;/code> uses &lt;code>LOOP&lt;/code>, and &lt;code>FOR&lt;/code> uses &lt;code>NEXT&lt;/code>. Having different keywords as block terminators makes it &lt;em>much&lt;/em> easier to perform parsing because, for example, when you are parsing the contents of a &lt;code>WHILE&lt;/code> loop, you can simply say &amp;ldquo;&lt;em>parse statements until you find &lt;code>WEND&lt;/code>&lt;/em>&amp;rdquo; and call it a day.&lt;/p>
&lt;p>Of course I wondered why &lt;code>END IF&lt;/code> was not written as a single keyword as well, such as &lt;code>FI&lt;/code> (I see you, POSIX shell), because it breaks this theory and makes parsing unnecessarily hard. Looking at &lt;a href="https://en.wikipedia.org/wiki/Dartmouth_BASIC#First_Edition">the original version of BASIC&lt;/a>, though, reveals the answer: there was no &lt;code>END IF&lt;/code>. The language only supported uni-line &lt;code>IF&lt;/code> statements, which made this point moot.&lt;/p>
&lt;h2 id="references-vs-values">References vs. values&lt;/h2>
&lt;p>Let&amp;rsquo;s switch topics to a slightly different difficulty: having to represent variable values and variable references as different elements in the AST. Consider the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="vg">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;A string&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">LEN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vg">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this code snippet, the &lt;code>LEN&lt;/code> function receives &lt;code>x&lt;/code> as an argument, but &lt;code>LEN&lt;/code> doesn&amp;rsquo;t care about &lt;code>x&lt;/code>: it cares about the value of &lt;code>x&lt;/code>, which is &lt;code>A string&lt;/code>.&lt;/p>
&lt;p>However, consider this other code snippet:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">DIM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">x&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">UBOUND&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vg">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case, the &lt;code>UBOUND&lt;/code> function receives &lt;code>x&lt;/code> as an argument, and &lt;code>UBOUND&lt;/code> &lt;em>does&lt;/em> care about &lt;code>x&lt;/code> itself, not its value, to inspect its size and return the array&amp;rsquo;s upper bound. (Because&amp;hellip; what is the &amp;ldquo;value&amp;rdquo; of &lt;code>x&lt;/code> without a subscript, anyway? An address? A copy of the array?)&lt;/p>
&lt;p>The problem is&amp;hellip; how can these be interned in the AST if we don&amp;rsquo;t know what each function needs or what each variable&amp;rsquo;s type is? Remember that the parser currently does not have this information. Up until now, the AST has just recorded that function calls take expressions as arguments, and one possible expression type is a symbol reference (&lt;code>Expr::Symbol(VarRef)&lt;/code>). Both &lt;code>LEN&lt;/code> and &lt;code>UBOUND&lt;/code> receive unevaluated expressions, and then the implementation of &lt;code>LEN&lt;/code> &lt;em>evaluates&lt;/em> the expression to get its value, whereas the implementation of &lt;code>UBOUND&lt;/code> does &lt;em>not&lt;/em> evaluate the expression and instead uses the argument to look up the symbol&amp;rsquo;s definition.&lt;/p>
&lt;p>This has worked OK so far but poses new problems when trying to compile expression evaluation into bytecode, which is something that EndBASIC 0.10 notably lacks but that I need to implement for &amp;ldquo;proper&amp;rdquo; compilation. When facing the &lt;code>x&lt;/code> argument in the function calls above, the compiler cannot tell if it should emit code to load the value of &lt;code>x&lt;/code> or if it should emit code to provide a reference to &lt;code>x&lt;/code>. Resolving this would require making the AST aware of valid functions and their syntaxes or the compiler aware of variable types.&lt;/p>
&lt;h2 id="exponents-and-square-root">Exponents and square root&lt;/h2>
&lt;p>Switching topics again, another oddity comes from the lack of orthogonality in a recent feature I implemented. Exponents are expressed as an infix operator (&lt;code>8 ^ 2&lt;/code>) whereas square roots are expressed as a function (&lt;code>SQR(8)&lt;/code>).&lt;/p>
&lt;p>This does not pose a difficulty in parsing, but it clashes with the desire to keep the core parser and the standard library separate: why should exponents be in the core while &lt;code>SQR&lt;/code> is in the standard library? This is inconsistent but cannot be easily resolved in the current implementation.&lt;/p>
&lt;h2 id="let-vs-not-let">LET vs. not LET&lt;/h2>
&lt;p>And finally, &lt;code>LET&lt;/code>. For as long as I remember using BASIC myself, which is as far back as the 1980s with Locomotive BASIC 1.1, variable assignment has always been expressed as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="vg">var&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">1234&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But the original BASIC also has a &lt;code>LET&lt;/code> keyword to write variable assignments as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">LET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">var&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">1234&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The question is: why? Why would you need to have an optional &lt;code>LET&lt;/code> keyword to assign variables when it can be omitted? This is the final telltale sign that gives insight on how original parsing must have been done.&lt;/p>
&lt;h1 id="welcome-to-the-1960s">Welcome to the 1960s&lt;/h1>
&lt;p>From the looks of all of this, it is fairly reasonable to assume that original BASIC parsers read code line by line, did simple prefix matching to determine what to do on a single line, and then passed the remainder of the line to a routine to handle it.&lt;/p>
&lt;p>Something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">pc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_line&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">startswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;PRINT&amp;#39;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;PRINT&amp;#39;&lt;/span>&lt;span class="p">):])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">startswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;INPUT&amp;#39;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;INPUT&amp;#39;&lt;/span>&lt;span class="p">):])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">startswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;NAME&amp;#39;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;NAME&amp;#39;&lt;/span>&lt;span class="p">):])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Unknown command&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">line&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This makes a lot of sense considering the severe limitations of the computers that first ran BASIC in 1963 when it was invented: they had limited computing power, very limited memory, and the code for the interpreter must have been written directly in assembly.&lt;/p>
&lt;p>With this perspective, it&amp;rsquo;s &amp;ldquo;obvious&amp;rdquo; why each command can behave differently: it is up to their implementation to interpret the remainder of the program line as they see fit. There is no AST. No abstraction over the program. No compilation. Just a loop that reads a line at a time and decides what to do about it right away.&lt;/p>
&lt;p>In a modern implementation like EndBASIC, however, trying to represent this variety of commands in a generic form to maintain the separation between core language and standard library is difficult. What I ended up doing is capturing the list of arguments as a list of expression/separator pairs and passing those to the command handler&amp;mdash;which works but is ugly because each command has to implement argument parsing in a fragile way and makes compilation to bytecode difficult.&lt;/p>
&lt;h1 id="potential-fixes-for-endbasic">Potential fixes for EndBASIC&lt;/h1>
&lt;p>So, any lessons learned? What am I going to do about all of this?&lt;/p>
&lt;p>I think keeping the EndBASIC core language vs. standard library separation is a worthy goal. But I also think that keeping the language interpreter completely unaware of symbols is a self-imposed limitation that makes some things hard (distinguishing between array assignments and function calls) and makes other things impossible (having labels without &lt;code>@&lt;/code> prefixes). This should change.&lt;/p>
&lt;p>The language parser will probably have to gain a mechanism to register symbols upfront so that the standard library can register its commands and functions as desired. And the language parser and/or the newly-added compiler will also have to dynamically update this table as it parses code to recognize newly-defined variables, arrays, functions, and commands.&lt;/p>
&lt;p>The other thing that will need to change is making the parser aware of the signature of commands and functions. This is necessary to fix the compilation problem that arises in the &lt;code>LEN&lt;/code> vs. &lt;code>UBOUND&lt;/code> case, and also to support passing variables by value or by reference to custom procedures and functions (as QuickBASIC supports). The parser or the compiler need to know that &lt;code>LEN&lt;/code> receives an evaluated value whereas &lt;code>UBOUND&lt;/code> receives an array reference in order to emit the right bytecode instructions.&lt;/p>
&lt;p>Finally, to fix the exponents vs. square roots inconsistency, operators should become function calls provided by the standard library. You could imagine the standard library asking the core to register an infix operator called &lt;code>^&lt;/code> that is executed via a hidden &lt;code>EXP&lt;/code> function, much like many modern languages do. This is, however, a minor annoyance compared to all others that I&amp;rsquo;m not sure is worth fixing.&lt;/p>
&lt;p>And that&amp;rsquo;s it. This was a very long post full of disconnected thoughts. I&amp;rsquo;m not sure if you have gotten anything useful out of it, but if you have feedback on the content or corrections on historical facts (which I&amp;rsquo;m sure are not accurate), please let me know!&lt;/p></description></item><item><title>EndBASIC 0.10: Core language, evolved</title><link>https://jmmv.dev/2022/12/endbasic-0.10.html</link><pubDate>Tue, 27 Dec 2022 16:30:00 +0100</pubDate><guid>https://jmmv.dev/2022/12/endbasic-0.10.html</guid><description>&lt;p>After three months of early-morning hacking, I&amp;rsquo;m pleased to announce that EndBASIC 0.10 is now available&amp;mdash;right on time for some holiday-time experimentation!&lt;/p>
&lt;p>This release marks a &lt;em>huge&lt;/em> milestone because it makes the language usable for real-world development.&lt;/p>
&lt;p>You see, when I started this project over two years ago, I wrote a rudimentary interpreter for something that resembled BASIC and then launched EndBASIC 0.1. Since then, I have been piling onto those insufficient foundations by adding flashy features such as &lt;a href="/2020/11/endbasic-0.3.html">a web interface&lt;/a>, &lt;a href="/2021/07/endbasic-0.7.html">a cloud file sharing service&lt;/a>, and &lt;a href="/2021/11/endbasic-0.8.html">a hybrid text/graphics console&lt;/a>. These features have been well-received in every demo I&amp;rsquo;ve given but&amp;hellip; the feedback that always came back was the same: &amp;ldquo;&lt;em>Give me some sort of functions or subroutines!&lt;/em>&amp;rdquo;, or &amp;ldquo;&lt;em>This is no BASIC without &lt;code>GOTO&lt;/code>!&lt;/em>&amp;rdquo;.&lt;/p>
&lt;p>And these criticisms were right. Trying to write any sort of non-trivial program in EndBASIC was a daunting and frustrating experience. I had tried to simplify coding to the foundations of structured programming, but without a way to perform unstructured jumps (aka go-tos) or define custom functions&amp;hellip; it was impossible to factor out common code, which is a need for the vast majority of programs that exceed a screenful of text. There were also usability deficits such as the lack of line numbers in error messages, which made it incredibly difficult to debug any failing program.&lt;/p>
&lt;p>The situation had to change, and change it has in EndBASIC 0.10.&lt;/p>
&lt;h1 id="main-changes">Main changes&lt;/h1>
&lt;p>EndBASIC 0.10 is a &lt;em>humongous&lt;/em> release that comes with improvements across the board. Most changes have focused on the core language, but they also spread to the standard library and the user interface. To summarize, these are the main changes in this release:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Support for &lt;code>GOTO&lt;/code> &lt;em>and&lt;/em> &lt;code>GOSUB&lt;/code>.&lt;/strong> Implementing these required dropping the previous AST-based evaluator and replacing it with a bytecode-based executor (with an associated compiler). You can read more about this change in &amp;ldquo;&lt;a href="/2022/11/endbasic-bytecode.html">From AST to bytecode execution in EndBASIC&lt;/a>&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Error catching and handling via &lt;code>ON ERROR&lt;/code>.&lt;/strong> This was also made possible by the new bytecode executor mentioned earlier.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Precise line and column numbers in every error message.&lt;/strong> This required a massive overhaul of how the AST is represented to carry these details in every node. Modifying the AST was relatively easy&amp;hellip; but adjusting all existing tests to validate this new information was extremely laborious.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Interop of numeric types.&lt;/strong> Being strict about numeric types was nice in theory&amp;mdash;just as it is a very welcome pedantic feature in Rust&amp;mdash;but the lack of automatic conversions between integers and doubles was&amp;hellip; quite annoying. As a consequence, this release brings transparent promotion of integers to doubles and automatic rounding of doubles to integers. This works now but I feel it&amp;rsquo;s a hack due to all of the special-casing that has taken place. A more advanced bytecode will probably make this better in the future.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Revamped interactive help system.&lt;/strong> Previous versions provided a &lt;code>HELP&lt;/code> command that exposed documentation for all high-level types, but failed to provide documentation about the language itself (other than for a simplified cheat-sheet that grew too cryptic and long). This release has fixed this by extending &lt;code>HELP&lt;/code> to provide language-specific documentation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>New control flow structures.&lt;/strong> These include suppport for &lt;code>DO&lt;/code> loops (with all of their variants, which include infinite loops as well as &lt;code>WHILE&lt;/code> and &lt;code>UNTIL&lt;/code> clauses before or after the loop), &lt;code>SELECT CASE&lt;/code>, and one-line &lt;code>IF&lt;/code>s. &lt;code>SELECT CASE&lt;/code> is probably the hardest structure that exists right now due to the oddities in its grammar and the many cases to consider.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Addition of bitwise operators.&lt;/strong> These are a nice-to-have, and because these are now available, the language now supports specifying integer literals in binary, octal, decimal and hexadecimal bases.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Rename of &lt;code>EXIT&lt;/code> to &lt;code>END&lt;/code> to terminate programs.&lt;/strong> This seems like a triviality, but it&amp;rsquo;s worth mentioning because it was quite difficult to retrofit it into the parser due to how &lt;code>END&lt;/code> is sometimes a statement on its own and other times it is combined with other keywords (e.g. &lt;code>END IF&lt;/code> or &lt;code>END SELECT&lt;/code>). Stay tuned for an upcoming post that will deep dive into the parsing oddities of this language.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Lots of small tweaks here and there.&lt;/strong> These include fixes to the editor, minor changes to the grammar, command renames, addition of exponents and square roots, addition of various new string functions, and addition of a way to query the screen size to let &lt;del>games&lt;/del> programs adjust to different viewports.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Quite a few changes, huh? :)&lt;/p>
&lt;h1 id="how-can-i-enjoy-this">How can I enjoy this?&lt;/h1>
&lt;p>Here are the usual links to get you started:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://repl.endbasic.dev/">Launch the online interpreter&lt;/a>&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://www.endbasic.dev/">Visit the EndBASIC website&lt;/a>&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://github.com/endbasic/endbasic/releases/tag/endbasic-0.9.0">Read the release notes&lt;/a>&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Please &lt;a href="mailto:support@endbasic.dev">let me know&lt;/a> if you have any questions, feedback, or encounter any issues. There are tons more things I wanted to continue tweaking and fixing before publishing 0.10, but I had to force myself to get it out of the door already. There will always be a next release to fix stuff.&lt;/p>
&lt;p>With that, I&amp;rsquo;ll leave you with a demo to display some holiday greetings, all written in EndBASIC and leveraging the new features in this release 😊&lt;/p>
&lt;iframe id="terminal" src="https://repl.endbasic.dev/?run=jmmv/flakes.bas">&lt;/iframe>
&lt;p>&amp;hellip; and if you have made it this far, you can also:&lt;/p>
&lt;ul>
&lt;li>play a &lt;a href="https://repl.endbasic.dev/?run=jmmv/arka.bas">work-in-progress Arkanoid clone&lt;/a> and&lt;/li>
&lt;li>play a &lt;a href="https://repl.endbasic.dev/?run=jmmv/snake.bas">Snake clone&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title>From AST to bytecode execution in EndBASIC</title><link>https://jmmv.dev/2022/11/endbasic-bytecode.html</link><pubDate>Tue, 22 Nov 2022 06:50:00 -0700</pubDate><guid>https://jmmv.dev/2022/11/endbasic-bytecode.html</guid><description>&lt;p>Since its inception two years ago, the EndBASIC interpreter has been using an AST-based execution
engine. And during all this time, people have mocked the language for not allowing &lt;code>10 GOTO 10&lt;/code>.
Well, fear not: the upcoming 0.10 release has full support for &lt;code>GOTO&lt;/code> and &lt;code>GOSUB&lt;/code>, features that
were made possible by moving to a bytecode-based interpreter. Let&amp;rsquo;s take a peek at what the
problems were and how I addressed them.&lt;/p>
&lt;h1 id="before-ast-based-execution">Before: AST-based execution&lt;/h1>
&lt;p>An &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree (AST)&lt;/a> represents the
structure of the program as a connected acyclic undirected graph&amp;mdash;aka&amp;hellip; a tree. Each node
represents a construct that appears in the program text and each edge indicates how those constructs
are nested. ASTs are the output of a language parser.&lt;/p>
&lt;p>ASTs are useful to efficiently walk over a program&amp;rsquo;s source code at a high level without having to
worry about lexing or parsing, and they are useful to implement things like compilers: for each
construct in the AST, such as an arithmetic operation or an if statement, the compiler can inspect
the various parts of the construct and &amp;ldquo;directly&amp;rdquo; emit machine code for them.&lt;/p>
&lt;p>But ASTs can also be used to &lt;em>execute&lt;/em> a program. Here, take a look at what the main execution loop
in EndBASIC used to look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmts&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Statement&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmt&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmt&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Statement&lt;/span>::&lt;span class="n">Assignment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vref&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">assign&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vref&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Statement&lt;/span>::&lt;span class="n">BuiltinCall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">symbols&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">VarRef&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">VarType&lt;/span>::&lt;span class="n">Auto&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Symbol&lt;/span>::&lt;span class="n">Command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clone&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">new_syntax_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="fm">format!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s"> is not a command&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">new_syntax_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="fm">format!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Unknown builtin &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">map_err&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Error&lt;/span>::&lt;span class="n">from_call_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">metadata&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Statement&lt;/span>::&lt;span class="n">If&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">branches&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">do_if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">branches&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Statement&lt;/span>::&lt;span class="n">While&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">do_while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... other statement types elided ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the above code snippet, note how walking the AST (represented in &lt;code>stmts&lt;/code> as a sequence of
&lt;code>Statement&lt;/code> values) for execution is easy: there is a loop that &amp;ldquo;sees&amp;rdquo; every high-level construct
and can then simulate what should be done for each of them.&lt;/p>
&lt;p>To add some more color to the above, here is how an &lt;code>IF&lt;/code> statement&amp;rsquo;s execution looked like. Note
that we explicitly test for each conditional branch that appears in the program and, once we find
the branch that is true (if any) we recursively call into the &lt;code>exec&lt;/code> function to evaluate its
contents and then terminate execution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">do_if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">branches&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="p">[(&lt;/span>&lt;span class="n">Expr&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Statement&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)])&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmts&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">branches&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">symbols&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>::&lt;span class="n">Boolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stmts&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Stop executing branches.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>::&lt;span class="n">Boolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">new_syntax_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;IF/ELSEIF require a boolean condition&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(())&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Similarly, here is how &lt;code>WHILE&lt;/code> loop execution looked like. Note again that we have a native loop
that iterates over the body of the interpreted loop and exits when the condition is false:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">do_while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">condition&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">Expr&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">body&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Statement&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">loop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">symbols&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>::&lt;span class="n">Boolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>::&lt;span class="n">Boolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">new_syntax_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;WHILE requires a boolean condition&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(())&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Looks pretty simple and reasonable, right?&lt;/p>
&lt;h1 id="in-between-hacking-goto-support">In-between: Hacking GOTO support&lt;/h1>
&lt;p>Indeed it does. The AST-based executor presented above &lt;em>is&lt;/em> simple. But it comes with significant
problems&amp;mdash;the most salient one being that implementing the much desired &lt;code>GOTO&lt;/code> is very difficult.&lt;/p>
&lt;p>Consider an EndBASIC program like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">THEN&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">WHILE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">TRUE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="vg">exit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">WEND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="nl">exit:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;hi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we parse the above into an AST and try to execute it with the algorithm presented earlier, we end
up with a native call stack that looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl"> exec &amp;lt;-- @exit is visible at this level.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | -&amp;gt; do_if
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | -&amp;gt; exec
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | | -&amp;gt; do_while
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | | | -&amp;gt; exec
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | | | | -&amp;gt; do_goto &amp;lt;-- How do we jump to @exit?
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which is a problem. There is no way the &lt;code>do_goto&lt;/code> native function can jump to &lt;code>@exit&lt;/code> right away.
The only thing we can do is unwind the native stack until we reach the nesting level where &lt;code>@exit&lt;/code>
is defined and continue execution there. And because we &lt;em>can&lt;/em> do this and adding &lt;code>GOTO&lt;/code> as a
feature was not negotiable at this point, I implemented this exact solution as a first cut in
&lt;a href="https://github.com/endbasic/endbasic/commit/8ef803e55f922ba52e9c774cacf567871c59971b">commit
8ef803e&lt;/a>.
Here are the crux of the changes to the AST-based execution loop:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmts&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Statement&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pending_goto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_some&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// If there is a &amp;#34;pending GOTO&amp;#34;, see if we can find the target label
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// at this level by scanning over all statements.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pending_goto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">as_ref&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Statement&lt;/span>::&lt;span class="n">Label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">stmts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pending_goto&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// The label wasn&amp;#39;t found here. Unwind this stack frame and the
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// calling exec() will try this again.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Now execute statements at this level as before ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">stmts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Statement&lt;/span>::&lt;span class="n">Goto&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pending_goto&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clone&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Stack unwinding will happen at the next iteration, where we
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// will first try to find the target at the current level.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Statement&lt;/span>::&lt;span class="n">Label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Nothing to do (other than sanity checks). The labels as
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// targets were handled above.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... other statement types elided ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Does the job. Unfortunately, this is not &lt;em>pretty&lt;/em> because the &lt;code>pending_goto&lt;/code> looks like a clutch,
and this is not &lt;em>efficient&lt;/em> because what should be a simple instruction jump (a thing that
microprocessors can do just fine) becomes a convoluted stack unwinding process plus a target lookup
at every level.&lt;/p>
&lt;p>What&amp;rsquo;s worse is that the above isn&amp;rsquo;t feature-complete either because we are only unwinding the stack
(going up the call chain) but never go down. Think about this other program:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">THEN&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">WHILE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">TRUE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="vg">other&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">WEND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">ELSE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">other:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;hi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This snippet differs from the above in that the &lt;code>@other&lt;/code> target of the &lt;code>GOTO&lt;/code> cannot be found by
simply unwinding the stack: the executor would need to unwind the stack, yes, but it would also need
to go into every possible branch of the program to look for the target, which would either be even
more inefficient or it would require a lot of extra bookkeeping to track where the targets live.&lt;/p>
&lt;p>And those are not the only problems. What if, instead of a &lt;code>GOTO&lt;/code>, we want to implement a
&lt;code>GOSUB&lt;/code>&amp;mdash;a call to an arbitrary location that can later &lt;em>return&lt;/em> execution to
where the call happened? &amp;ldquo;Impossible.&amp;rdquo;&lt;/p>
&lt;h1 id="after-compiler-plus-bytecode-execution">After: compiler plus bytecode execution&lt;/h1>
&lt;p>All of the problems above go away if we &amp;ldquo;flatten&amp;rdquo; the AST by replacing all nesting with
(conditional) jumps and then execute the code with a program counter and a call stack. If that
sounds like writing a compiler and a virtual machine, it&amp;rsquo;s because this is precisely what this
means. But it needn&amp;rsquo;t be as complicated as it sounds. In fact, I procrastinated on this for
over a year and first implemented the hack above because I feared the change but, in the end, coming
up with a prototype was a matter of a couple of hours.&lt;/p>
&lt;p>Let&amp;rsquo;s go back to our &amp;ldquo;complex&amp;rdquo; code statement from earlier. This EndBASIC program:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">THEN&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">WHILE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">TRUE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="vg">other&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">WEND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">ELSE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">other:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;hi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip; is &lt;em>equivalent&lt;/em> to this after flattening the AST:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">THEN&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">if_else:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="nl">while_start:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ow">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nl">TRUE:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">while_end:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="vg">other&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="vg">while_start&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="nl">while_end:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="vg">if_end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="nl">if_else:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="nl">other:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;hi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="nl">if_end:&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>All nesting is gone! The only thing we are left with are conditional jumps (the &lt;code>IF&lt;/code> one-liners),
unconditional jumps, and their corresponding targets. We have essentially gone through a
compilation phase. And if we replace the string labels with line numbers (akin to addresses), just
like an assembler would do, we are left with this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">THEN&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nl">6:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ow">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nl">TRUE:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nl">6:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nl">6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nl">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nl">7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;hi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip; which looks like an awful lot like native machine code, doesn&amp;rsquo;t it?&lt;/p>
&lt;p>And this is what &lt;a href="https://github.com/endbasic/endbasic/commit/c0cb9a31ada44b53d8016d3cf2d19cfaa8158b5e">commit
c0cb9a3&lt;/a>
did. In this change, I added a rudimentary version of a compiler that flattens the AST and a
trivial bytecode-based virtual machine that executes every instruction. The execution loop thus
becomes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">instrs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">instr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">instrs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">instr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Instruction&lt;/span>::&lt;span class="n">Assignment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">assign&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Instruction&lt;/span>::&lt;span class="n">BuiltinCall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">call_builtin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Instruction&lt;/span>::&lt;span class="n">Jump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Instruction&lt;/span>::&lt;span class="n">JumpIfNotTrue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cond&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">symbols&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>::&lt;span class="n">Boolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>::&lt;span class="n">Boolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">new_syntax_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cond&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">start_pos&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">error_msg&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... other instruction types elided ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And with this, you can imagine that implementing &lt;code>GOTO&lt;/code> becomes trivial&amp;mdash;as does &lt;a href="https://github.com/endbasic/endbasic/commit/022ae5105b9662ebf2f7b7af4170c5065bb7255a">implementing
&lt;code>GOSUB&lt;/code>&lt;/a> and
&lt;a href="https://github.com/endbasic/endbasic/commit/e5b60e5d3970378c1a7bb105f631e20f42859f98">&lt;code>ON ERROR&lt;/code>&lt;/a>,
which are other features that are already available at &lt;code>HEAD&lt;/code>.&lt;/p>
&lt;p>Now, the above is far from being true bytecode: for example, the instruction types that are
currently defined are still too high level. Something like the &lt;code>BuiltinCall&lt;/code> instruction type does
an incredible amount of work because this is evaluating (in native code) the various arguments to
the call and calling into the native function. To turn this into true bytecode, the arguments
themselves&amp;mdash;which are arbitrary expressions&amp;mdash;would need to be evaluated via bytecode instructions
with a supporting stack or register bank. And to be real bytecode, the instructions should have a
compact binary representation.&lt;/p>
&lt;p>Having a true bytecode and a memory map sounds super-fun to build. It may even be necessary when
adding support for custom-defined functions. And it would pave the way to having &lt;code>PEEK&lt;/code> and &lt;code>POKE&lt;/code>.
But we didn&amp;rsquo;t need any of this to solve the &lt;code>GOTO&lt;/code> problem. So, for now, this is all that EndBASIC
0.10 will ship with.&lt;/p>
&lt;p>Stay tuned for the forthcoming release announcement!&lt;/p></description></item><item><title>Farewell, Microsoft; hello, Snowflake!</title><link>https://jmmv.dev/2022/10/bye-microsoft-hi-snowflake.html</link><pubDate>Mon, 31 Oct 2022 07:25:00 -0700</pubDate><guid>https://jmmv.dev/2022/10/bye-microsoft-hi-snowflake.html</guid><description>&lt;p>&lt;em>Hello again! It has been months since the last blog post. I have been following this crazy marathon training program that has consumed all of my free time since then, but luckily it&amp;rsquo;s ending this week. I should be able to regain time afterwards to write and hack again&amp;hellip; if what I&amp;rsquo;m describing in this post permits it in the near future!&lt;/em>&lt;/p>
&lt;hr>
&lt;p>After two years, it&amp;rsquo;s time for a change: I left Microsoft last week and &lt;strong>I&amp;rsquo;m starting at Snowflake ❄&lt;/strong> today!&lt;/p>
&lt;figure>
&lt;img src="/images/2022-10-28-microsoft-shutdown.jpg" width="100%">
&lt;figcaption>2022-10-28: Turning off my Microsoft secure corporate laptop for the last time and handing in my badge.&lt;/figcaption>
&lt;/figure>
&lt;h1 id="quick-recap-of-my-2-years-at-microsoft">Quick recap of my 2 years at Microsoft&lt;/h1>
&lt;p>My journey at Microsoft has been short&amp;hellip; but interesting and messy in many ways. Let&amp;rsquo;s look at these from the lens of &lt;a href="/2020/10/bye-google-hi-microsoft.html">what I wrote 2 years ago&lt;/a> when I departed from Google:&lt;/p>
&lt;blockquote>
&lt;p>🔝 The position will put me in the right kind of organizational challenges and responsibility that I need to cultivate to grow right now.&lt;/p>
&lt;/blockquote>
&lt;p>This worked out&amp;hellip; to some extent. When I joined Microsoft, I reported to the director of the front-end layer of the storage subsystem. From day one, this meant that my direct peers were all the managers in the team as well as other high-level ICs. As a consequence, expectations were high, but responsibilities and visibility were high as well. I got to work with these folks and other sibling teams right away, which exposed me to broad architectural and organization problems that needed tackling.&lt;/p>
&lt;p>The opportunities were definitely there, but things were messy because said director (and several of his direct reports) left just a few months after I started. What I was working on was suddenly not as important and the team took a while to recover from such departure. In the end, I refocused and started to tackle a different problem with successful outcomes, but it took longer than it should have for me to do this shift (which had other consequences as I&amp;rsquo;ll mention below).&lt;/p>
&lt;blockquote>
&lt;p>🏫 I know nothing about Windows and surrounding technologies (like C#) but have been interested in them for a while, so this will be my chance to absorb completely different technology. After all, I&amp;rsquo;m a systems person and the Windows ecosystem is my blind spot.&lt;/p>
&lt;/blockquote>
&lt;p>Check. If you have followed &lt;a href="/2022/03/a-year-on-windows-intro.html">&amp;ldquo;recent&amp;rdquo; posts&lt;/a>, I have moved on from macOS, and Windows is now my primary desktop environment. This was unimaginable just 2 years ago. When I joined the company, trying to get work done with the corporate Windows laptop was painful&amp;mdash;not just because I had to learn how to work in a team and a new product, but also because I didn&amp;rsquo;t know how to navigate Windows fluently. To ease my way into the role, I ended up enrolling my personal Mac as a managed corporate device so that I could continue using macOS. But this was only a band-aid: accessing production could only be done from a secure laptop running Windows, and thus every time I was on-call I was extremely slow to operate. At some point, I had to move fully onto Windows to adjust, and it has been just fine. I&amp;rsquo;m now not using macOS at all.&lt;/p>
&lt;p>But there is more. I&amp;rsquo;ve been exposed to C# and written a bunch of code in this language. This was, frankly, easy to do because it&amp;rsquo;s &amp;ldquo;just Java with a different coating&amp;rdquo;. For the kind of code I had to write, I could get by just learning by example and via code review comments. The language has some interesting details, but the real cool stuff comes from the runtime. However, as I mostly dealt with C++, I did not get to build a ton of knowledge in this area.&lt;/p>
&lt;p>Separately, I&amp;rsquo;ve gotten to use Office. Going back to native apps was a breath of fresh air, honestly. But syncing documents via OneDrive, especially those with active collaborators, has been problematic in multiple occasions&amp;hellip; Dealing with sync conflicts is something that just doesn&amp;rsquo;t happen when you use GSuite or even the online versions of O365, so I found myself using the latter in multiple occasions instead of the desktop apps. Oh yes, and I &lt;a href="/2022/03/abandoning-gafyd.html">moved on from GAFYD&lt;/a> and ended up with O365 for personal usage.&lt;/p>
&lt;p>And of course, I&amp;rsquo;ve also ended up playing with Azure as a customer by building a couple of cloud-based services, and gotten an Xbox at home, which the kids have taken over.&lt;/p>
&lt;blockquote>
&lt;p>🌲 Microsoft is huge in the Seattle area and, as far as I know, they are primarily located in this location. If I ever wanted to work at Microsoft, &lt;em>this&lt;/em> was my chance before moving away from the U.S.&lt;/p>
&lt;/blockquote>
&lt;p>Microsoft is everywhere in the area and it is a gigantic employer (other than for the current hiring slowdown affecting all major tech companies) with a neat corporate mission, a great deal of nice products, and a bunch of excellent people.&lt;/p>
&lt;p>That said, my rationale for being the &amp;ldquo;last chance&amp;rdquo; to work for them was not very convincing. This might have been true years ago, but my team has ended up being very remote-friendly due to the pandemic, which means being in the area is not strictly necessary any longer. In fact, we have a few folks that are permanently remote. This may or may not be true for other organizations within the company though.&lt;/p>
&lt;p>Anyhow&amp;hellip; I&amp;rsquo;m not sure I&amp;rsquo;m moving out anytime soon for other personal reasons. So who knows, maybe I&amp;rsquo;ll end up in the company again if the right opportunity shows up.&lt;/p>
&lt;blockquote>
&lt;p>🏃‍♂️ I moved geographically so I wanted to have sufficient work-related contacts to build a local network of peers and friends&amp;hellip; once we are allowed to meet people again. In particular, Twitter was weak in this area.&lt;/p>
&lt;/blockquote>
&lt;p>As mentioned earlier, the team I joined is very remote-friendly, but luckily the vast majority of the people are local&amp;mdash;which worked in my favor to accomplish this. That said, the pandemic made the situation very difficult because I could not go into the office for over a year and, even after the office officially opened, I did not get an assigned location due to logistics for many more months.&lt;/p>
&lt;p>In any case, I ended up commuting semi-regularly to meet peers, which worked wonders. I really don&amp;rsquo;t mind the &amp;ldquo;working from home&amp;rdquo; situation and find it very convenient (and possibly an exclusive choice for the future), but it&amp;rsquo;s true that being present in the office and building personal connections over lunch is super-important to function well at a high-level role. There are certain kinds of talk that will never happen over VC.&lt;/p>
&lt;blockquote>
&lt;p>📢 Azure is a public product, so my work in storage will be directly seen by customers and, hopefully, I&amp;rsquo;ll have enough chances to interact with them too. I was told that Facebook had similar hands-on work to be done, and I believe it, but it&amp;rsquo;d all have been to serve internal teams and I kinda like the public exposure.&lt;/p>
&lt;/blockquote>
&lt;p>This was literally true, but in the end not so rewarding. Even though I was working in public cloud storage, I focused on internal aspects of the product (intentionally), not features. These aren&amp;rsquo;t directly perceived by customers, so my interaction with them was only during outages and only after customer support had already exhausted all avenues to help them. Which, as you can imagine, is not the most satisfying kind of engagement.&lt;/p>
&lt;p>In any case, Azure is huge and this goal is definitely something that can be fulfilled if you work on features, as you will be in contact with both PMs and customers to design and implement them.&lt;/p>
&lt;h1 id="the-need-for-a-change">The need for a change&lt;/h1>
&lt;p>Overall, my experience has been positive as it accomplished most of what I wanted to achieve. But things come to an end. I needed a change for a couple of reasons.&lt;/p>
&lt;p>The first was to remove friction. Yes, I can now operate on Windows just fine and develop on it a-OK, but I&amp;rsquo;m not super-fluent. Obviously, this is fixable with extra time on the role (and if I switched focus to a more hands-on project rather than working on organizational issues), but this made me feel unproductive compared to some of my peers. On Unix-y environments, I can quickly hack whatever I need to solve a problem (especially during an outage!), and that&amp;rsquo;s something I&amp;rsquo;m not yet comfortable enough doing in a Windows environment. (Some things like RDP won&amp;rsquo;t ever be fast or ergonomic though).&lt;/p>
&lt;p>The second is the big elephant in the room: comp. The original offer I got to join the company was very reasonable but it came with this large sign-on bonus over two years. This meant that the comp cliff after two years would be significant, and I knew that going in. However, due to the role, I was counting on having a chance to get promoted within the two years, which would have fixed this issue. Unfortunately, this plan didn&amp;rsquo;t materialize for some of the reasons outlined above, so I was left with the knowledge that this could be corrected right away by moving to a new company. The right opportunity showed up and it was very hard to say no. Honestly, it&amp;rsquo;s not really about the money for me, but major differences in comp and the need to support a family and pay off a huge mortgage cannot be dismissed.&lt;/p>
&lt;p>There were other reasons why I wanted to move to a different project or team, but these two are why I ended up looking outside of the company instead of trying to pursue an internal move (which would have been much easier and less stressful).&lt;/p>
&lt;h1 id="so-hello-snowflake">So, hello Snowflake&lt;/h1>
&lt;p>In the end, an interesting opportunity did show up, and it did so at the right moment. In fact, &lt;em>three&lt;/em> of them showed up, all very similar in role and quite exciting due to my personal interests. I won&amp;rsquo;t bore you with the details of the other companies, so I&amp;rsquo;ll just summarize what&amp;rsquo;s next.&lt;/p>
&lt;p>I&amp;rsquo;m joining Snowflake to work on their &amp;ldquo;new&amp;rdquo; Developer Experience Productivity team, which has some major goals for the years ahead. I&amp;rsquo;ll go back to working with tools I know very well, tackling a large technical challenge. And my &amp;ldquo;customers&amp;rdquo; will now all be internal to the company, so I&amp;rsquo;ll have direct access to chat with them about their issues and how we can fix them.&lt;/p>
&lt;figure>
&lt;img src="/images/2022-09-29-snowflake-welcome-kit.jpg" width="100%">
&lt;figcaption>2022-09-29: Snowflake swag after I went through their interview loop. Nice!&lt;/figcaption>
&lt;/figure>
&lt;p>A big portion of the team is local, including direct management, which will facilitate onboarding and building rapport. I&amp;rsquo;ll also be joining some nice folks I knew from before, and a much smaller corporate environment. In fact, I have visited the office in Bellevue and I got a similar feeling as to when I joined Google Dublin back in 2009: just a few floors with people that know each other and an opportunity to see and be part of tangible growth.&lt;/p>
&lt;p>But this is a much smaller company than Google and Microsoft. When I left Google, I wanted to experience a different work environment and&amp;hellip; to be honest, Microsoft hasn&amp;rsquo;t been it. The two companies are incredibly similar, to the dismay of many. Snowflake, however, seems like a sweet spot because it is significantly smaller but it&amp;rsquo;s also stable enough.&lt;/p>
&lt;p>This is now the second time I&amp;rsquo;ve moved from storage infrastructure to developer tools, and it may not be the last. I enjoy working on many different aspects in technology, so it&amp;rsquo;s fun to &amp;ldquo;spice things up&amp;rdquo; once in a while and change topics&amp;mdash;but in the end, I end up frustrated with the tooling and start chipping away to make things better in that area, which makes me swing back into this area.&lt;/p>
&lt;p>Oh, and today I&amp;rsquo;m going back to macOS given that my corporate laptop is a gigantic MacBook Pro 16&amp;quot;. It&amp;rsquo;ll be fun to see how these M1-based computers operate&amp;hellip; but I&amp;rsquo;m not sure I&amp;rsquo;ll enjoy the duality of a Mac corporate laptop and a Windows personal desktop. No, wait, I &lt;em>know&lt;/em> &lt;a href="/2021/07/macos-ahk.html">I won&amp;rsquo;t enjoy it&lt;/a>, so I&amp;rsquo;ll have to find a solution.&lt;/p>
&lt;figure>
&lt;img src="/images/2022-10-25-snowflake-laptop.jpg" width="100%">
&lt;figcaption>2022-10-25: Snowflake corporate laptop unboxing.&lt;/figcaption>
&lt;/figure>
&lt;p>Thanks for reading and happy Halloween!&lt;/p></description></item><item><title>Tips on formatting Markdown lists</title><link>https://jmmv.dev/2022/07/markdown-lists.html</link><pubDate>Thu, 07 Jul 2022 07:00:00 -0700</pubDate><guid>https://jmmv.dev/2022/07/markdown-lists.html</guid><description>&lt;p>Lists are a very common construct in technical documents, which is the kind of material I most often write and &lt;em>review&lt;/em>. But getting complex lists to look right is tricky, especially when authoring them in Markdown.&lt;/p>
&lt;p>The problem with lists starts early on. All Markdown training material will teach you that lists are written like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">This is an unordered list:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> First.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> Second.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> Third.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">And this is an ordered list:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">1.&lt;/span> First.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">2.&lt;/span> Second.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">3.&lt;/span> Third.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Looks trivial and easily readable in its textual form, right? Unfortunately, this style quickly breaks down as soon as you have multiple people editing the same document or you start nesting lists and code blocks.&lt;/p>
&lt;p>From experience, I&amp;rsquo;ve come up with a style of writing lists that ensures they are always correctly and consistently formatted, and that mistakes are trivial to spot at review time. I find myself repeating these tips and their rationale during PR reviews, so here is a full-fledged explanation for posterity&amp;rsquo;s sake.&lt;/p>
&lt;h1 id="ordered-list-numbers">Ordered list numbers&lt;/h1>
&lt;p>When working with a large ordered list, keeping items properly numbered is a task that seems impossible. Oftentimes, I&amp;rsquo;ve gotten PRs &lt;em>for new content&lt;/em> where the item numbers were wrong from the get go. Things like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="k">1.&lt;/span> First.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">3.&lt;/span> Third already? I guess the item was moved at the last minute.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">2.&lt;/span> Second.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">2.&lt;/span> Second again. Copy/paste error?
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Markdown will happily accept this and will render the list with correct sequential numbering (note: it will fix the numbering, not reorder your items!). But&amp;hellip; do you think this is good? In my opinion, this looks sloppy&amp;mdash;and sloppiness of this kind during a PR review is an indicator that the rest of your change is suspect of more serious problems and deserves thorough scrutiny.&lt;/p>
&lt;p>The problems don&amp;rsquo;t end with the author having to be more careful though. If you &lt;em>try&lt;/em> to do the right thing and try to keep the list numbers sequential, you&amp;rsquo;ll have cases where a trivial addition to a document will result in a large diff because you had to renumber all subsequent entries. Take a look at this change and try to answer the question of &amp;ldquo;what is this doing?&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">&lt;span class="gd">--- before 2022-07-07 05:50:28.439334000 -0700
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+++ after 2022-07-07 05:50:48.189334000 -0700
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>&lt;span class="gu">@@ -1,3 +1,4 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">&lt;/span> 1. This item comes first.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">-2. This item is in the middle.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">-3. This item comes last.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+2. This item is also in the middle.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+3. This item is in the middle.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+4. This item comes last.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This patch is simply adding a new item in position 2, but the change had to end up touching two extra unrelated lines. This is hard to review and pollutes the output of &lt;code>git blame&lt;/code> (or whichever equivalent annotation command your VCS provides).&lt;/p>
&lt;p>The easiest way out of this problem is to &lt;em>not&lt;/em> number your lists sequentially. Instead, always prefix them with &lt;code>1.&lt;/code>, like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="k">1.&lt;/span> First.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">1.&lt;/span> Second, really.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">1.&lt;/span> Third. Yes, this works!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Doing so will free you from having to maintain sequential list numbers and will also keep diffs clean. Going back to our previous example, adding an item in position 2 would look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">&lt;span class="gd">--- before 2022-07-07 05:53:31.549334000 -0700
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+++ after 2022-07-07 05:53:33.429334000 -0700
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>&lt;span class="gu">@@ -1,3 +1,4 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">&lt;/span> 1. This item comes first.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+1. This item is also in the middle.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> 1. This item is in the middle.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1. This item comes last.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Clean and to the point.&lt;/p>
&lt;h1 id="nested-elements">Nested elements&lt;/h1>
&lt;p>The other problem when formatting lists comes from complex lists that have more than just one paragraph per item or higher-level blocks within them. Inevitably, people new to Markdown will write things like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the first bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> We try to add a second paragraph, but it may not be within the item.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the second bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> And we want a code block within it, but this is not a code block!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Neither is this!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the third bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k"> &amp;gt; &lt;/span>&lt;span class="ge">And we try to add a blockquote like we added a second paragraph, but fail.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above will not be formatted as you expect. The second paragraph in the first list item may or may not end up rendered as a paragraph within the list item. The code blocks in the second list item may or may not be rendered as a code block, but if they are, they will &lt;em>not&lt;/em> be nested. And if you try to nest lists, all bets are off.&lt;/p>
&lt;p>These problems don&amp;rsquo;t look apparent in the raw Markdown text and they are difficult to spot in document previews unless you pay close attention to the rendering. Most people don&amp;rsquo;t seem to notice when code blocks are wider than they are supposed to be, for example, or when paragraphs are not correctly aligned within their container list items.&lt;/p>
&lt;p>Plus it&amp;rsquo;s not only about the looks. These formatting mistakes break the &lt;em>semantics&lt;/em> of the document: instead of having a single list with longer individual elements, you end up with &lt;em>two&lt;/em> disjoint lists. I don&amp;rsquo;t have experience with screen readers, but I&amp;rsquo;m pretty sure this poses an accessibility problem.&lt;/p>
&lt;p>The above problems are fixable, obviously. If we look at the &lt;a href="https://www.markdownguide.org/basic-syntax#adding-elements-in-lists">Adding Elements in Lists&lt;/a> section of the &lt;a href="https://www.markdownguide.org/">Markdown Guide&lt;/a> website, we&amp;rsquo;ll find examples on how to correctly nest elements. Their suggestion is this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the first bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> This is a second paragraph within the first item.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the second bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> This is a code block within it.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the third bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k"> &amp;gt; &lt;/span>&lt;span class="ge">This is a blockquote within it.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These work as intended, but to me, they look like a huge mess. If I were reviewing the above, I would have a hard time understanding if the nesting is correct, and to the untrained eye, this just looks wrong. I wouldn&amp;rsquo;t fault anyone coming up with a PR to &amp;ldquo;realign&amp;rdquo; the lines above so that they &amp;ldquo;look&amp;rdquo; correct in their textual form.&lt;/p>
&lt;p>My suggestion to fix the above is to always indent list item content to multiples of 4 columns, like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the first bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> This is a continuation paragraph, and it works.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the second bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> With a nested code block.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the third bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k"> &amp;gt; &lt;/span>&lt;span class="ge">With a nested blockquote.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which works equally well for ordered lists &lt;em>and&lt;/em> lists with multiple levels:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> First bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">1.&lt;/span> Nested ordered list.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">1.&lt;/span> With multiple items.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> And a code block.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> Second bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k"> &amp;gt; &lt;/span>&lt;span class="ge">And a blockquote.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note how there are 3 spaces after the &lt;code>*&lt;/code> prefixes and 2 spaces after the &lt;code>1.&lt;/code> prefixes. I&amp;rsquo;ll agree that this doesn&amp;rsquo;t look super neat in textual form, but it is &lt;em>consistent&lt;/em>, easy to understand, and works all the time.&lt;/p>
&lt;h1 id="markdownlint-configuration-for-vscode">markdownlint configuration for VSCode&lt;/h1>
&lt;p>I strongly recommend everyone that authors Markdown content:&lt;/p>
&lt;ol>
&lt;li>to use Visual Studio Code;&lt;/li>
&lt;li>to install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint">markdownlint extension&lt;/a>, and&lt;/li>
&lt;li>to address all squiggly lines that indicate Markdown formatting mistakes.&lt;/li>
&lt;/ol>
&lt;p>If you use these tools, you can apply the following configuration entries to enforce the style suggestions given in this post:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;markdownlint.config&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;MD007&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// Unordered list indentation.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;indent&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;MD029&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// Ordered list item prefix.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;style&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;one&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;MD030&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// Spaces after list markers.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;ol_single&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;ol_multi&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;ul_single&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;ul_multi&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I have yet to set up PR validation automation to run &lt;a href="https://github.com/DavidAnson/markdownlint">markdownlint&lt;/a> directly on the content and fail PR merges on mistakes&amp;hellip; but this is an idea I&amp;rsquo;ve just had as I was writing this 😉&lt;/p></description></item></channel></rss>