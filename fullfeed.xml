<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/</link><description>Recent content on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 23 Jun 2023 06:35:00 -0700</lastBuildDate><atom:link href="https://jmmv.dev/feed.xml" rel="self" type="application/rss+xml"/><item><title>A persistent task queue in Rust</title><link>https://jmmv.dev/2023/06/iii-iv-task-queue.html</link><pubDate>Fri, 23 Jun 2023 06:35:00 -0700</pubDate><guid>https://jmmv.dev/2023/06/iii-iv-task-queue.html</guid><description>&lt;p>In a recent post, I announced the very non-exciting feature of having &lt;a href="/2023/06/in-house-email-subscriptions.html">custom-built email subscriptions&lt;/a> for this blog. Writing the subscription flow was easy, but developing the automation to, first, periodically scrape the blog&amp;rsquo;s RSS feed and, second, schedule email notifications to readers based on the items in the feed was really time-consuming and tricky to implement.&lt;/p>
&lt;p>You would say: &lt;em>&amp;ldquo;How is that hard? Just &lt;a href="https://github.com/rss2email/rss2email">set up a cron job&lt;/a> that fetches the RSS feed and sends emails!&amp;rdquo;&lt;/em> Yeah, yeah, of course, that can work. But when you add in other requirements, this approach is not so simple. Note a few things: you need to determine which posts in the feed are new and which aren&amp;rsquo;t, which means you have to keep track of all past-seen posts; my email gateway has daily limits on how many emails I can send, so I need to schedule the submissions across multiple days; and if the submission of one email fails, I want to retry sending that one email only. Add to that the fact that I run not one but multiple sites with their own subscription features, and these processes&amp;mdash;in particular, the email quota controls&amp;mdash;all have to somehow agree.&lt;/p>
&lt;p>The more you think about this problem, the more you realize having some sort of queue to track which emails have to be sent and which haven&amp;rsquo;t been sent yet could be very useful. At that point, you might as well realize that such a queuing system can also support all kinds of background operations that happen in a web service, not just email submissions, and I have been needing that ability for a while now.&lt;/p>
&lt;p>So let&amp;rsquo;s get into specifics. Here are the conceptual tasks I envisioned within the context of &lt;a href="/software/endtracker.html">EndTRACKER&lt;/a> (terrible name, I know), along with the names they actually got in the code, to convert an RSS feed into email notifications:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ProcessFeeds&lt;/code>: Loads all feeds from the database and enqueues new &lt;code>ScrapeFeed&lt;/code> and &lt;code>ProcessFeed&lt;/code> tasks for every feed. This is the entry point to the system, and this task is enqueued by a timer once an hour to start the processing flow.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ScrapeFeed(feed)&lt;/code>: Loads the details for &lt;code>feed&lt;/code>, downloads its registered RSS feed, and computes the delta against previously-known items. Newly-discovered feed items are inserted into a database and marked as &amp;ldquo;not yet notified&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ProcessFeed(feed)&lt;/code>: Loads all &amp;ldquo;not yet notified&amp;rdquo; posts for &lt;code>feed&lt;/code> from the database plus the list of verified email subscribers for the site that owns the feed. It then schedules one &lt;code>SendFeedItem&lt;/code> task for every post/subscriber pair and finally marks the feed item as notified.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SendEmailItem(feed, item, subscriber)&lt;/code>: Loads the &lt;code>feed&lt;/code>&amp;rsquo;s &lt;code>item&lt;/code> details from the database, composes an email for the &lt;code>subscriber&lt;/code> by formatting arbitrary HTML into text, and sends the result to them. This is where sanity-checks happen, such as ensuring we have enough email submission quota left or that the subscriber hasn&amp;rsquo;t unsubscribed, and thus this task must be retried at a later stage if it fails.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>With these task definitions in mind, it was time to go to the drawing board and design a queuing system to support them.&lt;/p>
&lt;hr>
&lt;p>Now, the question you surely have is: &lt;em>&amp;ldquo;Why bother? There are plenty of queuing services out there!&amp;rdquo;&lt;/em> And my answer is: &lt;em>&amp;quot;&lt;a href="/2021/01/why-endbasic.html">Because why not&lt;/a>&amp;quot;&lt;/em>. I wanted to have some fun designing and implementing this feature, and I don&amp;rsquo;t fancy the idea of marrying a specific cloud provider by relying on their cloud-native services: so far, the only thing I depend on for my web services is a hosted PostgreSQL instance and a bunch of Azure Functions deployments, and I could trivially move these to a VM in my home server if I had to.&lt;/p>
&lt;p>Anyhow. What &lt;em>is&lt;/em> a &amp;ldquo;persistent task queue&amp;rdquo; anyway, other than a mouthful? Let&amp;rsquo;s look at the words: it is a &lt;strong>queue&lt;/strong>, so it is an ordered record of &amp;ldquo;things&amp;rdquo;; it is &lt;strong>for tasks&lt;/strong>, so it needs to offer task-specific execution logic and tracking to ensure at-most-once semantics and the like; and it is &lt;strong>persistent&lt;/strong>, so the tasks and their statuses need to be stored somewhere.&lt;/p>
&lt;h1 id="key-ideas">Key ideas&lt;/h1>
&lt;p>As in any design, we have to start by enumerating the specific requirements I had for the solution to put the various design choices in context. These are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Service-agnostic.&lt;/strong> I run a few web services, all of which share common logic via &lt;a href="/software/iii-iv.html">the III-IV framework&lt;/a>. The queue implementation must live in this open-source framework. The framework must not know anything about the task specifics, so &lt;em>task descriptors&lt;/em> must be defined by the services and they need to be persisted in some generic way (JSON serialization).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Client and worker separation.&lt;/strong> Clients enqueuing tasks must not know anything about how to run them. Only the worker processes need to contain the code that processes the tasks. This means there ought to be two separate APIs, and there can be one or more client and/or workers running at any given time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Azure Functions deployment.&lt;/strong> The queue must run within existing services, not as a new standalone deployment. This is a restrictive requirement because my existing services are run by a serverless runtime, so the queue operations cannot rely on long-running processes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>At-most once execution.&lt;/strong> Tasks have side-effects so they must run at most once. It is OK if some are lost as long as it&amp;rsquo;s a rare occurrence, but it is &lt;em>not acceptable&lt;/em> to run the same task twice. The fact that we run in a serverless environment helps with this because Azure Functions enforces a maximum runtime for processes, which we will take advantage of.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Ability to retry tasks that fail.&lt;/strong> Some tasks will fail for expected reasons, such as when we have run out of outbound email quota for the day, and these must be postponed and retried at a later time. But some failures are not retriable, so whether a task needs to be retried or not has to be decided on an error-by-error basis.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Quarantining of problematic tasks.&lt;/strong> Tasks that fail repeatedly or that cause the queue worker to crash in unexpected ways need to be moved out of the way after a few execution attempts so that they do not cause future trouble.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Database-agnostic.&lt;/strong> As is the case for all of III-IV-based services, the choice of the database must be independent from the queue logic and both PostgreSQL (for production) and SQLite (for lightning-fast tests) must be supported. However, the database must be ACID because it will be used for synchronization.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>With these, you can start envisioning how the queue looks like. Beware that I&amp;rsquo;m no expert in queuing systems, so this design and implementation are possibly flawed or incomplete in various ways&amp;hellip; but it does the job for now. Let&amp;rsquo;s dive into its specifics.&lt;/p>
&lt;h1 id="azure-functions-integration">Azure Functions integration&lt;/h1>
&lt;p>The first consumer of the task queue was going to be EndTRACKER and, right now, EndTRACKER runs as an Azure Functions serverless service: I upload a tiny Rust binary that exposes an HTTP interface and the cloud runtime takes care of spinning up short-lived containers whenever the configured HTTP routes are accessed. The only magic involved is making the Rust HTTP server expose itself via the TCP/IP port given to it in the &lt;code>FUNCTIONS_CUSTOMHANDLER_PORT&lt;/code> environment variable&amp;mdash;and, after that, all communication between the Azure Functions runtime and the Rust binary happens over HTTP.&lt;/p>
&lt;p>This is great, but&amp;hellip; I had to clear some questions before even attempting to write the queue service in this environment.&lt;/p>
&lt;p>The first question was: was it even possible to build the queue runtime in a serverless environment? A worker is, in theory, a long-lived process that polls the queue every few seconds or minutes to detect work to do and executes such work. The answer is obviously &amp;ldquo;yes, you can do that&amp;rdquo;. Imagine exposing a &lt;code>/queue-loop&lt;/code> HTTP endpoint and having a timer that calls this endpoint periodically to trigger the queue&amp;rsquo;s processing loop. As long as the loop can execute at least one task within the maximum allowed container run time, the queue will make forward progress.&lt;/p>
&lt;p>The second question was: can we integrate this timer into Azure Functions without needing a separate cron job that pokes &lt;code>/queue-loop&lt;/code> every few minutes? The answer also seemed to be yes: Azure Functions endpoints can be exposed via different triggers. Some triggers are HTTP endpoint calls, but other triggers, such as timers, can be used. If we define a trigger like the following in a &lt;code>functions/queue-loop.json&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;bindings&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;timerTrigger&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;direction&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;in&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;req&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;schedule&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0 */10 * * * *&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then the Azure Functions runtime will call this &lt;code>queue-loop&lt;/code> function every 10 minutes given the &lt;code>schedule&lt;/code> stanza above.&lt;/p>
&lt;p>But then the third question was: this is not an HTTP trigger&amp;hellip; can it be processed at all from a custom Rust binary, or are the officially supported SDKs relying on some &lt;em>other&lt;/em> communication mechanism with the runtime engine to react to non-HTTP triggers?&lt;/p>
&lt;p>Fortunately, the answer is also yes. It took me a bit of fiddling, but in the end I found that the runtime will invoke the &lt;code>/queue-loop&lt;/code> POST HTTP handler (outside of the default &lt;code>/api&lt;/code> namespace for user-supplied handlers). However, after I got this hooked up, I noticed that the Azure Functions runtime claimed that my handler failed (even when it did return a &lt;code>200 OK&lt;/code> code) and kept re-invoking it every few seconds&amp;mdash;as if previous calls had been lost. This took some more effort to figure out, and I had to peek into the C# SDK code to find the answer: the endpoint needs to return a valid JSON payload, not an empty document. After figuring this out, changing the endpoint to return an empty &lt;code>{}&lt;/code> dictionary allowed the runtime to interact with my handler just fine.&lt;/p>
&lt;p>I was cleared to proceed with the original idea.&lt;/p>
&lt;h1 id="the-client-interface">The client interface&lt;/h1>
&lt;p>Defining the right interface for tasks, especially the internal interface to process them, took many iterations. As mentioned earlier, clients must not know anything about how tasks are executed, so there have to be two separate APIs: one that is public for clients, and one that is internal to the workers.&lt;/p>
&lt;p>In the end, I settled on the following client operations. Note that this is missing &lt;em>a ton&lt;/em> of details, so don&amp;rsquo;t take the Rust code too literally here:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="nc">TaskResult&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// The task succeeded with an optional diagnostic/status message.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Done&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// The task failed hard with the given error message.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Failed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// The task was abandoned after N failed retries with the given error message.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Abandoned&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="no">DB&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Task&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Client&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="no">DB&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Task&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">DB&lt;/span>: &lt;span class="nc">Database&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Task&lt;/span>: &lt;span class="nc">Serialize&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Creates a new client that uses the `db` database for task persistence.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">db&lt;/span>: &lt;span class="nc">DB&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Enqueues a new `task` and returns the identifier assigned to it.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">enqueue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">task&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">T&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Uuid&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Checks if the task `id` has finished execution by querying the database.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">poll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>: &lt;span class="nc">Uuid&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TaskResult&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Waits for the task `id` to finish execution by polling it every `period`.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>: &lt;span class="nc">Uuid&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">period&lt;/span>: &lt;span class="nc">Duration&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TaskResult&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We have a &lt;code>Client&lt;/code> that is connected to a database of a generic type at construction time. This client provides a mechanism to enqueue a JSON-serializable task via an &lt;code>enqueue&lt;/code> method, which returns the identifier of the enqueued task, and also offers methods to &lt;code>poll&lt;/code> for the task&amp;rsquo;s status as it runs and to &lt;code>wait&lt;/code> until the task completes.&lt;/p>
&lt;p>All operations issued by the client happen by talking to the database. To avoid a potential hot spot in inserting tasks, tasks cannot be identified by a globally-unique counter because, otherwise, multiple concurrent clients would need to synchronize on that datum. This is why tasks use UUIDs as identifiers. (I suppose using the default &amp;ldquo;row id&amp;rdquo; of the database could have also worked here just fine, but I&amp;rsquo;m already using UUIDs for many other things, so that&amp;rsquo;s what I picked.)&lt;/p>
&lt;p>The above is the essence of the &lt;code>Client&lt;/code>, but it has other methods. Take a look at &lt;a href="https://github.com/jmmv/iii-iv/blob/eec320cd02149f223d8a9c7f8d697845ec2114d8/queue/src/driver/client.rs">the &lt;code>client&lt;/code> module&lt;/a> for more details.&lt;/p>
&lt;h1 id="the-worker-service-not-a-microservice">The worker service: not a microservice&lt;/h1>
&lt;p>The worker is exposed as a &lt;code>Worker&amp;lt;Task&amp;gt;&lt;/code> type which looks like this. Pardon my over-simplified Rust:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Task&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Worker&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Task&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Task&lt;/span>: &lt;span class="nc">Deserialize&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Creates a new worker process that uses the `db` database to extract
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// tasks and persist task state, uses `opts` for configuration, and
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// relies on `exec` for the task execution logic.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Exec&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ExecFut&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">db&lt;/span>: &lt;span class="nc">DB&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">opts&lt;/span>: &lt;span class="nc">WorkerOptions&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">exec&lt;/span>: &lt;span class="nc">Exec&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">DB&lt;/span>: &lt;span class="nc">Database&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Exec&lt;/span>: &lt;span class="nb">Fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">ExecFut&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ExecFut&lt;/span>: &lt;span class="nc">Future&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Output&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ExecResult&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Tells the worker to look for runnable tasks in the database and to
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// run them.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">notify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The worker&amp;rsquo;s &lt;code>new&lt;/code> constructor spawns a Tokio background task that loops infinitely, polling tasks from the database &lt;code>db&lt;/code> and using the &lt;code>exec&lt;/code> closure to execute each runnable task. The user-configurable options provided in &lt;code>opts&lt;/code> tune the behavior of the loop, and all of these options can be provided via environment variables.&lt;/p>
&lt;p>But the infinite loop does nothing on its own. The worker loop starts idle and it only runs tasks whenever the &lt;code>notify&lt;/code> method is called. There is an async channel between the Tokio background task and the &lt;code>Worker&lt;/code> instance, which &lt;code>notify&lt;/code> uses to awaken the loop. This is where the previously-described HTTP API handler &lt;code>/queue-loop&lt;/code> comes into play: this handler wraps a &lt;code>Worker&lt;/code> and simply invokes &lt;code>notify&lt;/code> on it to trigger the processing loop.&lt;/p>
&lt;p>As for the &lt;code>exec&lt;/code> suppliers, these closures are intended to be stateless in memory, which simplifies their design. Remember that tasks can be executed from different workers, more than once if they have to be retried, and that the worker processes can die at any time&amp;hellip; so keeping state in memory is nonsensical. It &lt;em>is&lt;/em> possible to maintain state in memory in a very convoluted way, which I had to do for unit-testing purposes, but such difficulty is tolerable given this rationale.&lt;/p>
&lt;p>The most interesting thing about the &lt;code>exec&lt;/code> closure is its return type, which looks like the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="nc">ExecError&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// The task hard-failed with the given error message.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Failed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// The task asked to be retried after a certain delay with a diagnostic
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// message.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RetryAfterDelay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Duration&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// The task asked to be retried after a specific timestamp with a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// diagnostic message.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RetryAfterTimestamp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">OffsetDateTime&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">type&lt;/span> &lt;span class="nc">ExecResult&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ExecError&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are blanket conversions from database-layer errors (&lt;code>DbError&lt;/code>) and business logic errors (&lt;code>DriverError&lt;/code>) into &lt;code>ExecError&lt;/code> that classify these error types into either fatal failures or retriable failures. This allows the Rust try operator &lt;code>?&lt;/code> to do the right thing by default.&lt;/p>
&lt;p>As in the client section, the above is just a sketch of the &lt;code>Worker&lt;/code>. Take a look at &lt;a href="https://github.com/jmmv/iii-iv/blob/eec320cd02149f223d8a9c7f8d697845ec2114d8/queue/src/driver/worker.rs">the &lt;code>worker&lt;/code> module&lt;/a> for the real details.&lt;/p>
&lt;h1 id="safe-retries">Safe retries&lt;/h1>
&lt;p>One key requirement we haven&amp;rsquo;t covered yet is how to achieve at-most-once execution guarantees. For this, we need to ensure that only one worker can pick up a task at any given time.&lt;/p>
&lt;p>This is easy, right? We can implement a write-ahead journal for task processing, like this:&lt;/p>
&lt;ol>
&lt;li>Load a runnable (not-yet-running) task from the queue.&lt;/li>
&lt;li>Atomically mark the task as running (thanks, ACID transactions!).&lt;/li>
&lt;li>Run the task processing logic.&lt;/li>
&lt;li>If the task fails, atomically mark it as failed so that it can be retried later after a configurable delay.&lt;/li>
&lt;li>If the task succeeds, atomically mark it as done so that it is never considered as runnable again.&lt;/li>
&lt;/ol>
&lt;p>This ensures that only one worker will ever pick up a task so we are protected against multiple concurrent executions. All good, right? Well&amp;hellip; but what happens if the worker dies at any point after marking the task as running, for whatever reason? We will leave the task &amp;ldquo;running&amp;rdquo; so it won&amp;rsquo;t ever be considered as runnable again, which means it&amp;rsquo;ll never complete!&lt;/p>
&lt;p>Thankfully, this is where the serverless runtime provided by Azure Functions comes in very handy. We can rely on the fact that the runtime enforces a maximum runtime limit for any request and use that fact to detect &amp;ldquo;lost&amp;rdquo; tasks. In other words: if we find a task in the running state that has been running for longer than the maximum allowed runtime (5 minutes by default), then we can conclude that the worker was lost and that the task has to be retried.&lt;/p>
&lt;p>Which finally brings us to quarantining. A worker can die due to external reasons (exceeding its maximum runtime, hardware failure&amp;hellip;) or it can die because the &lt;code>exec&lt;/code> handler for the task crashed. It&amp;rsquo;s the latter case that&amp;rsquo;s worrying because we could have an ill-defined task that causes a repeated crash every time a worker picks it up. Such cases are rather common in large queuing systems and can cause slowdowns in task processing or a complete DOS of the service. This is why it&amp;rsquo;s important to discard a task if it has been retried more than N times, which is what&amp;rsquo;s represented by the &lt;code>Abandoned&lt;/code> task state.&lt;/p>
&lt;h1 id="putting-it-all-together">Putting it all together&lt;/h1>
&lt;p>Two requirements of the design were to separate the queue logic from the consumer services and to &lt;em>not&lt;/em> need extra services to be running. This posed an interesting problem.&lt;/p>
&lt;p>The queue processing loop (aka the &lt;code>Worker&lt;/code>) has to run in-process with the actual service. Now, while I do like a microservice-oriented design because it keeps responsibilities clear across components, deploying a bunch of services comes at a high maintenance cost&amp;mdash;one that I am not willing to pay for my side projects. This is why, in EndTRACKER, I have opted for a microservice-like design with a monolithic deployment. The way this works is that the &lt;em>code&lt;/em> in EndTRACKER is split into various REST services, and these services all get combined into one single HTTP router from &lt;code>main.rs&lt;/code>. The result is a single binary with trivial deployment practices, but leaving an easy way out of a monolith if the need to scale any of the internal services arises.&lt;/p>
&lt;p>In actual terms, this means that EndTRACKER now has an in-process &lt;code>batch&lt;/code> &amp;ldquo;microservice&amp;rdquo; that simply spawns the generic &lt;code>Worker&lt;/code> and exposes the &lt;code>/queue-loop&lt;/code> endpoint into the HTTP router, like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Spawn the worker, connecting it to system services and the `run_task`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// execution logic.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">worker&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">iii_iv_queue&lt;/span>::&lt;span class="n">driver&lt;/span>::&lt;span class="n">Worker&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">worker_db&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">clock&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">worker_opts&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">move&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">run_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">worker&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Arc&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Mutex&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">worker&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// Instantiate the service-independent queue worker from III-IV.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// This is the `/queue-loop` handler, essentially.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">queue_router&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">iii_iv_queue&lt;/span>::&lt;span class="n">rest&lt;/span>::&lt;span class="n">worker_cron_app&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">worker&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// Create the HTTP router for the microservice, bundling the generic
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// III-IV endpoints with ours.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">router&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Router&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">route&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/hourly&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">axum&lt;/span>::&lt;span class="n">routing&lt;/span>::&lt;span class="n">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hourly&lt;/span>::&lt;span class="n">cron_post_handler&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">queue_router&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Verbose&amp;hellip; but not too complicated.&lt;/p>
&lt;p>But wait, what is that &lt;code>/hourly&lt;/code> endpoint that just showed up? That&amp;rsquo;s &lt;em>another&lt;/em> Azure Functions timer trigger that gets called every hour. &lt;em>This&lt;/em> is where the service injects the &lt;code>ProcessFeeds&lt;/code> master task into the queue to trigger the whole processing flow. With that task injected into the queue, the &lt;code>/queue-loop&lt;/code> then takes over every 10 minutes to discover and process all dependent tasks as they show up.&lt;/p>
&lt;h1 id="future-use-cases">Future use cases&lt;/h1>
&lt;p>Before concluding, let me briefly mention a couple of additional use cases that the queue could serve. It&amp;rsquo;s because these use cases exist that I pursued the queue solution instead of simply deploying &lt;code>rss2email&lt;/code> as a cron job in my home server.&lt;/p>
&lt;p>The first use case is going back to this long-standing to-do in the EndTRACKER codebase:&lt;/p>
&lt;pre tabindex="0">&lt;code>// Ideally we should get full visibility into all history, but that
// can be very costly and we can tolerate some error here. To fix
// this properly, though, we&amp;#39;d need some offline data preprocessing,
// which would benefit this whole function anyway.
&lt;/code>&lt;/pre>&lt;p>This comment is referring to the logic that computes the historical page views graphs &lt;em>on demand&lt;/em>. Right now, historical queries are limited to just one month because of this, but with deferred task processing, you can imagine having a daily task that calculates which data points are missing in a timeseries and spawns tasks to generate those precomputed data points&amp;hellip; which should be trivial to implement at this point. Furthermore, having this ability to compute summarized timeseries means I could change the service to fully discard request data after processing, further reducing the risk of keeping &lt;em>any&lt;/em> private data in the database.&lt;/p>
&lt;p>The other use case would arise if I start accepting &amp;ldquo;customers&amp;rdquo; in EndTRACKER. If that were the case, one feature I&amp;rsquo;d want to expose is an &amp;ldquo;export your data as a SQLite database&amp;rdquo; button so that you wouldn&amp;rsquo;t feel trapped in the platform. Implementing such a data dump cannot happen as part of a server request, so it would also benefit from happening via a deferred task.&lt;/p>
&lt;p>And that&amp;rsquo;s finally all for today. Maybe you can now find use cases for III-IV yourself!&lt;/p></description></item><item><title>MVC but for non-UI apps</title><link>https://jmmv.dev/2023/06/mvc-non-ui-apps.html</link><pubDate>Tue, 20 Jun 2023 10:00:00 -0700</pubDate><guid>https://jmmv.dev/2023/06/mvc-non-ui-apps.html</guid><description>&lt;p>In &lt;a href="https://collindonnell.com/mvc-isnt-mvc">MVC isn&amp;rsquo;t MVC&lt;/a>, which hit the &lt;a href="https://news.ycombinator.com/item?id=36397058">Hacker News front page overnight&lt;/a>, Collin Donnell describes how the MVC design pattern that we use today isn&amp;rsquo;t really what was originally &lt;a href="https://folk.universitetetioslo.no/trygver/1979/mvc-2/1979-12-MVC.pdf">envisioned in 1979 by Tyrgve Reenskaug&lt;/a>. This prompted me to think about how this architecture, if tweaked even further, maps pretty well to today&amp;rsquo;s designs of &lt;em>other kinds&lt;/em> of programs, and I want to explore two cases in this post: web services and CLI apps. I know I promised a post on the task queuing system I have written in Rust, but that will have to wait for a couple more days.&lt;/p>
&lt;p>To recap, MVC stands for &lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Model-View-Controller&lt;/a> and is a software design pattern to structure the implementation of apps that provide a &amp;ldquo;user interface&amp;rdquo;. The core idea of this pattern is to separate the presentation of the app from its business logic, and this same idea can be applied to other types of apps as well.&lt;/p>
&lt;h1 id="mvc-in-web-services">MVC in web services&lt;/h1>
&lt;p>If we take a look at a web service&amp;mdash;not a web app; we are talking about the server side only here&amp;mdash;we can map the layers of the MVC pattern as follows:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The View layer is where communication with the world happens. This layer contains the code that receives inbound network requests and writes their responses. This layer is purely in charge of deserializing and validating requests, and serializing responses in whichever protocol the service exposes. The code in this layer must restrict itself to, for example, parsing and emitting JSON, obtaining session details, or converting error types (such as exceptions or &lt;code>Result&lt;/code>s) to HTTP status codes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The Controller layer is where business logic is implemented and is sometimes called the &amp;ldquo;service layer&amp;rdquo; or, as I call it, the &amp;ldquo;driver&amp;rdquo;. Oftentimes there will be a 1:1 mapping from APIs exposed through the View layer and entry points to the Controller, but not always. This is where all kinds of decisions happen, including authorization checks and coordination of access to the various external resources that the service may need. For example, if various database operations need to be grouped in a transaction and retried on failure, this is where the transaction is created and where the retry logic (policy) lives.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The Model layer is where access to the persisted data happens and is where the high level data types for the application may be defined. This is often an abstraction over a database, but it could also be an abstraction over whichever other dependent system the service needs to talk to. For this reason, this layer may also be referred to as the &amp;ldquo;data access&amp;rdquo; layer or, more generally, the &amp;ldquo;provider&amp;rdquo; layer because it&amp;rsquo;s where the service talks to other services that provide data.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>I saw this design in practice during my time in the Azure Storage team, where our frontend exposed the same set of storage facilities through a multitude of protocols with high code reuse. I have replicated this same design in my own web services with great results and factored out common code in the &lt;a href="/software/iii-iv.html">III-IV framework&lt;/a>, whose name is a direct direct reference to this architecture. See &lt;a href="https://github.com/jmmv/iii-iv/tree/main/example/src">the sample application sources&lt;/a> to witness the three layers in action.&lt;/p>
&lt;p>But careful: note that just because a piece of code &lt;em>formats data&lt;/em> does not make that code belong to the View layer. Imagine, for example, a web service that has an API to format HTML content as a PDF file. In such a service, the Controller layer would be the one fetching the HTML document and transforming it into the PDF (even if the PDF is a &amp;ldquo;view&amp;rdquo; of some data). The View layer would be in charge of taking the PDF as a blob from the Controller layer and bundling it in whichever output format the API exposes which, in this particular case, might be emitting the blob verbatim with an &lt;code>application/pdf&lt;/code> content type header.&lt;/p>
&lt;h1 id="mvc-in-cli-apps">MVC in CLI apps&lt;/h1>
&lt;p>If we take a look at a CLI app&amp;mdash;without a TUI, because if it has a TUI the original concept of &amp;ldquo;views&amp;rdquo; applies quite literally&amp;mdash;we can map the layers of the MVC pattern as follows:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The View layer is where interactions with the user happen. This is where the app processes the command line flags and arguments and converts them to internal data structures. This is also where help requests are handled, where input data is gathered if the app is interactive, and where progress reporting and error messages are formatted for display. I already &lt;a href="/2013/08/cli-design-cli-is-presentation-layer.html">mentioned this back in 2013&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The Controller layer is where the application logic belongs. Notably, this layer must not interact with the console at all: &lt;code>printf&lt;/code>s of any kind do not belong here.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The Model layer is where abstractions around the file system&amp;mdash;or whichever other external system the app talks to&amp;mdash;may live. For CLI apps wrapping a web service or a database, this is where the calls to those systems happen.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>CLI apps vary in complexity, however, so structuring the code in these layers may result in overengineering and not be a reasonable thing to do. That said, it is often possible to organize any kind of app in these layers and it is good to &lt;em>think about&lt;/em> how the code could be structured, because this thought process can lead to better design decisions. Take two examples:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Something as &amp;ldquo;simple&amp;rdquo; as &lt;code>ls(1)&lt;/code> could be organized into these three layers: it has a complex UI due to the myriad flags it supports; it has a certain high-level logic to coordinate various disk operations such as &lt;code>readdir(3)&lt;/code> and &lt;code>stat(2)&lt;/code> calls and order the results based on whichever criteria the user requested; and it needs to access the disk via the libc operations already mentioned.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Something as complex as Git could also be organized into these three layers if it&amp;rsquo;s already not so: the View layer could implement the code to handle the many different commands that the CLI has; the Model layer could implement the core worktree, repository, and index structures and the primitives to manipulate them; and the Controller layer could implement the business logic to do things like commit a change or coordinate with a remote server to synchronize repository contents.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>I am of the strong opinion that separating the View-specific code (command line handling) from the rest of the app is a good practice in general, and is critical to allow easier automated testing of the app&amp;rsquo;s logic. As for the separation of Controller and Model in a CLI app, well, it depends on the size of the codebase really.&lt;/p>
&lt;h1 id="tweaks">Tweaks&lt;/h1>
&lt;p>Now, in theory, given that MVC is a layered design, the View layer can only interact with the Controller layer, and the Controller layer can only interact with the Model layer. This sounds nice, but in practice, expressing these layers in code becomes tricky as soon as you introduce high-level data types to represent the in-memory state of the program. And I&amp;rsquo;m a fan of using high-level types to validate program correctness at compile time as much as possible.&lt;/p>
&lt;p>Consider this example: your service has a &lt;code>Person&lt;/code> structure. &lt;code>Person&lt;/code> instances are created in the Model layer based on a query to the database. The Controller layer calls into the model layer to obtain &lt;code>Person&lt;/code> instances, and returns those to the View layer. The View layer serializes those objects as JSON to return them as part of an API call. So, the question is: where is the &lt;code>Person&lt;/code> type defined? It needs to be defined under the Model layer because this is the lowest layer that needs the type&amp;hellip; but then&amp;hellip; the View layer must skip the Controller layer in order to reach for the &lt;code>Person&lt;/code> type definition. Conceptually that&amp;rsquo;s probably OK, but in code this means adding a build-time dependency between the View and Model layers&amp;mdash;a dependency that should not exist.&lt;/p>
&lt;p>This is why I have found it useful to extend this layered architecture with two extra &amp;ldquo;layers&amp;rdquo;: a Data model layer which provides dumb high-level data types to represent the data the application manages, and a Utilities layer that encapsulates code that&amp;rsquo;s not specific to the app and that could/should well live in a separate (possibly third-party) library. With these in mind, we end up with the following code structure:&lt;/p>
&lt;figure>
&lt;img src="/images/2023-06-20-mvc-layers.svg" class="with-border">
&lt;figcaption>Structure of the MVC layers with other layers.&lt;/figcaption>
&lt;/figure>
&lt;p>It&amp;rsquo;s critical to note that the objects in the Data model do &lt;em>not&lt;/em> encapsulate data access operations: &lt;em>they are not&lt;/em> &lt;a href="https://en.wikipedia.org/wiki/Data_access_object">DAOs&lt;/a> in the traditional sense of OOO programming. These types are pure in-memory representations of application data with no logic in them. Obtaining instances of these objects from storage and modifying their persisted representation must all happen via direct calls to database layer operations.&lt;/p>
&lt;p>Anyway. I do not like to get hung up with naming and trying to shoehorn designs into strict &amp;ldquo;patterns&amp;rdquo; when those do not apply. What I described isn&amp;rsquo;t really MVC if you are a purist, but it&amp;rsquo;s nice to see how old concepts from the 70s&amp;ndash;80s still make sense today with minor tweaks. What I will say, though, is that every time I&amp;rsquo;ve sensed this split made sense and cut corners anway because the split seemed to complicate things upfront&amp;hellip; I ended up suffering the consequences very quickly. In particular, development agility slows downs as it becomes hard to reason about changes, and unit testing soon becomes impossible.&lt;/p></description></item><item><title>In-house email subscriptions</title><link>https://jmmv.dev/2023/06/in-house-email-subscriptions.html</link><pubDate>Fri, 16 Jun 2023 06:30:00 -0700</pubDate><guid>https://jmmv.dev/2023/06/in-house-email-subscriptions.html</guid><description>&lt;p>In a move that&amp;rsquo;s &lt;a href="https://killedbygoogle.com/">typical of Google&lt;/a>, Feedburner received the &amp;ldquo;update&amp;rdquo; treatment two years ago: its support for RSS-to-email notifications was turned down. I had been relying on this service to offer email subscriptions for this blog for many years, but as the service vanished, I had to find a replacement.&lt;/p>
&lt;p>As I did not have a lot of time nor desire to assess alternatives, I took the bait from a salesperson from follow.it and I &lt;a href="/2021/07/feedburner-to-follow-it-migration.html">moved my subscribers to their free service&lt;/a>. And let me tell you that&amp;hellip; I have not been happy with it. If you have received any of their emails, you well know that they look like spam: my content appears as just one tiny text line among various sketchy links and large unrelated images. In fact, I have been ashamed of these emails.&lt;/p>
&lt;p>Was there an easy solution to this problem? Sure. I could have upgraded to the &amp;ldquo;Super-cool&amp;rdquo; follow.it plan in order to customize the look-and-feel of the emails&amp;hellip; but paying a subscription &lt;em>just for that one feature&lt;/em> seemed out of proportion: there are other features I want to offer in this blog that a static site cannot provide, and if I had to pay for one, I&amp;rsquo;d rather get others too.&lt;/p>
&lt;hr>
&lt;p>Over this same time period, you might recall that I have been working on a little service to support the dynamic aspects of this blog. In particular, this service has been taking care of &lt;a href="/2022/02/diy-web-analytics.html">privacy-respecting analytics&lt;/a>, post voting, and &lt;a href="/2022/02/comments-and-ids.html">comments&lt;/a>. Its name: EndTRACKER&amp;mdash;an awful name in retrospect because invasively tracking readers is the last thing I want to do, so the name has to change.&lt;/p>
&lt;p>Given that I already had a custom service supporting this blog, I thought the obvious: why not make it handle email subscriptions too? That would be the last feature I needed to have a dynamic-feeling blog without abandoning &lt;a href="/2018/02/from-jekyll-to-hugo.html">the static page builder I use&lt;/a>. And thus I got my hands dirty to make this work.&lt;/p>
&lt;p>The first thing I did was to add the subscription and unsubscription flows. This was ready pretty quickly because I could reuse code from the EndBASIC Service. Thus, at the beginning of May, I dropped follow.it altogether. As a little bonus of this migration, I was able to display the total number of subscribers next to the subscription box, and also add a subscription box to &lt;a href="https://endbasic.dev/">the EndBASIC web site&lt;/a> &amp;ldquo;for free&amp;rdquo;.&lt;/p>
&lt;p>But then what? After I made that (premature) move to a custom subscription process&amp;hellip; the next problem arose: how could I actually &lt;em>send&lt;/em> notifications to you all every time there is a new post?&lt;/p>
&lt;p>There are many trivial solutions to this problem, like manually copying the (small) list of subscribers into Outlook and composing an email, or creating a Google Groups read-only mailing list, or giving up altogether on self-hosting and moving to Substack. But&amp;hellip; none of these felt right. I wanted automation, so automation I built.&lt;/p>
&lt;hr>
&lt;p>Since then, I&amp;rsquo;ve been busy &lt;del>at work&lt;/del> in my very-limited free time coming up with the necessary automation to scrape the RSS feed of an arbitrary site and to reliably send email notifications for any new entries to that site&amp;rsquo;s subscribers.&lt;/p>
&lt;p>Does that sound like a trivial (and fun!) feature to build? Yes, yes it does. But making it work reliably and safely has been incredibly time-consuming. To give you a glimpse of what was involved:&lt;/p>
&lt;ul>
&lt;li>I started by creating a persistent task processing queue (because why not): a service that monitors a stored description of tasks and executes them in the context of a serverless runtime engine, with automatic retries if things go wrong.&lt;/li>
&lt;li>Then I bundled this new service into EndTRACKER to run periodic tasks and defined 1. a task to scrape RSS feeds, storing their processed contents into a database, and 2. another task that fans out and schedules finer-grained tasks for individual email notifications.&lt;/li>
&lt;li>Then I had to add safety measures to abort early if the notification logic decides to do the wrong thing (just in case).&lt;/li>
&lt;li>Then I had to add throttles to not exceed daily email submission limits.&lt;/li>
&lt;li>Then I had to write a small HTML processor to sanitize the content of the feed items before injecting them into emails.&lt;/li>
&lt;li>While, all along, writing a lot of test cases: 40% of the code supporting this feature are tests because I&amp;rsquo;m really concerned about the automation going rogue and spamming you all. And I still feel that test coverage is insufficient.&lt;/li>
&lt;/ul>
&lt;p>All of this so that you can be notified of this and future posts in the form of concise, spam-free emails. Yay?&lt;/p>
&lt;hr>
&lt;p>In the next post, I&amp;rsquo;ll take a deep dive into the teeny-tiny persistent task queue service I wrote, which I&amp;rsquo;ve open-sourced as part of &lt;a href="/software/iii-iv.html">III-IV&lt;/a>. This service is written in Rust, runs in the context of the Azure Functions serverless runtime, and is backed by PostgreSQL.&lt;/p>
&lt;p>Oh, and by the way: I&amp;rsquo;m planning on opening up EndTRACKER to fellow static site creators: if you have a static blog and have wanted to add select dynamic features to it, this may be the right choice for you! EndTRACKER is intended to be a collection of REST services you can pick and choose from, allowing you to integrate them into your site with whatever look-and-feel you like, all while providing a hosted admin interface. Take a look at the &lt;a href="https://endtracker.azurewebsites.net/">new WIP website&lt;/a>, which currently (only) includes a demo of the statistics features. Subscribe to updates to receive an early-adopter invite when it&amp;rsquo;s ready to launch!&lt;/p></description></item><item><title>Addressing Bazel OOMs</title><link>https://jmmv.dev/2023/03/addressing-bazel-ooms.html</link><pubDate>Thu, 16 Mar 2023 14:00:00 -0700</pubDate><guid>https://jmmv.dev/2023/03/addressing-bazel-ooms.html</guid><description>&lt;p>Here at Snowflake, the Developer Productivity organization (DPE for short) is tackling some important problems we face as a company: namely, lengthening build times and complex development environments. A key strategy we are pursuing to resolve these is the migration of key build processes from CMake and Maven to &lt;a href="https://bazel.build/">Bazel&lt;/a>.&lt;/p>
&lt;p>We are still in the early stages of this migration and cannot yet share many details or a success story, but we can start explaining some of the issues we encounter as we work through this ambitious project.&lt;/p>
&lt;p>More specifically, in today&amp;rsquo;s post I want to talk about how we diagnosed and fixed three different issues that made Bazel trip over the Linux OOM killer. These issues led to spurious build failures and made our workstations unusable due to memory thrashing.&lt;/p>
&lt;p>The guiding principle behind the fixes I&amp;rsquo;ll describe is that flaky builds are infinitely worse than slow builds. A build that passes 100% of the time but is slower than it could potentially be will convince developers that &lt;a href="/2020/12/google-no-clean-builds.html">&lt;code>make clean&lt;/code> can be a thing of the past&lt;/a>. A build that is really fast but breaks at random will do the opposite: it will show sloppiness and a lack of quality, leaving skeptical developers to wonder why adopting Bazel is worth the migration cost. Therefore, at this early stage in the migration process, it is fine for us to trade build speed for reliability.&lt;/p>
&lt;p>Let&amp;rsquo;s dive in.&lt;/p>
&lt;h1 id="concurrent-linkers">Concurrent linkers&lt;/h1>
&lt;p>The first problem we encountered was obvious from the onset given that our CMake builds had exhibited the same issue in the past and we had a workaround for it in place.&lt;/p>
&lt;p>As is common in the build graph of complex applications with many tests, we have a collection of C++ test targets that depend on heavy common libraries. Each of these tests is linked separately, and the linker consumes a significant amount of memory to process each one of them: about 8GB per linker invocation in the &lt;code>-c fastbuild&lt;/code> configuration. Unsurprisingly, if we concurrently run a handful of these on a local dev environment capped at, say, 16–20GB of RAM, we quickly run into OOM scenarios.&lt;/p>
&lt;p>But, if you know some Bazel internals, you&amp;rsquo;d expect this to not happen: Bazel has &lt;a href="/2019/12/bazel-local-resources.html">provisions to avoid overloading the host machine&lt;/a> when scheduling local actions so, in theory, we should not be seeing any issue. To summarize: the way this works is by making every build rule estimate how much resources its build actions will consume in the form of an &amp;ldquo;X CPUs and Y MBs of RAM&amp;rdquo; quantity. Bazel then compares these numbers against its own understanding of total machine capacity and uses this information to limit the parallelism of local actions.&lt;/p>
&lt;p>Sounds good, right? Unfortunately, this mechanism isn&amp;rsquo;t great because it relies on the build rules to provide an accurate estimate of their resource consumption. This estimation is hard to do upfront, especially when the rules support a multitude of toolchains with potentially different performance profiles. Let&amp;rsquo;s peek under the hood and see what the C++ rules do in order to compute the memory requirements of every linker action. Here is what the code in &lt;code>CppLinkAction.java&lt;/code> &lt;a href="https://cs.opensource.google/bazel/bazel/+/f3be7b16aa319676e56ec54fe0e9ca3d0e1fbf7a:src/main/java/com/google/devtools/build/lib/rules/cpp/CppLinkAction.java;l=131">had to say&lt;/a> circa 2021:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Linking uses a lot of memory; estimate 1 MB per input file,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// min 1.5 Gib. It is vital to not underestimate too much here,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// because running too many concurrent links can thrash the machine
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// to the point where it stops responding to keystrokes or mouse
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// clicks. This is primarily a problem with memory consumption, not
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// CPU or I/O usage.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ResourceSet&lt;/span> &lt;span class="n">LINK_RESOURCES_PER_INPUT&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ResourceSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createWithRamCpu&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// This defines the minimum of each resource that will be reserved.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ResourceSet&lt;/span> &lt;span class="n">MIN_STATIC_LINK_RESOURCES&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ResourceSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createWithRamCpu&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1536&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Dynamic linking should be cheaper than static linking.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ResourceSet&lt;/span> &lt;span class="n">MIN_DYNAMIC_LINK_RESOURCES&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ResourceSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createWithRamCpu&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This behavior &lt;a href="https://cs.opensource.google/bazel/bazel/+/01c10e030c1e453fa814d316f8f9950420bd3de7:src/main/java/com/google/devtools/build/lib/rules/cpp/CppLinkAction.java;l=420">changed in commit &lt;code>01c10e03&lt;/code>&lt;/a> in an attempt to improve the situation based on build performance data collected at Google:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">commit 01c10e030c1e453fa814d316f8f9950420bd3de7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Author: wilwell &amp;lt;wilwell@google.com&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Date: Fri Jul 16 05:41:57 2021 -0700
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Memory expectations for local CppLink action
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> During investigation we find out the better linear dependency
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> between number of inputs and memory.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Using our data we made linear estimation of form C + K * inputs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> such that 95% of actions used less memory than estimated.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> In case of memory overestimate we will make our builds slower,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> because of large amount unused memory, which we could use for
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> execution other actions.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> In case of memory underestimate we could overload system and get
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> OOMs during builds.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From a previous life, I knew that this piece of code was problematic for local linking, but this recent commit made me think that the new memory estimation in Bazel was close to reality: Google has a vast repository of build performance data from which to deduce a good model. Therefore, I was left to think that our build graph broke these assumptions for some reason.&lt;/p>
&lt;p>Yet&amp;hellip; something was off. As a first experiment, I tried to limit the RAM available to Bazel with &lt;code>--local_ram_resources=8192&lt;/code>, hoping that a much lower limit than the default would cap the number of concurrent linkers. Interestingly, this did not have any effect. I tried going lower, specifying 1GB as the limit, and the results were equally puzzling. Why wasn&amp;rsquo;t this flag limiting linker concurrency &lt;em>at all&lt;/em>? The answer is in the code logic described above: I patched the C++ link rule to print its thoughts on the resource limits and I found that the new rule concluded that &lt;em>all&lt;/em> of our link actions needed only 50 MBs of RAM each. 50MB is wrong by a factor of ~160 and explains why lowering &lt;code>--local_ram_resources&lt;/code> did not make a difference.&lt;/p>
&lt;p>The most likely explanation for this difference is that our Bazel configuration was stuck on the old-and-rusty &lt;code>ld&lt;/code> when I debugged this problem and Google drew its conclusions from &lt;code>gold&lt;/code> or &lt;code>lld&lt;/code>, but I do not know yet. Note that, at the time of this writing, we have already moved away from &lt;code>ld&lt;/code>. &lt;a href="https://github.com/bazelbuild/bazel/issues/17368">Issue #17368&lt;/a> tracks this.&lt;/p>
&lt;h1 id="real-fix-resource-set-overrides">Real fix: resource set overrides&lt;/h1>
&lt;p>The simplest solution to this problem would have been to tweak the C++ build rules and update their memory model for our scenario: if we could tell Bazel that our linker actions require 8GB of RAM, we could have done that and called it a day.&lt;/p>
&lt;p>And I tried. I researched if we could specify a tag of the form &lt;code>ram:Xmb&lt;/code> for the linker rules, hoping that tags like these would override the requirements computed by the rules. Support for a &lt;code>ram:Xmb&lt;/code> tag, however, does not exist. There is support for a &lt;code>cpu:N&lt;/code> tag, so as a compromise I thought of leveraging this to claim that the linker uses all CPUs on the machine. But&amp;hellip; &lt;code>cpu:N&lt;/code> only applies to tests and is not recognized in other kinds of targets. Digging deeper, I discovered the &lt;code>--experimental_allow_tags_propagation&lt;/code> option, which I hoped would cause the &lt;code>cpu:N&lt;/code> tag to be propagated to the actions and have the desired effect, but testing revealed that this was not the case either. (I&amp;rsquo;m actually not yet sure what this flag does.)&lt;/p>
&lt;p>If the C++ rules had been written in Starlark, and if &lt;a href="https://github.com/bazelbuild/bazel/issues/6477">issue #6477&lt;/a> from 2018 had been implemented, we could also have been able to paper over the problem. But the C++ rules are still native rules, which means that they cannot be modified without rebuilding Bazel. Not an option at this point.&lt;/p>
&lt;p>I hit a lot of dead ends. Short of modifying Bazel to special-case our requirements, which we are trying hard to avoid, I had to find another solution that could be implemented within the constraints of what Bazel allows today. Which, by the way, I kinda enjoy doing.&lt;/p>
&lt;h2 id="workaround-linker-wrapper-to-limit-concurrency">Workaround: linker wrapper to limit concurrency&lt;/h2>
&lt;p>The workaround came in the form of a wrapper over the linker plumbed through our own toolchain definition. This wrapper is a simple script that uses &lt;code>flock(1)&lt;/code> on the linker binary to allow just one linker invocation at a time. This is suboptimal because, by the time the wrapper runs, Bazel has already decided to run the action. As a result, Bazel is holding one of its job slots hostage to a script that may do nothing for many seconds, lowering overall throughput. In practice, however, this is not a problem because most link actions pile up towards the end of the build where parallelism is already minimal and where we really cannot afford to run linkers in parallel.&lt;/p>
&lt;p>Implementing this wrapper sounds simple but the devil lies in the details, as is usually the case. For example: given that the wrapper has to run a specific linker, I needed the wrapper to include the path to the linker. I wanted to do this using a &lt;code>genrule&lt;/code> to create the wrapper, but this seems impossible to achieve as described in &lt;a href="https://github.com/bazelbuild/bazel/issues/17401">issue #17401&lt;/a>. Additionally, even after working around that issue, I encountered further problems with the &lt;code>cmake&lt;/code> rule, which somehow ended up trying to invoke the wrapper script via a relative path and failed to do so. After reading the code of the &lt;code>cmake&lt;/code> rule, I found that if the paths to tools are from external repos, the rules will absolutize them&amp;hellip; so as yet-another-workaround, I created a nested workspace to hold the wrapper, which was sufficient to trick &lt;code>cmake&lt;/code> into doing the right thing.&lt;/p>
&lt;p>Remember: this solution was just a workaround that we could live with for a little while. We have adopted lld in our Bazel builds, just like our CMake builds do, since I wrote this draft and we have mostly adopted remote execution, both of which have made this issue invisible.&lt;/p>
&lt;h1 id="concurrent-foreign-builds">Concurrent foreign builds&lt;/h1>
&lt;p>The second problem we encountered was due to our use of &lt;code>rules_foreign_cc&lt;/code> to build a bunch of C++ external dependencies. We have a dozen or so of these using a combination of &lt;code>configure_make&lt;/code>, &lt;code>make&lt;/code>, and &lt;code>cmake&lt;/code>.&lt;/p>
&lt;p>Our first cut at building these dependencies was to pass &lt;code>-j $(nproc)&lt;/code> as an argument to the foreign rules. This works great when the actions spawned by these rules run in a remote build farm: each executor node will run the nested build in a container that will expose as many CPUs as it wants to expose and cause no harm to sibling processes. But this does not work so well in a local build. In the ideal case, these nested builds would end up evenly spaced throughout the build, spreading their resource overload to random points. Unfortunately, that&amp;rsquo;s not what we observed: our build graph has a choke point on these foreign dependencies so, during a build, it is easy to notice that Bazel has to run and wait for a bunch of these foreign compiles simultaneously.&lt;/p>
&lt;p>As you can imagine, this can turn into a problematic scenario. For example: if the host machine running Bazel has 8 CPUs in total and Bazel is running 6 nested builds (based on the default &lt;code>--local_cpu_resources&lt;/code> computation), each configured to run 8 parallel jobs via &lt;code>-j 8&lt;/code>, we potentially have &lt;em>6 * 8 = 42&lt;/em> resource-hungry processes in competition. If these processes compete for CPU alone, then they will take a long time to finish but nothing too bad will happen. If they compete for RAM, however, as happens with linkers as described earlier, then it&amp;rsquo;s easy to enter a thrashing situation that&amp;rsquo;s hard to get out of.&lt;/p>
&lt;h2 id="real-fix-cooperative-parallelism">Real fix: cooperative parallelism&lt;/h2>
&lt;p>The correct solution to this is to teach cooperative parallelism to Bazel &lt;a href="https://github.com/bazelbuild/bazel/issues/10443">issue #10443&lt;/a>: every time Bazel runs an action that can consume N CPUs, Bazel should be aware of this fact and schedule it accordingly.&lt;/p>
&lt;p>You can imagine this as a &lt;code>cpu:N&lt;/code> tag like the one described above, which would indicate the parallelism of each nested build and would sequence them when run through Bazel. Or it could be in the form of Bazel leveraging &lt;a href="https://www.gnu.org/software/make/manual/html_node/Job-Slots.html">GNU Make&amp;rsquo;s jobserver feature&lt;/a> to coordinate the parallelism of those submakes. I&amp;rsquo;m not going to design this feature in this post but&amp;hellip; are you interested in doing this? It sounds like an awesome intern project that I&amp;rsquo;d be pleased to mentor!&lt;/p>
&lt;h2 id="workaround-nested-make-job-limits">Workaround: nested make job limits&lt;/h2>
&lt;p>As a compromise, I went back to the wrapper approach. In this case, a wrapper checks for details of the running environment to determine whether the nested build can use all resources of the machine or not. If it can, such as on build farm workers, then the wrapper passes &lt;code>-j $(nproc)&lt;/code> to these nested builds and calls it a day. If it cannot, then the wrapper tries to be smart: for GNU Make, it passes &lt;code>-j $(nproc) -l $(nproc)&lt;/code> to try to use as many CPUs as possible while accounting for load average; and for CMake, it just passes &lt;code>-j 2&lt;/code> as I have not found out how to plumb through the &lt;code>-l&lt;/code> equivalent.&lt;/p>
&lt;p>Like before, adding such a wrapper sounds simple in theory but becomes hard to do in practice. A specific detail that turned out to be problematic is the way &lt;code>rules_foreign_cc&lt;/code> constructs wrapper scripts. The rules try to generate scripts that can work both on a POSIX Shell and on Windows&amp;rsquo; &lt;code>cmd.exe&lt;/code>&amp;hellip; which is a nightmare due to quoting differences, plus the resulting scripts become unreadable. In the end, I got this to work, which was quite nice.&lt;/p>
&lt;h1 id="concurrent-remote-actions">Concurrent remote actions&lt;/h1>
&lt;p>The third problem we encountered was the most puzzling of all. After resolving the other two issues, there was nothing else left in the build that could consume too much memory. Yet&amp;hellip; occasionally, the Linux OOM killer would show up and terminate Bazel. And it would &lt;em>always&lt;/em> terminate Bazel. Unfair, isn&amp;rsquo;t it?&lt;/p>
&lt;p>Fortunately, when the Linux OOM killer kicks in, it dumps the process table along with memory statistics to the kernel log. Looking there, I noticed two culprits:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">[648264.500883] Tasks state (memory values in pages):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[648264.500884] [ pid ] uid tgid total_vm rss pgtables_bytes swapents oom_score_adj name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[648264.500993] [ 10337] 1970 10337 5440032 3303604 34402304 585643 0 java
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[648264.501024] [ 30196] 1970 30196 1353096 1344352 10874880 0 0 ld
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[648264.501030] oom-kill:constraint=CONSTRAINT_NONE,nodemask=(null),cpuset=/,mems_allowed=0,global_oom,task_memcg=/user.slice/user-1970.slice,task=java,pid=10337,uid=1970
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[648264.501486] Out of memory: Killed process 10337 (java) total-vm:21760128kB, anon-rss:13214416kB, file-rss:0kB, shmem-rss:0kB, UID:1970 pgtables:33596kB oom_score_adj:0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[648265.100163] oom_reaper: reaped process 10337 (java), now anon-rss:0kB, file-rss:0kB, shmem-rss:0kB
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A single linker (thanks to the changes described earlier) and Bazel. If we do the math, because &lt;code>total_vm&lt;/code> and &lt;code>rss&lt;/code> are in &lt;em>pages&lt;/em> (because why would they not), we see that the linker is using 5GB of RAM and Bazel is using&amp;hellip; 13GB? Wait, what? Why?&lt;/p>
&lt;p>What I noticed from these crashes is that they seemed to happen when Bazel was running multiple remote &lt;code>Compiling&lt;/code> actions at once, at least as reported in the Bazel UI. This made me suspect (again, thanks to past experience) that the state Bazel was holding in memory for each running action was large, and when combined with hundreds of parallel actions, memory requirements ballooned. But still, 13GB was &lt;em>a lot&lt;/em>, and if this were true, there would be few options for us short of growing the total RAM of our dev environments.&lt;/p>
&lt;p>Looking closer, I noticed that during our initial deployment of our build farm, we bumped the max heap size that Bazel was allowed to use to 14GB. The rationale given at the time was that the build graph was too big and we needed more RAM due to the increased &lt;code>--jobs&lt;/code> number. Which might be true, but this had to be better substantiated: for one, the build graph doesn&amp;rsquo;t grow with an increase of &lt;code>--jobs&lt;/code>, and for another, coordinating remote jobs shouldn&amp;rsquo;t really require that much memory.&lt;/p>
&lt;p>Also note that a large JVM heap &lt;em>limit&lt;/em> doesn&amp;rsquo;t necessarily mean that all memory will be &lt;code>live&lt;/code>. An implication of a large heap is that the JRE will postpone GC cycles for longer. So by giving Bazel a max heap of 14GB on a 16–20GB environment, we were telling the JVM that it was allowed to hold onto most of the machine&amp;rsquo;s memory&amp;mdash;even if a lower limit could also have worked at the expense of additional GC cycles.&lt;/p>
&lt;h2 id="real-fix-measurement-and-tuning">Real fix: measurement and tuning&lt;/h2>
&lt;p>The first step to solving this last problem was to measure how big the build graph really was. Seeing that our Bazel analysis phase is pretty short compared to other horrors I&amp;rsquo;ve seen in the past, I did not expect the size to be too large. But it had to be measured. This is as easy as running a command like the following and looking at the heap size in VisualVM while the command runs:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">bazel build -k --nobuild //...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note the funnily-named &lt;code>--nobuild&lt;/code> flag given to the &lt;code>build&lt;/code> command. This flag causes Bazel to stop executing the build right after the analysis phase is done, which means that the only thing that Bazel will hold onto memory is the build graph. Armed with this knowledge, I noticed something reasonable in VisualVM: after GC, Bazel&amp;rsquo;s memory usage was a mere 500MB&amp;mdash;extremely far from the 13GB used during the build.&lt;/p>
&lt;p>This was promising, but the initial observation of needing more memory due to the increase in &lt;code>--jobs&lt;/code> was probably well-founded. What could we do about it? A good starting point, as with most things in Bazel, is to research what options exist to tune the feature we suspect is problematic, which in this case was Remote Execution. Among these flags I spotted &lt;code>-- experimental_remote_discard_merkle_trees&lt;/code> and &lt;a href="https://cs.opensource.google/bazel/bazel/+/4069a87611886532a19c7e558ab4c2f1e83f53f0">commit &lt;code>4069a876&lt;/code>&lt;/a>, which introduced it, described pretty much the same problem I faced. Unfortunately, this flag is not yet in a stable Bazel release (6.0.0 at the time of this writing).&lt;/p>
&lt;p>Luckily, this also made me find &lt;code>-- experimental_remote_merkle_tree_cache&lt;/code>, which was introduced much earlier in &lt;a href="https://cs.opensource.google/bazel/bazel/+/becd1494481b96d2bc08055d3d9d4d7968d9702e">commit &lt;code>becd1494&lt;/code>&lt;/a> and which was supposed to improve this scenario based on data collected at Google. Here is what the change had to say:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">commit becd1494481b96d2bc08055d3d9d4d7968d9702e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Author: Fredrik Medley &amp;lt;fredrik.medley@gmail.com&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Date: Tue Oct 26 19:44:10 2021 -0700
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Remote: Cache merkle trees
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> When --experimental_remote_merkle_tree_cache is set, Merkle tree
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> calculations are cached for each node in the input NestedSets
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (depsets). This drastically improves the speed when checking for
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> remote cache hits. One example reduced the Merkle tree calculation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> time from 78 ms to 3 ms for 3000 inputs.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> The memory foot print of the cache is controlled by
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --experimental_remote_merkle_tree_cache_size.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> The caching is discarded after each build to free up memory, the
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache setup time is negligible.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Giving this flag a try made Bazel consume less than 4GB of RAM throughout the build with a &lt;code>--jobs&lt;/code> value set to a much higher number than what we currently use by default. This is a 10GB of RAM savings, which also translated into a much, much faster build due to Bazel and Java having to compute and collect less garbage.&lt;/p>
&lt;p>No workarounds needed to solve this problem, and keeping RAM under control always feels nice.&lt;/p>
&lt;hr>
&lt;p>That&amp;rsquo;s about it for today! Our pilot Bazel builds are now speedier than they were and we have eliminated a major source of frustration for our users during our initial deployment of Bazel: namely, their workstations don&amp;rsquo;t melt under memory pressure any longer.&lt;/p>
&lt;p>As a personal tip: don&amp;rsquo;t ever give into the temptations of increasing memory limits &lt;em>before&lt;/em> understanding the cause behind growth&amp;mdash;even if you have enough memory to spare and what you are doing is &amp;ldquo;just&amp;rdquo; a small increase. Caving into these temptations without further investigation means you will be oblivious to real bugs that exist in your system and that need to be ironed out for better overall performance. Be skeptical, question assumptions, measure reality, and adjust as necessary.&lt;/p>
&lt;p>If you like what you read and would enjoy working on similar exciting problems, know that &lt;a href="https://careers.snowflake.com/us/en/job/5436043002/Senior-Software-Engineer-Developer-Productivity-Engineering">we are hiring in the Developer Productivity Engineering team&lt;/a> here at Snowflake.&lt;/p></description></item><item><title>Introducing III-IV</title><link>https://jmmv.dev/2023/03/introducing-iii-iv.html</link><pubDate>Mon, 13 Mar 2023 06:45:00 -0700</pubDate><guid>https://jmmv.dev/2023/03/introducing-iii-iv.html</guid><description>&lt;p>Over the last couple of years, I have developed two small web services in Rust: &lt;a href="/2021/07/endbasic-0.7.html">one for EndBASIC&lt;/a> and &lt;a href="/2022/02/diy-web-analytics.html">one for this blog&lt;/a>. Those two web services contained significant copy/pasted helper code, which always bothered me because small bug fixes in one rarely propagated to the other. But because this only impacted two inconsequential side projects, the hinderance wasn&amp;rsquo;t a big deal.&lt;/p>
&lt;p>Until now. I now face the need to write two more web services (details TBA), and duplicating those foundations twice more felt just wrong. So I spent the last couple of weeks pulling the common code out of the existing services into a&amp;hellip; you guessed it&amp;hellip; framework, which I have called III-IV (&amp;quot;&lt;em>three four&lt;/em>&amp;quot; if you read it out loud) and am ready to announce.&lt;/p>
&lt;blockquote>
&lt;p>Find the code in &lt;a href="https://github.com/jmmv/iii-iv">https://github.com/jmmv/iii-iv&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h1 id="this-is-weird">This is weird&lt;/h1>
&lt;p>But before getting into the details&amp;hellip; what&amp;rsquo;s up with this weird name? You know, picking a name has been &lt;a href="https://www.karlton.org/2017/12/naming-things-hard/">extremely difficult&lt;/a>: all of the &amp;ldquo;obvious&amp;rdquo; ideas that came to mind were either already in use by other crates or by other projects. After many drafts, I started zoning into 3 and 4, which represent the number of layers you have to implement to develop a service with this framework. And 3 and 4 also represent the third and fourth services that precipitated the creation of this framework. So these numbers seemed fitting. And as you cannot start identifiers with a digit, roman numerals fixed that. Yes, it&amp;rsquo;s a very obscure name, but that&amp;rsquo;s fine because&amp;hellip;&lt;/p>
&lt;p>Who asked for yet another framework? Aren&amp;rsquo;t there plenty of them out there already? &lt;em>Well akshually&lt;/em>, if you search the web for &amp;ldquo;Rust web framework&amp;rdquo;, you will find things like &lt;a href="https://rocket.rs">Rocket&lt;/a> and &lt;a href="https://github.com/tokio-rs/axum">Axum&lt;/a>, which are great for implementing the HTTP request handling of the service&amp;hellip; but they stop there. In my services, I need consistent features that span all parts of the app, from the HTTP router to the persistence layer, passing by support features like outbound email or OAuth flows&amp;mdash;all while supporting lightweight unit testing at every layer. Glueing all existing pieces together requires a non-trivial amount code, so that&amp;rsquo;s where this comes in.&lt;/p>
&lt;h1 id="what-is-iii-iv">What is III-IV?&lt;/h1>
&lt;p>III-IV is a rudimentary and &lt;em>very&lt;/em> opinionated framework with which to write web services in Rust. The framework is really just a thin layer over existing and well-established Rust libraries: all III-IV does is facilitate putting things together and removing boilerplate glue. The goal is to keep each service implementation focused on its business needs in order to more-easily reason about its functionality.&lt;/p>
&lt;p>&lt;em>Keep in mind that this framework exists to satisfy &lt;strong>my&lt;/strong> needs for &lt;strong>my&lt;/strong> web services.&lt;/em> It won&amp;rsquo;t be big and professional like &lt;a href="https://www.djangoproject.com/">Django&lt;/a> (&lt;a href="https://fossbytes.com/linus-torvaldss-famous-email-first-linux-announcement/">wink, wink&lt;/a>), and I do not expect it to be useful to anyone but me. That said, if you &lt;em>do&lt;/em> find any of this useful, by all means go ahead and use whichever parts you find interesting. Documentation is minimal at this point though. I&amp;rsquo;ll be happy to entertain contributions as well&amp;mdash;but let&amp;rsquo;s discuss any major changes first if you have any.&lt;/p>
&lt;p>So, what does III-IV offer and what makes it opinionated? This framework assumes that your web service will:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Adhere to a 3-layer architecture with the specific names: &lt;code>rest&lt;/code>, &lt;code>driver&lt;/code>, &lt;code>db&lt;/code>, and provide a fourth cross-cutting layer named &lt;code>model&lt;/code> to offer data types. This is where the III-IV name comes from.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use PostgreSQL for serving. SQLite could work too though but not in the context of serverless apps like the ones I&amp;rsquo;ve been deploying.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use SQLite for unit/integration testing. A major design decision has been to allow &lt;em>super-fast non-flaky testing with zero configuration&lt;/em>. I do not want to have to spin complex dev environments up just to work on my code whenever I have some spare time: all I want is for &lt;code>cargo test&lt;/code> to do the right thing and to do it milliseconds. And I have achieved this.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;a href="https://crates.io/crates/axum">the &lt;code>axum&lt;/code> crate&lt;/a> and its ecosystem for HTTP routing. The code in III-IV comes from years of using &lt;a href="https://crates.io/crates/warp">the &lt;code>warp&lt;/code> crate&lt;/a> and I only moved to &lt;code>axum&lt;/code> recently, so some warts may remain.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;a href="https://crates.io/crates/sqlx">the &lt;code>sqlx&lt;/code> crate&lt;/a> for database access.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;a href="https://crates.io/crates/tokio">the &lt;code>tokio&lt;/code> crate&lt;/a> as the async runtime.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;a href="https://crates.io/crates/lettre">the &lt;code>lettre&lt;/code> crate&lt;/a> for SMTP communication.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Be configured via environment variables from &lt;code>main.rs&lt;/code>, some of which have predefined names.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Take minimal dependencies on cloud services, although the provided template favors Azure Functions.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="example-and-template">Example and template&lt;/h1>
&lt;p>To illustrate how to use III-IV and how it keeps the code of a service free from boilerplate, I have written a tiny sample key/value store. You can find the source code for the example under &lt;a href="https://github.com/jmmv/iii-iv/tree/c37c096cf744072fd2db0abc3463035fd93c388c/example">jmmv/iii-iv/example&lt;/a>.&lt;/p>
&lt;p>Here are some of the highlights to look for:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The &lt;a href="https://github.com/jmmv/iii-iv/blob/c37c096cf744072fd2db0abc3463035fd93c388c/example/src/model.rs">&lt;code>model&lt;/code> module&lt;/a> provides high-level data types to represent the concepts in the problem domain. Abusing &lt;a href="https://doc.rust-lang.org/rust-by-example/generics/new_types.html">the newtype idiom&lt;/a> and named structures is a critical aspect of this framework to ensure data correctness throughout (particularly after data values have been interned by the REST layer).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;a href="https://github.com/jmmv/iii-iv/blob/c37c096cf744072fd2db0abc3463035fd93c388c/example/src/db/mod.rs">&lt;code>db&lt;/code> module&lt;/a> provides a &lt;code>Tx&lt;/code> type. This type offers &amp;ldquo;one shot&amp;rdquo; operations on the data types provided by the &lt;code>model&lt;/code>, and supplies implementations for both PostgreSQL and SQLite. The PostgreSQL variant is used when instantiating the app for serving in &lt;code>lib.rs&lt;/code> and the SQLite variant is used for unit testing with an in-memory database. Both implementations are validated by the exact same test collateral.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;a href="https://github.com/jmmv/iii-iv/blob/c37c096cf744072fd2db0abc3463035fd93c388c/example/src/driver/mod.rs">&lt;code>driver&lt;/code> module&lt;/a> provides a parameterized &lt;code>Driver&lt;/code> type that holds the state of the application and provides the business logic for the operations that the REST layer will need. This is where the various backend services (in this case, database transactions only) are coordinated.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;a href="https://github.com/jmmv/iii-iv/blob/c37c096cf744072fd2db0abc3463035fd93c388c/example/src/rest/mod.rs">&lt;code>rest&lt;/code> module&lt;/a> provides the HTTP API entry points and the HTTP router. This layer&amp;rsquo;s responsibility is to parse HTTP requests and write out HTTP responses. No application logic lives here. Of special interest in this layer is the use of the &lt;a href="https://github.com/jmmv/iii-iv/blob/c37c096cf744072fd2db0abc3463035fd93c388c/core/src/rest.rs#L150">&lt;code>OneShotBuilder&lt;/code> utility&lt;/a> to test every HTTP API end-to-end.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;a href="https://github.com/jmmv/iii-iv/blob/c37c096cf744072fd2db0abc3463035fd93c388c/example/src/lib.rs">&lt;code>top-level&lt;/code> module&lt;/a> instantiates the various layers for the production service.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;a href="https://github.com/jmmv/iii-iv/blob/c37c096cf744072fd2db0abc3463035fd93c388c/example/src/main.rs">&lt;code>main&lt;/code> entry point&lt;/a> extracts application configuration from environment variables (the variable for the port name assumes deployment to Azure Functions) and runs the app.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The main purpose of this example is to serve as a template for new services. As a result, its code is overly verbose, in the sense that it includes many more source files and tests than it really deserves. The verbosity is necessary, however, to enforce structure and to allow simpler copy/pasting of the code into new services.&lt;/p>
&lt;p>Note that the sample service does &lt;em>not&lt;/em> use all features of the framework so it may be hard to see how to leverage some of them. This might change in the future, either via this example or via additional examples. I&amp;rsquo;m finding &lt;a href="https://github.com/tokio-rs/axum/tree/main/examples">the way &lt;code>axum&lt;/code> showcases functionality&lt;/a> to be very amenable to learning.&lt;/p>
&lt;h1 id="future">Future&lt;/h1>
&lt;p>The process to create III-IV has been incredibly painful: &lt;a href="https://twitter.com/jmmv/status/1630945190331715584">I spent way too long&lt;/a> figuring out how to remove superfluous &lt;code>Box&lt;/code>es and &lt;code>Arc&lt;/code>s used for polymorphism in favor of static dispatch. But, once I was able conquer this hill, new (to me) Rust concepts &amp;ldquo;clicked&amp;rdquo; and I&amp;rsquo;m pretty happy with the results. I&amp;rsquo;m a believer in keeping generic logic separate from domain-specific logic (even within a single project), so creating III-IV and using it to remove code duplication from multiple projects actually feels great.&lt;/p>
&lt;p>So, what&amp;rsquo;s next? For starters, there is still a bunch of logic in my existing services that would benefit from generalization to keep their clutter to a minimum. Shuffling this functionality into III-IV requires &amp;ldquo;actual&amp;rdquo; redesign work though, and so far I&amp;rsquo;ve only been moving code almost-verbatim. I will only tackle these features whenever I come back to work on these services.&lt;/p>
&lt;p>And then, well, whichever thing I happen to need for the new &lt;em>web&lt;/em> services I&amp;rsquo;m working on. If a piece of functionality looks generic enough and potentially reusable in other services, it will go into III-IV. Two things that I immediately need are: support for &lt;a href="https://github.com/ramosbugs/openidconnect-rs">OIDC user authentication&lt;/a> via &lt;a href="https://auth0.com/">Auth0&lt;/a> and seamless integration with &lt;a href="https://bootstrap-vue.org/">BootstrapVue&lt;/a> for the frontend components.&lt;/p>
&lt;p>With that, head to &lt;a href="https://github.com/jmmv/iii-iv">https://github.com/jmmv/iii-iv&lt;/a> for instructions on how to depend on this code from your &lt;code>Cargo.toml&lt;/code> files. Have fun!&lt;/p></description></item><item><title>BASIC parsing difficulties in EndBASIC</title><link>https://jmmv.dev/2023/01/endbasic-parsing-difficulties.html</link><pubDate>Fri, 13 Jan 2023 06:00:00 -0700</pubDate><guid>https://jmmv.dev/2023/01/endbasic-parsing-difficulties.html</guid><description>&lt;p>Happy new year and welcome to 2023!&lt;/p>
&lt;p>If you have followed me over the past&amp;hellip; three years already? (wow), you know I have been working on an implementation of a BASIC interpreter called EndBASIC. The parser for the language in the &lt;a href="/2020/04/hello-endbasic.html">0.1 release&lt;/a> started as very rudimentary and only supported: scalar variables and assignments; &lt;code>IF&lt;/code>, &lt;code>WHILE&lt;/code> and &lt;code>FOR&lt;/code> control flow primitives; and the ability to invoke built-in commands such as &lt;code>PRINT&lt;/code> and &lt;code>INPUT&lt;/code>. There was nothing else in the language, and I neglected improving it as I favored building the scaffolding around the interpreter&amp;mdash;features like a web UI and a cloud service seemed much more fun to build at the time.&lt;/p>
&lt;p>Unfortunately, due to the massive limitations of the core language, it was almost impossible to write anything of substance in it. EndBASIC rose to the top page of popular news sites a couple of times, but this criticism was common. So, for a few months before the holidays, I chipped away at the core of the interpreter and made major strides in what the language offers, culminating in the massive &lt;a href="/2022/12/endbasic-0.10.html">0.10 release&lt;/a>. To summarize, this new release brought features like &lt;code>GOTO&lt;/code> and &lt;code>GOSUB&lt;/code>, &lt;code>DO&lt;/code> and &lt;code>SELECT CASE&lt;/code>, and integer and double interop, to name a few.&lt;/p>
&lt;p>In the context of this post, however, I want to focus on the makings of the parser. In particular, I want to analyze various difficulties I encountered while implementing these improvements to the interpreter. And the reason I want to look into these is because, in various occasions, I got a glimpse of the design choices that the original language designers must have faced when coming up with BASIC in the 1960s given the limitations of the machines at the time. This has been fascinating and enlightening.&lt;/p>
&lt;p>But also unpleasant. During my implementation work, I have come across many oddities in the language that make it irregular and thus difficult to parse into an &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">AST&lt;/a>. All of these oddities have been &amp;ldquo;fixable&amp;rdquo;, but I can tell that BASIC didn&amp;rsquo;t originate with ASTs in mind. For all I can tell, BASIC seems to have been designed for line-by-line interpretation.&lt;/p>
&lt;h1 id="endbasic-self-inflicted-pain">EndBASIC self-inflicted pain&lt;/h1>
&lt;p>Before diving into the difficulties I have encountered so far in parsing BASIC, let me start by outlining some core design principles behind EndBASIC:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://github.com/endbasic/endbasic/tree/master/core">Core&lt;/a> vs. &lt;a href="https://github.com/endbasic/endbasic/tree/master/std">standard library&lt;/a> split:&lt;/strong> The core language, which involves parsing, &lt;a href="/2022/11/endbasic-bytecode.html">compiling into bytecode (as of 0.10)&lt;/a>, and executing the results, is supposed to be completely independent from the &amp;ldquo;standard library&amp;rdquo;. This is to ensure that the language remains &amp;ldquo;pure&amp;rdquo; and that nothing in the virtual machine can escape to do I/O unless explicitly allowed to do so by hooking individual standard library components into the interpreter. The consequence is that &lt;em>all&lt;/em> built-in commands and functions, &lt;em>including&lt;/em> &lt;code>PRINT&lt;/code> and &lt;code>INPUT&lt;/code>, cannot be part of the core.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>AST representation:&lt;/strong> The standard library, which provides all common commands and functions, is where the fun lives&amp;mdash;but remember, it is detached from the core. Anything in the standard library must be representable in the AST without command-specific special cases. As we will see later, this is&amp;hellip; tricky, because BASIC commands have some of the most inconsistent structure I&amp;rsquo;ve ever seen.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Hand-made recursive descent parser:&lt;/strong> I have intentionally handcrafted the lexer and parser because this whole project started just as a &amp;ldquo;how hard could it be&amp;rdquo; kind of situation. Nevertheless, I wanted to keep dependencies to a minimum to make the core (not the standard library) tiny and &lt;a href="/2021/01/embedding-endbasic.html">embeddable into other processes&lt;/a>, so I had to get a good grasp of everything involved in the process. This has worked OK so far, but it&amp;rsquo;s not trivial as we will see.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Context-free parsing:&lt;/strong> The parser should not know anything about the meaning of symbols, which is probably the most problematic constraint of all.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Once again, note that these are all self-imposed constraints. For all I can tell, none of these existed at the time BASIC was designed, and foregoing these constraints would make implementing the parser much simpler.&lt;/p>
&lt;p>The reason these constraints exist is because I dove into implementing the EndBASIC parser with rudimentary knowledge of BASIC. I had good memories of using BASIC more than 30 years ago but no mastery of the language, so I&amp;rsquo;ve been hitting new corner cases along the way and have had to retrofit support for them into the parser.&lt;/p>
&lt;p>At the end of this post, I&amp;rsquo;ll briefly discuss how I think these design constraints should change in order to evolve the language even further, but first, let&amp;rsquo;s look into the current parsing difficulties, which is the meat of this post.&lt;/p>
&lt;h1 id="oddities-and-difficulties">Oddities and difficulties&lt;/h1>
&lt;h2 id="argument-passing">Argument passing&lt;/h2>
&lt;p>The first difficulty in implementing the parser was representing commands in the AST and, in particular, their arguments. In any sane and modern language, arguments are separated from each other in one way&amp;mdash;and just one way. If you have a function &lt;code>print&lt;/code> and arguments &lt;code>bar&lt;/code> and &lt;code>baz&lt;/code>, you do things like &lt;code>print bar baz&lt;/code> or &lt;code>print(bar, baz)&lt;/code>, but the separators are all equal and have no special meaning.&lt;/p>
&lt;p>Things are not as simple in BASIC. You see, BASIC has two (ha ha, stay tuned) argument separators, and their meaning depends on the command being invoked. Here, take a look at the madness that &lt;code>PRINT&lt;/code> is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Print two arguments with a long separator in-between them.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Print two arguments with a short separator in-between them.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Mix and match separators, and even leave some empty fields.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">4&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Oh, and you can even have a trailing separator.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Tricky? Sure, but now look at &lt;code>INPUT&lt;/code>, which also supports the two separators but with completely different meanings:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Read a number with a &amp;#34;? &amp;#34; default prompt.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">INPUT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">INPUT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Read a number without a prompt.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">INPUT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Read a string with a prompt followed by &amp;#34;? &amp;#34;.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">INPUT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;What&amp;#39;s your name&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">t$&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Read a string with a prompt with nothing appended to it.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">INPUT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Enter some words: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">t$&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For a long time, support for these two separators are all that I had implemented in the language, but then&amp;hellip; I stumbled upon the &lt;code>NAME&lt;/code> command in QuickBASIC which is used to rename files. &lt;code>NAME&lt;/code> has this marvelous syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">NAME&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;old name&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;new name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Uh. There are not two, but &lt;em>three&lt;/em> argument separators, and which ones are valid where and what each means depends on the command being invoked. Things seem to get worse when you start looking at how to open files and represent their file handles, but I won&amp;rsquo;t get there for now because I haven&amp;rsquo;t even tried to implement this yet.&lt;/p>
&lt;h2 id="array-assignments">Array assignments&lt;/h2>
&lt;p>The next difficulty arose trying to handle array assignments, a feature that appeared in the &lt;a href="/2021/02/endbasic-0.6.html">0.6 release&lt;/a>. Array references in BASIC use parenthesis, not square brackets as is customary in most other languages. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">DIM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">10&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTEGER&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="vg">vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">12345&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">DIM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">matrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">10&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTEGER&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="vg">matrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">5&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">987&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">matrix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is fine: who cares if accessing an array is done with &lt;code>vector[2]&lt;/code> or &lt;code>vector(2)&lt;/code>. Except&amp;hellip; remember the constraint that says that the EndBASIC parser must not know anything about commands? Consider what happens when you try to parse this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="vg">vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">12&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">&amp;#39; Array assignment.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">&amp;#39; Call to print with an argument wrapped in parenthesis.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here is the parser&amp;rsquo;s flow. The parser first sees &lt;code>vector&lt;/code> or &lt;code>PRINT&lt;/code>, which are symbol references for which it knows nothing about. Then the opening parenthesis comes. What are we trying to parse? Will we encounter an equal sign and conclude that this is an array assignment, or will there not be an equal sign and this translates to a command invocation with just one argument? You can&amp;rsquo;t tell until you encounter the equal sign.&lt;/p>
&lt;p>Obviously, this disambiguation was implemented in the parser as I just described, but it is not trivial. This is another case of self-inflicted pain that results from keeping the parser unaware of the symbols that have been defined so far. Otherwise, if we &lt;em>knew&lt;/em> that &lt;code>vector&lt;/code> is an array, we could immediately conclude that we are facing an array assignment as soon as we see it specified as the first token of a statement; and we could do similarly for &lt;code>PRINT&lt;/code> if we &lt;em>knew&lt;/em> that it is a command.&lt;/p>
&lt;h2 id="labels">Labels&lt;/h2>
&lt;p>Labels did not exist in original versions of BASIC, but they did appear in later implementations. One which brought labels is QuickBASIC, where labels are defined by appending a colon character to an identifier:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">label:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">INPUT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">foo&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Simple, right? Well, as it turns out&amp;hellip; the colon character is also the statement delimiter in BASIC and can be used to separate different statements in a single line.&lt;/p>
&lt;p>With that extra bit of knowledge, what does this mean?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">INPUT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">foo&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Are we trying to define a label called &lt;code>PRINT&lt;/code>, or are we calling the &lt;code>PRINT&lt;/code> command without arguments? This is impossible to tell without knowing upfront that &lt;code>PRINT&lt;/code> is a command, but that goes against the design constraints of the EndBASIC core language.&lt;/p>
&lt;p>This is an ambiguity that cannot be resolved if I stick to those design decisions. I could obviously damage the AST by representing argless commands and maybe-labels in a type like &lt;code>Statement::LabelOrArglessCommandCall&lt;/code>, but that sounds terrible. So, for now, EndBASIC requires labels to start with the &lt;code>@&lt;/code> sign; unorthodox, but it does the job given that I&amp;rsquo;m not targeting compatibility with other BASIC implementations.&lt;/p>
&lt;h2 id="end-statements-vs-control-flow">END statements vs. control flow&lt;/h2>
&lt;p>The next difficulty appeared in trying to parse the &lt;code>END&lt;/code> statement. You see, &lt;code>END&lt;/code> can be used like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Terminate program execution.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">END&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&amp;#39; Terminate program execution with code 1 (a later extension).&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And it can also be used like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">TRUE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">THEN&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">END&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that &lt;code>END&lt;/code> has two very different meanings depending on the token that comes after it, if any.&lt;/p>
&lt;p>I &lt;em>suspect&lt;/em> that this is why other control flow primitives &lt;em>don&amp;rsquo;t&lt;/em> use &lt;code>END&lt;/code> to check for their termination: &lt;code>WHILE&lt;/code> uses &lt;code>WEND&lt;/code>, &lt;code>DO&lt;/code> uses &lt;code>LOOP&lt;/code>, and &lt;code>FOR&lt;/code> uses &lt;code>NEXT&lt;/code>. Having different keywords as block terminators makes it &lt;em>much&lt;/em> easier to perform parsing because, for example, when you are parsing the contents of a &lt;code>WHILE&lt;/code> loop, you can simply say &amp;ldquo;&lt;em>parse statements until you find &lt;code>WEND&lt;/code>&lt;/em>&amp;rdquo; and call it a day.&lt;/p>
&lt;p>Of course I wondered why &lt;code>END IF&lt;/code> was not written as a single keyword as well, such as &lt;code>FI&lt;/code> (I see you, POSIX shell), because it breaks this theory and makes parsing unnecessarily hard. Looking at &lt;a href="https://en.wikipedia.org/wiki/Dartmouth_BASIC#First_Edition">the original version of BASIC&lt;/a>, though, reveals the answer: there was no &lt;code>END IF&lt;/code>. The language only supported uni-line &lt;code>IF&lt;/code> statements, which made this point moot.&lt;/p>
&lt;h2 id="references-vs-values">References vs. values&lt;/h2>
&lt;p>Let&amp;rsquo;s switch topics to a slightly different difficulty: having to represent variable values and variable references as different elements in the AST. Consider the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="vg">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;A string&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">LEN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vg">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this code snippet, the &lt;code>LEN&lt;/code> function receives &lt;code>x&lt;/code> as an argument, but &lt;code>LEN&lt;/code> doesn&amp;rsquo;t care about &lt;code>x&lt;/code>: it cares about the value of &lt;code>x&lt;/code>, which is &lt;code>A string&lt;/code>.&lt;/p>
&lt;p>However, consider this other code snippet:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">DIM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">x&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="il">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">UBOUND&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vg">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case, the &lt;code>UBOUND&lt;/code> function receives &lt;code>x&lt;/code> as an argument, and &lt;code>UBOUND&lt;/code> &lt;em>does&lt;/em> care about &lt;code>x&lt;/code> itself, not its value, to inspect its size and return the array&amp;rsquo;s upper bound. (Because&amp;hellip; what is the &amp;ldquo;value&amp;rdquo; of &lt;code>x&lt;/code> without a subscript, anyway? An address? A copy of the array?)&lt;/p>
&lt;p>The problem is&amp;hellip; how can these be interned in the AST if we don&amp;rsquo;t know what each function needs or what each variable&amp;rsquo;s type is? Remember that the parser currently does not have this information. Up until now, the AST has just recorded that function calls take expressions as arguments, and one possible expression type is a symbol reference (&lt;code>Expr::Symbol(VarRef)&lt;/code>). Both &lt;code>LEN&lt;/code> and &lt;code>UBOUND&lt;/code> receive unevaluated expressions, and then the implementation of &lt;code>LEN&lt;/code> &lt;em>evaluates&lt;/em> the expression to get its value, whereas the implementation of &lt;code>UBOUND&lt;/code> does &lt;em>not&lt;/em> evaluate the expression and instead uses the argument to look up the symbol&amp;rsquo;s definition.&lt;/p>
&lt;p>This has worked OK so far but poses new problems when trying to compile expression evaluation into bytecode, which is something that EndBASIC 0.10 notably lacks but that I need to implement for &amp;ldquo;proper&amp;rdquo; compilation. When facing the &lt;code>x&lt;/code> argument in the function calls above, the compiler cannot tell if it should emit code to load the value of &lt;code>x&lt;/code> or if it should emit code to provide a reference to &lt;code>x&lt;/code>. Resolving this would require making the AST aware of valid functions and their syntaxes or the compiler aware of variable types.&lt;/p>
&lt;h2 id="exponents-and-square-root">Exponents and square root&lt;/h2>
&lt;p>Switching topics again, another oddity comes from the lack of orthogonality in a recent feature I implemented. Exponents are expressed as an infix operator (&lt;code>8 ^ 2&lt;/code>) whereas square roots are expressed as a function (&lt;code>SQR(8)&lt;/code>).&lt;/p>
&lt;p>This does not pose a difficulty in parsing, but it clashes with the desire to keep the core parser and the standard library separate: why should exponents be in the core while &lt;code>SQR&lt;/code> is in the standard library? This is inconsistent but cannot be easily resolved in the current implementation.&lt;/p>
&lt;h2 id="let-vs-not-let">LET vs. not LET&lt;/h2>
&lt;p>And finally, &lt;code>LET&lt;/code>. For as long as I remember using BASIC myself, which is as far back as the 1980s with Locomotive BASIC 1.1, variable assignment has always been expressed as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="vg">var&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">1234&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But the original BASIC also has a &lt;code>LET&lt;/code> keyword to write variable assignments as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">LET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">var&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">1234&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The question is: why? Why would you need to have an optional &lt;code>LET&lt;/code> keyword to assign variables when it can be omitted? This is the final telltale sign that gives insight on how original parsing must have been done.&lt;/p>
&lt;h1 id="welcome-to-the-1960s">Welcome to the 1960s&lt;/h1>
&lt;p>From the looks of all of this, it is fairly reasonable to assume that original BASIC parsers read code line by line, did simple prefix matching to determine what to do on a single line, and then passed the remainder of the line to a routine to handle it.&lt;/p>
&lt;p>Something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">pc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_line&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">startswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;PRINT&amp;#39;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;PRINT&amp;#39;&lt;/span>&lt;span class="p">):])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">startswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;INPUT&amp;#39;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;INPUT&amp;#39;&lt;/span>&lt;span class="p">):])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">startswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;NAME&amp;#39;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;NAME&amp;#39;&lt;/span>&lt;span class="p">):])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Unknown command&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">line&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This makes a lot of sense considering the severe limitations of the computers that first ran BASIC in 1963 when it was invented: they had limited computing power, very limited memory, and the code for the interpreter must have been written directly in assembly.&lt;/p>
&lt;p>With this perspective, it&amp;rsquo;s &amp;ldquo;obvious&amp;rdquo; why each command can behave differently: it is up to their implementation to interpret the remainder of the program line as they see fit. There is no AST. No abstraction over the program. No compilation. Just a loop that reads a line at a time and decides what to do about it right away.&lt;/p>
&lt;p>In a modern implementation like EndBASIC, however, trying to represent this variety of commands in a generic form to maintain the separation between core language and standard library is difficult. What I ended up doing is capturing the list of arguments as a list of expression/separator pairs and passing those to the command handler&amp;mdash;which works but is ugly because each command has to implement argument parsing in a fragile way and makes compilation to bytecode difficult.&lt;/p>
&lt;h1 id="potential-fixes-for-endbasic">Potential fixes for EndBASIC&lt;/h1>
&lt;p>So, any lessons learned? What am I going to do about all of this?&lt;/p>
&lt;p>I think keeping the EndBASIC core language vs. standard library separation is a worthy goal. But I also think that keeping the language interpreter completely unaware of symbols is a self-imposed limitation that makes some things hard (distinguishing between array assignments and function calls) and makes other things impossible (having labels without &lt;code>@&lt;/code> prefixes). This should change.&lt;/p>
&lt;p>The language parser will probably have to gain a mechanism to register symbols upfront so that the standard library can register its commands and functions as desired. And the language parser and/or the newly-added compiler will also have to dynamically update this table as it parses code to recognize newly-defined variables, arrays, functions, and commands.&lt;/p>
&lt;p>The other thing that will need to change is making the parser aware of the signature of commands and functions. This is necessary to fix the compilation problem that arises in the &lt;code>LEN&lt;/code> vs. &lt;code>UBOUND&lt;/code> case, and also to support passing variables by value or by reference to custom procedures and functions (as QuickBASIC supports). The parser or the compiler need to know that &lt;code>LEN&lt;/code> receives an evaluated value whereas &lt;code>UBOUND&lt;/code> receives an array reference in order to emit the right bytecode instructions.&lt;/p>
&lt;p>Finally, to fix the exponents vs. square roots inconsistency, operators should become function calls provided by the standard library. You could imagine the standard library asking the core to register an infix operator called &lt;code>^&lt;/code> that is executed via a hidden &lt;code>EXP&lt;/code> function, much like many modern languages do. This is, however, a minor annoyance compared to all others that I&amp;rsquo;m not sure is worth fixing.&lt;/p>
&lt;p>And that&amp;rsquo;s it. This was a very long post full of disconnected thoughts. I&amp;rsquo;m not sure if you have gotten anything useful out of it, but if you have feedback on the content or corrections on historical facts (which I&amp;rsquo;m sure are not accurate), please let me know!&lt;/p></description></item><item><title>EndBASIC 0.10: Core language, evolved</title><link>https://jmmv.dev/2022/12/endbasic-0.10.html</link><pubDate>Tue, 27 Dec 2022 16:30:00 +0100</pubDate><guid>https://jmmv.dev/2022/12/endbasic-0.10.html</guid><description>&lt;p>After three months of early-morning hacking, I&amp;rsquo;m pleased to announce that EndBASIC 0.10 is now available&amp;mdash;right on time for some holiday-time experimentation!&lt;/p>
&lt;p>This release marks a &lt;em>huge&lt;/em> milestone because it makes the language usable for real-world development.&lt;/p>
&lt;p>You see, when I started this project over two years ago, I wrote a rudimentary interpreter for something that resembled BASIC and then launched EndBASIC 0.1. Since then, I have been piling onto those insufficient foundations by adding flashy features such as &lt;a href="/2020/11/endbasic-0.3.html">a web interface&lt;/a>, &lt;a href="/2021/07/endbasic-0.7.html">a cloud file sharing service&lt;/a>, and &lt;a href="/2021/11/endbasic-0.8.html">a hybrid text/graphics console&lt;/a>. These features have been well-received in every demo I&amp;rsquo;ve given but&amp;hellip; the feedback that always came back was the same: &amp;ldquo;&lt;em>Give me some sort of functions or subroutines!&lt;/em>&amp;rdquo;, or &amp;ldquo;&lt;em>This is no BASIC without &lt;code>GOTO&lt;/code>!&lt;/em>&amp;rdquo;.&lt;/p>
&lt;p>And these criticisms were right. Trying to write any sort of non-trivial program in EndBASIC was a daunting and frustrating experience. I had tried to simplify coding to the foundations of structured programming, but without a way to perform unstructured jumps (aka go-tos) or define custom functions&amp;hellip; it was impossible to factor out common code, which is a need for the vast majority of programs that exceed a screenful of text. There were also usability deficits such as the lack of line numbers in error messages, which made it incredibly difficult to debug any failing program.&lt;/p>
&lt;p>The situation had to change, and change it has in EndBASIC 0.10.&lt;/p>
&lt;h1 id="main-changes">Main changes&lt;/h1>
&lt;p>EndBASIC 0.10 is a &lt;em>humongous&lt;/em> release that comes with improvements across the board. Most changes have focused on the core language, but they also spread to the standard library and the user interface. To summarize, these are the main changes in this release:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Support for &lt;code>GOTO&lt;/code> &lt;em>and&lt;/em> &lt;code>GOSUB&lt;/code>.&lt;/strong> Implementing these required dropping the previous AST-based evaluator and replacing it with a bytecode-based executor (with an associated compiler). You can read more about this change in &amp;ldquo;&lt;a href="/2022/11/endbasic-bytecode.html">From AST to bytecode execution in EndBASIC&lt;/a>&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Error catching and handling via &lt;code>ON ERROR&lt;/code>.&lt;/strong> This was also made possible by the new bytecode executor mentioned earlier.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Precise line and column numbers in every error message.&lt;/strong> This required a massive overhaul of how the AST is represented to carry these details in every node. Modifying the AST was relatively easy&amp;hellip; but adjusting all existing tests to validate this new information was extremely laborious.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Interop of numeric types.&lt;/strong> Being strict about numeric types was nice in theory&amp;mdash;just as it is a very welcome pedantic feature in Rust&amp;mdash;but the lack of automatic conversions between integers and doubles was&amp;hellip; quite annoying. As a consequence, this release brings transparent promotion of integers to doubles and automatic rounding of doubles to integers. This works now but I feel it&amp;rsquo;s a hack due to all of the special-casing that has taken place. A more advanced bytecode will probably make this better in the future.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Revamped interactive help system.&lt;/strong> Previous versions provided a &lt;code>HELP&lt;/code> command that exposed documentation for all high-level types, but failed to provide documentation about the language itself (other than for a simplified cheat-sheet that grew too cryptic and long). This release has fixed this by extending &lt;code>HELP&lt;/code> to provide language-specific documentation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>New control flow structures.&lt;/strong> These include suppport for &lt;code>DO&lt;/code> loops (with all of their variants, which include infinite loops as well as &lt;code>WHILE&lt;/code> and &lt;code>UNTIL&lt;/code> clauses before or after the loop), &lt;code>SELECT CASE&lt;/code>, and one-line &lt;code>IF&lt;/code>s. &lt;code>SELECT CASE&lt;/code> is probably the hardest structure that exists right now due to the oddities in its grammar and the many cases to consider.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Addition of bitwise operators.&lt;/strong> These are a nice-to-have, and because these are now available, the language now supports specifying integer literals in binary, octal, decimal and hexadecimal bases.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Rename of &lt;code>EXIT&lt;/code> to &lt;code>END&lt;/code> to terminate programs.&lt;/strong> This seems like a triviality, but it&amp;rsquo;s worth mentioning because it was quite difficult to retrofit it into the parser due to how &lt;code>END&lt;/code> is sometimes a statement on its own and other times it is combined with other keywords (e.g. &lt;code>END IF&lt;/code> or &lt;code>END SELECT&lt;/code>). Stay tuned for an upcoming post that will deep dive into the parsing oddities of this language.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Lots of small tweaks here and there.&lt;/strong> These include fixes to the editor, minor changes to the grammar, command renames, addition of exponents and square roots, addition of various new string functions, and addition of a way to query the screen size to let &lt;del>games&lt;/del> programs adjust to different viewports.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Quite a few changes, huh? :)&lt;/p>
&lt;h1 id="how-can-i-enjoy-this">How can I enjoy this?&lt;/h1>
&lt;p>Here are the usual links to get you started:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://repl.endbasic.dev/">Launch the online interpreter&lt;/a>&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://www.endbasic.dev/">Visit the EndBASIC website&lt;/a>&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://github.com/endbasic/endbasic/releases/tag/endbasic-0.9.0">Read the release notes&lt;/a>&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Please &lt;a href="mailto:support@endbasic.dev">let me know&lt;/a> if you have any questions, feedback, or encounter any issues. There are tons more things I wanted to continue tweaking and fixing before publishing 0.10, but I had to force myself to get it out of the door already. There will always be a next release to fix stuff.&lt;/p>
&lt;p>With that, I&amp;rsquo;ll leave you with a demo to display some holiday greetings, all written in EndBASIC and leveraging the new features in this release 😊&lt;/p>
&lt;iframe id="terminal" src="https://repl.endbasic.dev/?run=jmmv/flakes.bas">&lt;/iframe>
&lt;p>&amp;hellip; and if you have made it this far, you can also:&lt;/p>
&lt;ul>
&lt;li>play a &lt;a href="https://repl.endbasic.dev/?run=jmmv/arka.bas">work-in-progress Arkanoid clone&lt;/a> and&lt;/li>
&lt;li>play a &lt;a href="https://repl.endbasic.dev/?run=jmmv/snake.bas">Snake clone&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title>From AST to bytecode execution in EndBASIC</title><link>https://jmmv.dev/2022/11/endbasic-bytecode.html</link><pubDate>Tue, 22 Nov 2022 06:50:00 -0700</pubDate><guid>https://jmmv.dev/2022/11/endbasic-bytecode.html</guid><description>&lt;p>Since its inception two years ago, the EndBASIC interpreter has been using an AST-based execution
engine. And during all this time, people have mocked the language for not allowing &lt;code>10 GOTO 10&lt;/code>.
Well, fear not: the upcoming 0.10 release has full support for &lt;code>GOTO&lt;/code> and &lt;code>GOSUB&lt;/code>, features that
were made possible by moving to a bytecode-based interpreter. Let&amp;rsquo;s take a peek at what the
problems were and how I addressed them.&lt;/p>
&lt;h1 id="before-ast-based-execution">Before: AST-based execution&lt;/h1>
&lt;p>An &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree (AST)&lt;/a> represents the
structure of the program as a connected acyclic undirected graph&amp;mdash;aka&amp;hellip; a tree. Each node
represents a construct that appears in the program text and each edge indicates how those constructs
are nested. ASTs are the output of a language parser.&lt;/p>
&lt;p>ASTs are useful to efficiently walk over a program&amp;rsquo;s source code at a high level without having to
worry about lexing or parsing, and they are useful to implement things like compilers: for each
construct in the AST, such as an arithmetic operation or an if statement, the compiler can inspect
the various parts of the construct and &amp;ldquo;directly&amp;rdquo; emit machine code for them.&lt;/p>
&lt;p>But ASTs can also be used to &lt;em>execute&lt;/em> a program. Here, take a look at what the main execution loop
in EndBASIC used to look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmts&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Statement&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmt&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmt&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Statement&lt;/span>::&lt;span class="n">Assignment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vref&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">assign&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vref&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Statement&lt;/span>::&lt;span class="n">BuiltinCall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">symbols&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">VarRef&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">VarType&lt;/span>::&lt;span class="n">Auto&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Symbol&lt;/span>::&lt;span class="n">Command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clone&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">new_syntax_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="fm">format!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s"> is not a command&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">new_syntax_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="fm">format!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Unknown builtin &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">map_err&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Error&lt;/span>::&lt;span class="n">from_call_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">metadata&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Statement&lt;/span>::&lt;span class="n">If&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">branches&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">do_if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">branches&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Statement&lt;/span>::&lt;span class="n">While&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">do_while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... other statement types elided ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the above code snippet, note how walking the AST (represented in &lt;code>stmts&lt;/code> as a sequence of
&lt;code>Statement&lt;/code> values) for execution is easy: there is a loop that &amp;ldquo;sees&amp;rdquo; every high-level construct
and can then simulate what should be done for each of them.&lt;/p>
&lt;p>To add some more color to the above, here is how an &lt;code>IF&lt;/code> statement&amp;rsquo;s execution looked like. Note
that we explicitly test for each conditional branch that appears in the program and, once we find
the branch that is true (if any) we recursively call into the &lt;code>exec&lt;/code> function to evaluate its
contents and then terminate execution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">do_if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">branches&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="p">[(&lt;/span>&lt;span class="n">Expr&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Statement&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)])&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmts&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">branches&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">symbols&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>::&lt;span class="n">Boolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stmts&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Stop executing branches.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>::&lt;span class="n">Boolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">new_syntax_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;IF/ELSEIF require a boolean condition&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(())&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Similarly, here is how &lt;code>WHILE&lt;/code> loop execution looked like. Note again that we have a native loop
that iterates over the body of the interpreted loop and exits when the condition is false:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">do_while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">condition&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">Expr&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">body&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Statement&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">loop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">symbols&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>::&lt;span class="n">Boolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>::&lt;span class="n">Boolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">new_syntax_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;WHILE requires a boolean condition&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(())&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Looks pretty simple and reasonable, right?&lt;/p>
&lt;h1 id="in-between-hacking-goto-support">In-between: Hacking GOTO support&lt;/h1>
&lt;p>Indeed it does. The AST-based executor presented above &lt;em>is&lt;/em> simple. But it comes with significant
problems&amp;mdash;the most salient one being that implementing the much desired &lt;code>GOTO&lt;/code> is very difficult.&lt;/p>
&lt;p>Consider an EndBASIC program like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">THEN&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">WHILE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">TRUE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="vg">exit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">WEND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="nl">exit:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;hi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we parse the above into an AST and try to execute it with the algorithm presented earlier, we end
up with a native call stack that looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl"> exec &amp;lt;-- @exit is visible at this level.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | -&amp;gt; do_if
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | -&amp;gt; exec
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | | -&amp;gt; do_while
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | | | -&amp;gt; exec
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | | | | -&amp;gt; do_goto &amp;lt;-- How do we jump to @exit?
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which is a problem. There is no way the &lt;code>do_goto&lt;/code> native function can jump to &lt;code>@exit&lt;/code> right away.
The only thing we can do is unwind the native stack until we reach the nesting level where &lt;code>@exit&lt;/code>
is defined and continue execution there. And because we &lt;em>can&lt;/em> do this and adding &lt;code>GOTO&lt;/code> as a
feature was not negotiable at this point, I implemented this exact solution as a first cut in
&lt;a href="https://github.com/endbasic/endbasic/commit/8ef803e55f922ba52e9c774cacf567871c59971b">commit
8ef803e&lt;/a>.
Here are the crux of the changes to the AST-based execution loop:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmts&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Statement&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pending_goto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_some&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// If there is a &amp;#34;pending GOTO&amp;#34;, see if we can find the target label
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// at this level by scanning over all statements.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pending_goto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">as_ref&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Statement&lt;/span>::&lt;span class="n">Label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">stmts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pending_goto&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// The label wasn&amp;#39;t found here. Unwind this stack frame and the
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// calling exec() will try this again.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stmts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Now execute statements at this level as before ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">stmts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Statement&lt;/span>::&lt;span class="n">Goto&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pending_goto&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clone&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Stack unwinding will happen at the next iteration, where we
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// will first try to find the target at the current level.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Statement&lt;/span>::&lt;span class="n">Label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Nothing to do (other than sanity checks). The labels as
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// targets were handled above.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... other statement types elided ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Does the job. Unfortunately, this is not &lt;em>pretty&lt;/em> because the &lt;code>pending_goto&lt;/code> looks like a clutch,
and this is not &lt;em>efficient&lt;/em> because what should be a simple instruction jump (a thing that
microprocessors can do just fine) becomes a convoluted stack unwinding process plus a target lookup
at every level.&lt;/p>
&lt;p>What&amp;rsquo;s worse is that the above isn&amp;rsquo;t feature-complete either because we are only unwinding the stack
(going up the call chain) but never go down. Think about this other program:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">THEN&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">WHILE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">TRUE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="vg">other&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">WEND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">ELSE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">other:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;hi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This snippet differs from the above in that the &lt;code>@other&lt;/code> target of the &lt;code>GOTO&lt;/code> cannot be found by
simply unwinding the stack: the executor would need to unwind the stack, yes, but it would also need
to go into every possible branch of the program to look for the target, which would either be even
more inefficient or it would require a lot of extra bookkeeping to track where the targets live.&lt;/p>
&lt;p>And those are not the only problems. What if, instead of a &lt;code>GOTO&lt;/code>, we want to implement a
&lt;code>GOSUB&lt;/code>&amp;mdash;a call to an arbitrary location that can later &lt;em>return&lt;/em> execution to
where the call happened? &amp;ldquo;Impossible.&amp;rdquo;&lt;/p>
&lt;h1 id="after-compiler-plus-bytecode-execution">After: compiler plus bytecode execution&lt;/h1>
&lt;p>All of the problems above go away if we &amp;ldquo;flatten&amp;rdquo; the AST by replacing all nesting with
(conditional) jumps and then execute the code with a program counter and a call stack. If that
sounds like writing a compiler and a virtual machine, it&amp;rsquo;s because this is precisely what this
means. But it needn&amp;rsquo;t be as complicated as it sounds. In fact, I procrastinated on this for
over a year and first implemented the hack above because I feared the change but, in the end, coming
up with a prototype was a matter of a couple of hours.&lt;/p>
&lt;p>Let&amp;rsquo;s go back to our &amp;ldquo;complex&amp;rdquo; code statement from earlier. This EndBASIC program:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">THEN&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">WHILE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">TRUE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="vg">other&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">WEND&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">ELSE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">other:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;hi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip; is &lt;em>equivalent&lt;/em> to this after flattening the AST:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">THEN&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">if_else:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="nl">while_start:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ow">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nl">TRUE:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nl">while_end:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="vg">other&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="vg">while_start&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="nl">while_end:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="vg">if_end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="nl">if_else:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="nl">other:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;hi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="nl">if_end:&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>All nesting is gone! The only thing we are left with are conditional jumps (the &lt;code>IF&lt;/code> one-liners),
unconditional jumps, and their corresponding targets. We have essentially gone through a
compilation phase. And if we replace the string labels with line numbers (akin to addresses), just
like an assembler would do, we are left with this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-basic" data-lang="basic">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="il">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">THEN&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nl">6:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ow">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nl">TRUE:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nl">6:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">IF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nl">6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nl">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">GOTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nl">7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">PRINT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;hi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip; which looks like an awful lot like native machine code, doesn&amp;rsquo;t it?&lt;/p>
&lt;p>And this is what &lt;a href="https://github.com/endbasic/endbasic/commit/c0cb9a31ada44b53d8016d3cf2d19cfaa8158b5e">commit
c0cb9a3&lt;/a>
did. In this change, I added a rudimentary version of a compiler that flattens the AST and a
trivial bytecode-based virtual machine that executes every instruction. The execution loop thus
becomes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">instrs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">instr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">instrs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">instr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Instruction&lt;/span>::&lt;span class="n">Assignment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">assign&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Instruction&lt;/span>::&lt;span class="n">BuiltinCall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">call_builtin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Instruction&lt;/span>::&lt;span class="n">Jump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Instruction&lt;/span>::&lt;span class="n">JumpIfNotTrue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cond&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">symbols&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>::&lt;span class="n">Boolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>::&lt;span class="n">Boolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">new_syntax_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cond&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">start_pos&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">span&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">error_msg&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... other instruction types elided ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And with this, you can imagine that implementing &lt;code>GOTO&lt;/code> becomes trivial&amp;mdash;as does &lt;a href="https://github.com/endbasic/endbasic/commit/022ae5105b9662ebf2f7b7af4170c5065bb7255a">implementing
&lt;code>GOSUB&lt;/code>&lt;/a> and
&lt;a href="https://github.com/endbasic/endbasic/commit/e5b60e5d3970378c1a7bb105f631e20f42859f98">&lt;code>ON ERROR&lt;/code>&lt;/a>,
which are other features that are already available at &lt;code>HEAD&lt;/code>.&lt;/p>
&lt;p>Now, the above is far from being true bytecode: for example, the instruction types that are
currently defined are still too high level. Something like the &lt;code>BuiltinCall&lt;/code> instruction type does
an incredible amount of work because this is evaluating (in native code) the various arguments to
the call and calling into the native function. To turn this into true bytecode, the arguments
themselves&amp;mdash;which are arbitrary expressions&amp;mdash;would need to be evaluated via bytecode instructions
with a supporting stack or register bank. And to be real bytecode, the instructions should have a
compact binary representation.&lt;/p>
&lt;p>Having a true bytecode and a memory map sounds super-fun to build. It may even be necessary when
adding support for custom-defined functions. And it would pave the way to having &lt;code>PEEK&lt;/code> and &lt;code>POKE&lt;/code>.
But we didn&amp;rsquo;t need any of this to solve the &lt;code>GOTO&lt;/code> problem. So, for now, this is all that EndBASIC
0.10 will ship with.&lt;/p>
&lt;p>Stay tuned for the forthcoming release announcement!&lt;/p></description></item><item><title>Farewell, Microsoft; hello, Snowflake!</title><link>https://jmmv.dev/2022/10/bye-microsoft-hi-snowflake.html</link><pubDate>Mon, 31 Oct 2022 07:25:00 -0700</pubDate><guid>https://jmmv.dev/2022/10/bye-microsoft-hi-snowflake.html</guid><description>&lt;p>&lt;em>Hello again! It has been months since the last blog post. I have been following this crazy marathon training program that has consumed all of my free time since then, but luckily it&amp;rsquo;s ending this week. I should be able to regain time afterwards to write and hack again&amp;hellip; if what I&amp;rsquo;m describing in this post permits it in the near future!&lt;/em>&lt;/p>
&lt;hr>
&lt;p>After two years, it&amp;rsquo;s time for a change: I left Microsoft last week and &lt;strong>I&amp;rsquo;m starting at Snowflake ❄&lt;/strong> today!&lt;/p>
&lt;figure>
&lt;img src="/images/2022-10-28-microsoft-shutdown.jpg" width="100%">
&lt;figcaption>2022-10-28: Turning off my Microsoft secure corporate laptop for the last time and handing in my badge.&lt;/figcaption>
&lt;/figure>
&lt;h1 id="quick-recap-of-my-2-years-at-microsoft">Quick recap of my 2 years at Microsoft&lt;/h1>
&lt;p>My journey at Microsoft has been short&amp;hellip; but interesting and messy in many ways. Let&amp;rsquo;s look at these from the lens of &lt;a href="/2020/10/bye-google-hi-microsoft.html">what I wrote 2 years ago&lt;/a> when I departed from Google:&lt;/p>
&lt;blockquote>
&lt;p>🔝 The position will put me in the right kind of organizational challenges and responsibility that I need to cultivate to grow right now.&lt;/p>
&lt;/blockquote>
&lt;p>This worked out&amp;hellip; to some extent. When I joined Microsoft, I reported to the director of the front-end layer of the storage subsystem. From day one, this meant that my direct peers were all the managers in the team as well as other high-level ICs. As a consequence, expectations were high, but responsibilities and visibility were high as well. I got to work with these folks and other sibling teams right away, which exposed me to broad architectural and organization problems that needed tackling.&lt;/p>
&lt;p>The opportunities were definitely there, but things were messy because said director (and several of his direct reports) left just a few months after I started. What I was working on was suddenly not as important and the team took a while to recover from such departure. In the end, I refocused and started to tackle a different problem with successful outcomes, but it took longer than it should have for me to do this shift (which had other consequences as I&amp;rsquo;ll mention below).&lt;/p>
&lt;blockquote>
&lt;p>🏫 I know nothing about Windows and surrounding technologies (like C#) but have been interested in them for a while, so this will be my chance to absorb completely different technology. After all, I&amp;rsquo;m a systems person and the Windows ecosystem is my blind spot.&lt;/p>
&lt;/blockquote>
&lt;p>Check. If you have followed &lt;a href="/2022/03/a-year-on-windows-intro.html">&amp;ldquo;recent&amp;rdquo; posts&lt;/a>, I have moved on from macOS, and Windows is now my primary desktop environment. This was unimaginable just 2 years ago. When I joined the company, trying to get work done with the corporate Windows laptop was painful&amp;mdash;not just because I had to learn how to work in a team and a new product, but also because I didn&amp;rsquo;t know how to navigate Windows fluently. To ease my way into the role, I ended up enrolling my personal Mac as a managed corporate device so that I could continue using macOS. But this was only a band-aid: accessing production could only be done from a secure laptop running Windows, and thus every time I was on-call I was extremely slow to operate. At some point, I had to move fully onto Windows to adjust, and it has been just fine. I&amp;rsquo;m now not using macOS at all.&lt;/p>
&lt;p>But there is more. I&amp;rsquo;ve been exposed to C# and written a bunch of code in this language. This was, frankly, easy to do because it&amp;rsquo;s &amp;ldquo;just Java with a different coating&amp;rdquo;. For the kind of code I had to write, I could get by just learning by example and via code review comments. The language has some interesting details, but the real cool stuff comes from the runtime. However, as I mostly dealt with C++, I did not get to build a ton of knowledge in this area.&lt;/p>
&lt;p>Separately, I&amp;rsquo;ve gotten to use Office. Going back to native apps was a breath of fresh air, honestly. But syncing documents via OneDrive, especially those with active collaborators, has been problematic in multiple occasions&amp;hellip; Dealing with sync conflicts is something that just doesn&amp;rsquo;t happen when you use GSuite or even the online versions of O365, so I found myself using the latter in multiple occasions instead of the desktop apps. Oh yes, and I &lt;a href="/2022/03/abandoning-gafyd.html">moved on from GAFYD&lt;/a> and ended up with O365 for personal usage.&lt;/p>
&lt;p>And of course, I&amp;rsquo;ve also ended up playing with Azure as a customer by building a couple of cloud-based services, and gotten an Xbox at home, which the kids have taken over.&lt;/p>
&lt;blockquote>
&lt;p>🌲 Microsoft is huge in the Seattle area and, as far as I know, they are primarily located in this location. If I ever wanted to work at Microsoft, &lt;em>this&lt;/em> was my chance before moving away from the U.S.&lt;/p>
&lt;/blockquote>
&lt;p>Microsoft is everywhere in the area and it is a gigantic employer (other than for the current hiring slowdown affecting all major tech companies) with a neat corporate mission, a great deal of nice products, and a bunch of excellent people.&lt;/p>
&lt;p>That said, my rationale for being the &amp;ldquo;last chance&amp;rdquo; to work for them was not very convincing. This might have been true years ago, but my team has ended up being very remote-friendly due to the pandemic, which means being in the area is not strictly necessary any longer. In fact, we have a few folks that are permanently remote. This may or may not be true for other organizations within the company though.&lt;/p>
&lt;p>Anyhow&amp;hellip; I&amp;rsquo;m not sure I&amp;rsquo;m moving out anytime soon for other personal reasons. So who knows, maybe I&amp;rsquo;ll end up in the company again if the right opportunity shows up.&lt;/p>
&lt;blockquote>
&lt;p>🏃‍♂️ I moved geographically so I wanted to have sufficient work-related contacts to build a local network of peers and friends&amp;hellip; once we are allowed to meet people again. In particular, Twitter was weak in this area.&lt;/p>
&lt;/blockquote>
&lt;p>As mentioned earlier, the team I joined is very remote-friendly, but luckily the vast majority of the people are local&amp;mdash;which worked in my favor to accomplish this. That said, the pandemic made the situation very difficult because I could not go into the office for over a year and, even after the office officially opened, I did not get an assigned location due to logistics for many more months.&lt;/p>
&lt;p>In any case, I ended up commuting semi-regularly to meet peers, which worked wonders. I really don&amp;rsquo;t mind the &amp;ldquo;working from home&amp;rdquo; situation and find it very convenient (and possibly an exclusive choice for the future), but it&amp;rsquo;s true that being present in the office and building personal connections over lunch is super-important to function well at a high-level role. There are certain kinds of talk that will never happen over VC.&lt;/p>
&lt;blockquote>
&lt;p>📢 Azure is a public product, so my work in storage will be directly seen by customers and, hopefully, I&amp;rsquo;ll have enough chances to interact with them too. I was told that Facebook had similar hands-on work to be done, and I believe it, but it&amp;rsquo;d all have been to serve internal teams and I kinda like the public exposure.&lt;/p>
&lt;/blockquote>
&lt;p>This was literally true, but in the end not so rewarding. Even though I was working in public cloud storage, I focused on internal aspects of the product (intentionally), not features. These aren&amp;rsquo;t directly perceived by customers, so my interaction with them was only during outages and only after customer support had already exhausted all avenues to help them. Which, as you can imagine, is not the most satisfying kind of engagement.&lt;/p>
&lt;p>In any case, Azure is huge and this goal is definitely something that can be fulfilled if you work on features, as you will be in contact with both PMs and customers to design and implement them.&lt;/p>
&lt;h1 id="the-need-for-a-change">The need for a change&lt;/h1>
&lt;p>Overall, my experience has been positive as it accomplished most of what I wanted to achieve. But things come to an end. I needed a change for a couple of reasons.&lt;/p>
&lt;p>The first was to remove friction. Yes, I can now operate on Windows just fine and develop on it a-OK, but I&amp;rsquo;m not super-fluent. Obviously, this is fixable with extra time on the role (and if I switched focus to a more hands-on project rather than working on organizational issues), but this made me feel unproductive compared to some of my peers. On Unix-y environments, I can quickly hack whatever I need to solve a problem (especially during an outage!), and that&amp;rsquo;s something I&amp;rsquo;m not yet comfortable enough doing in a Windows environment. (Some things like RDP won&amp;rsquo;t ever be fast or ergonomic though).&lt;/p>
&lt;p>The second is the big elephant in the room: comp. The original offer I got to join the company was very reasonable but it came with this large sign-on bonus over two years. This meant that the comp cliff after two years would be significant, and I knew that going in. However, due to the role, I was counting on having a chance to get promoted within the two years, which would have fixed this issue. Unfortunately, this plan didn&amp;rsquo;t materialize for some of the reasons outlined above, so I was left with the knowledge that this could be corrected right away by moving to a new company. The right opportunity showed up and it was very hard to say no. Honestly, it&amp;rsquo;s not really about the money for me, but major differences in comp and the need to support a family and pay off a huge mortgage cannot be dismissed.&lt;/p>
&lt;p>There were other reasons why I wanted to move to a different project or team, but these two are why I ended up looking outside of the company instead of trying to pursue an internal move (which would have been much easier and less stressful).&lt;/p>
&lt;h1 id="so-hello-snowflake">So, hello Snowflake&lt;/h1>
&lt;p>In the end, an interesting opportunity did show up, and it did so at the right moment. In fact, &lt;em>three&lt;/em> of them showed up, all very similar in role and quite exciting due to my personal interests. I won&amp;rsquo;t bore you with the details of the other companies, so I&amp;rsquo;ll just summarize what&amp;rsquo;s next.&lt;/p>
&lt;p>I&amp;rsquo;m joining Snowflake to work on their &amp;ldquo;new&amp;rdquo; Developer Experience Productivity team, which has some major goals for the years ahead. I&amp;rsquo;ll go back to working with tools I know very well, tackling a large technical challenge. And my &amp;ldquo;customers&amp;rdquo; will now all be internal to the company, so I&amp;rsquo;ll have direct access to chat with them about their issues and how we can fix them.&lt;/p>
&lt;figure>
&lt;img src="/images/2022-09-29-snowflake-welcome-kit.jpg" width="100%">
&lt;figcaption>2022-09-29: Snowflake swag after I went through their interview loop. Nice!&lt;/figcaption>
&lt;/figure>
&lt;p>A big portion of the team is local, including direct management, which will facilitate onboarding and building rapport. I&amp;rsquo;ll also be joining some nice folks I knew from before, and a much smaller corporate environment. In fact, I have visited the office in Bellevue and I got a similar feeling as to when I joined Google Dublin back in 2009: just a few floors with people that know each other and an opportunity to see and be part of tangible growth.&lt;/p>
&lt;p>But this is a much smaller company than Google and Microsoft. When I left Google, I wanted to experience a different work environment and&amp;hellip; to be honest, Microsoft hasn&amp;rsquo;t been it. The two companies are incredibly similar, to the dismay of many. Snowflake, however, seems like a sweet spot because it is significantly smaller but it&amp;rsquo;s also stable enough.&lt;/p>
&lt;p>This is now the second time I&amp;rsquo;ve moved from storage infrastructure to developer tools, and it may not be the last. I enjoy working on many different aspects in technology, so it&amp;rsquo;s fun to &amp;ldquo;spice things up&amp;rdquo; once in a while and change topics&amp;mdash;but in the end, I end up frustrated with the tooling and start chipping away to make things better in that area, which makes me swing back into this area.&lt;/p>
&lt;p>Oh, and today I&amp;rsquo;m going back to macOS given that my corporate laptop is a gigantic MacBook Pro 16&amp;quot;. It&amp;rsquo;ll be fun to see how these M1-based computers operate&amp;hellip; but I&amp;rsquo;m not sure I&amp;rsquo;ll enjoy the duality of a Mac corporate laptop and a Windows personal desktop. No, wait, I &lt;em>know&lt;/em> &lt;a href="/2021/07/macos-ahk.html">I won&amp;rsquo;t enjoy it&lt;/a>, so I&amp;rsquo;ll have to find a solution.&lt;/p>
&lt;figure>
&lt;img src="/images/2022-10-25-snowflake-laptop.jpg" width="100%">
&lt;figcaption>2022-10-25: Snowflake corporate laptop unboxing.&lt;/figcaption>
&lt;/figure>
&lt;p>Thanks for reading and happy Halloween!&lt;/p></description></item><item><title>Tips on formatting Markdown lists</title><link>https://jmmv.dev/2022/07/markdown-lists.html</link><pubDate>Thu, 07 Jul 2022 07:00:00 -0700</pubDate><guid>https://jmmv.dev/2022/07/markdown-lists.html</guid><description>&lt;p>Lists are a very common construct in technical documents, which is the kind of material I most often write and &lt;em>review&lt;/em>. But getting complex lists to look right is tricky, especially when authoring them in Markdown.&lt;/p>
&lt;p>The problem with lists starts early on. All Markdown training material will teach you that lists are written like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">This is an unordered list:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> First.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> Second.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> Third.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">And this is an ordered list:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">1.&lt;/span> First.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">2.&lt;/span> Second.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">3.&lt;/span> Third.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Looks trivial and easily readable in its textual form, right? Unfortunately, this style quickly breaks down as soon as you have multiple people editing the same document or you start nesting lists and code blocks.&lt;/p>
&lt;p>From experience, I&amp;rsquo;ve come up with a style of writing lists that ensures they are always correctly and consistently formatted, and that mistakes are trivial to spot at review time. I find myself repeating these tips and their rationale during PR reviews, so here is a full-fledged explanation for posterity&amp;rsquo;s sake.&lt;/p>
&lt;h1 id="ordered-list-numbers">Ordered list numbers&lt;/h1>
&lt;p>When working with a large ordered list, keeping items properly numbered is a task that seems impossible. Oftentimes, I&amp;rsquo;ve gotten PRs &lt;em>for new content&lt;/em> where the item numbers were wrong from the get go. Things like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="k">1.&lt;/span> First.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">3.&lt;/span> Third already? I guess the item was moved at the last minute.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">2.&lt;/span> Second.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">2.&lt;/span> Second again. Copy/paste error?
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Markdown will happily accept this and will render the list with correct sequential numbering (note: it will fix the numbering, not reorder your items!). But&amp;hellip; do you think this is good? In my opinion, this looks sloppy&amp;mdash;and sloppiness of this kind during a PR review is an indicator that the rest of your change is suspect of more serious problems and deserves thorough scrutiny.&lt;/p>
&lt;p>The problems don&amp;rsquo;t end with the author having to be more careful though. If you &lt;em>try&lt;/em> to do the right thing and try to keep the list numbers sequential, you&amp;rsquo;ll have cases where a trivial addition to a document will result in a large diff because you had to renumber all subsequent entries. Take a look at this change and try to answer the question of &amp;ldquo;what is this doing?&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">&lt;span class="gd">--- before 2022-07-07 05:50:28.439334000 -0700
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+++ after 2022-07-07 05:50:48.189334000 -0700
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>&lt;span class="gu">@@ -1,3 +1,4 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">&lt;/span> 1. This item comes first.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">-2. This item is in the middle.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">-3. This item comes last.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+2. This item is also in the middle.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+3. This item is in the middle.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+4. This item comes last.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This patch is simply adding a new item in position 2, but the change had to end up touching two extra unrelated lines. This is hard to review and pollutes the output of &lt;code>git blame&lt;/code> (or whichever equivalent annotation command your VCS provides).&lt;/p>
&lt;p>The easiest way out of this problem is to &lt;em>not&lt;/em> number your lists sequentially. Instead, always prefix them with &lt;code>1.&lt;/code>, like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="k">1.&lt;/span> First.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">1.&lt;/span> Second, really.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">1.&lt;/span> Third. Yes, this works!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Doing so will free you from having to maintain sequential list numbers and will also keep diffs clean. Going back to our previous example, adding an item in position 2 would look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">&lt;span class="gd">--- before 2022-07-07 05:53:31.549334000 -0700
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+++ after 2022-07-07 05:53:33.429334000 -0700
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>&lt;span class="gu">@@ -1,3 +1,4 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gu">&lt;/span> 1. This item comes first.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+1. This item is also in the middle.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> 1. This item is in the middle.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1. This item comes last.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Clean and to the point.&lt;/p>
&lt;h1 id="nested-elements">Nested elements&lt;/h1>
&lt;p>The other problem when formatting lists comes from complex lists that have more than just one paragraph per item or higher-level blocks within them. Inevitably, people new to Markdown will write things like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the first bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> We try to add a second paragraph, but it may not be within the item.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the second bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> And we want a code block within it, but this is not a code block!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Neither is this!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the third bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k"> &amp;gt; &lt;/span>&lt;span class="ge">And we try to add a blockquote like we added a second paragraph, but fail.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above will not be formatted as you expect. The second paragraph in the first list item may or may not end up rendered as a paragraph within the list item. The code blocks in the second list item may or may not be rendered as a code block, but if they are, they will &lt;em>not&lt;/em> be nested. And if you try to nest lists, all bets are off.&lt;/p>
&lt;p>These problems don&amp;rsquo;t look apparent in the raw Markdown text and they are difficult to spot in document previews unless you pay close attention to the rendering. Most people don&amp;rsquo;t seem to notice when code blocks are wider than they are supposed to be, for example, or when paragraphs are not correctly aligned within their container list items.&lt;/p>
&lt;p>Plus it&amp;rsquo;s not only about the looks. These formatting mistakes break the &lt;em>semantics&lt;/em> of the document: instead of having a single list with longer individual elements, you end up with &lt;em>two&lt;/em> disjoint lists. I don&amp;rsquo;t have experience with screen readers, but I&amp;rsquo;m pretty sure this poses an accessibility problem.&lt;/p>
&lt;p>The above problems are fixable, obviously. If we look at the &lt;a href="https://www.markdownguide.org/basic-syntax#adding-elements-in-lists">Adding Elements in Lists&lt;/a> section of the &lt;a href="https://www.markdownguide.org/">Markdown Guide&lt;/a> website, we&amp;rsquo;ll find examples on how to correctly nest elements. Their suggestion is this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the first bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> This is a second paragraph within the first item.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the second bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> This is a code block within it.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the third bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k"> &amp;gt; &lt;/span>&lt;span class="ge">This is a blockquote within it.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These work as intended, but to me, they look like a huge mess. If I were reviewing the above, I would have a hard time understanding if the nesting is correct, and to the untrained eye, this just looks wrong. I wouldn&amp;rsquo;t fault anyone coming up with a PR to &amp;ldquo;realign&amp;rdquo; the lines above so that they &amp;ldquo;look&amp;rdquo; correct in their textual form.&lt;/p>
&lt;p>My suggestion to fix the above is to always indent list item content to multiples of 4 columns, like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the first bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> This is a continuation paragraph, and it works.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the second bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> With a nested code block.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> This is the third bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k"> &amp;gt; &lt;/span>&lt;span class="ge">With a nested blockquote.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which works equally well for ordered lists &lt;em>and&lt;/em> lists with multiple levels:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> First bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">1.&lt;/span> Nested ordered list.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">1.&lt;/span> With multiple items.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> And a code block.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">*&lt;/span> Second bullet point.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k"> &amp;gt; &lt;/span>&lt;span class="ge">And a blockquote.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note how there are 3 spaces after the &lt;code>*&lt;/code> prefixes and 2 spaces after the &lt;code>1.&lt;/code> prefixes. I&amp;rsquo;ll agree that this doesn&amp;rsquo;t look super neat in textual form, but it is &lt;em>consistent&lt;/em>, easy to understand, and works all the time.&lt;/p>
&lt;h1 id="markdownlint-configuration-for-vscode">markdownlint configuration for VSCode&lt;/h1>
&lt;p>I strongly recommend everyone that authors Markdown content:&lt;/p>
&lt;ol>
&lt;li>to use Visual Studio Code;&lt;/li>
&lt;li>to install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint">markdownlint extension&lt;/a>, and&lt;/li>
&lt;li>to address all squiggly lines that indicate Markdown formatting mistakes.&lt;/li>
&lt;/ol>
&lt;p>If you use these tools, you can apply the following configuration entries to enforce the style suggestions given in this post:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;markdownlint.config&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;MD007&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// Unordered list indentation.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;indent&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;MD029&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// Ordered list item prefix.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;style&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;one&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;MD030&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// Spaces after list markers.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;ol_single&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;ol_multi&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;ul_single&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;ul_multi&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I have yet to set up PR validation automation to run &lt;a href="https://github.com/DavidAnson/markdownlint">markdownlint&lt;/a> directly on the content and fail PR merges on mistakes&amp;hellip; but this is an idea I&amp;rsquo;ve just had as I was writing this 😉&lt;/p></description></item><item><title>Speeding up autoconf with caching</title><link>https://jmmv.dev/2022/06/autoconf-caching.html</link><pubDate>Fri, 17 Jun 2022 06:30:00 -0700</pubDate><guid>https://jmmv.dev/2022/06/autoconf-caching.html</guid><description>&lt;p>In the recent &lt;a href="/2022/05/remembering-buildtool.html">Remembering Buildtool&lt;/a> post, I described how setting up a cache of configuration checks was an important step in Buildtool&amp;rsquo;s installation process. The goal was to avoid pointless repetitive work on every build by performing such common checks once.&lt;/p>
&lt;p>&lt;a href="https://www.bsdnow.tv/457">Episode 457 of BSD Now&lt;/a> featured my post and Allan Jude wondered how much time would be saved in a bulk build of all FreeBSD packages if we could just do that same kind of caching with GNU Autoconf. And, you know what? It is indeed possible to do so. I had mentioned it en passing in my post but I guess I wasn&amp;rsquo;t clear enough, so let&amp;rsquo;s elaborate!&lt;/p>
&lt;h1 id="the-problem-autoconfs-slowness">The problem: Autoconf&amp;rsquo;s slowness&lt;/h1>
&lt;p>The &lt;code>configure&lt;/code> scripts generated by GNU Autoconf are slow, &lt;em>very&lt;/em> slow, to the point where sometimes their execution time is longer than the time it takes to build the package they configure. This is especially true on multi-core systems where these scripts make builds drag along.&lt;/p>
&lt;p>Here, take a look at some package build times on an 8-core machine from 2011:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Package&lt;/th>
&lt;th>Type&lt;/th>
&lt;th style="text-align:right">&lt;code>configure&lt;/code>&lt;/th>
&lt;th style="text-align:right">&lt;code>make -j8&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>bmake&lt;/td>
&lt;td>Small C package&lt;/td>
&lt;td style="text-align:right">8s&lt;/td>
&lt;td style="text-align:right">7s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>coreutils&lt;/td>
&lt;td>Medium C package&lt;/td>
&lt;td style="text-align:right">62s&lt;/td>
&lt;td style="text-align:right">96s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>m4&lt;/td>
&lt;td>Small C package&lt;/td>
&lt;td style="text-align:right">36s&lt;/td>
&lt;td style="text-align:right">9s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pkgconf&lt;/td>
&lt;td>Small C package&lt;/td>
&lt;td style="text-align:right">3s&lt;/td>
&lt;td style="text-align:right">2s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kyua&lt;/td>
&lt;td>Small C++ package&lt;/td>
&lt;td style="text-align:right">6s&lt;/td>
&lt;td style="text-align:right">91s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tmux&lt;/td>
&lt;td>Small C package&lt;/td>
&lt;td style="text-align:right">7s&lt;/td>
&lt;td style="text-align:right">8s&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>For comparison, here are two of the builds above&amp;mdash;I did not have the patience to run them all&amp;mdash;on an even older single-core PowerBook G4 from 2005:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Package&lt;/th>
&lt;th>Type&lt;/th>
&lt;th style="text-align:right">&lt;code>configure&lt;/code>&lt;/th>
&lt;th style="text-align:right">&lt;code>make -j1&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>bmake&lt;/td>
&lt;td>Small C package&lt;/td>
&lt;td style="text-align:right">44s&lt;/td>
&lt;td style="text-align:right">60s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tmux&lt;/td>
&lt;td>Small C package&lt;/td>
&lt;td style="text-align:right">46s&lt;/td>
&lt;td style="text-align:right">217s&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Note the huge cost of the &lt;code>configure&lt;/code> run times &lt;em>relative to&lt;/em> &lt;code>make&lt;/code>.&lt;/p>
&lt;p>You might think that slow &lt;code>configure&lt;/code> scripts aren&amp;rsquo;t a big deal, but pause for a second to realize that these scripts plague the entire Unix ecosystem. Almost every package in your standard Linux distribution or BSD system has a &lt;code>configure&lt;/code> script of its own, and this script has to run before the package can be built. Considering that this ecosystem favors small source packages, each with its own &lt;code>configure&lt;/code> script, the costs add up quickly.&lt;/p>
&lt;p>But wait, it gets even worse. All BSD systems and some Linux distributions have some form of &lt;strong>bulk build&lt;/strong>: a long-running process where they rebuild their entire collection of binary packages at once from source. These binary packages are the ones you can later trivially install via, say, &lt;code>pkg&lt;/code> on FreeBSD or &lt;code>dnf&lt;/code> on Fedora. These bulk builds take several hours &lt;em>at best&lt;/em> on the most powerful machines and several &lt;em>weeks&lt;/em> (or is it months?) at worst on legacy platforms. I don&amp;rsquo;t have hard numbers, but based on the simple data presented above, I think it&amp;rsquo;s fair to assume that a large percentage of the total build time is wasted on &lt;code>configure&lt;/code> scripts&amp;mdash;and most of this time is stupidly spent doing the same work over and over and over again.&lt;/p>
&lt;p>Can we do anything to make these runs faster? Yes, it turns out we can. But before getting into that, lets explore why these scripts are so slow and why they are still a big problem even on modern multi-core machines.&lt;/p>
&lt;h1 id="why-are-configure-scripts-slow">Why are configure scripts slow?&lt;/h1>
&lt;p>The reasons &lt;code>configure&lt;/code> scripts are slow are varied:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>They are huge shell scripts. &lt;code>bmake&lt;/code>&amp;rsquo;s &lt;code>configure&lt;/code> to take just one example is about 210kb with a total of 7500 lines. The shell is a language that doesn&amp;rsquo;t win any speed tests.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>They are creating, compiling and running&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> small programs to verify features of the host system.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>They are sequential and mostly I/O-bound (again, they are shell scripts), which is the worst kind of sequential.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&amp;rsquo;nuf said.&lt;/p>
&lt;h1 id="parallel-builds-to-the-rescue">Parallel builds to the rescue?&lt;/h1>
&lt;p>&amp;ldquo;Ah, but it doesn&amp;rsquo;t matter&amp;rdquo;, you say. &amp;ldquo;While the &lt;code>configure&lt;/code> script of one package may be slow, we are building thousands of packages in a bulk build. Therefore, we can make use of parallelism to hide the costs!&amp;rdquo; Yeah&amp;hellip; not really.&lt;/p>
&lt;p>You see, the end-to-end build of a package tends to be bimodal: the &lt;code>configure&lt;/code> script is slow, I/O-bound, and sequential, while the build itself is typically reasonably parallel and CPU-bound. (Actually, the end-to-end process is trimodal if we account for the I/O-bound installation step, but let&amp;rsquo;s ignore that in this post.)&lt;/p>
&lt;p>These different kinds of resource consumption at different stages pose problems when trying to parallelize the build of independent packages.&lt;/p>
&lt;p>Suppose we have a machine with 8 CPUs and that every package&amp;rsquo;s build stage is parallel enough to consume up to 4 CPUs at any given time. If we try to build 8 of these packages in parallel to paper over the fact that &lt;code>configure&lt;/code> is sequential, we&amp;rsquo;ll have good cases where we are running the 8 scripts at once and making an OK use of resources. Unfortunately, we&amp;rsquo;ll also have bad cases where the 8 packages are in their build stage trying to use 4 CPUs each, which means we&amp;rsquo;ll have 32 CPU-hungry processes scheduling on 8 CPUs. The latter scenario is more likely than the former so this is not great.&lt;/p>
&lt;p>To &amp;ldquo;fix&amp;rdquo; this under bulk build scenarios, we could say that we don&amp;rsquo;t want to allow parallel builds within a package (i.e. we restrict each build to &lt;code>make -j1&lt;/code>) to keep every package limited to one CPU at most. But if we do that, we&amp;rsquo;ll introduce major choke points in the bulk build because some packages, like &lt;code>clang&lt;/code>, are depended on by almost everything and take forever to build without parallelism.&lt;/p>
&lt;h1 id="repeated-work">Repeated work&lt;/h1>
&lt;p>The worst part of all is that a lot of the work that &lt;code>configure&lt;/code> scripts do is pure waste. How many times do you &lt;em>really&lt;/em> need to check during the build of multiple packages that your system has a C compiler? And &lt;code>stdlib.h&lt;/code>? And &lt;code>uint8_t&lt;/code>? And a &lt;em>Fortran&lt;/em> compiler? FFS. Most of these checks are useless in most packages (&lt;code>configure&lt;/code> scripts are cargoculted and almost nobody understands them), and for those that are useful, their answers aren&amp;rsquo;t going to change for the duration of the build. Heck, the answers are likely not going to change for the lifetime of the entire system either.&lt;/p>
&lt;p>This is particularly frustrating when you want to revive an old machine&amp;mdash;like the PowerBook G4 I mentioned above&amp;mdash;where the only option to get modern software is to build it yourself. Doing so is exasperating because you spend most of your time witnessing &lt;code>configure&lt;/code> scripts doing repeated work and very little time building the code you want to run.&lt;/p>
&lt;p>All hope is not lost though. I&amp;rsquo;m sure you have occasionally noticed this: when you run &lt;code>configure&lt;/code> in a large project that has recursive &lt;code>configure&lt;/code> invocations, you&amp;rsquo;ll often see &lt;code>(cached)&lt;/code> next to individual checks. In other words, these scripts do know how to reuse results from previous invocations.&lt;/p>
&lt;p>So, wouldn&amp;rsquo;t it be great if we convinced &lt;code>configure&lt;/code> to avoid doing repeated work across packages? Couldn&amp;rsquo;t we check for these details just &lt;em>once&lt;/em> and reuse cached results later? Well, yes, yes we can!&lt;/p>
&lt;h1 id="say-hello-to-gnu-autoconf-caching">Say hello to GNU Autoconf caching&lt;/h1>
&lt;p>GNU Autoconf does have first-class caching features. Using them within a single package is trivial. All we have to do is pass the &lt;code>--config-cache&lt;/code> flag to the script as described in the &lt;a href="https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.71/html_node/Cache-Files.html">Cache Files section of the manual&lt;/a> and it will maintain a &lt;code>config.cache&lt;/code> file with the results of the invocation. You can see the impact of a perfect cache here:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">.../m4-1.4.19$ time ./configure --config-cache &amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./configure &amp;gt; /dev/null 16.32s user 12.18s system 90% cpu 31.660 total
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.../m4-1.4.19$ time ./configure --config-cache &amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./configure --config-cache &amp;gt; /dev/null 1.45s user 0.77s system 108% cpu 2.045 total
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In other words, &lt;code>configure&lt;/code>&amp;rsquo;s time went from 31 seconds to just 2 by saving and reusing the previous results. (Note that this is &lt;em>different&lt;/em> than running &lt;code>config.status&lt;/code>, which just recreates output files, but let&amp;rsquo;s leave that aside.)&lt;/p>
&lt;p>This is nice for a single package, but as it turns out, the &lt;code>--config-cache&lt;/code> flag takes an optional parameter to specify the path to the cache file. There is nothing preventing us from passing a path to a central location and reusing the same cache for various packages!&lt;/p>
&lt;p>In fact, the GNU Autoconf developers have thought about this problem. On the one hand, the tool supports setting up a system-wide configuration file (known as &lt;code>config.site&lt;/code>) as described in the &lt;a href="https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.71/html_node/Site-Defaults.html">Setting Site Defaults section of the manual&lt;/a>. And on the other hand, the default code snippet that they show in the manual has an explicit mention of using a system-wide cache:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl"># Give Autoconf 2.x generated configure scripts a shared default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># cache file for feature test results, architecture-specific.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">if test &amp;#34;$cache_file&amp;#34; = /dev/null; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache_file=&amp;#34;$prefix/var/config.cache&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # A cache file is only valid for one C compiler.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CC=gcc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It wouldn&amp;rsquo;t be easier, really, to cache results, right? But then&amp;hellip; why aren&amp;rsquo;t we collectively using this feature more widely? Well, caching &lt;code>configure&lt;/code> results willy-nilly can cause random build failures because the checks performed by one package aren&amp;rsquo;t necessarily equivalent to similar-looking checks in another. An obvious case is when the results of a check depend on the results of a previous check: for cache correctness, any two scripts need to run these two checks in the same order, but there is no guarantee that they&amp;rsquo;ll do so.&lt;/p>
&lt;p>If we want to have system-wide caching of reasonable safety, we need to do better than simply pointing all &lt;code>configure&lt;/code> runs to a central cache file. And this is where &lt;code>autoswc&lt;/code> enters the picture.&lt;/p>
&lt;h1 id="enter-autoswc">Enter autoswc&lt;/h1>
&lt;p>&lt;a href="https://pkgsrc.se/pkgtools/autoswc">&lt;code>autoswc&lt;/code>&lt;/a>, whose name stands for &lt;em>Automatic System-Wide Configuration&lt;/em> and was brought to you by yours truly in 2004, is a little tool that exposes GNU Autoconf system-wide caching facilities in a safe manner.&lt;/p>
&lt;p>The key idea behind &lt;code>autoswc&lt;/code> is that you (the administrator) create a system-wide &lt;code>configure&lt;/code> script with the list of checks you want to cache and then run &lt;code>autoswc&lt;/code> to refresh the cache at specific points in time (say before performing a bulk build). Then, any build you perform from within &lt;code>pkgsrc&lt;/code> (the tool is specific to this packaging system), will reuse those checks&amp;mdash;but these arbitrary builds won&amp;rsquo;t contaminate the central cache.&lt;/p>
&lt;p>Put it another way: &lt;code>autoswc&lt;/code> helps define a cache of safe checks and automates the process of using those during bulk builds minimizing the risks of bad things happening due to cache contamination.&lt;/p>
&lt;p>Using this tool is easy. I had not used it in &lt;em>years&lt;/em>, but installing it from pkgsrc and setting it up only required these steps. Just like with Buildtool, I&amp;rsquo;m surprised such old code of mine still works:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Install the &lt;code>pkgtools/autoswc&lt;/code> package.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Optionally copy &lt;code>/usr/pkg/share/autoswc/configure.ac&lt;/code> to &lt;code>/usr/pkg/etc/autoswc/configure.ac&lt;/code> and extend the sample script with the checks you want to cache.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Append &lt;code>.sinclude &amp;quot;/usr/pkg/share/autoswc/autoswc.mk&amp;quot;&lt;/code> to &lt;code>/etc/mk.conf&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Occasionally run &lt;code>autoswc&lt;/code> from the command line to update the cache.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Voila. All package builds done through pkgsrc now benefit from the cached configuration results generated by the files in step 2.&lt;/p>
&lt;p>Unfortunately, as good as this may seem, &lt;code>autoswc&lt;/code>&amp;rsquo;s results aren&amp;rsquo;t impressive. The main problem is that it&amp;rsquo;s on you (the administrator) to curate the list of checks to cache. This is a very difficult task as it requires looking at what &lt;code>configure&lt;/code> scripts are doing throughout a bulk build and determining which checks are safe to cache and which aren&amp;rsquo;t, and ain&amp;rsquo;t nobody have time for that.&lt;/p>
&lt;p>I think my hope when I created this tool was that we&amp;rsquo;d get a swarm of people with pkgsrc expertise to curate the predefined list of checks in the sample &lt;code>configure.ac&lt;/code> file and then we&amp;rsquo;d all benefit from the results on our own machines and on the bulk build clusters&amp;hellip; but this obviously did not happen. But the feature in GNU Autoconf exists, &lt;code>autoswc&lt;/code> is still functional and trivially configurable, and with some effort it could potentially bring some tangible speed improvements to builds&amp;mdash;especially on old hardware.&lt;/p>
&lt;p>Anyhow, now you know about one more &amp;ldquo;hidden&amp;rdquo; feature that GNU Autoconf has and that can potentially speed things up in repeated package builds massively.&lt;/p>
&lt;p>Thanks for reading and enjoy the weekend!&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Avid readers will note that another consequence of &lt;em>running&lt;/em> the test programs that &lt;code>configure&lt;/code> creates is that &lt;code>configure&lt;/code> scripts are often terrible when trying to cross-build software for other platforms. The test programs must be built for the target system in order to provide correct results, but that means that they cannot be run on the host.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>EndBASIC 0.9: Run shared demos easily</title><link>https://jmmv.dev/2022/06/endbasic-0.9.html</link><pubDate>Sun, 05 Jun 2022 17:20:00 -0700</pubDate><guid>https://jmmv.dev/2022/06/endbasic-0.9.html</guid><description>&lt;p>It is with great pleasure that I announce the release of EndBASIC 0.9.0 😎️.&lt;/p>
&lt;p>The major feature in this new release is the ability to &lt;strong>launch publicly-shared files via a click of a URL&lt;/strong> without having to create an account first. Here, try running my &lt;a href="https://repl.endbasic.dev/?run=jmmv/bounce.bas">&lt;code>jmmv/bounce.bas&lt;/code>&lt;/a> or &lt;a href="https://repl.endbasic.dev/?run=jmmv/paint.bas">&lt;code>jmmv/paint.bas&lt;/code>&lt;/a> demos in your browser, now!&lt;/p>
&lt;p>This may seem like a small feature not worthy of a new release, but it is a game-changer for two reasons. First, the backend has undergone massive changes to support this, which in turn have allowed me to fulfill my original vision for the cloud service. And, second, this lets passersby trivially play with anything you create. The barrier to entry is now much lower for new developers as well as observers.&lt;/p>
&lt;p>This release includes other changes as well, primarily around fixing UTF8-related crashes in the command line and the editor. These are special and worth calling out because they are the first substantial code contributions from a user, &lt;a href="https://github.com/zenria">@zenria&lt;/a>. Thanks!&lt;/p>
&lt;p>Finally, &lt;strong>the website now includes a &lt;a href="https://www.endbasic.dev/docs.html">User&amp;rsquo;s manual&lt;/a>&lt;/strong>. This manual is intended to provide an overview of the features in EndBASIC and how they all tie together, and I hope can help get an overview of what&amp;rsquo;s supported before even diving into the language. Note that this is not meant as a replacement for the built-in reference documentation, whose primary source is still within the interpreter.&lt;/p>
&lt;p>Here are the links you need to get started:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://repl.endbasic.dev/">Launch the online interpreter&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://www.endbasic.dev/">Visit the EndBASIC website&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://github.com/endbasic/endbasic/releases/tag/endbasic-0.9.0">Read the release notes&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Please &lt;a href="mailto:support@endbasic.dev">let me know&lt;/a> if you encounter any issues.&lt;/p>
&lt;p>Enjoy and keep reading if you want to know more about what has happened behind the scenes, as this release has taken about 2 months of early morning and weekend work.&lt;/p>
&lt;h1 id="refactoring-authentication">Refactoring authentication&lt;/h1>
&lt;p>Modifying the EndBASIC cloud service to support unauthenticated access to publicly shared files has been&amp;hellip; very difficult.&lt;/p>
&lt;p>To set some context, the cloud service grew as an experiment of mine to learn more about Azure. As such, I ended up using Azure Active Directory (AAD) for authentication and Azure Functions as the runtime for the service. This combination works nicely if you choose to enable authentication in the Azure Functions configuration: the runtime will handle integration with AAD for you and only allow authenticated calls to go through.&lt;/p>
&lt;p>Unfortunately, setting up authentication on an Azure Functions instance is an all-or-nothing option. Either you protect the whole service with authentication or you don&amp;rsquo;t. It&amp;rsquo;s not possible to serve some authenticated and some unauthenticated endpoints at once from the same deployment. Well, it &lt;em>is&lt;/em> possible if you roll your own bearer token validation, but that requires a significant amount of code. I suppose that the Azure SDKs for officially-supported languages such as C# let you do this with ease, but the Rust SDK is&amp;hellip; well&amp;hellip; lacking.&lt;/p>
&lt;p>I had various options here:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>I could have come up with a humongous hack by deployed two separate Azure Functions instances: one with authentication as before, and one without authentication to support this new use case. This would have required adding a simple knob in the code to configure the latter deployment to only allow access to public content. But&amp;hellip; this is how operational complexity is made when launch schedules dictate cutting corners.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I could have implemented my own bearer token validation. In fact, I did research this quite a bit and had it almost working, but I stopped before implementing signature validation because this required fetching and caching service-specific public keys with certain refresh periods&amp;hellip; and I was lazy to code it all.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I could have dropped AAD altogether and implemented my own account management and authentication mechanism.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>And option 3 is, of course, the one I chose.&lt;/p>
&lt;p>Now, before you call me reckless, there is a good reason I went for option 3 and implemented my own authentication flow. The reason was to avoid OAuth&amp;mdash;there are &lt;a href="https://www.ory.sh/oauth2-openid-connect-do-you-need-use-cases-examples/">good reasons to do so&lt;/a>!&amp;mdash;which had prevented me from implementing the signup flow I wanted to have from the very beginning.&lt;/p>
&lt;h1 id="account-creation">Account creation&lt;/h1>
&lt;p>EndBASIC 0.9 implements the original vision I had for account creation, which is made possible by the cloud service &lt;em>not&lt;/em> using OAuth any longer.&lt;/p>
&lt;p>Before this release, you had to visit the EndBASIC web site to start an account creation flow in AAD, go through that bland process, and then come back to the interpreter to log in. What I really wanted from the very beginning was to have a &lt;code>SIGNUP&lt;/code> command within the interpreter that acted like &lt;code>adduser&lt;/code> on FreeBSD, and this is now what we have:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">Ready
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SIGNUP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Let&amp;#39;s gather some information to create your cloud account.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> You can abort this process at any time by hitting Ctrl+C and you will
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> be given a chance to review your inputs before creating the account.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Username: demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Password: *********
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Retype password: *********
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[...]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Continue (y/N)? y
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Your account has been created and is pending activation.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Check your email now and look for a message from the EndBASIC Service.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Follow the instructions in it to activate your account. Make sure to
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> check your spam folder.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The client aspects of this were trivial to implement, but the service side wasn&amp;rsquo;t. To make this work, I had to implement the account signup flow with email validation, which means I had to generate and track account activation codes, deal with secure password hashing, and integrate with SendGrid to send service-related emails. Not inherently difficult code to be honest, but getting the tests updated was painful.&lt;/p>
&lt;h1 id="lost-accounts">Lost accounts&lt;/h1>
&lt;p>Everything sounds great but there are some bad news, unfortunately. Rolling my own account management means that I had to migrate user accounts from AAD to my own accounts system. Which was doable&amp;hellip; except for passwords. For obvious reasons, AAD doesn&amp;rsquo;t store raw passwords, which means it&amp;rsquo;s just impossible to fetch them and put them in a different database. But I could have migrated the accounts by hand and emailed all account owners to reset their password, right?&lt;/p>
&lt;p>Well&amp;hellip; you see, while I had configured the AAD signup flow to perform email validation and I had code in the service to save the email claim in the OAuth token in the shadow accounts table&amp;hellip; I had misconfigured the OAuth login flow by forgetting to enable email claim propagation. This means that my service never saw the email addresses and they were never stored in AAD. Simply put, I have no way of contacting previous account owners.&lt;/p>
&lt;p>Considering that there were only a few accounts and that they are mostly inactive, wiping everything didn&amp;rsquo;t seem like a big deal and is what I did. Apologies for the hassle.&lt;/p>
&lt;p>Fear not, though: I have a backup of all previous data so if you want me to recover anything for you, just let me know.&lt;/p>
&lt;h1 id="whats-next">What&amp;rsquo;s next?&lt;/h1>
&lt;p>I had bigger plans for this release. On top of public file sharing, I planned to finally add support for user-defined functions, &lt;code>GOTO&lt;/code> and &lt;code>GOSUB&lt;/code>, file system directories, and maybe even automatic numeric type promotion. But because the changes to the cloud service turned out to be so intrusive and required a database wipeout, I preferred to cut scope and get this launched ASAP to get the new code exercised and avoid losing even more data.&lt;/p>
&lt;p>The aforementioned features should come in 0.10 though, so stay tuned for a much better language! A great way to do this is to &lt;a href="https://repl.endbasic.dev/">launch the interpreter&lt;/a>, create an account with &lt;code>SIGNUP&lt;/code>, and opt into receiving promotional (release announcements) emails! Or you can subscribe to this blog with the buttons below.&lt;/p>
&lt;p>Thanks for reading, and have fun 😁️.&lt;/p></description></item><item><title>Remembering Buildtool</title><link>https://jmmv.dev/2022/05/remembering-buildtool.html</link><pubDate>Fri, 13 May 2022 09:50:00 -0700</pubDate><guid>https://jmmv.dev/2022/05/remembering-buildtool.html</guid><description>&lt;p>Build systems are one of my favorite topics in software engineering. If I recall correctly, my interest in this area started when I got into NetBSD in 2002&amp;mdash;20 years ago&amp;mdash;and became a pkgsrc contributor. Packaging software for NetBSD made me &lt;a href="/2005/03/making-packager-friendly-software-1.html">fight various build systems&lt;/a> and, in particular, experience the pains of debugging the GNU Autotools.&lt;/p>
&lt;p>Around that same time, I was also writing &lt;a href="/software/menu2wm.html">small&lt;/a> &lt;a href="/software/vcsme.html">tools&lt;/a> &lt;a href="/software/xmlcatmgr.html">here&lt;/a> &lt;a href="/software/sysbuild.html">and&lt;/a> &lt;a href="/software/pkg_comp.html">there&lt;/a>. Out of inertia, I used the GNU Autotools for these and, the more I used them, the more I saw an opportunity for improvement. The GNU Autotools were slow, hard to deal with, and they bloated every package. Why did you have to ship heavy &lt;code>configure&lt;/code>, &lt;code>Makefile.in&lt;/code> and &lt;code>libtool&lt;/code> scripts in every single distribution file when you could instead rely on a few system-wide scripts? And thus &lt;a href="/software/buildtool.html">Buildtool&lt;/a> was born in the summer of 2002, just before I started college, and I worked on it for about two years.&lt;/p>
&lt;p>The Buildtool project recently came to mind and I noticed that &lt;a href="http://buildtool.sourceforge.net/">its website is still up and running&lt;/a> (kudos to SourceForge for that), so I poked around a bit. Just by looking at the &lt;a href="http://buildtool.sourceforge.net/docs/manual/index.html">User&amp;rsquo;s Manual&lt;/a>, I&amp;rsquo;m amazed by how comprehensive the tool is and makes me jealous of how much free time I had back then. Since noticing this, I had been meaning to try the tool again and write a post, and finally got to it just yesterday. So let&amp;rsquo;s take a tour of what Buildtool was and what it achieved.&lt;/p>
&lt;h1 id="history">History&lt;/h1>
&lt;p>Buildtool was originally inspired by the FreeBSD and NetBSD build systems. The idea was to leverage system-wide generic build logic files to build libraries and binaries&amp;mdash;just like &lt;code>bsd.lib.mk&lt;/code> and &lt;code>bsd.prog.mk&lt;/code> provide&amp;mdash;and have arbitrary packages rely on those installed files. As an end user, you would have to install Buildtool first before you could build any other package, but you would only pay the cost of the build infrastructure once. While this paradigm is accepted today, it was quite a departure from the traditions of Unix systems in the early 2000s.&lt;/p>
&lt;p>Buildtool&amp;rsquo;s first version in 2002 was precisely what the NetBSD build system was. The 0.1 release shipped with a copy of NetBSD&amp;rsquo;s &lt;code>make&lt;/code> tool, renamed as &lt;code>bt_make&lt;/code>, along with a few &lt;code>mk&lt;/code> files to build common targets. That release also included a rudimentary GNU Autoconf-like tool.&lt;/p>
&lt;p>Later on, Buildtool grew a &lt;code>bt_wrap&lt;/code> helper utility to deal with platform incompatibilities when invoking common tools such as the compiler. This idea was inspired by pkgsrc&amp;rsquo;s buildlink3 and wrappers infrastructure, which to this day still wrap the compiler and linker to paper over platform-specific oddities. Reading through the release notes, I can see how this helped make Buildtool work on Cygwin and Mac OS X systems of the day.&lt;/p>
&lt;p>Towards the latest releases of the project by 2004, things took a significant turn: &lt;code>bt_make&lt;/code> and &lt;code>bt_wrap&lt;/code> were removed in favor of &lt;code>bt_logic&lt;/code>, a custom-made build system purely based on shell scripts. If I recall correctly, the first version of &lt;code>bt_logic&lt;/code> was written in Perl, but it never shipped because having Buildtool rely on the gigantic Perl dependency was a non-starter.&lt;/p>
&lt;p>By the beginning of 2005, I cancelled the project for the reasons I&amp;rsquo;ll cover at the end of this post.&lt;/p>
&lt;h1 id="installing-buildtool">Installing Buildtool&lt;/h1>
&lt;p>The last release of Buildtool was 0.16, which was published on July 4th, 2004 (about 18 years ago) and is still available in the &lt;a href="http://buildtool.sourceforge.net/download.html">Downloads&lt;/a> page if you want to try it out.&lt;/p>
&lt;p>Buildtool itself was written in about 10,000 lines shell, but the distribution includes a slimmed down version of NetBSD&amp;rsquo;s &lt;code>/bin/sh&lt;/code> named &lt;code>bt_sh&lt;/code>. The raison d&amp;rsquo;être for &lt;code>bt_sh&lt;/code> was pretty much the same as Debian&amp;rsquo;s &lt;a href="https://manpages.debian.org/buster/dash/dash.1.en.html">&lt;code>dash&lt;/code>&lt;/a>: a portable, high-performance and standards-compliant shell interpreter to run scripts. &lt;code>bt_sh&lt;/code> helped keep Buildtool&amp;rsquo;s implementation simpler as it did not have to deal with &lt;code>sh&lt;/code> platform incompatibilities (Solaris&amp;rsquo; version was a pain). Furthermore, &lt;code>bt_sh&lt;/code> also ensured that the users of Buildtool writing their own build scripts wouldn&amp;rsquo;t have to &lt;a href="https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.71/html_node/Portable-Shell.html">care about shell portability&lt;/a>, as is the case when writing &lt;code>configure.ac&lt;/code> scripts.&lt;/p>
&lt;p>The reason I&amp;rsquo;m mentioning &lt;code>bt_sh&lt;/code> is because trying to build Buildtool 0.16 on a FreeBSD 13 system today fails due to a couple of bugs in the C code. Fixing those bugs is a matter of avoiding trivial conflicts among repeated symbols in different modules. After those simple fixes, Buildtool installs successfully:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">/tmp/buildtool-0.16$ ./configure -p /tmp/local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">configuring for buildtool-0.16
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for machine type: amd64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for program gcc: not found
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for program cc: /usr/bin/cc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking whether /usr/bin/cc is GNU C: yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[...]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">===========================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">BUILDTOOL 0.16 CONFIGURATION SUMMARY
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Installation prefix: /tmp/local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Configuration directory: /tmp/local/etc/buildtool
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Type `make&amp;#39; to start the build.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Type `make install&amp;#39; to install, only _after_ the build has finished.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">===========================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/buildtool-0.16$ make &amp;amp;&amp;amp; make install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[...]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">===========================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Buildtool 0.16 has been successfully installed!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Please take some time to read the `Testing&amp;#39; section in the README file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> to easily provide useful feedback. This will not take more than ten
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> minutes, but you will be contributing to the project.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> As part of the post installation stage, you should now create a system
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> configuration file for the bt_config module, containing cached results
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for several common checks run by many configure scripts.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> For an automated setup, issue the following commands:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mkdir -p /tmp/local/etc/buildtool
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cp /tmp/local/share/buildtool/templates/bt_config.conf.in \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /tmp/local/etc/buildtool/bt_config.conf.in
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /tmp/local/bin/buildtool swcgen
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Thanks for choosing Buildtool.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">===========================================================================
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="post-installation-configuration">Post-installation configuration&lt;/h1>
&lt;p>The installation process quoted above tells us that we should create a system-wide configuration file and then run &lt;code>buildtool swcgen&lt;/code>, which stands for &amp;ldquo;System-wide configuration generator&amp;rdquo;. Let&amp;rsquo;s poke at that file and try to follow the given steps.&lt;/p>
&lt;p>Here is what &lt;code>/tmp/local/share/buildtool/templates/bt_config.conf.in&lt;/code> has to say:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># $Id: bt_config.conf.in,v 1.8 2004/06/26 18:42:05 jmmv Exp $&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># bt_config.conf - System wide configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># File automatically generated by @BT_PKG_NAME@, version @BT_PKG_VERSION@.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Timestamp: @TIMESTAMP@&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># bt_config will open this file from @BT_DIR_ETC@.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># C/C++ environments (leave both for now, all other macros rely on them).&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_cache_env c cxx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Basic programs (C/C++ utilities handled by environments).&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_cache_prog info lex m4 sh yacc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Header files&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_cache_hdr sys/cdefs.h sys/utsname.h err.h poll.h stdarg.h stdbool.h ulimit.h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># C++ only header files&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_cache_hdr bitset deque fstream iostream list map queue &lt;span class="nb">set&lt;/span> stack string &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> vector
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Basic libraries&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_cache_lib m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># System specific functions&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_cache_func setenv strerror stricmp strlcat strlcpy strncat strncpy strndup &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> strftime poll readdir_r &lt;span class="nb">ulimit&lt;/span> uname vfork vsnprintf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Types&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_cache_type gid_t int8_t int16_t int32_t int64_t size_t uid_t uint8_t &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> uint16_t uint32_t uint64_t u_int8_t u_int16_t u_int32_t u_int64_t
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Type sizes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_cache_sizeof char short int long &lt;span class="s2">&amp;#34;long long&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Miscellaneous results&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_cache_attribute
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Interesting. This configuration file is all about &amp;ldquo;caching&amp;rdquo;. But caching what?&lt;/p>
&lt;p>You see, one of the problems I had with the GNU Autotools is how every single package I built and installed on my machine had to go through a very costly &lt;code>configure&lt;/code> invocation. It was mind-blowing to me (and still is &lt;em>today&lt;/em>) how many CPU hours the world burns on a day-to-day basis checking if a system has standard headers and functions. Couldn&amp;rsquo;t we check just &lt;em>once&lt;/em> and have all packages reuse the results? If the system has &lt;code>vfork&lt;/code>, for example, it will continue to have that function for the foreseeable future; there is no need to test for it over and over again.&lt;/p>
&lt;p>That&amp;rsquo;s precisely what the &lt;code>buildtool swcgen&lt;/code> command addresses: it executes all of the checks specified in the configuration file and installs those cached results for later reuse. Let&amp;rsquo;s see what the invocation looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ cp /tmp/local/share/buildtool/templates/bt_config.conf.in \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /tmp/local/etc/buildtool/bt_config.conf.in
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ /tmp/local/bin/buildtool swcgen
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Input: /tmp/local/etc/buildtool/bt_config.conf.in
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Output: /tmp/local/etc/buildtool/bt_config.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_swcgen: running bt_wizard to create temporary project skeleton
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Entering directory /tmp/bt_swcgen.1802... done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Creating directories... src
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Creating Generic.bt... done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Creating README.bt... done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Creating src/Logic.bt... done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_swcgen: generating configuration script and cache
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_config: starting configuration for bt_swcgen-0.16
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for program gcc... not found.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for program cc... /usr/bin/cc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for C compiler name... gnu
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for C compiler version... 13.0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for program cpp... /usr/bin/cpp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for program ld... /usr/bin/ld
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[...]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for program sh... /bin/sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for program yacc... /usr/bin/yacc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for c header sys/cdefs.h... yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for cxx header sys/cdefs.h... yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for c header sys/utsname.h... yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for cxx header sys/utsname.h... yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for c header err.h... yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for cxx header err.h... yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[...]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for c function vfork... yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for cxx function vfork... no
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for c function vsnprintf... yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for cxx function vsnprintf... no
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for c type gid_t... yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for cxx type gid_t... yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for c type int8_t... yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for cxx type int8_t... yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[...]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_config: creating bt_output
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_config: generating configuration environment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_config: generating package dependent build logic
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">===========================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Configuration summary for bt_swcgen-0.16:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Prefix is: /usr/local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Developer mode: yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Install documentation: yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Static libraries: no, Shared libraries: yes, rpath: yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">===========================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_swcgen: creating system wide configuration file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_output: creating /tmp/bt_swcgen.1802/conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_swcgen: /tmp/local/etc/buildtool/bt_config.conf created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">===========================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PLEASE NOTE THE FOLLOWING:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Installed: /tmp/local/etc/buildtool/bt_config.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> By using a system wide configuration file for bt_config that stores
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> check results, you assume that they may get obsoleted with respect to
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> your system, specially after software updates. Be careful to only
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> store results that are unlikely to change with time. Anyway, you are
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> encouraged to re-run this program periodically to regenerate the file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with new results.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> If a third party program fails to configure after a check that shows
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> the `(cached)&amp;#39; string in it, try to pass the `--ignore-sw-config&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> flag to bt_config before thinking it is a bug in your system or in
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> the package. DO NOT DISTURB SOFTWARE AUTHORS BEFORE DOUBLE CHECKING
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> THAT THERE IS A PROBLEM IN THEIR SOFTWARE. YOU HAVE BEEN WARNED.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">===========================================================================
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pretty impressive that this 18-year old code still works today, and running this shows precisely the problem that this was supposed to solve: computing these results took about 15 seconds on my modest server, and those are 15 seconds you would pay to build most software packages. When you are bulk-building all binary packages for a source-bootstrapped system (the common case in the BSD world), those quickly add up.&lt;/p>
&lt;p>By the way: Autoconf supports this same feature although I did not discover it until later. &lt;a href="https://pkgsrc.se/pkgtools/autoswc">&lt;code>autoswc&lt;/code>&lt;/a> is a follow-up tool I created for pkgsrc to implement this same idea. Using autoswc proved to be a nice speedup for daily operations when I was still an active pkgsrc maintainer. I suspect that most people are still unaware of this Autoconf feature, unfortunately.&lt;/p>
&lt;h1 id="commands-summary">Commands summary&lt;/h1>
&lt;p>Now that Buildtool is installed and configured, let&amp;rsquo;s poke around to see what it has to offer:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ /tmp/local/bin/buildtool --help
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">buildtool version 0.16
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">usage: buildtool [options] target [target_options]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Copyright (c) 2002, 2003, 2004 Julio M. Merino Vidal.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">This program is licensed under the terms of the BSD license.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Available options:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {-h,--help} Show detailed usage (this text).
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {-v,--version} Show version number.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {-w,--warnings} Enable bt_sh warning messages.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Available targets:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> build Build the package.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> clean Soft clean the package (keeps configuration data).
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cleandir Hard clean the package.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> config Automatically configure a package.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dist Generate a distribution file.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> deinstall Deinstalls the package.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> doc Read build-time package documentation.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> install Installs the package.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> lint Validate the package according to standards.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pkgflags Show compilation flags for an installed package.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> siteinfo Get site specific configuration details.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> swcgen Aid with creation of system-wide configuration files.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> test Run tests specific to the package after a successful build.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wizard Use an interactive wizard to create initial project files.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">See buildtool(1) for more information.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pretty standard output for a subcommand-based utility, but I can already see myself here. &lt;a href="/2013/08/cli-design-series-introduction.html">My style&lt;/a> in developing command-line tools hasn&amp;rsquo;t changed much since then.&lt;/p>
&lt;p>Anyhow. From the output above, we can distill the following command groups:&lt;/p>
&lt;ul>
&lt;li>&lt;code>config&lt;/code>: A configuration command to let each package discover system-wide features, obviously inspired by GNU Autoconf.&lt;/li>
&lt;li>&lt;code>build&lt;/code>, &lt;code>clean&lt;/code>, &lt;code>cleandir&lt;/code>, &lt;code>dist&lt;/code>, &lt;code>deinstall&lt;/code>, &lt;code>install&lt;/code>, &lt;code>test&lt;/code>: Build-related commands, some of which (like &lt;code>dist&lt;/code>) are inspired by GNU Automake.&lt;/li>
&lt;li>&lt;code>doc&lt;/code>: An interactive documentation viewer for a package&amp;rsquo;s &lt;code>README&lt;/code>, &lt;code>INSTALL&lt;/code>, etc. distribution documents. Interesting.&lt;/li>
&lt;li>&lt;code>pkgflags&lt;/code>: A replacement for the heavy-weight &lt;code>pkg-config&lt;/code>. These days we have &lt;a href="http://pkgconf.org/">pkgconf&lt;/a> instead, which is compatible with &lt;code>pkg-config&lt;/code>.&lt;/li>
&lt;li>&lt;code>wizard&lt;/code>: An interactive tool to create a new package, akin to what &lt;code>cargo init&lt;/code> would offer today.&lt;/li>
&lt;/ul>
&lt;h1 id="demo">Demo&lt;/h1>
&lt;p>Alright. Let&amp;rsquo;s now use Buildtool&amp;rsquo;s package creation wizard to initialize a new demo project. The wizard is interactive so I&amp;rsquo;m just going to post the completed output of what I typed:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ mkdir /tmp/demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cd /tmp/demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ /tmp/local/bin/buildtool wizard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Welcome to Buildtool&amp;#39;s Wizard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">This module will help you to set up a basic directory structure
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">for your project, based on your choices.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Each question has associated a default answer, shown inside the
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brackets. If you hit [RETURN] leaving a question in blank, it
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">will take the default value.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Project definitions:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Unix name [foobar]? demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Initial version [0.1]?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- License [bsd]?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Maintainer&amp;#39;s email [foo@bar.net]? julio@meroh.net
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Homepage (if any) []?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Short comment [Sample package]? Remembering Buildtool
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Code details:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Will this package provide one or more programs [y]?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Will this package provide one or more libraries [n]? y
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Will you use the C language [y]?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Will you use the C++ language [n]?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Will you use CVS [y]? n
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Dependancies:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Do you need pkgconfig (not bt_pkgflags) [n]?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Do you need threads [n]?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Do you need an X Window System [n]?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Do you need awk [n]?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Do you need a lexical analyzer [n]?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Do you need a LARL parser generator [n]?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Begin process:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Where should files be created [.]?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Creating directories... src data lib
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Creating Generic.bt... done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Creating README.bt... done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Creating src/Logic.bt... done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Creating lib/Logic.bt... done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Creating data/demo.bpf.in... done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Creating data/Logic.bt... done.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This asked many more questions than I expected. Looks like I implemented support for many different things.&lt;/p>
&lt;p>After completing the wizard, we are left with these files:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">/tmp/demo$ find . -type f | sort
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./Generic.bt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./README.bt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./data/Logic.bt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./data/demo.bpf.in
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./lib/Logic.bt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./src/Logic.bt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From the looks of it, we have a top-level configuration file called &lt;code>Generic.bt&lt;/code>, a mysterious &lt;code>data&lt;/code> directory with a &lt;code>bpf&lt;/code> file, a &lt;code>lib&lt;/code> directory to contain the library we&amp;rsquo;ll write, and a &lt;code>src&lt;/code> directory to contain the code of the program we&amp;rsquo;ll write.&lt;/p>
&lt;h2 id="the-top-level-genericbt-file">The top-level Generic.bt file&lt;/h2>
&lt;p>First, let&amp;rsquo;s look at the top-level &lt;code>Generic.bt&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Buildtool Generic Script&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">defs&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_REQUIRE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;0.16&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_PKG_NAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;demo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_PKG_VERSION&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;0.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_PKG_LICENSE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;bsd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_PKG_MAINTAINER&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;julio@meroh.net&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_PKG_COMMENT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Remembering Buildtool&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">config_init&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">config&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bt_check_env_c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bt_generate_output data/demo.bpf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bt_generate_configh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docs&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bt_doc CHANGES &lt;span class="s2">&amp;#34;Major changes between package versions&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bt_doc PEOPLE &lt;span class="s2">&amp;#34;Authors and contributors&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bt_doc README &lt;span class="s2">&amp;#34;General documentation&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bt_doc TODO &lt;span class="s2">&amp;#34;Missing things&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">logic&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bt_target lib data src
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Generic.bt&lt;/code> is the package-wide file where it all begins. This file is composed of a collection of user-defined functions that tell Buildtool what to do:&lt;/p>
&lt;ul>
&lt;li>&lt;code>defs&lt;/code>: Describes the package&amp;rsquo;s metadata, much like what &lt;code>Cargo.toml&lt;/code>, &lt;code>go.mod&lt;/code> or &lt;code>package.json&lt;/code> do today in popular ecosystems.&lt;/li>
&lt;li>&lt;code>config_init&lt;/code> and &lt;code>config&lt;/code>: Allow the package to request system feature checks. In other words, these contain what you would typically put in a &lt;code>configure.ac&lt;/code> file with GNU Autoconf.&lt;/li>
&lt;li>&lt;code>docs&lt;/code>: Configures documentation files, consumed both by the build process and by the &lt;code>buildtool doc&lt;/code> interactive viewer.&lt;/li>
&lt;li>&lt;code>logic&lt;/code>: The entry point to the build process, aka the equivalent of a top-level &lt;code>Makefile.am&lt;/code> file.&lt;/li>
&lt;/ul>
&lt;h2 id="creating-source-files">Creating source files&lt;/h2>
&lt;p>Before we can successfully build our demo, we have to perform a few edits to the source tree. The wizard didn&amp;rsquo;t tell us we had to do any of these, so I encountered various failures while I played with the tool. Fear not, it wasn&amp;rsquo;t too hard to get past these failures.&lt;/p>
&lt;p>First, let&amp;rsquo;s create the top-level documents referenced by the &lt;code>docs&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">/tmp/demo$ touch CHANGES PEOPLE README TODO
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, let&amp;rsquo;s look at what building the &lt;code>lib&lt;/code> subdirectory will require by looking at the &lt;code>lib/Logic.bt&lt;/code> build script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">logic&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bt_target demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> target_demo&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_LIB_MAJOR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_LIB_MINOR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_MANPAGES&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;demo.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_SOURCES&lt;/span>&lt;span class="o">=&lt;/span>func1.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_TYPE&lt;/span>&lt;span class="o">=&lt;/span>library
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_INCLUDESDIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BT_DIR_INC&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/demo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_INCLUDESDIR_demo_h&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BT_DIR_INC&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_INCLUDES&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;demo.h&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Based on this, let&amp;rsquo;s create the files &lt;code>lib&lt;/code> expects:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">/tmp/demo$ cat &amp;gt;lib/demo.h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">int func1(void);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">^D
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/demo$ cat &amp;gt;lib/func1.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">int func1(void) { return 42; }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">^D
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/demo$ touch lib/demo.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After that, let&amp;rsquo;s do the same with the &lt;code>src&lt;/code> subdirectory. Here is what the &lt;code>src/Logic.bt&lt;/code> build script will require:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">logic&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bt_target demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> target_demo&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_MANPAGES&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;demo.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_SOURCES&lt;/span>&lt;span class="o">=&lt;/span>main.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BT_TYPE&lt;/span>&lt;span class="o">=&lt;/span>program
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And, as before, let&amp;rsquo;s create the files &lt;code>src&lt;/code> expects:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">/tmp/demo$ cat &amp;gt;src/main.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#include &amp;lt;stdio.h&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#include &amp;#34;lib/demo.h&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">int main(void) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> printf(&amp;#34;Calling library: %d\n&amp;#34;, func1());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">^D
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/demo$ touch src/demo.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, because we have made the binary in &lt;code>src&lt;/code> depend on the library in &lt;code>lib&lt;/code>, we have to express this dependency in the &lt;code>src/Logic.bt&lt;/code> script. We can add these two lines to the &lt;code>target_demo&lt;/code> function in &lt;code>src/Logic.bt&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">BT_FLAGS_LD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BT_FLAGS_LD&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> -L../lib&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">BT_LIBS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BT_LIBS&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> -ldemo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="configuring-the-demo">Configuring the demo&lt;/h2>
&lt;p>We are ready to go. Let&amp;rsquo;s configure the demo project against our current system:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">/tmp/demo$ /tmp/local/bin/buildtool config -p /tmp/root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_config: loading system-wide configuration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_config: starting configuration for demo-0.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for program gcc cc bcc... /usr/bin/cc (cached)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for C compiler name... gnu (cached)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for C compiler version... 13.0.0 (cached)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for program cpp... /usr/bin/cpp (cached)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for program ld... /usr/bin/ld (cached)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for c header stdio.h... yes (cached)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for c header sys/types.h... yes (cached)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for c header sys/stat.h... yes (cached)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for c header stdlib.h... yes (cached)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for c header string.h... yes (cached)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for c header unistd.h... yes (cached)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for host system name... FreeBSD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for host system type... FreeBSD-13.1-STABLE-amd64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for program ar... /usr/bin/ar (cached)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for program ranlib... /usr/bin/ranlib (cached)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">checking for program fastdep... not found.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_config: creating bt_output
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_output: creating data/demo.bpf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_config: generating C include header
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_config: generating configuration environment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_config: generating package dependent build logic
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">===========================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Configuration summary for demo-0.1:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Prefix is: /tmp/root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Developer mode: no
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Install documentation: yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Static libraries: no, Shared libraries: yes, rpath: yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">===========================================================================
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pretty standard &lt;code>configure&lt;/code>-like output.&lt;/p>
&lt;p>What I want you to notice is how pretty much all results were cached. These results come from the system-wide cache we populated with &lt;code>swcgen&lt;/code> after installing Buildtool, so running this step was almost instantaneous. Good time savings.&lt;/p>
&lt;h2 id="building-the-demo">Building the demo&lt;/h2>
&lt;p>With a successful configuration step, let&amp;rsquo;s try to build:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">/tmp/demo$ /tmp/local/bin/buildtool build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: entering directory `lib&amp;#39; for `build&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[depend] func1.c -&amp;gt; func1.dep
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">c++: warning: treating &amp;#39;c&amp;#39; input as &amp;#39;c++&amp;#39; when in C++ mode, this behavior is deprecated [-Wdeprecated]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[compile] /usr/bin/cc -I/tmp/demo/lib -I/tmp/demo -I/tmp/demo -fPIC -DPIC -shared -o func1.po -c /tmp/demo/lib/func1.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cc: warning: argument unused during compilation: &amp;#39;-shared&amp;#39; [-Wunused-command-line-argument]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[link] /usr/bin/cc -Wl,-R/usr/local/lib -shared -Wl,-soname=libdemo.so.0 -o libdemo.so.0.1 func1.po
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[exec] ln -fs libdemo.so.0.1 libdemo.so.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[exec] ln -fs libdemo.so.0.1 libdemo.so
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: leaving directory `lib&amp;#39; for `build&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: entering directory `data&amp;#39; for `build&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: leaving directory `data&amp;#39; for `build&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: entering directory `src&amp;#39; for `build&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[depend] main.c -&amp;gt; main.dep
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">c++: warning: treating &amp;#39;c&amp;#39; input as &amp;#39;c++&amp;#39; when in C++ mode, this behavior is deprecated [-Wdeprecated]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[compile] /usr/bin/cc -I/tmp/demo/src -I/tmp/demo -I/tmp/demo -fPIC -DPIC -shared -o main.po -c /tmp/demo/src/main.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cc: warning: argument unused during compilation: &amp;#39;-shared&amp;#39; [-Wunused-command-line-argument]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[runscript] demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[link] /usr/bin/cc -L/tmp/demo/lib -Wl,-R/usr/local/lib -o real.bt/demo main.po -ldemo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: leaving directory `src&amp;#39; for `build&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We get a few warnings around shared libraries, as you could imagine from build scripts written almost 20 years ago, but no failures. Neat.&lt;/p>
&lt;p>But does the built product work?&lt;/p>
&lt;h2 id="running-the-demo">Running the demo&lt;/h2>
&lt;p>Let&amp;rsquo;s try to run the final binary we got:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">/tmp/demo$ ./src/demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Calling library: 42
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yay! It does work! But wait a moment:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">/tmp/demo$ file src/demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">src/demo: a /tmp/local/libexec/buildtool/bt_sh script, ASCII text executable
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What is this about? Why is our &lt;code>demo&lt;/code> a script and not a proper binary given that we used C?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">/tmp/demo$ cat src/demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#!/tmp/local/libexec/buildtool/bt_sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># File generated by bt_logic.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Fri May 13 06:35:23 PDT 2022
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LD_LIBRARY_PATH=:/tmp/demo/lib; export LD_LIBRARY_PATH
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/demo//src/real.bt/demo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Aha. Much like when using GNU Libtool, a binary cannot be run from the source tree if it links against a library, because the library has not been installed yet. The script is just a wrapper to configure the dynamic loader and make things work. After installation, the rpath functionality will kick in and make the dynamic loader find the library in the right place.&lt;/p>
&lt;h2 id="installing-the-demo">Installing the demo&lt;/h2>
&lt;p>Let&amp;rsquo;s install the demo:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">/tmp/demo$ /tmp/local/bin/buildtool install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: entering directory `lib&amp;#39; for `install&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[install] installing data file /tmp/root/lib/libdemo.so.0.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[exec] ln -fs libdemo.so.0.1 libdemo.so.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[exec] ln -fs libdemo.so.0.1 libdemo.so
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[install] creating missing directory /demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir: /demo: Permission denied
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: process stopped; command exited with error status `1&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: leaving directory `lib&amp;#39; for `install&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: entering directory `data&amp;#39; for `install&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[install] installing data file /tmp/local/share/buildtool/pkgflags/demo.bpf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: leaving directory `data&amp;#39; for `install&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: entering directory `src&amp;#39; for `install&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[install] installing binary file /tmp/root/bin/demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[install] installing data file /tmp/root/man/man1/demo.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: leaving directory `src&amp;#39; for `install&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[install] installing data file /tmp/root/share/doc/demo/CHANGES
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[install] installing data file /tmp/root/share/doc/demo/PEOPLE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[install] installing data file /tmp/root/share/doc/demo/README
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[install] installing data file /tmp/root/share/doc/demo/TODO
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Oops, a little &lt;code>mkdir&lt;/code> error, but it seems to have worked. If we inspect the installation prefix we provided during the configuration step (the &lt;code>-p /tmp/root&lt;/code> flag we specified):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">/tmp/demo$ find /tmp/root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/bin/demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/lib
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/lib/libdemo.so
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/lib/libdemo.so.0.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/lib/libdemo.so.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/share
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/share/doc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/share/doc/demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/share/doc/demo/PEOPLE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/share/doc/demo/CHANGES
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/share/doc/demo/TODO
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/share/doc/demo/README
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/man
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/man/man1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/man/man1/demo.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And, from these installed files, we can run the demo:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ /tmp/root/bin/demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Calling library: 42
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, note how the installed demo is really a proper executable that uses the shared library that was installed along it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">/tmp/demo$ file /tmp/root/bin/demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/bin/demo: ELF 64-bit LSB executable, x86-64, version 1 (FreeBSD), dynamically linked, interpreter /libexec/ld-elf.so.1, for FreeBSD 13.0 (1300525), FreeBSD-style, with debug_info, not stripped
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/demo$ ldd /tmp/root/bin/demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/root/bin/demo:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> libdemo.so.0 =&amp;gt; /tmp/root/lib/libdemo.so.0 (0x200000)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> libc.so.7 =&amp;gt; /lib/libc.so.7 (0x200000)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[preloaded]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [vdso] (0x7ffffffff5d0)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="distributing-the-demo">Distributing the demo&lt;/h2>
&lt;p>As a software package author, installing the program in one&amp;rsquo;s machine is nice, but what about giving the program to other people? This is where the &lt;code>dist&lt;/code> command comes into play, much like GNU Automake&amp;rsquo;s &lt;code>dist&lt;/code> target:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">/tmp/demo$ /tmp/local/bin/buildtool dist
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_dist: cleaning tree (cleandir)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: entering directory `lib&amp;#39; for `clean&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[remove] func1.po
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[remove] libdemo.so.0.1 libdemo.so.0 libdemo.so
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: leaving directory `lib&amp;#39; for `clean&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: entering directory `lib&amp;#39; for `cleandir&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[remove] func1.dep
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: leaving directory `lib&amp;#39; for `cleandir&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: entering directory `data&amp;#39; for `clean&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[remove] demo.bpf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: leaving directory `data&amp;#39; for `clean&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: entering directory `data&amp;#39; for `cleandir&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: leaving directory `data&amp;#39; for `cleandir&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: entering directory `src&amp;#39; for `clean&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[remove] main.po
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[remove] demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[remove] real.bt/demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: leaving directory `src&amp;#39; for `clean&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: entering directory `src&amp;#39; for `cleandir&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[remove] main.dep
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_logic: leaving directory `src&amp;#39; for `cleandir&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[remove] /tmp/demo/bt_config.h /tmp/demo/bt_config.env /tmp/demo/bt_logic.env /tmp/demo/bt_config.log /tmp/demo/bt_config.sed /tmp/demo/bt_output
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_dist: validating package
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=&amp;gt; Checking root files
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WARN: COPYING not found; it is highly recommended
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=&amp;gt; Checking definitions (/tmp/demo/Generic.bt)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WARN: no package homepage
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=&amp;gt; Checking configuration script (/tmp/demo/Generic.bt)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=&amp;gt; Summary
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_lint: package should be corrected; 2 warnings
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bt_dist: building compressed dist, type tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above invocation above generates a &lt;code>demo-0.1.tar.gz&lt;/code> distributable source package, which we can inspect:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">/tmp/demo$ tar tzf ../demo-0.1.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/PEOPLE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/lib/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/CHANGES
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/TODO
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/README.bt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/data/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/README
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/src/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/Generic.bt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/src/Logic.bt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/src/main.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/src/demo.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/data/Logic.bt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/data/demo.bpf.in
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/lib/func1.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/lib/Logic.bt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/lib/demo.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo-0.1/lib/demo.h
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="peeking-into-the-data-directory">Peeking into the data directory&lt;/h2>
&lt;p>I glanced over the &lt;code>data&lt;/code> directory earlier on, skipping that mysterious &lt;code>bpf&lt;/code> file. If we look at the files that were installed under Buildtool&amp;rsquo;s own prefix (a mistake) when we installed the demo, we can find that our package installed a &lt;code>share/buildtool/pkgflags/demo.bpf&lt;/code> file. Looking at its contents, we see:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># $Id: pkgflags,v 1.1 2003/04/26 21:48:17 jmmv Exp $&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># pkgflags file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># This file is mostly useful for packages providing libraries.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># If not needed (i.e., if the package is a program), remove it.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">BT_PREFIX&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/tmp/root&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">BT_DIR_LIB&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/tmp/root/lib&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">BT_DIR_INCLUDE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/tmp/root/include&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">bpf_name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;demo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">bpf_descr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Remembering Buildtool&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">bpf_version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;0.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">bpf_libs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;-L&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BT_DIR_LIB&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> -ldemo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">bpf_cflags&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;-I&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BT_DIR_INCLUDE&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is the equivalent of what a &lt;code>pkg-config&lt;/code> file would provide. And it works. We can query the file using Buildtool&amp;rsquo;s &lt;code>pkgflags&lt;/code> command and obtain the right compiler and linker flags for our demo library:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ /tmp/local/bin/buildtool pkgflags --cflags --libs demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">setting undefined variable `BT_PREFIX&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">setting undefined variable `BT_DIR_LIB&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">setting undefined variable `BT_DIR_INCLUDE&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-I/tmp/root/include -L/tmp/root/lib -ldemo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And this concludes the demo.&lt;/p>
&lt;h1 id="what-happened-to-buildtool">What happened to Buildtool?&lt;/h1>
&lt;p>Buildtool as it was in its 0.16 release in 2004 seems fairly impressive. The user manual is comprehensive, the tool provides many more features than I remembered, and it still works to this day.&lt;/p>
&lt;p>So what happened to Buildtool? Why did I officially cancel it in 2005? There are a few reasons.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The first is that Buildtool collapsed under its own complexity. Shell is not the right language to write a build system in, and &lt;code>bt_logic&lt;/code> became an unmanageable mess to deal with. I&amp;rsquo;m surprised it still works on a modern system to be honest.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The second is that, even though Buildtool seems &amp;ldquo;complete&amp;rdquo;, it still lacks lots of functionality&amp;mdash;and the missing functionality wasn&amp;rsquo;t easy to implement. When I was writing the tool, I found myself leaning on the GNU Autotools manuals to understand how things worked across systems, and I relied on those details to implement my own versions. The more I did this, the more I learned about the GNU Autotools, and the more I realized how knowledgeable the GNU Autotools authors were and how far I was from providing something comparable. This was humbling. Furthermore, during this process, I had become so &amp;ldquo;fluent&amp;rdquo; in the GNU Autotools that it made no sense to continue developing my own thing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The third is that having to install a supporting build tool to compile fundamental system packages wasn&amp;rsquo;t well-seen at the time. Every time I had to deal with a similar system in pkgsrc (Boost.Jam or whatever Mozilla had, for example), it was a pain. Like it or not, the GNU Autotools are the de-facto standard, and despite all of their flaws, they are the ones that integrate well with packaging systems and system tools.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>My interest in build systems remains and what you have read here partially explains my &lt;a href="/2015/04/on-bazel-and-open-source.html">original critique of Bazel&lt;/a>. I ended up working in Bazel for a few years though because I like the topic. No matter my original comments, Bazel is a great build system from which many others should learn. But it&amp;rsquo;s still missing the kind of system-level integration that Buildtool intended to provide via the &lt;code>install&lt;/code> and &lt;code>pkgflags&lt;/code> commands.&lt;/p>
&lt;p>One thing I&amp;rsquo;ll note is how Buildtool already had a concept of high-level targets from a semantical perspective. You could make a single build file define various targets (libraries, programs, etc.) and each of those would know how to build, install, and clean itself. You can see that the same ideas have evolved in most of today&amp;rsquo;s build systems in some form or another, and that the file-level dependency tracking that &lt;code>make&lt;/code> provides is &amp;ldquo;a thing of the past&amp;rdquo;.&lt;/p>
&lt;p>To conclude, let me add that I still believe there is room for something like Buildtool in this day and age to support the foundations of our free Unix-like systems&amp;hellip; but it would need to be much better designed and implemented than Buildtool. I have ideas; I just wish I had the same amount of free time that I had when I was a student.&lt;/p></description></item><item><title>Rust is hard, yes, but does it matter?</title><link>https://jmmv.dev/2022/05/rust-is-hard-but-does-it-matter.html</link><pubDate>Fri, 06 May 2022 06:45:00 -0700</pubDate><guid>https://jmmv.dev/2022/05/rust-is-hard-but-does-it-matter.html</guid><description>&lt;p>Rust is infamous for having a steep learning curve. The borrow checker is the first boss you must defeat, but with a good mental model of how memory works, how objects move, and the rules that the borrow checker enforces, it becomes second nature rather quickly. These rules may sound complicated, but really, they are about understanding the fundamentals of how a computer works.&lt;/p>
&lt;p>That said&amp;hellip; the difficulties don&amp;rsquo;t stop there. Oh no. As you continue to learn about the language and start dealing with things like concurrency&amp;mdash;or, God forbid, Unix signals&amp;mdash;things can get tricky very quickly. To make matters worse, mastering &lt;a href="https://rust-unofficial.github.io/patterns/intro.html">idiomatic Rust&lt;/a> and &lt;a href="/2020/04/rust-into-trait.html">the purpose of core traits&lt;/a> takes a lot of time. I&amp;rsquo;ve had to throw my arms up in frustration a few times so far and, while I&amp;rsquo;ve emerged from those exercises as a better programmer, I have to concede that they were exhausting experiences. And I am certainly not an expert yet.&lt;/p>
&lt;p>So, yes, there is no denying in saying that Rust is harder than other languages. But&amp;hellip; does it matter in practical terms?&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Betteridge's_law_of_headlines">Betteridge&amp;rsquo;s law of headlines&lt;/a> says that we should conclude the post right here with a &amp;ldquo;no&amp;rdquo;&amp;mdash;and I think that&amp;rsquo;s the right answer. But let&amp;rsquo;s see why.&lt;/p>
&lt;hr>
&lt;p>To answer this question, I&amp;rsquo;d like to imagine what would happen if we were to use Rust in a large team (say tens of people) that deals with a large codebase (hundreds of thousands of SLoC).&lt;/p>
&lt;p>The reason I pick this scenario is &lt;em>totally&lt;/em> unrelated (wink, wink) to the work I do on a day-to-day basis in Azure Storage. Our current codebase is written in C++ and has its fair share of NPEs and concurrency bugs, so we have sometimes &lt;del>argued&lt;/del> fantasized with the idea of adopting Rust.&lt;/p>
&lt;p>An obvious concern that arises is that adding a new language to a large project is&amp;hellip; very difficult: fighting inertia, bringing up tooling, training people, porting code &lt;a href="https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/">without a rewrite&lt;/a>&amp;hellip; these are all very hard work items. But there is a more subtle worry: even if we went through this whole endeavor, would our developer population be able to learn enough Rust to contribute to the codebase in a meaningful way? The language is, again, complex at first sight, and we should not expect everyone to master it.&lt;/p>
&lt;p>The first observation is that, in a sufficiently large team, we will have developers with various levels of expertise no matter the language. This is expected and intentional, but depending on the language, the consequences are different. For example: C++ is &lt;em>also&lt;/em> a very complex language. Sure, it may be easier to &lt;em>write&lt;/em> than Rust because the compiler is more forgiving, but it&amp;rsquo;s also much harder to guarantee its correctness. This comes back to bite the developer team at a later point, because now you need to call the experts to debug crashes and race conditions.&lt;/p>
&lt;p>The second observation comes from my writing of side projects in Rust. I&amp;rsquo;m finding that the majority of my time goes into writing straightforward business logic and refactoring tests, for which Rust doesn&amp;rsquo;t get in the way. It&amp;rsquo;s only during certain parts of the project&amp;rsquo;s lifetime that I&amp;rsquo;ve had to build the foundations (abstractions, layering, async constructs, etc.) or done large redesigns, and it&amp;rsquo;s only during those times that I&amp;rsquo;ve had my fights with Rust.&lt;/p>
&lt;p>In other words: given a sufficiently large project or team, and irrespective of the language, there will always be a set of core maintainers that design, write and maintain the foundations. This set of people knows the ins and outs of the project and should know the ins and outs of the language and its ecosystem. This set of people is &lt;em>necessary&lt;/em>. But once these foundations are in place, all other contributors can focus on the exciting aspects of building features. Rust&amp;rsquo;s complexities may still get in the way, but not much more than those of other languages.&lt;/p>
&lt;p>To conclude, I would like you to &lt;a href="/2022/04/do-rust-devs-hate-go-devs.html">consider again&lt;/a> that learning a language is not just a matter of learning its syntax. Mastering a programming language requires months of expertise with the language&amp;rsquo;s idiosyncrasies and its libraries, and one must go through these before making comparisons about long-term maintainability. But yes, Rust could be simpler, and there are &lt;a href="https://tim.mcnamara.nz/post/683022094467039232/easy-mode-for-rust">efforts to make it so&lt;/a>!&lt;/p>
&lt;p>Finally, a question for you. I haven&amp;rsquo;t had the fortune (?) of working in a large-scale Rust project yet, so all I&amp;rsquo;m doing is hypothesizing here based on experiences with other languages in large projects and teams. If you have converted a team into Rust, or if you were brought in to contribute to an existing Rust codebase, would you mind sharing your experience below? :)&lt;/p></description></item><item><title>Do Rust devs hate Go devs?</title><link>https://jmmv.dev/2022/04/do-rust-devs-hate-go-devs.html</link><pubDate>Fri, 29 Apr 2022 09:50:00 -0700</pubDate><guid>https://jmmv.dev/2022/04/do-rust-devs-hate-go-devs.html</guid><description>&lt;p>Earlier this week, a 2-year old post titled &lt;a href="https://fasterthanli.me/articles/i-want-off-mr-golangs-wild-ride">I want off Mr. Golang&amp;rsquo;s wild ride&lt;/a> by &lt;a href="https://fasterthanli.me/">@fasterthanlime&lt;/a> made the news rounds &lt;em>again&lt;/em>. This post raises a bunch of concerns on the Go language and is posted from the perspective of someone who prefers Rust. And, just yesterday, I noticed &lt;a href="https://fasterthanli.me/articles/lies-we-tell-ourselves-to-keep-using-golang">a comment on Twitter by @FiloSottile&lt;/a> that, paraphrased, reads &amp;ldquo;&lt;em>Why is there so much hatred towards Go, especially from Rust developers?&lt;/em>&amp;rdquo;.&lt;/p>
&lt;p>I wish I could answer this question with a &amp;ldquo;no, there isn&amp;rsquo;t&amp;rdquo;, but that would be a lie: in any large community, there will certainly be hateful people/opinions. If you have encountered such flamebait, I&amp;rsquo;m sorry, and I&amp;rsquo;m not here to defend it. What I&amp;rsquo;m here to do is look at the possible truth behind the claim that Rust developers dislike Go, and I wanted to elaborate on this based on my personal experience.&lt;/p>
&lt;hr>
&lt;p>I have taught myself both Go (in 2016) and Rust (in 2018). I have written the exact same project&amp;mdash;&lt;a href="/software/sandboxfs.html">sandboxfs&lt;/a>, a FUSE file system&amp;mdash;in both languages, which allowed me to experience pretty closely how these two languages compare for high-performance systems-level software development. I have written other code in both as well, using Go when I was at Google and Rust for &lt;a href="https://www.endbasic.dev/">a side project&lt;/a>.&lt;/p>
&lt;p>And, you know, I enjoy writing code in both languages. They are fun; they make me productive; they are better than the alternatives. You can read &lt;a href="/2016/03/golang-review.html">my review of Go in 2016&lt;/a>; &lt;a href="/2018/05/rust-review-introduction.html">my review of Rust in 2018&lt;/a>; and &lt;a href="/2018/07/rust-vs-go.html">my comparison of both languages in 2018&lt;/a>. So, I do have some &amp;ldquo;comparable&amp;rdquo; experience with these two languages and, based on this experience, I think I understand where some of this &amp;ldquo;Go hatred&amp;rdquo; comes from. And I would say that this hatred comes from &lt;em>sadness&lt;/em>.&lt;/p>
&lt;p>From the very beginning, Go has been touted as this systems-level language that can replace C and C++ in large-scale projects. A super-simple systems language that is safer than C and almost as fast as C. And, yes, Go is indeed a simple language: you can learn Go in a day (yes, really) if you are already familiar with a C-style language, and you can start writing code right away, which is really empowering. The problem is that, like with &lt;em>any other language&lt;/em>, mastering Go idioms and best practices will take &lt;em>much&lt;/em> longer though&amp;mdash;so don&amp;rsquo;t go write your next startup&amp;rsquo;s foundations in Go just with a weekend&amp;rsquo;s worth of experience; it &lt;em>feels&lt;/em> like you can do so, but it would be an uninformed choice.&lt;/p>
&lt;p>Other than being simple, Go is also extremely nice to interact with: enforced code formatting, simple build tools, a builtin profiler, a comprehensive core library, super-fast build times&amp;hellip; These are all qualities of the Go ecosystem that increase individual productivity very quickly and with little effort. You can imagine that these are very appealing when working on a greenfield project, especially with a team, because you can start shipping soon.&lt;/p>
&lt;hr>
&lt;p>OK, so Go is great. Then, why the &lt;del>hatred&lt;/del> sadness towards it? And why does Rust have anything to do with it?&lt;/p>
&lt;p>To answer this, we have to start from the assumption that Go and Rust are competing for the same systems development space; that is, finding an alternative to C and C++. This assumption may or may not be valid, but I believe that lots of people come to these languages with this preconception in mind (myself included). As a result, it&amp;rsquo;s not a matter of choosing Rust or Go for a specific task: it&amp;rsquo;s a polarizing topic.&lt;/p>
&lt;p>Once you start with this assumption, if you learn Rust &lt;em>after&lt;/em> Go, you realize &lt;em>how much better&lt;/em> (in safety, performance and agility terms) systems programming &lt;em>could be&lt;/em> if we used Rust throughout. But because Go is so widespread and gives the (false) impression of being much easier to master, Rust is likely to lose the battle. And, unfortunately, most technical decisions at the beginning of a project&amp;mdash;which language, which database, which cloud provider, etc.&amp;mdash;are made based on gut feelings and superficial information. By the time problems become apparent, it&amp;rsquo;s a gargantuan task to change those choices.&lt;/p>
&lt;p>And &lt;em>here&lt;/em> is where the sadness comes in. Once you learn Rust and experience what it brings to the table, you start finding gaps that Go doesn&amp;rsquo;t cover, which means that if we double down on Go, we perpetuate these problems. Null pointers are there. Data races are there (because, even if you have channels, you &lt;em>also&lt;/em> have mutexes and you ought to use them for performance reasons). Garbage collection is there. Duck typing and the widespread presence of &lt;code>interface{}&lt;/code> make refactoring difficult. And my pet peeve: annotations to express safety constraints on the code are notably &lt;em>not&lt;/em> there, resulting in lots of comments and &lt;a href="/2018/07/forbidden-assertions-fallacy.html">dumbed-down runtime error checking&lt;/a> that shouldn&amp;rsquo;t be necessary.&lt;/p>
&lt;p>Note that I am intentionally &lt;em>not&lt;/em> mentioning Go modules or generics here. I know these features have been controversial for a really long time and, fortunately, they do exist now in Go after years of debate. I&amp;rsquo;m glad that they do, but the core issues with Go don&amp;rsquo;t stem from the lack of features. They stem from the foundations of the language.&lt;/p>
&lt;p>I get why Go is so appealing. And I also understand that Rust can be &lt;em>very&lt;/em> off-putting at first. But I don&amp;rsquo;t like to think of a future world where systems are all written in Go. Such a world would definitely be a better than the current world dominated by C and C++ memory leaks and buffer overruns, but we would still suffer from many issues that simply wouldn&amp;rsquo;t exist if the same software had been written in Rust. And &lt;em>that&lt;/em> is what I think bothers people. Well, at least it bothers me a little bit.&lt;/p>
&lt;p>Just as an example to illustrate why these design choices get in the way, I want to go back to my sandboxfs experience. When working on the Rust rewrite, I used the Go implementation as a reference and tried to translate the code while keeping a similar design. During the process, I remember spotting many subtle bugs in the Go version that had escaped code review and testing, and I spotted them &lt;em>because&lt;/em> Rust would simply not allow me to express such faulty code. I want more of that kind of enforced validation and sanity-checking for our systems of the future, not less.&lt;/p>
&lt;p>But again, that&amp;rsquo;s just my opinion. The only thing I would say if you are reading this is: if you are in a position to decide between Go or Rust for a new codebase, don&amp;rsquo;t make the choice without learning about both languages in some level of detail. Only once you have some experience in both you&amp;rsquo;ll be able to make an informed decision. Tradeoffs!&lt;/p></description></item></channel></rss>