<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/</link><description>Recent content on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 31 Oct 2023 12:30:00 -0700</lastBuildDate><atom:link href="https://jmmv.dev/feed.xml" rel="self" type="application/rss+xml"/><item><title>Links: October 2023 edition</title><link>https://jmmv.dev/2023/10/links-october-2023-edition.html</link><pubDate>Tue, 31 Oct 2023 12:30:00 -0700</pubDate><guid>https://jmmv.dev/2023/10/links-october-2023-edition.html</guid><description>&lt;p>Inspired by the works of &lt;a href="https://eatonphil.com/">Phil Eaton&lt;/a>, I&amp;rsquo;ve been highlighting articles and projects that I find interesting in &lt;del>Twitter&lt;/del> X and Mastodon. Some of these posts were more &amp;ldquo;successful&amp;rdquo; than I had expected, which I take to mean that doing this is interesting to you all. So, it&amp;rsquo;s probably a good idea to periodically collect them all in a post with a very brief commentary on each.&lt;/p>
&lt;p>Here is a recap of the interesting articles that came my way in October 2023. This does &lt;em>not&lt;/em> mean that these articles were published during this period: some of them are older but I just (re)discovered them now. I&amp;rsquo;ll avoid referencing my own articles: you can find those by &lt;a href="/archive.html">in the archive&lt;/a>.&lt;/p>
&lt;h1 id="articles">Articles&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://queue.acm.org/detail.cfm?id=3212479">&amp;ldquo;C is not a low-level language&amp;rdquo;&lt;/a> by David Chisnall on April 30th, 2018.&lt;/strong>&lt;/p>
&lt;p>This is one of those articles that requires an open mind to read and understand the main criticism that the author raises about the use of C these days.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://www.microsoft.com/en-us/research/uploads/prod/2019/04/fork-hotos19.pdf">&amp;ldquo;A fork() in the road&amp;rdquo;&lt;/a> by Microsoft on May 13th, 2019.&lt;/strong>&lt;/p>
&lt;p>Like the previous article, this one is a critique of one of the foundations of Unix and requires being open to criticism to see what it is about. I had read this when it came out years ago, but the article just above reminded me of it because they both fall in the same category of &amp;ldquo;articles that were written ahead of their times&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://jvns.ca/blog/2016/06/13/should-you-be-scared-of-signals/">&amp;ldquo;Should you be scared of Unix signals?&amp;rdquo;&lt;/a> by Julia Evans on June 13th, 2016.&lt;/strong>&lt;/p>
&lt;p>A good and fun article to understand Unix signals. I didn&amp;rsquo;t know that &lt;em>Ctrl+Alt+Del&lt;/em> translated into &lt;code>SIGINT&lt;/code> to &lt;code>init(1)&lt;/code> on Linux, for example. What I was missing from this article was a mini-rant on the lack of &lt;code>SIGINFO&lt;/code> handling in Linux: if you have used other Unix systems, you know that pressing &lt;em>Ctrl+T&lt;/em> causes the running program to print progress status to the console, which is super handy when running things like &lt;code>dd(1)&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://jordankaye.dev/posts/thinking-not-typing/">&amp;ldquo;Software engineering is about thinking, not typing&amp;rdquo;&lt;/a> by Jordan Kaye on October 11th, 2023.&lt;/strong>&lt;/p>
&lt;p>Agree with the premise of the post that coding without thinking can be wasteful. Countless times, I&amp;rsquo;ve been coding deep down for an hour, only to go get coffee and realize I was on the wrong path all along. However, I&amp;rsquo;d also add that software engineering &lt;em>is&lt;/em> actually about typing: just&amp;hellip; a different kind of typing. Change proposals, design documents, opinion memos&amp;hellip; all of these have to be typed, and going through the writing process helps tremendously in organizing ideas and plans.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://ntietz.com/blog/write-more-useless-software/">&amp;ldquo;Write more &amp;ldquo;useless&amp;rdquo; software&amp;rdquo;&lt;/a> by ntietz on June 26, 2023.&lt;/strong>&lt;/p>
&lt;p>Yes, more of this! It&amp;rsquo;s fun/rewarding/exciting to write a piece of code just for the sake of it, and it&amp;rsquo;s exhausting to have to come up with &amp;ldquo;value add&amp;rdquo; rationales (&lt;em>ehem&lt;/em> monetization strategies) for every little thing we do these days. This is &lt;a href="/2021/01/why-endbasic.html">why I work on EndBASIC&lt;/a>, for example.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://fasterthanli.me/articles/just-paying-figma-15-dollars">&amp;ldquo;Just paying Figma $15/month because nothing else fucking works&amp;rdquo;&lt;/a> by fasterthanlime on October 19th, 2023.&lt;/strong>&lt;/p>
&lt;p>A fun read. This one is about how we avoid paying for cheap things for weird reasons and settle for alternatives that suck. In his case, he claims &amp;ldquo;protestant ethics&amp;rdquo; but I have the same problem and I grew up without those. And this is why I&amp;rsquo;m working on EndTRACKER instead of paying for Substack. Well, actually, I&amp;rsquo;ve just started driving Substack, so the real reason is because I want to own my content in a future-proof manner.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://jsoverson.medium.com/was-rust-worth-it-f43d171fb1b3">&amp;ldquo;Was Rust Worth It?&amp;rdquo;&lt;/a> by Jarrod Overson on October 26th, 2023.&lt;/strong>&lt;/p>
&lt;p>A very balanced review of Rust through which I found myself nodding all along the good, bad, and ugly parts. I&amp;rsquo;ve covered some of the criticisms in the past in more detail too, including in &lt;a href="/2022/05/rust-is-hard-but-does-it-matter.html">&amp;ldquo;Rust is hard, yes, but does it matter?&amp;rdquo;&lt;/a> (May 2022) and in &lt;a href="/2023/08/rust-static-dispatch-failed-experiment.html">&amp;ldquo;A failed experiment with Rust static dispatch&amp;rdquo;&lt;/a> (August 2023).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://flameeyes.blog/2020/04/30/bakery-someone-else-oven/">&amp;ldquo;The bakery is just someone else’s oven&amp;rdquo;&lt;/a> by Diego Elio Pettenò on April 30th, 2023.&lt;/strong>&lt;/p>
&lt;p>Interesting complement to the &amp;ldquo;paying Figma&amp;rdquo; article from above, which I reached through a controversial post on how X is saving money by dumping the cloud. Yes, cloud bills are huge and in &amp;ldquo;the happy case&amp;rdquo; you can probably build and host a service yourself. But when you have to start planning for corner cases and deal with operational costs, things aren&amp;rsquo;t as cheap. Plus it is critical to consider the opportunity cost of running your own services against doing something else.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://jacobbartlett.substack.com/p/through-the-ages-apple-cpu-architecture">&amp;ldquo;Through the Ages: Apple CPU Architecture&amp;rdquo;&lt;/a> by Jacob Barlett on October 30th, 2023.&lt;/strong>&lt;/p>
&lt;p>A light walk through the four different CPU architectures that Apple has used throughout its history, how they differ between each other, and how Apple has been able to successfully pull off such difficult migrations without vanishing into oblivion. But what&amp;rsquo;s &lt;em>more&lt;/em> interesting here is &lt;a href="https://lobste.rs/s/jd4ivm/through_ages_apple_cpu_architecture#c_nwtcnj">this comment from David Chisnall&lt;/a> in the Lobste.rs discussion correcting many of the simplifications and inaccuracies in the article.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="other">Other&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://github.com/skiselev/8088_bios">&amp;ldquo;8088 BIOS&amp;rdquo;&lt;/a> GitHub Project.&lt;/strong>&lt;/p>
&lt;p>I had fun peeking through the NASM source code and remembering &amp;ldquo;the good old times&amp;rdquo; of me writing boot sectors with FAT12 parsers in them.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://www.retroshowcase.gr/cpcbox-master/index.html">&amp;ldquo;CPCBox&amp;rdquo;&lt;/a> project page.&lt;/strong>&lt;/p>
&lt;p>I keep coming to this site as part of my work on EndBASIC, and as part of wanting to play my favorite old game from when I was a kid: Builder Dash. The keyboard controls suck but choosing to use a joystick allows using the cursor keys for movement. Audio doesn&amp;rsquo;t work though, as it seems to be using some deprecated web technology.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://youtu.be/Fh_UDQnboRw">&amp;ldquo;Bill Gates demonstrates Visual Basic [video]&amp;rdquo;&lt;/a> by Bill Gates in 1991.&lt;/strong>&lt;/p>
&lt;p>What have we lost. There has not been anything similar to Visual Basic for more than 20 years now (except Delphi I hear). I remember moving to Linux and trying to find something like this, only to be told to use Glade which&amp;hellip; well&amp;hellip; a UI designer that spits out code is not the same as an integrated IDE. And nowadays, with web technologies, there is nothing that approaches this level of usability, yet?&lt;/p>
&lt;/li>
&lt;/ul></description><enclosure url="https://jmmv.dev/images/2023-10-31-links.png" length="56457" type="image/jpeg"/></item><item><title>BazelCon 2023 et al. trip report</title><link>https://jmmv.dev/2023/10/bazelcon-2023-et-al-trip-report.html</link><pubDate>Mon, 30 Oct 2023 03:00:00 -0700</pubDate><guid>https://jmmv.dev/2023/10/bazelcon-2023-et-al-trip-report.html</guid><description>&lt;p>I&amp;rsquo;m exhausted. I just came back to Seattle from a 10-day trip in which I attended three different Bazel events: the Build Meetup in Reykjavik, the Bazel Community Day in Munich, and BazelCon 2023 in Munich too. Oh, and because I was on the other side of the world, I also paid a visit to my family in Spain.&lt;/p>
&lt;p>Attending these events has been incredibly useful and productive: I got exposure to many ideas and discussions that would just not happen online, I got to build connections with very interesting people and, of course, it has also been super fun too to reconnect with old coworkers and friends.&lt;/p>
&lt;p>This article contains the summary of the things I learned and the things I want to follow up on. These are just a bunch of cleaned-up notes which I took and are in the context of &lt;em>my&lt;/em> work with &lt;a href="https://bazel.build/">Bazel&lt;/a> at &lt;a href="https://www.snowflake.com/">Snowflake&lt;/a> and &lt;em>my&lt;/em> interests on build tools, so this is not endorsed by Snowflake.&lt;/p>
&lt;h1 id="schedule">Schedule&lt;/h1>
&lt;p>Here is the general timeline of the events:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>2023-10-20 (Fri)&lt;/strong>: Build Meetup in Reykjavik hosted at the Reykjavik University and organized by Unnar from EngFlow.&lt;/li>
&lt;li>&lt;strong>2023-10-21 (Sat)&lt;/strong>: A 1-day tour of the Reykjanes peninsula with the Build Meetup crew which, while not an official conference, also led to many interesting &lt;del>hallway&lt;/del> lagoon conversations.&lt;/li>
&lt;li>&lt;strong>2023-10-23 (Mon)&lt;/strong>: Bazel Community Day hosted by Salesforce in Munich, followed by an evening of food and drinks hosted by Gradle.&lt;/li>
&lt;li>&lt;strong>2023-10-24 (Tue)&lt;/strong>: BazelCon 2023 day 1 hosted by Google Munich, which included an evening of drinks and games hosted by JetBrains.&lt;/li>
&lt;li>&lt;strong>2023-10-25 (Wed)&lt;/strong>: BazelCon 2023 day 2 hosted by Google Munich, which included another by BuildBuddy that I could not attend because I departed early.&lt;/li>
&lt;/ul>
&lt;h1 id="bazel-7">Bazel 7&lt;/h1>
&lt;p>In our Bazel migration at Snowflake, we currently rely on the Bazel 6.x series&amp;mdash;still the stable version at the time of this writing. &lt;a href="https://bazel.build/about/roadmap#bazel_70_release">Bazel 7 is around the corner&lt;/a> and it brings many improvements that will, in theory, improve the developer experience significantly. Here are my highlights:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Build without the Bytes (BwtB):&lt;/strong> We tried using this feature before but it did not work well with dynamic execution, another feature that we must use for performance reasons. Bazel 7 should fix all issues we saw because BwtB is known to not carry bug fixes that are in Bazel 7 due to backporting difficulties. Google is confident that this feature works fine now because they are using it on their corp Mac laptops instead of FUSE, because the latter has become increasingly more cumbersome to use on Macs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Path mapping and cache key scrubbing:&lt;/strong> New features in Bazel 7 allow Bazel to reuse the cache between different configurations. For example, Java targets only need to be built once irrespective of the target platform (arm64/x86), and Bazel 7 makes this &amp;ldquo;just one build&amp;rdquo; possible. This helps increase shared cache hits, reduces CI costs, reduces Bazel configuration and Git branch switch costs, and reduces local disk usage space. These features need to be enabled via flags and rules have to opt into this behavior if it&amp;rsquo;s useful for them (the Java rules do by default).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Skymeld:&lt;/strong> &lt;a href="https://github.com/bazelbuild/bazel/issues/14057">This feature&lt;/a> interleaves the analysis and execution phases during a build and should be functional in Bazel 7. Using this feature should reduce end-to-end (E2E) build and test times, particularly for builds where the analysis phase takes a long time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>bzlmod:&lt;/strong> We &lt;em>all&lt;/em> will be required to replace our intractable &lt;code>WORKSPACE&lt;/code> files with bzlmod by Bazel 8, and bzlmod is already the default in Bazel 7. The benefits for the &lt;em>users&lt;/em> of the build system are subtle, but they are palpable for anyone managing external dependencies or third-party package managers like pip or Maven. It&amp;rsquo;s possible to migrate incrementally by moving individual rules into using modules. Difficulties often arise when there are repo aliases in place though.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="ide-improvements">IDE improvements&lt;/h1>
&lt;p>The two news that seemed exciting to me were:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>IntelliJ BSP plugin:&lt;/strong> &lt;a href="https://www.jetbrains.com/">JetBrains&lt;/a> has been working on a new &lt;a href="https://build-server-protocol.github.io/">Build Server Protocol (BSP)&lt;/a> to fix the M:N problem for build tools and IDEs&amp;mdash;just like &lt;a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol (LSP)&lt;/a> did for language integrations. JetBrains has created a new version of the Bazel plugin that relies on a BSP server, and this new plugin better integrates with IntelliJ&amp;rsquo;s internal project modeling and with Remote IntelliJ. The plugin launched in beta during BazelCon and does not yet work with CLion, but they are targeting Spring 2024 to get both out. It&amp;rsquo;s still early to adopt this new plugin, but the future is bright: if VSCode adopts the BSP, we&amp;rsquo;ll finally get Bazel support throughout developer tools. Microsoft, your move. (And Emacs pretty please?)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>IntellIj 2023.3.3:&lt;/strong> This new release of IntelliJ should make the Bazel plugin work well for remote development. Up until now, it was possible to &lt;em>open&lt;/em> existing projects, but not &lt;em>import&lt;/em> them using the Remote IntelliJ interface, which was suboptimal for desktop-less remote VMs.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="remote-build">Remote build&lt;/h1>
&lt;p>Many presenters and attendees report that their companies use remote builds&amp;mdash;unsurprisingly, because that&amp;rsquo;s the primary promise of using Bazel&amp;mdash;and it turns out there are more companies than I thought supplying remote build and telemetry visualization services. Here are some of the interesting details I gathered:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Regional clusters:&lt;/strong> The remote build protocol is sensitive to latency, particularly for builds with low parallelism. In talking to &lt;a href="https://www.engflow.com/">EngFlow&lt;/a>, they&amp;rsquo;ve measured a 10-20% build performance improvement by deploying separate clusters in different regions for a single customer. Multiple clusters are harder to operate than just one cluster&amp;hellip; but if you accept that you need N+1 deployments &lt;em>anyway&lt;/em> for reliability, you might as well colocate them with your primary offices.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Build Barn customizations:&lt;/strong> This open source remote build implementation supports having a bidirectional replicated cache (ideal for the regional clusters mentioned above), and even having small worker pools close to the users while sharing the same central cache. &lt;a href="https://meroton.com/">Meroton&lt;/a>, who does Build Barn consulting, have set up small caches/worker pools in-office for customers, while maintaining a larger &amp;ldquo;central cache&amp;rdquo;, and gotten good results.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Build viewers:&lt;/strong> There are many different implementations of tools to visualize builds via the &lt;a href="https://bazel.build/remote/bep">Build Event Protocol (BEP)&lt;/a>. EngFlow, &lt;a href="https://www.buildbuddy.io/">BuildBuddy&lt;/a>, &lt;del>Gradle Enterprise&lt;/del> &lt;a href="https://gradle.com/">Develocity&lt;/a>&amp;hellip; all were there. As an interesting data point: Develocity can ingest data from various build systems, not just BEP, and allows computing metrics from them all in aggregate. This is not be desirable in the &amp;ldquo;end state&amp;rdquo; of a build system migration, but it&amp;rsquo;s an attractive proposition while the migration is ongoing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>RE v3:&lt;/strong> There are ongoing discussions about whether &lt;a href="https://docs.google.com/document/d/1FxpdOzOhzOCTjjn2loppMlBzjqjU9WpYF4E1K6opxVI/edit">a new version of the protocol&lt;/a> should be designed or not. There is the thought that some features cannot be retrofitted into the previous protocol, but that&amp;rsquo;s not completely clear. Ed Schouten is requesting feedback in the document that he put together.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>In-transit compression:&lt;/strong> gRPC has support for &lt;a href="https://grpc.io/docs/guides/compression/">transparent in-transit compression&lt;/a> (not at rest). We have thought of hacking it into Build Barn because we think this would improve E2E build times for users with less-than-optimal Internet pipes, but both EngFlow (Java) and Bloomberg (Python) report that they saw worse behavior with compression enabled. They suspect gRPC may be serializing compression operations or doing something similarly-unscalable at very low levels of the stack. Build Barn is written in Go though, so the outcome of this experiment might be different. Worth a try.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Jobs configuration:&lt;/strong> The RE protocol is latency sensitive. Ulf Adams from EngFlow recommended limiting the number of jobs per user on the server side and then configuring the local jobs number to a higher level to minimize the delays that Bazel itself imposes. George Gensure also brought up that there seems to be an unnecessary semaphore in the code that computes Merkle trees, which limits throughput, and that it should be removed from Bazel.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Dynamic scheduling tweaks:&lt;/strong> &lt;a href="https://buck2.build/">Buck2&lt;/a>&amp;rsquo;s &lt;a href="https://bazel.build/remote/dynamic">&amp;ldquo;dynamic scheduler&amp;rdquo;&lt;/a> seems smarter than Bazel&amp;rsquo;s because it avoids running anything locally when the parallelism of the build graph is wide. Then, it enables parallel local execution (which they call hybrid execution) when the parallelism is narrow, as this is the common case towards the end of builds and in most incremental builds. It might be nice to try this in Bazel too because it would help reduce unnecessary network bandwidth (and also help remove the &lt;code>--dynamic_local_execution_delay&lt;/code> hack), but it may increase E2E build time for clean builds if the network is slow&amp;hellip; unless BwtB is at play, in which case this might be a win-win.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="things-to-try-out">Things to try out&lt;/h1>
&lt;p>My TODO list after speaking to people is&amp;hellip; long. Here are a bunch of things I want to try:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Visualize the build graph of our product:&lt;/strong> Bazel has flags to dump the in-memory build graph as a &lt;a href="https://graphviz.org/">Graphviz&lt;/a> file, and &lt;a href="https://github.com/tweag/skyscope/">SkyScope&lt;/a> by &lt;a href="https://www.tweag.io/">Tweag&lt;/a> allows interactively inspecting large graphs. It&amp;rsquo;d be nice to try this out and see what happens, because &lt;a href="https://medium.com/snowflake/build-farm-visualizations-5a079477502d">visualizations often help uncover issues&lt;/a> that are hard to imagine otherwise.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Buck2&amp;rsquo;s LSP for Starlark:&lt;/strong> Meta has done a lot of work in Buck2 to make Starlark easy to write. They have things like an LSP server for Starlark, static typing, static analysis, a profiler, a debugger&amp;hellip; While we cannot use features like static typing because Bazel doesn&amp;rsquo;t support them (yet?), it should be possible to leverage the LSP server for use with VSCode. It apparently has a Bazel mode.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Expendable CI jobs:&lt;/strong> Some CI jobs are not critical: for example, consider a job that exists purely to keep the Bazel remote cache warm for IntelliJ project syncs. Someone brought up the interesting idea of making these jobs monitor the build farm load and skip their execution if the farm is above a certain threshold (to preserve resources and minimize the chances of exhausting them).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Analyze breakdown of rules by type:&lt;/strong> Google reports that 30% of their rules are of the &lt;a href="https://bazel.build/reference/be/general">&lt;code>genrule&lt;/code>&lt;/a> kind, which prevents certain kinds of optimizations&amp;mdash;e.g. they are very expensive memory-wise because they do not benefit from Bazel&amp;rsquo;s depset internal representation. It&amp;rsquo;d be nice to see what our breakdown looks like in case we have to plan some refactoring.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Jenkins persistent runners:&lt;/strong> We currently tear down Jenkins runners quickly, but this discards all Git and Bazel state. For Bazel-only jobs, using persistent runners could help reduce E2E run times. &lt;a href="https://www.thoughtspot.com/">ThoughtSpot&lt;/a> reports a 40% reduction in average build/test time. &lt;a href="https://www.aspect.dev/">Aspect&lt;/a> also claims that this is an anti-pattern. BuildBuddy has done work to clone runners with hot Bazel in-memory state and claims an 8x improvement in build times.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Using actions for downloads:&lt;/strong> Even if this is unorthodox, several people use &lt;em>actions&lt;/em> to download toolchains and the like to minimize the cost of downloads during pre-analysis, to keep those downloads in the remote build farm when the client doesn&amp;rsquo;t need them at all, and to minimize local disk space. I had thought about doing this too, but I was hesitant because it feels &amp;ldquo;ugly&amp;rdquo;. It&amp;rsquo;s good to hear others have thought and tested the same idea too. Note that doing this results in &lt;a href="https://reproducible-builds.org/">reproducible builds&lt;/a> only if downloads are subject to checksum verification.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Validation actions:&lt;/strong> There are new features in Bazel to define &amp;ldquo;validation actions&amp;rdquo; to run things like linters in parallel with the build (without dependency hacks as were used before). Google is using this to run Android Lint internally, which sounds similar to other tools like the popular &lt;a href="https://spotbugs.github.io/">SpotBugs&lt;/a>. These actions can also produce diffs to apply to the source tree to fix the issues they identify.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="upstream-contributions">Upstream contributions&lt;/h1>
&lt;p>These are some long-running changes I&amp;rsquo;d like to get into upstream Bazel and that need follow up:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>C++ linker memory model:&lt;/strong> The C++ linker memory estimation in Bazel is &lt;a href="https://github.com/bazelbuild/bazel/issues/17368">way off reality&lt;/a>, and I previously upstreamed the foundations to fix the issue by exposing input sizes to the estimation logic. We still have to carry a local patch to tune the model based on our observations, but the patch is really small now. But given the diversity in the C++ ecosystem, it&amp;rsquo;d be awesome if we could parameterize the memory computation in the C++ toolchain definition somehow and avoid a local patch: imagine having a lambda that returns a CPU/RAM resource set based on the number of inputs, their size, and the compilation model. I need to engage in GitHub Discussions.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>BEP sanitization changes:&lt;/strong> I brought up that the BEP is incredibly prone to leaking secrets stored in the environment and while folks knew this happens&amp;mdash;after all, tools like BuildBuddy and EngFlow have logic to scrub secrets&amp;mdash;they were not really aware of the extent of the problem. I have a prototype patch to scrub all environment variables from the BEP (except for a limited allowed list useful for debugging) and I think we agreed that this feature would be good to upstream. So now I need to write a proper bug report and share my audits of the protocol and the proposal for a fix. Stay tuned.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>bb-clientd patch:&lt;/strong> The current implementation of &lt;a href="https://github.com/bazelbuild/bazel/pull/12823">the patch to support a FUSE-based output tree&lt;/a> is going nowhere because of the upcoming Remote Output Service formalization of this same idea. Until that&amp;rsquo;s available, I don&amp;rsquo;t think it&amp;rsquo;s worth trying to maintain this on top of Bazel 6 any longer, particularly due to the BwtB improvements that are coming in Bazel 7. It seems wiser to just wait.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="other-thoughts">Other thoughts&lt;/h1>
&lt;p>And to conclude, a bunch of disconnected notes about things that were interesting to me:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Buck2:&lt;/strong> This new build system from Meta looks really cool to me. On the plus side, it fixes some long-standing issues in Bazel, like having a truly language-agnostic core, being built from the ground up with BwtB and FUSE in mind, and super-quick startup time because it&amp;rsquo;s not Java; hindsight is 20/20 after all. But it also has its drawbacks, like no support for external dependencies yet or no local sandboxing (both of which are fixable). They also have nice features like limited dynamic dependency discovery, which makes tools like Gazelle less necessary. And&amp;hellip; they are considering writing a shim to support Bazel rules in Buck2, which would make experimentation on existing projects super-exciting.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Bazel jobs scalability:&lt;/strong> There are two problems with making Bazel scale to thousands of concurrent jobs: the &amp;ldquo;1 job = 1 thread&amp;rdquo; execution model, and memory usage due to Merkle tree computation. Ulf Adams reports that he could run Bazel with hundreds of thousands of jobs back at Google when he implemented async execution by hand&amp;mdash;the Google-internal RE protocol doesn&amp;rsquo;t use Merkle trees, so memory pressure was not an issue&amp;mdash;but unfortunately the changes were never productionized and have been backed out of Bazel due to their complexity. Java 21 brings &lt;a href="https://docs.oracle.com/en/java/javase/20/core/virtual-threads.html">virtual threads&lt;/a> and paves the way to fix this in a nicer, non-hacky way.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>bb-clientd improvements:&lt;/strong> Meroton has significant experience with deploying bb-clientd for customers and are interested in the issues we face because they are the main pushers for the Remote Output Service feature. In particular, dynamic execution doesn&amp;rsquo;t play well with bb-clientd because it causes bb-clientd to backlog downloads when local actions are frequently cancelled. It should be possible to tell bb-clientd to stop downloads and resolve these issues because the FUSE protocol supports it, but it&amp;rsquo;s not plumbed through. Also, implementing chunked downloads to support debugging of large binaries with minimal network latency sounds awesome, but we&amp;rsquo;d need to quantify the benefit first: I suspect you need just a tiny portion of multi-GB C++ debug binary to produce a stacktrace.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Virtual file systems on macOS:&lt;/strong> Both Ed Schouten from Build Barn and Neil Mitchell from Buck2 report that NFSv4 has been pretty decent on macOS when compared to FUSE to implement virtual file systems, and that it should be the primary mechanism for writing virtual file systems on macOS now. FUSE is unfortunately doomed due to Apple&amp;rsquo;s desire to kill kernel extensions, which makes it really hard to install FUSE.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Avoiding BUILD files:&lt;/strong> &lt;a href="https://www.salesforce.com/">Salesforce&lt;/a> has undergone a Bazel migration with 4000 engineers and claims that 70% have trouble writing BUILD files. Anything that can be done to hide them / automate edits is worthwhile. &lt;a href="https://investors.luminartech.com/">Luminar&lt;/a> has developed a C++ plugin for &lt;a href="https://github.com/bazelbuild/bazel-gazelle">Gazelle&lt;/a> and they use &lt;a href="https://github.com/NixOS/nixpkgs">Nix packages&lt;/a> to pull in third-party dependencies.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Coverage-guided test selection:&lt;/strong> It&amp;rsquo;s a common problem to have integration tests that depend on pretty much all of the codebase, which in turn causes test runs to take too long and nullifies Bazel&amp;rsquo;s test caching features. Coverage metrics can be useful in implementing a heuristic to identify which subset of the integration tests to run on a given change at the expense of occasional false negatives.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Classes in Starlark:&lt;/strong> Aspect has come up with an idiom to represent classes in Starlark, and they claim it has simplified maintenance of their JavaScript rules significantly. Worth a look.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Monorepos and Git:&lt;/strong> VMware claims that Perforce is much faster than Git at syncing GBs of source code (1min vs. 12min). Meroton has developed a &amp;ldquo;monorepo emulation&amp;rdquo; mode on top of many small Git repos leveraging Gerrit&amp;rsquo;s cross-repo atomic commits. AOSP (Android) has done something similar.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Abusing &amp;ldquo;exec requirements&amp;rdquo; to tune remote workers:&lt;/strong> &lt;a href="https://stripe.com/">Stripe&lt;/a> has implemented lots of custom features to tune the behavior of remote workers via &amp;ldquo;exec requirement&amp;rdquo; tags at the action/target level. They can do things like mock time on the remote containers to exercise timing conditions (e.g. leap year switches) or to request access to certain internal-only network endpoints. They can also emit trace data from actions (by configuring a &amp;ldquo;listener&amp;rdquo; that propagates those details) and then merge such traces into the Bazel &lt;a href="https://bazel.build/advanced/performance/json-trace-profile">JSON trace profile&lt;/a> to show what exactly the long-running actions are doing. Think visualizing what a nested &lt;code>make -j8&lt;/code> is doing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Building without the Internet:&lt;/strong> Salesforce mirrors all external dependencies internally and denies all downloads by default from untrusted sources. They do allow the build farm to talk to internal sources to fetch artifacts though, because their tests need to do that. The &amp;ldquo;resolved file&amp;rdquo; feature in Bazel can help create a catalog of dependencies, and the &amp;ldquo;download config&amp;rdquo; to deny external access.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>RE for arbitrary builds:&lt;/strong> EngFlow is doing a lot of work to support arbitrary builds using remote execution, not just Bazel builds. They have &amp;ldquo;revived&amp;rdquo; &lt;a href="https://github.com/bazelbuild/reclient">Google&amp;rsquo;s reclient&lt;/a>&amp;mdash;a compiler wrapper that uses RE&amp;mdash;and offer support for CMake. The idea in CMake is to use reclient where possible (compiling and linking) and to run CMake itself on a remote worker to paper over the limitations of actions not supported by reclient.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Memory consumption is a widespread problem:&lt;/strong> Everybody dislikes how Bazel consumes memory. Google is doing work on this and we should continue to see improvements. One that sounded promising is the addition of support to discard partial parts of the build graph (e.g. for things not in the critical path).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Blogging is cool:&lt;/strong> Many people opened with &amp;ldquo;I read your blog!&amp;rdquo; upon meeting them which was&amp;hellip; flattering, I must confess. I need to write more. Subscribe to this blog if you haven&amp;rsquo;t yet!&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="reference-material">Reference material&lt;/h1>
&lt;p>A bunch of papers mentioned during the many discussions that happened:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.inf.u-szeged.hu/~gertom/Kutatas/BGS12.pdf">Code Coverage-Based Regression Test Selection and Prioritization in WebKit&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://research.google/pubs/pub48413/">Code Coverage at Google&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/facebook/sapling">Sapling from Facebook (git-compatible highly-scalable SCM)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.microsoft.com/en-us/research/uploads/prod/2018/03/build-systems.pdf">Build systems à la carte&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/microsoft/scalar">Scalar (Microsoft extensions for very large git repos)&lt;/a>&lt;/li>
&lt;/ul></description><enclosure url="https://jmmv.dev/images/2023-10-30-bazelcon.jpg" length="663230" type="image/jpeg"/></item><item><title>Hello, Blog System/5!</title><link>https://jmmv.dev/2023/10/hello-blog-system5.html</link><pubDate>Fri, 27 Oct 2023 16:14:00 +0200</pubDate><guid>https://jmmv.dev/2023/10/hello-blog-system5.html</guid><description>&lt;p>&lt;a href="https://blogsystem5.substack.com/">Blog System/5&lt;/a> is my new Substack publication in which I write about the variety of software and systems engineering topics that pique my interest. If that sounds too generic to you, it&amp;rsquo;s because it is: there are too many cool things to write about!&lt;/p>
&lt;p>But in particular, I&amp;rsquo;ll be covering:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>operating systems, including the BSDs, Linux, macOS and maybe Windows;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>build systems, which mostly means Bazel;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>programming languages, including Rust and shell (talk about opposites!);&lt;/p>
&lt;/li>
&lt;li>
&lt;p>and general engineering practices to build sustainable, high-quality systems.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>My essays are based on my day-to-day professional experiences at Google as an SRE in the storage stack and SWE in Blaze; Microsoft as an SDE in Azure Storage; and Snowflake as a SWE in developer productivity. But also, these essays are based on my own side projects like &lt;a href="https://www.endbasic.dev/">EndBASIC&lt;/a> or &lt;a href="https://shtk.jmmv.dev/">shtk&lt;/a>, and on my distant past contributions to FreeBSD, NetBSD and Gnome.&lt;/p>
&lt;blockquote>
&lt;p>Subscribe now to help build a community of like-minded individuals. It&amp;rsquo;s free, and a stable subscribers group makes a difference!&lt;/p>
&lt;p>&lt;a href="https://blogsystem5.substack.com/">https://blogsystem5.substack.com/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h1 id="but-why">But why?&lt;/h1>
&lt;p>You may have read my blog at &lt;a href="https://jmmv.dev/">https://jmmv.dev/&lt;/a> (this site), which is still alive and kicking, so what&amp;rsquo;s up with this newsletter? Doesn&amp;rsquo;t the introduction above sound exactly like what my blog is about?&lt;/p>
&lt;p>Well&amp;hellip; yeah, but I want to run an experiment. Growing the readership of my home-grown blog has been extremely hard: some of my articles occasionally end up in the Hacker News front page, but those only result in one-off traffic spikes with no recurrent engagement, which is a tad sad. I&amp;rsquo;ve witnessed other authors build nice communities around their publications in Substack, so I want to check first-hand how this platform helps achieve those goals.&lt;/p>
&lt;p>My tentative plan is to post new articles here first and then re-post them to my personal blog a few days later. The reasons for this structure are two: first, because I want to &lt;a href="/2016/01/medium-experiment-wrapup.html">own my content long-term&lt;/a>; and, second, because I do not want to force you all to subscribe to Substack if you don&amp;rsquo;t want to: the usual &lt;a href="/feed.xml">RSS&lt;/a> and &lt;a href="/2023/06/in-house-email-subscriptions.html">email subscription mechanism&lt;/a> will continue to work.&lt;/p>
&lt;p>But&amp;hellip; I can imagine sending you some &amp;ldquo;fresh&amp;rdquo; content that wouldn&amp;rsquo;t really fit as a long-form blog article, but I&amp;rsquo;m not sure yet. So, we&amp;rsquo;ll see.&lt;/p>
&lt;h1 id="whats-in-the-name">What&amp;rsquo;s in the name?&lt;/h1>
&lt;p>It&amp;rsquo;s weird, isn&amp;rsquo;t it? Where does it come from? Simply put, I like original blog titles that refer to technology products or concepts, so I wanted one like those too. OS/2 Warp 3 was the alternate operating system that led me into my adventure away from Windows and towards great outcomes back in 1995, so Blog System/5 pays a tribute to that even if I likely won&amp;rsquo;t be blogging about OS/2 at all.&lt;/p>
&lt;p>So what about the 5? As it turns out, this is the fifth (I &lt;em>think&lt;/em>) iteration of my blog. Going back almost 20 years, my writing journey started in LiveJournal, then moved onto Blogger, then onto a brief stint with Medium, then onto my self-hosted site, and then onto here. If this experiment goes sideways&amp;hellip; well, I&amp;rsquo;ll just keep the title and number for the blog. I like odd numbers.&lt;/p>
&lt;h1 id="whats-next">What&amp;rsquo;s next?&lt;/h1>
&lt;p>Easy. You &lt;em>subscribe now&lt;/em> and you receive my detailed recap of BazelCon 2023 as soon as I finish writing it in the next few days. Plus, of course, you&amp;rsquo;ll also receive all future articles and maybe we can build a community around those topics. Don&amp;rsquo;t hesitate to share your thoughts along the way!&lt;/p></description><enclosure url="https://jmmv.dev/images/2023-10-28-blog-system5-logo.png" length="76109" type="image/jpeg"/></item><item><title>Build farm visualizations</title><link>https://jmmv.dev/2023/10/build-farm-visualizations.html</link><pubDate>Fri, 20 Oct 2023 09:00:00 -0700</pubDate><guid>https://jmmv.dev/2023/10/build-farm-visualizations.html</guid><description>&lt;p>If you have followed our &lt;a href="https://medium.com/snowflake/tagged/infrastructure">recent infrastructure posts&lt;/a>, you know by now that we are actively migrating Snowflake&amp;rsquo;s build to Bazel. What we haven&amp;rsquo;t shared yet is that we have deployed our own &lt;a href="https://github.com/buildbarn">Build Barn&lt;/a> cluster to support Bazel&amp;rsquo;s remote execution features. We have chosen to run our own build farm service for resource governance and security purposes, but also because the behavior of this system impacts the developer experience so directly that we want to have full in-house control and knowledge of it.&lt;/p>
&lt;p>Things haven&amp;rsquo;t been smooth-sailing though. While the initial deployment was simple, resource provisioning, performance tuning, and stability have been a struggle. Folks in the Build Barn community advised us to over-provision the cache and the worker pool&amp;mdash;and we did&amp;mdash;but such advice didn&amp;rsquo;t sound quite right: we had already invested as many resources in the build farm as we were using for our legacy builds, yet the Bazel builds couldn&amp;rsquo;t keep up with the load.&lt;/p>
&lt;p>All combined, this was not a great story: users saw builds failing and we didn&amp;rsquo;t have a good grasp about what was going on. Until&amp;hellip; we could &lt;em>see&lt;/em> into the build farm behavior. As soon as we had pictures, the source of these problems became obvious. Let&amp;rsquo;s take a peek at what problems we had, how visualizations helped us diagnose them, and what solutions we applied.&lt;/p>
&lt;h1 id="initial-setup">Initial setup&lt;/h1>
&lt;p>When we deployed Build Barn at the beginning of the year in an in-house Kubernetes cluster, we didn&amp;rsquo;t put much thought into resource provisioning because our needs were modest. As we made progress through the migration, and as soon as we had the main product and its tests building with Bazel, we had to set up required Bazel build validation within our Continuous Integration (CI) system to minimize the chances of build regressions. This increased the load on the build farm as well as its reliability expectations.&lt;/p>
&lt;p>Unfortunately, these led us to infrastructure problems. When those happened, all indicators pointed at issues in the build farm&amp;rsquo;s shared cache nodes. We didn&amp;rsquo;t have many metrics in place yet, but the few we had told us that the cache wasn&amp;rsquo;t keeping up in size or in performance, and we saw significant action queuing. Our reaction was to address the seemingly-obvious cause: the shared cache nodes were backed by slow EBS devices, so we moved them to locally-attached NVMe flash drives. Surprisingly though, this made little difference in overall performance.&lt;/p>
&lt;p>Why? Why was it that the build farm could not keep up under load?&lt;/p>
&lt;h1 id="profiling">Profiling&lt;/h1>
&lt;p>My own hypothesis was that our cache nodes were starved of network. This was based on the observation that we have relatively few of them serving hundreds of workers and clients, and that the pathological workloads that brought us to the outages involved very large artifacts staged on many workers. We had no good data to prove this because we hadn&amp;rsquo;t yet added enough instrumentation to find a smoking gun, and the few metrics we had didn&amp;rsquo;t implicate the network.&lt;/p>
&lt;p>Resolving this issue was in our critical path to complete the Bazel migration so I was determined to get a better understanding of it. Two previous bits of knowledge helped reach a solution: past experience with &lt;a href="https://tools.bsc.es/paraver">Paraver&lt;/a>, a cluster-level trace visualization tool to observe execution behavior across machines, and the &lt;a href="https://bazel.build/advanced/performance/json-trace-profile">trace profile that Bazel emits&lt;/a>, which looks strikingly similar but is &lt;a href="https://www.chromium.org/developers/how-tos/trace-event-profiling-tool/">opened via Chrome&lt;/a>.&lt;/p>
&lt;p>I spent a couple of hours prototyping a Python script that queries the database into which we dump build farm events, fetches action scheduling details during a time period, and turns those into a Chrome trace. The idea here was to show, for each worker node in the cluster, what each of its execution threads was doing. That is, I was interested in seeing whether each thread was:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>idle&lt;/strong>,&lt;/li>
&lt;li>&lt;strong>downloading&lt;/strong> input artifacts from the shared cache,&lt;/li>
&lt;li>&lt;strong>executing&lt;/strong> an action,&lt;/li>
&lt;li>or &lt;strong>uploading&lt;/strong> output artifacts to the shared cache.&lt;/li>
&lt;/ol>
&lt;p>Here is one of the first pictures I obtained for a time period where we observed significant action queuing and thus build farm performance degradation:&lt;/p>
&lt;figure>
&lt;img src="/images/2023-10-20-old-farm-io-issues-trace.png" class="with-border">
&lt;figcaption>2023-09-13 17:40–18:15 UTC: The X axis shows time and the Y axis shows worker nodes / thread pairs. In the Y axis you can see gray bars with the worker names, each grouping 8 execution threads. Then, for each worker node / thread pair, there are two horizontal colored bars: the bar at the top indicates the name of the action that’s currently running on the execution thread, and the bar at the bottom provides a breakdown of the download, execution, and upload phases.&lt;/figcaption>
&lt;/figure>
&lt;p>You can click to zoom into the picture, but the key thing to notice is this: orange corresponds to download/upload whereas green corresponds to execution. And the majority of the picture is orange.&lt;/p>
&lt;p>This was the first indication that we truly had networking problems as I originally set out to prove. But while this visualization is really powerful to pinpoint the issue, it&amp;rsquo;s hard to quantify it. So I performed other computations and found that, for this period of time, workers were 97% utilized yet&amp;hellip; they were only executing actions 20% of the time. A whopping 77% of the time was being lost to the network.&lt;/p>
&lt;p>Or, shown another way: if we graph the different phases per second, we get this graph:&lt;/p>
&lt;figure>
&lt;img src="/images/2023-10-20-old-farm-io-issues-chart.png" class="with-border">
&lt;figcaption>2023–09–13 17:40–18:15 UTC: Tally of where build farm processing time goes during the first 100 seconds of this time window. For each second, we can see what percentage of the time is spent in each phase.&lt;/figcaption>
&lt;/figure>
&lt;p>Much easier to see the problem and much easier to see that the networking overheads are constant over time.&lt;/p>
&lt;h1 id="was-it-the-network-though">Was it the network though?&lt;/h1>
&lt;p>So far, everything pointed at the network being the problem. But then, I looked at different time periods when the cluster wasn&amp;rsquo;t experiencing queuing and I also looked at the staging cluster which barely had any traffic. And, surprise, &lt;em>all of them&lt;/em> showed the same profile: no matter how busy a cluster was, the workers were only able to execute actions for about 2/3rds of their time.&lt;/p>
&lt;p>This made no sense. If the problems were with the network, and the assumption was that the cache nodes were starved of network bandwidth, we should only see this behavior during high traffic. Without extra visibility into network metrics, which we didn&amp;rsquo;t have, I was out of ideas, so I did what I always do: write.&lt;/p>
&lt;p>I collected my thoughts into a shared document and shared it with the team. Almost accidentally, a teammate left a comment saying that the workers were using EBS for their scratch disk space. This was the &lt;em>aha moment&lt;/em> we needed: based on previous experience running Bazel on VMs backed by EBS, we knew that EBS&amp;rsquo; IOPS were insufficient for the high demands of a build, and the same likely applied to the workers.&lt;/p>
&lt;p>This theory made immediate sense to the team too, so we proceeded to reconfigure our staging cluster with tmpfs for the workers&amp;rsquo; scratch disk space instead of EBS. While RAM-hungry, tmpfs would provide us with the best-case performance scenario. If the experiment succeeded, we could later re-analyze whether we wanted to keep using RAM or to find another VM SKU type with a local disk to cut costs.&lt;/p>
&lt;p>We rolled out the change to staging and it looked very promising: our reduced collection of workers showed that the fetch and upload phases went to almost zero.&lt;/p>
&lt;h1 id="scheduler-woes">Scheduler woes&lt;/h1>
&lt;p>But here is what happened after we rolled this out to production because, even with the tmpfs fix, we observed &lt;em>another&lt;/em> queuing outage:&lt;/p>
&lt;figure>
&lt;img src="/images/2023-10-20-new-farm-scheduler-issues-trace.png" class="with-border">
&lt;figcaption>2023-10-02 21:00–22:00: Trace view. Same description as before.&lt;/figcaption>
&lt;/figure>
&lt;p>There was queuing but the cluster was&amp;hellip; almost idle? Metrics said the workers&amp;rsquo; overall utilization was 14% of which 12% was execution. Put another way:&lt;/p>
&lt;figure>
&lt;img src="/images/2023-10-20-new-farm-scheduler-issues-chart.png" class="with-border">
&lt;figcaption>2023-10-02 21:00–22:00: Phase breakdown during the first 100 seconds.&lt;/figcaption>
&lt;/figure>
&lt;p>As you can see in both pictures, the cluster showed almost no activity. We had significant queuing but the cluster was mostly idle. It was great to see that the fetch and upload bands had almost disappeared, but now the workers were not being utilized.&lt;/p>
&lt;p>Answering this piece of the puzzle was easier. If the workers weren&amp;rsquo;t receiving enough work to do, we had problems either in the job scheduler or in the frontends. Fortunately, we &lt;em>did&lt;/em> have metrics on the CPU consumption of these actors of the system and they showed a clear problem: the scheduler had an allocation of 0.3 CPUs and it was maxed out.&lt;/p>
&lt;p>Now&amp;hellip; 0.3 CPUs?! Yes, that was ridiculously low: when provisioning a distributed system, if you have a singleton job, you&amp;rsquo;ll want to over-provision it just in case because, in the grand scheme of things, the cost will be negligible. But we had a low reservation, probably because of a copy/pasted configuration from months ago that we had no reason to revisit.&lt;/p>
&lt;p>We had to revisit this CPU allocation now. We gave the scheduler more CPU and more RAM and waited for the next burst of activity.&lt;/p>
&lt;h1 id="stunning-performance">Stunning performance&lt;/h1>
&lt;p>Here is what we saw after bumping up the scheduler CPU and RAM reservations during another busy time period:&lt;/p>
&lt;figure>
&lt;img src="/images/2023-10-20-new-farm-good-trace.png" class="with-border">
&lt;figcaption>2023-10-03 23:57–23:59: Trace view. Same description as before.&lt;/figcaption>
&lt;/figure>
&lt;p>Notice the green bars? Or rather&amp;hellip; the lack of orange bars? That&amp;rsquo;s right. The workers were now 99% utilized with 97% of their time going into execution. And if we look into the other view of this same data:&lt;/p>
&lt;figure>
&lt;img src="/images/2023-10-20-new-farm-good-chart.png" class="with-border">
&lt;figcaption>2023-10-03 23:57–23:59: Phase breakdown during the first 100 seconds.&lt;/figcaption>
&lt;/figure>
&lt;p>We can also see a sea of green with almost no network transfers and no idle time during busy periods. Problem(s) solved.&lt;/p>
&lt;p>Our build farm can now support roughly 3x the load that it ran before. Disk-intensive tests are now as fast as when they run on a local development environment. And incremental builds are faster because of reduced end-to-end action execution times. But we aren&amp;rsquo;t done yet! While the system is now performing well, there are additional tuning operations we must do to improve the reliability of the system, to minimize hiccups during maintenance periods, and to reduce the overall monetary cost.&lt;/p>
&lt;h1 id="takeaways">Takeaways&lt;/h1>
&lt;p>Here are my takeaways from this exercise:&lt;/p>
&lt;ol>
&lt;li>Visualizations are an incredibly powerful tool to understand a distributed system. You can have all the metrics and time series you want about individual performance indicators, but unless you can tie them together and give them meaning, you&amp;rsquo;ll likely not understand what&amp;rsquo;s going on. In our case, the trace visualizations enlightened us almost immediately once we could see them.&lt;/li>
&lt;li>Hypotheses are great to guide investigations, but measurements are crucial to come out with the correct root causes. In this case, I started with the assumption that we had problems in the cache nodes due to network starvation, and while we did end up finding network issues, they were in a completely different part of the system.&lt;/li>
&lt;li>Investing time into learning the metrics that your team&amp;rsquo;s telemetry collects is one of the best things you can do during onboarding. For me, this is the third time I join a team and postpone learning the schema and the queries needed to make sense of the data that the team collected, and I&amp;rsquo;ve regretted the delay every time. You can solve a ton of problems by just knowing where and how to look at existing data; stopping to learn these will pay dividends quickly.&lt;/li>
&lt;li>Developer productivity is an exciting area to work on. Don&amp;rsquo;t get fooled by folks or even companies that treat build engineers as second-class citizens. Developer productivity is a really broad area of engineering that covers everything from single-machine kernel-level tuning to distributed systems troubleshooting, while also interacting with (internal) customers and creating delightful user interfaces.&lt;/li>
&lt;/ol>
&lt;p>Sounds like the kind of thing you&amp;rsquo;d like to work on? &lt;a href="https://careers.snowflake.com/us/en/search-results?keywords=developer+productivity">Join our team!&lt;/a> 🙂&lt;/p></description></item><item><title>Unit-testing shell scripts and tools with shtk</title><link>https://jmmv.dev/2023/10/unit-testing-with-shtk.html</link><pubDate>Wed, 11 Oct 2023 08:30:00 -0700</pubDate><guid>https://jmmv.dev/2023/10/unit-testing-with-shtk.html</guid><description>&lt;p>While working on this static blog a few days ago, I made a change to its templates that warranted an automated test. I could have written a trivial shell script to do it, but instead I reached out for shtk&amp;rsquo;s unit-testing module. I &lt;a href="https://twitter.com/jmmv/status/1710309896670081083">tweeted about it&lt;/a> right away to just say that you can, in fact, write tests in shell because lots of developers are skeptical about any script longer than 10 lines of code.&lt;/p>
&lt;p>Interestingly, this reply came through: a pointer to a contemporary, under-development library for writing tests in Bash. Which made me think: &amp;ldquo;Hey, I had already done that years ago&amp;hellip; but nobody knows about it. Gotta fix that with a blog post!&amp;rdquo; But first, I had to bring shtk back from its ashes because I had not touched it for more than 6 years and it wasn&amp;rsquo;t read for show and tell. So I did something that I wanted to do back in the day but never did: I put together &lt;a href="https://shtk.jmmv.dev/">a website for shtk&lt;/a> to host its &lt;a href="https://shtk.jmmv.dev/docs.html">reference manual&lt;/a> and I fixed a few obvious rough edges.&lt;/p>
&lt;p>With those tweaks out of the way, we come to this article. In here, I want to show you how writing decent tests in shell is entirely possible and how shtk&amp;rsquo;s testing platform provides unique features to do integration testing of CLI apps written in any language.&lt;/p>
&lt;div class="container action-highlight p-4 my-4 d-md-none">
&lt;div class="row text-center">
&lt;p>A blog on operating systems, programming languages, testing, build systems, my own software
projects and even personal productivity. Specifics include FreeBSD, Linux, Rust, Bazel and
EndBASIC.&lt;/p>
&lt;/div>
&lt;div class="row">
&lt;div class="col">
&lt;div class="form-group">
&lt;form action="https://endtracker.azurewebsites.net/api/sites/e8da9f62-b7ac-4fe9-bf20-7c527199a376/subscribers/add" method="post">
&lt;input type="text" name="email"
placeholder="Enter your email"
class="form-control input-sm text-center my-1"/>
&lt;button type="submit" class="btn btn-primary btn-block my-1">Subscribe&lt;/button>
&lt;/form>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="row px-2">
&lt;div class="col col-sm-5 text-left">
&lt;small>&lt;span class="subscriber-count">0&lt;/span> subscribers&lt;/small>
&lt;/div>
&lt;div class="col col-sm-7 text-right">
&lt;p>
&lt;a rel="me" href="https://mastodon.online/@jmmv">
&lt;img src="/images/badges/mastodon-logo.svg" width="32px" height="32px" alt="Follow @jmmv on Mastodon">
&lt;/a>
&lt;a href="https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fjmmv.dev%2F&amp;amp;screen_name=jmmv">
&lt;img src="/images/badges/Twitter_logo_blue.svg" width="32px" height="32px" alt="Follow @jmmv on Twitter">
&lt;/a>
&lt;a href="/feed.xml">&lt;img src="/images/badges/feed-icon-28x28.png" alt="RSS feed">&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h1 id="what-is-shtk-anyway">What is shtk anyway?&lt;/h1>
&lt;p>The Shell Toolkit, or shtk for short, is a collection of libraries to support the writing of portable shell scripts. shtk grew out of &lt;a href="http://blog.netbsd.org/tnf/entry/introducing_sysbuild_and_sysupgrade">sysbuild and sysupgrade&lt;/a>&amp;rsquo;s common code, a couple of tools I wrote over 10 years ago for NetBSD and that are fully written in shell because of the constraints of the NetBSD base system. In turn, this means that shtk is &lt;em>not&lt;/em> Bash-specific so it avoids imposing a &lt;a href="/2021/08/useless-use-of-gnu.html">useless use of GNU&lt;/a>.&lt;/p>
&lt;p>From the get go, all of shtk, sysbuild, and sysupgrade had unit tests written with atf-sh, the shell testing library of the &lt;a href="/software/atf.html">Automated Testing Framework&lt;/a>. atf-sh was a rather simplistic library created by yours truly in 2007 and required a complex runtime (atf-run or, later, &lt;a href="/software/kyua.html">Kyua&lt;/a>) to be functional. By 2014, while working at Google, I had been exposed to better ways of writing tests that blended better with the languages they supported (pyUnit and JUnit), and I knew that I needed a replacement for atf-sh.&lt;/p>
&lt;p>Hence, in 2014, I took the best parts of atf-sh, the core concepts of the xUnit test frameworks, and I created shtk&amp;rsquo;s &lt;code>unittest&lt;/code> module. I then proceeded to migrate all existing tests to this new framework and also used shtk to &lt;a href="/2017/02/introducing-pkg_comp-2.0.html">build pkg_comp 2.x later on in 2017&lt;/a>. But I failed to publicize the library because I didn&amp;rsquo;t quite know how to put together a cool-looking website and I didn&amp;rsquo;t have a good platform to talk about it&amp;mdash;both of which are fixed now.&lt;/p>
&lt;h1 id="installing-shtk">Installing shtk&lt;/h1>
&lt;p>If you are on NetBSD or on FreeBSD, you are in luck! There are packages for shtk ready to install, so go ahead and use those.&lt;/p>
&lt;p>On any other system, you&amp;rsquo;ll have to build shtk from source. Fear not, it&amp;rsquo;s easy:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ curl -LO https://github.com/jmmv/shtk/releases/download/shtk-1.7/shtk-1.7.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tar xzf shtk-1.7.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cd shtk-1.7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./configure --prefix ~/.local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ make
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After a successful installation, you should have the &lt;code>shtk&lt;/code> tool in your path. If that&amp;rsquo;s not the case, do this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ PATH=&amp;#34;${HOME}/.local/bin:${PATH}&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ export MANPATH=&amp;#34;${HOME}/.local/share/man:${MANPATH}&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Setting up the &lt;code>MANPATH&lt;/code> is important. shtk&amp;rsquo;s official documentation is written as manual pages to seamlessly integrate with the Unix-y environment it&amp;rsquo;s intended to complement, so you&amp;rsquo;ll want &lt;code>man&lt;/code> invocations to work. If you are curious, start by peeking into &lt;a href="https://shtk.jmmv.dev/shtk.1.html">&lt;code>shtk(1)&lt;/code>&lt;/a> and &lt;a href="https://shtk.jmmv.dev/shtk.3.html">&lt;code>shtk(3)&lt;/code>&lt;/a>.&lt;/p>
&lt;h1 id="creating-our-first-test">Creating our first test&lt;/h1>
&lt;p>Now that we have shtk up and running, let&amp;rsquo;s create a test. Write the following contents to a file named &lt;code>demo_test.sh&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">shtk_import unittest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">shtk_unittest_add_test always_fails
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">always_fails_test&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert_equal &lt;span class="m">2&lt;/span> &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;NOT REACHED!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Done? OK. Something looks funny, doesn&amp;rsquo;t it? &lt;code>shtk_import&lt;/code> is a shell function that brings the &lt;code>unittest&lt;/code> module into scope. But&amp;hellip; where does that function come from? Well, here is the thing: shtk scripts need to be &amp;ldquo;built&amp;rdquo; before they can run. In order for the above to become a runnable test program, you have to do the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ shtk build -m shtk_unittest_main demo_test.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After running the above, you&amp;rsquo;ll end up with a &lt;code>demo_test&lt;/code> executable. This &amp;ldquo;executable&amp;rdquo; is essentially the same as &lt;code>demo_test.sh&lt;/code> but with some preamble code to set up the module import features and a call to the &lt;code>shtk_unittest_main&lt;/code> entry point to execute the tests.&lt;/p>
&lt;p>Once the script is built, run it and see the single test fail:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ ./demo_test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: I: Testing always_fails...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: E: Expected value 2 but got 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: W: Testing always_fails... FAILED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: W: Ran 1 tests; 1 FAILED
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="advanced-xunit-like-features">Advanced xUnit-like features&lt;/h1>
&lt;p>The above is nice but&amp;hellip; pretty&amp;hellip; simple? Anyone can write a conditional to check if two values are equal without the need for &amp;ldquo;fancy frameworks&amp;rdquo;, right? Right. But shtk provides much more.&lt;/p>
&lt;p>Just like asserts, shtk also comes with expects to record soft failures: all &lt;code>assert_*&lt;/code> functions have an &lt;code>expect_*&lt;/code> counterpart. If we tweak our previous test to look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">shtk_import unittest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">shtk_unittest_add_test always_fails
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">always_fails_test&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expect_equal &lt;span class="m">2&lt;/span> &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;REACHED!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expect_equal &lt;span class="m">4&lt;/span> &lt;span class="m">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We get the following, which shows how the two expect commands ran and detected a failure but didn&amp;rsquo;t stop execution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ shtk build -m shtk_unittest_main demo_test.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./demo_test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: I: Testing always_fails...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: W: Delayed failure: Expected value 2 but got 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">REACHED!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: W: Delayed failure: Expected value 4 but got 5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: W: Testing always_fails... FAILED (2 delayed failures)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: W: Ran 1 tests; 1 FAILED
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In general, when writing a test, you use asserts for any step that prepares the test scenario, and you use expects for the test scenario itself. This way, the test fails early if it is unable to set up the scenario (because it makes no sense to continue if the scenario is not set up), but it prints as much diagnostic information as possible if the actual test detects problems half-way through.&lt;/p>
&lt;p>What about fixtures? Setup and teardown routines? shtk has got you covered too:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">shtk_import unittest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">shtk_unittest_add_fixture sample
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sample_fixture&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> setup&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Common setup code&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="m">123&lt;/span> &amp;gt;data.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> teardown&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Common cleanup code&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rm -f data.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> shtk_unittest_add_test ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ok_test&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert_equal &lt;span class="m">123&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>cat data.txt&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="m">125&lt;/span> &amp;gt;data.txt &lt;span class="c1"># Overwrites transient file.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> shtk_unittest_add_test not_ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> not_ok_test&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert_equal &lt;span class="m">125&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>cat data.txt&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Running the above does as you would expect:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ shtk build -m shtk_unittest_main demo_test.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./demo_test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: I: Testing sample__ok...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Common setup code
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Common cleanup code
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: I: Testing sample__ok... PASSED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: I: Testing sample__not_ok...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Common setup code
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: E: Expected value 125 but got 123
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Common cleanup code
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: W: Testing sample__not_ok... FAILED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: W: Ran 2 tests; 1 FAILED
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note how the setup and teardown routines were executed for each test, which means that the &lt;code>data.txt&lt;/code> file was recreated for every test case and the modifications to the file from one test didn&amp;rsquo;t impact the outcome of the other.&lt;/p>
&lt;h1 id="the-secret-sauce-assert_command">The secret sauce: assert_command&lt;/h1>
&lt;p>So far, everything looks very xUnit-like. We have asserts and expects; we have test setup and teardown hooks; we have fixtures. But shell scripts are uniquely suited to test the user interface of a CLI app: after all, users interact with CLI apps from the shell, so it&amp;rsquo;s only natural to use the shell to test arbitrary tools no matter what language they are written in. This is where shtk&amp;rsquo;s magic sauce comes into play.&lt;/p>
&lt;p>shtk&amp;rsquo;s &lt;code>assert_command&lt;/code> check allows you to run an arbitrary command and to declaratively check its exit condition and its side-effects on stdout and stderr. The feature is inspired by &lt;a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.68/html_node/Writing-Testsuites.html">&lt;code>AT_CHECK&lt;/code> in GNU Autoconf&lt;/a>, to which I was exposed even longer ago (circa 2005) while working on the Monotone project.&lt;/p>
&lt;p>Take a look at these tests that exercise the &lt;code>cp&lt;/code> tool and pay close attention to the &lt;code>assert_command&lt;/code> calls:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">shtk_import unittest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">shtk_unittest_add_test cp_ok
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp_ok_test&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> touch a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert_command cp a b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span> -f b &lt;span class="o">]&lt;/span> &lt;span class="o">||&lt;/span> fail &lt;span class="s2">&amp;#34;b was not created&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">shtk_unittest_add_test cp_missing_source
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp_missing_source_test&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert_command -s exit:1 -e match:&lt;span class="s2">&amp;#34;No such file&amp;#34;&lt;/span> cp a b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">shtk_unittest_add_test cp_unexpected_output
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp_unexpected_output_test&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert_command -s exit:1 -o match:&lt;span class="s2">&amp;#34;Hello&amp;#34;&lt;/span> cp a b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the first test, &lt;code>cp_ok&lt;/code>, the call to &lt;code>assert_command&lt;/code> has no flags. This means that we expect the command given to the assert to finish successfully and quietly: the exit code of &lt;code>cp a b&lt;/code> should be 0, and both stdout and stderr should be silent.&lt;/p>
&lt;p>In the second test, &lt;code>cp_missing_source&lt;/code>, the call to &lt;code>assert_command&lt;/code> specifies that the command under test has to terminate with an exit code of 1, and that stderr has match the &lt;code>No such file&lt;/code> regular expression.&lt;/p>
&lt;p>In the third test, &lt;code>cp_unexpected_output&lt;/code>, the call to &lt;code>assert_command&lt;/code> expects a message to stdout that &lt;code>cp&lt;/code> will not print, and also implies that stderr should be empty.&lt;/p>
&lt;p>When we run the above after compilation, we get:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ shtk build -m shtk_unittest_main demo_test.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./demo_test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: I: Testing cp_ok...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Running checked command: cp a b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: I: Testing cp_ok... PASSED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: I: Testing cp_missing_source...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Running checked command: cp a b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: I: Testing cp_missing_source... PASSED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: I: Testing cp_unexpected_output...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Running checked command: cp a b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Expected regexp &amp;#39;Hello&amp;#39; not found in standard output:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Expected standard error to be empty; found:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp: a: No such file or directory
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: E: Check of &amp;#39;cp a b&amp;#39; failed; see stdout for details
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: W: Testing cp_unexpected_output... FAILED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo_test: W: Ran 3 tests; 1 FAILED
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the first two tests passed, but pay attention to the output of the third failed test: the call to &lt;code>assert_command&lt;/code> reports that neither stdout nor stderr matched what we expected and provides details on why.&lt;/p>
&lt;p>I invite you to take a look at the documentation in &lt;a href="https://shtk.jmmv.dev/shtk_unittest_assert_command.3.html">&lt;code>shtk_unittest_assert_command(3)&lt;/code>&lt;/a> and its supporting &lt;a href="https://shtk.jmmv.dev/shtk_unittest_assert_file.3.html">&lt;code>shtk_unittest_assert_file(3)&lt;/code>&lt;/a> as the features they provide are too numerous to be captured in this post.&lt;/p>
&lt;h1 id="using-gnu-automake-as-a-test-runner">Using GNU Automake as a test runner&lt;/h1>
&lt;p>Up until here, I have shown you the features that the shtk library itself provides&amp;hellip; but a testing library to write test programs with is not very useful on its own. What happens when you want to run more than one test program at once? How do you set up the test environment so that tests always run in a consistent manner, free from side-effects? How do you collect results for reporting?&lt;/p>
&lt;p>This is where test runners come into play, and there are many to choose from. But again, given the nature of shtk and its desire to blend into Unix-y environments, integrating with the de-facto build system of all foundational software is important. So, yes, shtk tests can run via GNU Automake. The test runner provided by this build system isn&amp;rsquo;t state-of-the-art, but it is more than enough for most situations.&lt;/p>
&lt;p>Here is all it takes to hook the earlier &lt;code>demo_test.sh&lt;/code> shtk-based test into an Automake project:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">TESTS&lt;/span> &lt;span class="o">=&lt;/span> demo_test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">check_SCRIPTS&lt;/span> &lt;span class="o">=&lt;/span> demo_test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">CLEANFILES&lt;/span> &lt;span class="o">+=&lt;/span> demo_test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">EXTRA_DIST&lt;/span> &lt;span class="o">+=&lt;/span> demo_test.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">demo_test&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">$(&lt;/span>&lt;span class="nv">srcdir&lt;/span>&lt;span class="k">)&lt;/span>/&lt;span class="n">demo_test&lt;/span>.&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">$(&lt;/span>AM_V_GEN&lt;span class="k">)&lt;/span>shtk build -m shtk_unittest_main -o &lt;span class="nv">$@&lt;/span> $&amp;lt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You&amp;rsquo;d probably want to add a pkg-config check in &lt;code>configure.ac&lt;/code> to load the path to shtk from the provided &lt;code>shtk.pc&lt;/code> and reference it from here as &lt;code>$(SHTK)&lt;/code>, but I&amp;rsquo;ll leave that as an exercise for you, dear reader.&lt;/p>
&lt;p>After that, if we run &lt;code>make check&lt;/code>, we&amp;rsquo;ll see something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">make check-TESTS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PASS: demo_test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">============================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Testsuite summary for Demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">============================================================================
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># TOTAL: 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># PASS: 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># SKIP: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># XFAIL: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># FAIL: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># XPASS: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># ERROR: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">============================================================================
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Neat. Take a look at the &lt;a href="https://www.gnu.org/software/automake/manual/html_node/Tests.html">test suites documentation for GNU Automake&lt;/a> for more details on how to communicate specific return codes (such as &amp;ldquo;skip&amp;rdquo;) to the runner.&lt;/p>
&lt;h1 id="integrating-with-bazel">Integrating with Bazel&lt;/h1>
&lt;p>GNU Automake is the de-facto build system for open source projects but it&amp;rsquo;s also&amp;hellip; far from great. This is why I &lt;a href="/2022/05/remembering-buildtool.html">created Buildtool eons ago&lt;/a> and why I got interested in Bazel in the first place. So the question is: can we integrate shtk with Bazel? Of course we can!&lt;/p>
&lt;p>For the purposes of this post, I hacked up a Bazel rule to show off how running shtk tests with it would look like. And it looks exactly like you would expect:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;shtk.bzl&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;shtk_test&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">shtk_test&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;demo_test&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">src&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;demo_test.sh&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Followed by:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ bazel test --test_output=streamed :faulty_test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WARNING: Streamed test output requested. All tests will be run locally, without sharding, one at a time
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO: Analyzed target //:faulty_test (0 packages loaded, 2 targets configured).
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO: Found 1 test target...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">faulty_test: I: Testing faulty...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">faulty_test: E: This test fails
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">faulty_test: W: Testing faulty... FAILED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">faulty_test: W: Ran 1 tests; 1 FAILED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FAIL: //:faulty_test (see /home/jmmv/.cache/bazel/_bazel_jmmv/828d51923bded9f03acff0119df51adc/execroot/demo/bazel-out/k8-fastbuild/testlogs/faulty_test/test.log)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Target //:faulty_test up-to-date:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bazel-bin/faulty_test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO: Elapsed time: 0.355s, Critical Path: 0.14s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO: 2 processes: 2 linux-sandbox.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO: Build completed, 1 test FAILED, 2 total actions
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//:faulty_test FAILED in 0.0s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /home/jmmv/.cache/bazel/_bazel_jmmv/828d51923bded9f03acff0119df51adc/execroot/demo/bazel-out/k8-fastbuild/testlogs/faulty_test/test.log
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executed 1 out of 1 test: 1 fails locally.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Some of the benefits of the Bazel test runner over GNU Automake&amp;rsquo;s are that Bazel adds proper test isolation and cleanup via its local sandboxing feature and that Bazel provides fine-grained test invalidation when dependencies change. These are the two primary properties you want in a modern test runner because they ensure that only the minimum subset of tests run on a given source code change, and that the test results are deterministic across invocations and machines.&lt;/p>
&lt;h1 id="the-future">The future&lt;/h1>
&lt;p>Despite its many haters, the shell is a pretty OK language &lt;em>if you treat it as such&lt;/em>. You must learn its syntax and its oddities, but once you do, you can write maintainable and moderately-long programs that are, often enough, much simpler than their Python counterparts. These programs have few dependencies and, given sufficient test coverage, can be as robust as other tools. shtk is just an ingredient that can help you in writing such large scripts in a principled manner and, especially, in testing them.&lt;/p>
&lt;p>As for what the future will bring for shtk&amp;hellip; &lt;strong>you tell me!&lt;/strong> I had not worked on this project for 6 years and absolutely nobody asked about it during this time. But&amp;hellip; things have changed a lot since then and there might actually be some interest out there. In preparation for this blog post, I migrated shtk&amp;rsquo;s CI system from Travis to GitHub Actions, created a simple website to serve the API documentation&amp;mdash;which was previously locked behind &lt;code>man&lt;/code> invocations in a terminal&amp;mdash;and moved off from Kyua to GNU Automake as the test runner for simplicity.&lt;/p>
&lt;p>Some ideas about what could be done: additional library modules/functions; a &amp;ldquo;static build&amp;rdquo; feature where the built scripts don&amp;rsquo;t require shtk to be pre-installed; and real Bazel rules (what I showed above was a macro-based hack) to incorporate shtk into your projects so that you can test your command-line tools end-to-end no matter what language they are written in.&lt;/p>
&lt;p>Please let me know if you have any interest by either voting/replying below or reaching out via social media! And don&amp;rsquo;t forget to visit the brand-new homepage at &lt;a href="https://shtk.jmmv.dev/">https://shtk.jmmv.dev/&lt;/a> to read the documentation.&lt;/p></description><enclosure url="https://jmmv.dev/images/2023-10-11-shell-hammer-wrench.jpg" length="398237" type="image/jpeg"/></item><item><title>Analyzing OOMs in IntelliJ with Bazel</title><link>https://jmmv.dev/2023/10/analyzing-ooms-in-intellij-with-bazel.html</link><pubDate>Sat, 07 Oct 2023 12:00:00 -0700</pubDate><guid>https://jmmv.dev/2023/10/analyzing-ooms-in-intellij-with-bazel.html</guid><description>&lt;p>A few months ago, we described how we fixed &lt;a href="/2023/03/addressing-bazel-ooms.html">three different OOM scenarios&lt;/a> in our ongoing migration to the Bazel build system here at Snowflake. Things had been sailing along just fine since then&amp;hellip; but a new issue showed up recently: our &lt;a href="https://ij.bazel.build/">IntelliJ with Bazel (IjwB)&lt;/a> Java project started showing OOMs during its sync phase.&lt;/p>
&lt;p>The reason this issue surfaced now is because, as we continue our migration to Bazel, our IjwB project has grown in size. Months ago, our project only covered a Java binary, but now that we have migrated all of its unit and integration tests as well, the project covers them too. It is common for tests to be more expensive to build and run than the binary they validate&amp;mdash;tests depend on the binary&amp;rsquo;s dependencies &lt;em>plus&lt;/em> many other helper tools for testing&amp;mdash;and these caused the project to grow too big to fit in our development environments. Or did they?&lt;/p>
&lt;h1 id="context-setting">Context-setting&lt;/h1>
&lt;p>We run Bazel in a memory-constrained VM. We do this intentionally to support our varied fleet of corp laptops: our new hires get top-of-the-line M2 Max Macbooks, but a substantial number of developers are a few months away from a hardware refresh and may not have as much RAM.&lt;/p>
&lt;p>Up until now, giving a 4GB max heap to Bazel had been plenty to build and test our codebase. But, remember, things weren&amp;rsquo;t always this way: about a year ago, during our initial onboarding of remote execution, we had to bump the max heap size to 12GB. This bump was not sustainable due to the VM memory limits, and these limits forced us to pause and analyze why we needed much more RAM than the previous build system for similar user flows. This principled approach led us to find the right knobs in Bazel to make it run within the more reasonable 4GB limit and thus we avoided bumping up the resource requirements of the VM.&lt;/p>
&lt;p>Syncing our project in IjwB is another one of those situations where a constrained environment has been beneficial to discover inefficiencies and fix them in a way that doesn&amp;rsquo;t require wasting everyone&amp;rsquo;s resources. The naive solution to our problems would have been to increase Bazel&amp;rsquo;s max heap to 12 GB again with a corresponding bump in the VM memory allocation, telling all engineers with older laptops to refresh them. But&amp;hellip; that&amp;rsquo;d have been expensive and, worse, it would have left a sour taste for the ongoing Bazel migration.&lt;/p>
&lt;p>So the question was: if a max heap of 4GB was sufficient to build and test all of our codebase&amp;hellip; why did we need three times more memory &amp;ldquo;just&amp;rdquo; to sync the IjwB project? Our project is big&amp;hellip; but not &lt;em>that&lt;/em> big.&lt;/p>
&lt;h1 id="ijwb-project-syncing-and-sharding">IjwB project syncing and sharding&lt;/h1>
&lt;p>Project syncing in IjwB is an expensive operation. What this process does is build the project&amp;rsquo;s targets with a &lt;a href="https://bazel.build/extending/aspects">Bazel aspect&lt;/a> provided by the &lt;a href="https://plugins.jetbrains.com/plugin/8609-bazel-for-intellij">IjwB plugin&lt;/a>. This aspect attaches to the targets defined in the project file and extracts the information that the IDE needs to index them. This aspect is expensive in terms of memory consumption and was expected to throw off our earlier predictions on Bazel&amp;rsquo;s max heap needs.&lt;/p>
&lt;p>That said, because this aspect is known to be expensive, IjwB provides &lt;a href="https://ij.bazel.build/docs/project-views.html#shard_sync">a feature to shard the syncing process&lt;/a> in an attempt to reduce peak memory consumption. The idea behind project sharding is to make IjwB run the sync process on smaller sets of targets at a time instead of on the full project at once. For example, if the project specifies &lt;code>//server/...&lt;/code> as the target pattern to sync, IjwB will query all targets beneath &lt;code>//server/...&lt;/code>, divide them into roughly-equally sized groups, and then sync those groups separately instead of passing &lt;code>//server/...&lt;/code> to a single Bazel invocation.&lt;/p>
&lt;p>This feature was originally designed at Google to help with syncing gigantic targets in their monorepo, and it worked nicely for them. But, for some reason, it did not work for us. We tried multiple sharding settings and Bazel would still OOM. The key difference between our setup and Google&amp;rsquo;s was the memory constraint on Bazel&amp;rsquo;s max heap: we set this to 4GB while Google typically runs Bazel on powerful workstations with memory to spare and thus much higher max heap sizes.&lt;/p>
&lt;p>Could we do anything about it?&lt;/p>
&lt;h1 id="profiling">Profiling&lt;/h1>
&lt;p>To understand what was going on, we had to profile heap usage. Here is a first look into Bazel&amp;rsquo;s memory consumption as displayed by VisualVM for the duration of the IjwB project sync. This run was done with about 8 shards and a max heap of 12GB to try to measure the &amp;ldquo;worst case&amp;rdquo; scenario for our build:&lt;/p>
&lt;figure>
&lt;img src="/images/2023-10-07-12gb-heap-no-discard.png" class="with-border">
&lt;figcaption>Timeline of heap memory usage as captured by VisualVM with a max heap size of 12GB. The picture shows memory growing to about 7GB of retained heap even after two GC cycles.&lt;/figcaption>
&lt;/figure>
&lt;p>What&amp;rsquo;s interesting to note about this profile is that memory consumption grows over time and that JVM Garbage Collection (GC) cycles cannot bring it down to the initial low baseline. More importantly, the GC cycle after the sync steps complete still leaves the Bazel process consuming about 7GB. Based on this data, a small heap of 4GB seemed unfeasible given that Bazel wanted to retain much more memory than that. But&amp;hellip; this was surprising because sharded syncing should have kept memory usage low. So, was this memory consumption legitimate or a memory leak?&lt;/p>
&lt;p>To answer this question, I had to peek into a heap dump that I captured in VisualVM after one of the first shards completed syncing. I did this at the beginning of the process and not at the end to try to keep the dump small, but regardless, I ended up with a 5GB dump.&lt;/p>
&lt;p>Opening the heap dump in a visualization tool was its own odyssey, which I expected going in due to the dump&amp;rsquo;s size. &lt;a href="https://eclipse.dev/mat/">Eclipse Memory Analyzer&lt;/a> (MAT for short) is a highly recommended tool, so I tried to open the profile in it. After more than an hour, however, MAT wasn&amp;rsquo;t able to finish. Looking a bit more into this, I found that MAT was configured with a 1GB max heap&amp;hellip; and thus the JVM was GC-thrashing. Bumping&amp;mdash;hah, the irony!&amp;mdash;the MAT&amp;rsquo;s max heap to 8GB was sufficient to let it open the profile in just a few minutes.&lt;/p>
&lt;p>Upon opening MAT and asking for a &lt;strong>Suspected Leaks&lt;/strong> report, here is what I faced:&lt;/p>
&lt;figure>
&lt;img src="/images/2023-10-07-leak-suspects-overview.png" class="with-border">
&lt;figcaption>MAT showing the Suspected Leaks overview.&lt;/figcaption>
&lt;/figure>
&lt;p>Based on this initial data, we can see that &lt;a href="https://bazel.build/reference/skyframe">Skyframe&lt;/a>&amp;mdash;the thing that holds Bazel&amp;rsquo;s in-memory graph and performs operations on it&amp;mdash;is holding onto the retained memory. But MAT is awesome! We can click on &lt;strong>Details&lt;/strong> to dig further:&lt;/p>
&lt;figure>
&lt;img src="/images/2023-10-07-leak-suspects-details.png" class="with-border">
&lt;figcaption>MAT showing the Suspected Leaks details.&lt;/figcaption>
&lt;/figure>
&lt;p>And finally, we can right-click onto the Skyframe executor object retaining those 3GB of RAM to dive into the objects hanging from it:&lt;/p>
&lt;figure>
&lt;img src="/images/2023-10-07-leak-suspects-classes.png" class="with-border">
&lt;figcaption>MAT drilling down into the classes consuming the most memory.&lt;/figcaption>
&lt;/figure>
&lt;p>What we see here is that below the Skyframe graph instance, memory consumption is smeared all over the place. This makes sense: Skyframe is a graph engine so memory usage will be distributed across all nodes that the engine maintains. Some of those nodes will be heavier than others, but we should expect to see a reasonably even spread.&lt;/p>
&lt;p>While poking through these entries, I reached a node that claimed &lt;code>SourceArtifactCache&lt;/code> was retaining most of the memory. In retrospect, this conclusion was wrong because &lt;code>SourceArtifactCache&lt;/code> was holding onto about 3,000,000 bytes, which was three orders of magnitude smaller than the total used memory&amp;hellip; but I misread the numbers and thought they were the same. That was a fortunate accident though. Looking through the source code for the &lt;code>SourceArtifactCache&lt;/code>, I found that it is only discarded when the analysis graph is discarded in full. And looking a bit further, I found the &lt;code>--discard_analysis_cache&lt;/code> flag to forcibly discard this cache.&lt;/p>
&lt;p>Bingo. By adding &lt;code>--discard_analysis_cache&lt;/code> to the &lt;code>sync_flags&lt;/code> list in the IjwB project definition, I could observe the following behavior during the project sync, still with a 12GB max heap:&lt;/p>
&lt;figure>
&lt;img src="/images/2023-10-07-12gb-heap-discard.png" class="with-border">
&lt;figcaption>Timeline of heap memory usage as captured by VisualVM with a max heap size of 12GB. The picture shows memory growing to about 5GB of retained heap, and three highlights for when graph discards happen.&lt;/figcaption>
&lt;/figure>
&lt;p>Note the clear memory consumption drops that happen after every shard finishes syncing and Bazel discards the analysis graph. Furthermore, we can see that peak memory usage now hovers at around 4GB throughout the process, which is much better than the previous 8GB. This means that combining this flag with the sharded project sync in IjwB could lead to the initial promise of reducing memory usage by using sharding.&lt;/p>
&lt;p>Knowing this, the final question was: is the memory used above 4GB throughout this process retained, or is it memory that could be discarded by more frequent GC activity? In other words: if we clamp the max heap back down to 4GB, will GC kick in and maintain Bazel under it? Here is the answer:&lt;/p>
&lt;figure>
&lt;img src="/images/2023-10-07-4gb-heap-discard.png" class="with-border">
&lt;figcaption>Timeline of heap memory usage as captured by VisualVM with a max heap size of 4GB. The picture shows memory growing close to 4GB of retained heap, with a sawtooth pattern indicating frequent GC cycles at that point in time, and four highlights for when graph discards happen later on.&lt;/figcaption>
&lt;/figure>
&lt;p>Voila. GC struggled to keep up for a brief period of time as shown in the picture, but the whole project sync process was able to complete and remained at around 2&amp;ndash;3GB throughout.&lt;/p>
&lt;p>The GC churn depicted here is still not great but it&amp;rsquo;s only a deficiency of our sharding approach. I mentioned at the beginning of the article that IjwB is in charge of project sharding, but that was an oversimplification. Due to &lt;a href="https://github.com/bazelbuild/intellij/issues/4546">an issue in the IjwB plugin&lt;/a>, we have had to temporarily implement our own sharding strategy, and our sharding causes one of the initial shards to be larger than the others. We expect to see better behavior once we switch to the plugin&amp;rsquo;s built-in sharding strategy now that &lt;a href="https://github.com/bazelbuild/intellij/pull/5085">the issue has been fixed&lt;/a>.&lt;/p>
&lt;h1 id="takeaways">Takeaways&lt;/h1>
&lt;p>The obvious takeaway from all of this is: if IjwB&amp;rsquo;s sharding feature is insufficient to let you sync large projects under a tight memory constraint, try to pass &lt;code>--discard_analysis_cache&lt;/code> in &lt;code>sync_flags&lt;/code> and see if it helps. This may let you lower your overall Bazel memory footprint, freeing resources for other processes.&lt;/p>
&lt;p>But what&amp;rsquo;s more interesting is that while environments with tight memory limits are annoying to deal with, pausing to analyze why new Bazel-based workflows seem to need more memory than legacy ones can help identify alternative solutions. In the previous article, we found how to keep Bazel&amp;rsquo;s memory under control when handling hundreds of remote build actions, and in this article, we found how to tame memory usage during IjwB project syncs. While dealing with these issues is tricky, it is crucial to address them during a build system migration to increase trust in the new system.&lt;/p>
&lt;p>To conclude, let me say that memory-constrained scenarios like ours are not common and that Bazel is already doing the right thing in the common case. That doesn&amp;rsquo;t mean there is no room for improvement, so we filed bug &lt;a href="https://github.com/bazelbuild/bazel/issues/19412">#19412&lt;/a> to start a discussion. The upstream Bazel developers confirmed that they are working on optimizing memory consumption and also suggested that we try other flags such as &lt;code>--notrack_incremental_state&lt;/code>. Furthermore, there might actually be undiagnosed inefficiencies in the aspect that IjwB uses to sync the project. Watch that bug for further developments!&lt;/p></description></item><item><title>5 ways to instantiate Rust structs in tests</title><link>https://jmmv.dev/2023/10/rust-test-structs.html</link><pubDate>Fri, 06 Oct 2023 09:00:00 -0700</pubDate><guid>https://jmmv.dev/2023/10/rust-test-structs.html</guid><description>&lt;p>I&amp;rsquo;m a big fan of static typing and I&amp;rsquo;ve found that using narrow types for each entity in the object model of my programs reduces errors. Rust is particularly well-suited at this task: its lack of implicit type conversions eliminates surprises, and its ownership semantics allow type transformations with zero cost.&lt;/p>
&lt;p>Unfortunately, (ab)using narrow types in an app&amp;rsquo;s domain is &lt;em>really&lt;/em> annoying when writing tests. While non-test code rarely instantiates new objects&amp;mdash;in the case of a REST service, this would only happen at the service&amp;rsquo;s boundaries&amp;mdash;tests instantiate objects infinitely more times than non-test code. Code patterns that may seem reasonable in non-test code can become unbearable in tests.&lt;/p>
&lt;p>In this post, I want to look into the various ways in which you can instantiate strongly-typed objects. For each, I show examples and describe their pros and cons. And yes, as a matter of fact, I have tried them all before&amp;hellip; and I can&amp;rsquo;t yet make my mind as to which one is best.&lt;/p>
&lt;div class="container action-highlight p-4 my-4 d-md-none">
&lt;div class="row text-center">
&lt;p>A blog on operating systems, programming languages, testing, build systems, my own software
projects and even personal productivity. Specifics include FreeBSD, Linux, Rust, Bazel and
EndBASIC.&lt;/p>
&lt;/div>
&lt;div class="row">
&lt;div class="col">
&lt;div class="form-group">
&lt;form action="https://endtracker.azurewebsites.net/api/sites/e8da9f62-b7ac-4fe9-bf20-7c527199a376/subscribers/add" method="post">
&lt;input type="text" name="email"
placeholder="Enter your email"
class="form-control input-sm text-center my-1"/>
&lt;button type="submit" class="btn btn-primary btn-block my-1">Subscribe&lt;/button>
&lt;/form>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="row px-2">
&lt;div class="col col-sm-5 text-left">
&lt;small>&lt;span class="subscriber-count">0&lt;/span> subscribers&lt;/small>
&lt;/div>
&lt;div class="col col-sm-7 text-right">
&lt;p>
&lt;a rel="me" href="https://mastodon.online/@jmmv">
&lt;img src="/images/badges/mastodon-logo.svg" width="32px" height="32px" alt="Follow @jmmv on Mastodon">
&lt;/a>
&lt;a href="https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fjmmv.dev%2F&amp;amp;screen_name=jmmv">
&lt;img src="/images/badges/Twitter_logo_blue.svg" width="32px" height="32px" alt="Follow @jmmv on Twitter">
&lt;/a>
&lt;a href="/feed.xml">&lt;img src="/images/badges/feed-icon-28x28.png" alt="RSS feed">&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h1 id="context-setting">Context-setting&lt;/h1>
&lt;p>Let me introduce you to the &lt;code>Comment&lt;/code> type from the EndTRACKER codebase&amp;mdash;a type that represents a textual comment that someone left on a webpage. I&amp;rsquo;ve simplified it a little for illustration purposes, but the core properties of the type remain:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Comment&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">site_id&lt;/span>: &lt;span class="nc">Uuid&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">path&lt;/span>: &lt;span class="nc">Url&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">timestamp&lt;/span>: &lt;span class="nc">OffsetDateTime&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">content&lt;/span>: &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">author&lt;/span>: &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>: &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">EmailAddress&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Said core properties are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Four required fields for every comment: &lt;code>site_id&lt;/code>, &lt;code>path&lt;/code>, &lt;code>timestamp&lt;/code> and &lt;code>content&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Two optional fields that are only present if the user writing the comment chose to provide them: &lt;code>author&lt;/code> and &lt;code>email&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Strongly-typed fields. Note that only two of them are raw strings; the rest are &lt;em>narrower&lt;/em> types that enforce structure on their values.&lt;/p>
&lt;p>This is important because, for example, while URLs can be represented as strings, they are &lt;em>not&lt;/em> strings. The domain of all possible URLs is narrower than the domain of all possible strings because URLs have internal structure. Using a narrow type to represent URLs enforces that, once a URL object exists, we can pass it around and all consumers can assume it has undergone proper validation.&lt;/p>
&lt;p>Note that strong typing can be done in pretty much any language, really, but Rust shines here. It also helps that using narrow types is common practice in this language: in JavaScript, for example, the above would probably have been represented as a loosely-typed &lt;code>Object&lt;/code>; and in Python, it would have been shoehorned into a string-to-whatever dictionary.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s look at the ways in which &lt;code>Comment&lt;/code> objects can be constructed. Remember that I&amp;rsquo;m focusing on object creation as part of tests. For this reason, it is not necessary to propagate errors to the caller: panicking internally to fail the test is just fine, which simplifies the design a lot.&lt;/p>
&lt;h1 id="option-1-struct-literals">Option 1: Struct literals&lt;/h1>
&lt;p>In the most simple form, a test instantiates a &lt;code>Comment&lt;/code> object by specifying &lt;em>all&lt;/em> fields:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">comment&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Comment&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">site_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">path&lt;/span>: &lt;span class="nc">url&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;http://example.com/post.html&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">timestamp&lt;/span>: &lt;span class="nc">datetime&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2023&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">03&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">19&lt;/span>:&lt;span class="mi">25&lt;/span>:&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">UTC&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">content&lt;/span>: &lt;span class="s">&amp;#34;Irrelevant text&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_owned&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">author&lt;/span>: &lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The Author&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_owned&lt;/span>&lt;span class="p">()),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>: &lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;the-email@example.com&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">into&lt;/span>&lt;span class="p">()),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pros:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Clarity.&lt;/strong> It&amp;rsquo;s painfully obvious what each field contains in every test object.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Refactor-proof.&lt;/strong> When modifying the &lt;code>Comment&lt;/code> definition, you are forced to revise all places where the object is constructed. This makes you reassess whether existing tests need to care about the changes or not.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Cons:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Lack of conciseness.&lt;/strong> Not all tests care about all possible fields of a type. Some tests may want to validate ordering, in which case they care about specific &lt;code>timestamp&lt;/code> values, whereas other tests may want to check protections against HTML injection, in which case they care about &lt;code>content&lt;/code>. But this is not clear in the test because the test is forced to specify values for all fields even if they are irrelevant.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Refactoring difficulties.&lt;/strong> Even though I listed refactoring in the pros, refactoring is also a con. Having to adjust tens or hundreds of tests every time the struct definition changes is a daunting task, particularly when, in general, existing tests do not care about new fields.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="option-2-the-default-trait">Option 2: The Default trait&lt;/h1>
&lt;p>The standard answer to the cons listed above is to implement &lt;code>Default&lt;/code> for the type and thus rely on default values for all fields that are irrelevant in a given context. Ideally, by deriving or implementing &lt;code>Default&lt;/code>, we would do something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">comment&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Comment&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">site_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">path&lt;/span>: &lt;span class="nc">url&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;http://example.com/post.html&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="nb">Default&lt;/span>::&lt;span class="nb">Default&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Unfortunately, this does not work other than for trivial structs. The problem here is that not all types in the &lt;code>Comment&lt;/code> struct implement &lt;code>Default&lt;/code>, and this problem compounds with any additional type you nest. In this particular example, a &lt;code>Url&lt;/code> cannot be empty and an &lt;code>OffsetDateTime&lt;/code> does not have a reasonable zero value.&lt;/p>
&lt;p>One possible solution to this issue is fabricate fake values for all fields. To do this, you can rely on the &lt;code>derivative&lt;/code> crate and use it to supply alternate default values for those fields that don&amp;rsquo;t have one of their own. It is critical to do this &lt;em>only&lt;/em> for debug builds so that these fake definitions never taint production. Here is how this would look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#[cfg_attr(test, derive(Derivative))]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[cfg_attr(test, derivative(Default))]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Comment&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cp">#[cfg_attr(test, derivative(Default(value = &lt;/span>&lt;span class="s">&amp;#34;Uuid::new_v4()&amp;#34;&lt;/span>&lt;span class="cp">)))]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">site_id&lt;/span>: &lt;span class="nc">Uuid&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cp">#[cfg_attr(test, derivative(Default(value = r#&lt;/span>&lt;span class="s">&amp;#34;url!(&amp;#34;&lt;/span>&lt;span class="cp">https://UNSET/&lt;/span>&lt;span class="s">&amp;#34;)&amp;#34;&lt;/span>&lt;span class="cp">#)))]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">path&lt;/span>: &lt;span class="nc">Url&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cp">#[cfg_attr(test, derivative(Default(value = &lt;/span>&lt;span class="s">&amp;#34;OffsetDateTime::UNIX_EPOCH&amp;#34;&lt;/span>&lt;span class="cp">)))]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">timestamp&lt;/span>: &lt;span class="nc">OffsetDateTime&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cp">#[cfg_attr(test, derivative(Default(value = r#&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="cp">Irrelevant&lt;/span>&lt;span class="s">&amp;#34;.to_owned()&amp;#34;&lt;/span>&lt;span class="cp">#)))]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">content&lt;/span>: &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">author&lt;/span>: &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>: &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">EmailAddress&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this, the above instantiation of a &lt;code>Comment&lt;/code> with partial defaults becomes possible.&lt;/p>
&lt;p>Pros:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Concise and refactor-friendly.&lt;/strong> Tests can now declare objects with only the few properties they care about. Due to this, adding new fields to the &lt;code>Comment&lt;/code> struct does not require modifying the majority of existing tests.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Standard.&lt;/strong> Deriving &lt;code>Default&lt;/code> is a common idiom in Rust, so this leads to few surprises.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Cons:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Complexity.&lt;/strong> The type definitions are quite convoluted, particularly due to the need to couple these fake values to debug builds only.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Noisy.&lt;/strong> Having to call &lt;code>..Default::default()&lt;/code> each time we instantiate a struct is annoying and adds a lot of visual noise.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="option-3-macros">Option 3: Macros&lt;/h1>
&lt;p>Using macros to instantiate test data is a common idiom in Rust: the macros provide a simpler syntax to instantiate objects and they forcibly unwrap result values because it&amp;rsquo;s OK to panic tests on invalid data. In fact, note that in the above examples I&amp;rsquo;ve already used two macros: &lt;code>url!&lt;/code> to construct &lt;code>Url&lt;/code> values from hardcoded strings assumed to be valid, and &lt;code>datetime!&lt;/code> to construct &lt;code>OffsetDateTime&lt;/code> values from a readable mini-DSL.&lt;/p>
&lt;p>We could define a &lt;code>comment!&lt;/code> macro that allowed &amp;ldquo;keyword-like&amp;rdquo; arguments to instantiate a test &lt;code>Comment&lt;/code> object, like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">comment&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">comment!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">site_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">path&lt;/span>: &lt;span class="nc">url&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;http://example.com/post.html&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pros:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Concise.&lt;/strong> Same as the &lt;code>Default&lt;/code> approach: tests only declare the properties they must declare for the test to pass.&lt;/li>
&lt;/ul>
&lt;p>Cons:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Refactoring-unfriendly.&lt;/strong> The Rust auto-formatter does not reformat code inside macros. I rely on this feature too much these days because it&amp;rsquo;s very liberating to not have to care about manual formatting, so this is a non-option for me.&lt;/li>
&lt;/ul>
&lt;h1 id="option-4-the-builder-pattern">Option 4: The builder pattern&lt;/h1>
&lt;p>The next possibility is to use the builder pattern, which I have &lt;a href="/2020/12/builder-pattern-for-tests.html">previously leveraged to define declarative tests&lt;/a>. Constructing a &lt;code>Comment&lt;/code> would then look something like this and, in fact, that&amp;rsquo;s what I had in the code for a little while:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">comment&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CommentBuilder&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">site_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">url!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;https://example.com/page.html&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">datetime!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2023&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">03&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">19&lt;/span>:&lt;span class="mi">25&lt;/span>:&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">UTC&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Irrelevant text&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">with_author&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The author&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">with_email&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;the-email@example.com&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This usage of a builder is a bit unorthodox and&amp;hellip; really ugly: the constructor takes positional arguments for all required fields and the various setters return errors when the input values cannot be converted to the inner types that back them. These design decisions came from the fact that I used this builder in non-test code too, so errors had to be propagated.&lt;/p>
&lt;p>But this is not the only way to define a builder. A more traditional application of the builder pattern would result in:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">comment&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CommentBuilder&lt;/span>::&lt;span class="n">default&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">site_id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">site_id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="fm">url!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;https://example.com/page.html&amp;#34;&lt;/span>&lt;span class="p">)))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">timestamp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="fm">datetime!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2023&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">03&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">19&lt;/span>:&lt;span class="mi">25&lt;/span>:&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">UTC&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Irrelevant text&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">author&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The author&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;the-email@example.com&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This second version of the pattern looks better in general (and you could argue that the original version was a mistake). So let&amp;rsquo;s analyze this second version.&lt;/p>
&lt;p>Pros:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Automatic type conversions.&lt;/strong> The setters can &lt;a href="/2020/04/rust-into-trait.html">leverage &lt;code>Into&lt;/code>&lt;/a> and &lt;code>AsRef&lt;/code>, making it possible to call them quite naturally without needing to create auxiliary types by hand. Note how, for example, &lt;code>email()&lt;/code> takes a string even if the backing type is &lt;code>EmailAddress&lt;/code> because the setter accepts &lt;code>Into&amp;lt;EmailAddress&amp;gt;&lt;/code> and the type implements &lt;code>From&amp;lt;&amp;amp;'static str&amp;gt;&lt;/code> (in test builds &lt;em>only&lt;/em>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Conciseness.&lt;/strong> As is the case for the &lt;code>Default&lt;/code> and the macro options, this solution also accepts specifying only the fields that are required for each test. The builder can set defaults for everything else.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Cons:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Verbosity.&lt;/strong> This is no simpler than the &lt;code>Default&lt;/code> option and requires non-trivial code to implement the builder itself.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Delayed validation.&lt;/strong> Delaying validation until the call to &lt;code>build()&lt;/code> isn&amp;rsquo;t always easy. Consider &lt;code>email&lt;/code> again: if we make the &lt;code>email()&lt;/code> setter construct the internal &lt;code>EmailAddress&lt;/code> object, then &lt;code>email()&lt;/code> has to either return an error (a requirement for production usage) or panic (if the builder is exclusively for tests). But if we try to delay error reporting until &lt;code>build()&lt;/code> is called, then the setter cannot leverage &lt;code>Into&lt;/code> and needs to either accept strings alone or already-constructed &lt;code>EmailAddress&lt;/code> objects.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="option-5-helper-functions">Option 5: Helper functions&lt;/h1>
&lt;p>The final possibility is to define helper functions to instantiate our test objects. And if we are defining helper functions, those can do additional work like storing the objects in a database (which is what most of my tests need to do anyway). Here is an example of such a function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TestContext&lt;/span>::&lt;span class="n">setup&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">comment&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">put_comment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">site_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">url!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;https://example.com/page.html&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">datetime!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2023&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">03&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">19&lt;/span>:&lt;span class="mi">25&lt;/span>:&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">UTC&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pros:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Extra logic.&lt;/strong> A helper function can take care of instantiating the test object, but can &lt;em>also&lt;/em> perform other operations such as persisting the object. For tests, this can turn out to be very useful in encapsulating sequences of operations.&lt;/li>
&lt;/ul>
&lt;p>Cons:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Inflexibility.&lt;/strong> Helper functions sound nice at first because they only take the fewest arguments possible to satisfy the needs of the tests. But things get unwieldy quickly: in the example above, you can already see a wart in the API because there is a confusing &lt;code>None&lt;/code> that should probably not be there. This ends happening because different tests need different properties to be set and a single function won&amp;rsquo;t satisfy them all, so you end up with parameterized helper functions that contain superfluous in the common case, or with multiple helper functions targeted at different test scenarios.&lt;/li>
&lt;/ul>
&lt;p>This approach is very tempting to use because declaring new functions is easy and looks simple, but I&amp;rsquo;ve &lt;em>never ever&lt;/em> seen it evolve well long-term in any language. Stay away except for the most trivial cases.&lt;/p>
&lt;h1 id="whats-best">What&amp;rsquo;s best?&lt;/h1>
&lt;p>To be honest&amp;hellip; I do not know. I have tried all of the above and I&amp;rsquo;m not completely satisfied with any option. To let you into a secret, the EndTRACKER data model currently contains a mishmash of all these options because I&amp;rsquo;ve been experimenting with new ideas over time and haven&amp;rsquo;t yet settled on the one I like the best. (Yes, yes, I know. Consistency should have trumped &amp;ldquo;prettiness&amp;rdquo;, but hey, I write side projects because I enjoy exploring different dark corners of my tech of choice.)&lt;/p>
&lt;p>Right now my thoughts are these: the builder pattern seems to be the nicest option &lt;em>if&lt;/em> you restrict it to tests, because then the builder can encapsulate error unwrapping and callers set all fields by name. However, I&amp;rsquo;m having a hard time justifying this option in favor of the &lt;code>Default&lt;/code> option, because callers look equally complex and the builder option requires a lot of boilerplate to write the builders themselves. And I kinda would like to use the macro option, but the fact that it doesn&amp;rsquo;t work well with auto-formatting is a deal breaker.&lt;/p>
&lt;p>What are &lt;em>your&lt;/em> thoughts?&lt;/p></description><enclosure url="https://jmmv.dev/images/2023-10-06-rust-test-structs.png" length="138979" type="image/jpeg"/></item><item><title>Good performance is not just big O</title><link>https://jmmv.dev/2023/09/performance-is-not-big-o.html</link><pubDate>Fri, 08 Sep 2023 10:00:00 -0700</pubDate><guid>https://jmmv.dev/2023/09/performance-is-not-big-o.html</guid><description>&lt;p>Having a fast and responsive app is orthogonal to &amp;ldquo;knowing your big &lt;i>O&lt;/i>s&amp;rdquo;. Unfortunately, most tech companies over-emphasize algorithms in interviews and downplay systems knowledge, and I believe that&amp;rsquo;s one reason behind sluggish apps and bloated systems.&lt;/p>
&lt;p>I&amp;rsquo;ve seen this play out repeatedly. Interviewers ask a LeetCode-style coding question, which is then followed by the ritual of discussing time and memory complexity. Candidates ace the answers. But then&amp;hellip; their &amp;ldquo;real&amp;rdquo; code suffers from subtle yet impactful performance problems.&lt;/p>
&lt;p>Focusing on big &lt;em>O&lt;/em> complexity rarely matters in most apps. Sure, it&amp;rsquo;s important to think about your algorithmic choices, but there are so many more details to worry about that have a direct impact on app performance and responsiveness. Let&amp;rsquo;s look at a bunch of them!&lt;/p>
&lt;div class="container action-highlight p-4 my-4 d-md-none">
&lt;div class="row text-center">
&lt;p>A blog on operating systems, programming languages, testing, build systems, my own software
projects and even personal productivity. Specifics include FreeBSD, Linux, Rust, Bazel and
EndBASIC.&lt;/p>
&lt;/div>
&lt;div class="row">
&lt;div class="col">
&lt;div class="form-group">
&lt;form action="https://endtracker.azurewebsites.net/api/sites/e8da9f62-b7ac-4fe9-bf20-7c527199a376/subscribers/add" method="post">
&lt;input type="text" name="email"
placeholder="Enter your email"
class="form-control input-sm text-center my-1"/>
&lt;button type="submit" class="btn btn-primary btn-block my-1">Subscribe&lt;/button>
&lt;/form>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="row px-2">
&lt;div class="col col-sm-5 text-left">
&lt;small>&lt;span class="subscriber-count">0&lt;/span> subscribers&lt;/small>
&lt;/div>
&lt;div class="col col-sm-7 text-right">
&lt;p>
&lt;a rel="me" href="https://mastodon.online/@jmmv">
&lt;img src="/images/badges/mastodon-logo.svg" width="32px" height="32px" alt="Follow @jmmv on Mastodon">
&lt;/a>
&lt;a href="https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fjmmv.dev%2F&amp;amp;screen_name=jmmv">
&lt;img src="/images/badges/Twitter_logo_blue.svg" width="32px" height="32px" alt="Follow @jmmv on Twitter">
&lt;/a>
&lt;a href="/feed.xml">&lt;img src="/images/badges/feed-icon-28x28.png" alt="RSS feed">&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>On algorithms&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>📜 Is your complex O(n) algorithm faster than the trivial O(n&lt;sup>2&lt;/sup>)? Theoretical complexity matters, but know your expected value of &amp;ldquo;n&amp;rdquo;. The linear algorithm may be slower than the quadratic one for your specific scenarios and harder to prove correct.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>📜 Are you aware of how interfaces can bite you? E.g. in Java, the &lt;code>List.get&lt;/code> generic method will run in O(1) time for &lt;code>ArrayList&lt;/code> but in O(n) time for &lt;code>LinkedList&lt;/code>, and computing dict hash keys is likely not O(1). These are &lt;em>not&lt;/em> obvious at the call site.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>📜 Do you grasp how much work fits in short periods of time? 1ps, 1ns, 1us, 1ms, 1s&amp;hellip; they all sound small but their relative differences are huge. Map them to 1 second, 16 minutes, 277 hours, 380 months, and 317 centuries respectively. Not the same, huh?&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>On storage&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>💾 Where does your data live? Different memory/storage mediums have vastly different access times. Know the relative differences in speed between register accesses (ps), L1/L2/L3 (few ns), RAM (many ns), SSD (us), HDD (few ms), and network (many ms).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>💾 How do you access storage drives? Large sequential I/O operations are faster than lots of random small ones. This is true of HDDs (seek time is ~3-10ms), but also of SSDs due to the fact that processing more ops takes more processing time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>💾 What about the file system on top of those drives? ext4, ZFS, NTFS&amp;hellip; they are all vastly different, and the types of I/O patterns that work well in one may be slow in another.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>💾 Are you accessing an SSD or an old spinning hard disk? Hard disks still exist. It might be safe to assume SSDs for certain apps, but not always. E.g. users may store large photo libraries in HDDs: can you handle I/O from those efficiently?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>💾 Are you doing pure data copies via the CPU? There are features like DMA to offload data transfers to I/O devices, and there are features to minimize userspace&amp;lt;-&amp;gt;kernel copies. But, in any case, memory bandwidth isn&amp;rsquo;t free and is rarely thought about.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>On networking&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>🌐 Do you know that high latency usually limits max bandwidth? Bandwidth and latency are two orthogonal metrics. Most networked apps will probably feel fine on a low-bandwidth connection but will feel terrible on a high-latency one. Simulate these scenarios.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>🌐 How do you handle high network latency? Does your code block, slowing down everything else? Do you really have to block the UI? Can you schedule other work too happen in the meantime?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>🌐 How many network requests do you need per interaction? Each request adds a multi-ms penalty and every request increases the chances of hitting high latency. If a service you depend on gives you p50=10ms and p99=1s, you&amp;rsquo;ll hit a 1s delay if you send 100 requests.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>🌐 How do you handle retries on failed requests? Any retry will tank performance and how you expose or hide what&amp;rsquo;s going on can make a world of a difference. Perception matters.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>On data handling&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>❄️ Are you using your database&amp;rsquo;s query facilities or are you fetching all data and then filtering on your own? Databases can perform elaborate queries. Favor running those on the database: the server is closer to the data and you&amp;rsquo;ll minimize network transfers.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>❄️ Are your database queries degrading to full table scans? Maybe you don&amp;rsquo;t have the right indexes or partitioning schemes to support the common queries that your app needs. Analyze and profile query execution. You probably don&amp;rsquo;t need to jump to NoSQL.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>🪵 How many log messages do you emit? Logging is not free. It has a cost on performance (I&amp;rsquo;ve seen servers spend ~20% of their CPU &lt;em>just&lt;/em> for background logging, all the time), and noisy logs also have an operational cost.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>On CPU and memory&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>🖥️ How do you lay large amounts of data in memory? What are the access patterns? Cache locality matters. Remember the relative differences in access times between the L1, L2 and L3 caches vs. main memory (days vs. years if scaled up).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>🖥️ How data-intensive are your tight loops? It&amp;rsquo;s easy to think about CPU speed, RAM usage and I/O times&amp;hellip; but memory bandwidth is a fourth dimension that almost nobody thinks about, and it is becoming scarcer with faster CPUs and I/O.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>On concurrency&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>🧵 Do you take advantage of multiple cores? Single cores aren&amp;rsquo;t getting faster fast enough anymore, but computers usually have cores to spare. Can you use them at all? Effectively?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>🧵 Do you use multiple threads to parallelize CPU-intensive operations, or do you use them to handle blocking I/O? In the former case, you want as many threads as cores. In the latter, switching to an event loop model may work better than a large thread pool.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>🧵 Do you perform expensive computation on the thread that&amp;rsquo;s responsive for the app&amp;rsquo;s UI? This will introduce pauses and render your app unusable for periods of time, which will make it feel slow. Perception matters.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>On graphics&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>✏️ Are you rendering directly onto the screen? Flushing your drawing operations right away? Read on double buffering, but beware of the latency you introduce by delaying the final display.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>✏️ Are you leveraging your graphic card&amp;rsquo;s features, or are you drawing on the CPU? Contrary to popular belief, fancy desktop effects are not expensive if done on the GPU&amp;mdash;and, actually, doing them on the GPU frees CPU resources.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>On development time&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>🗣️ How much performance are you leaving on the table by &amp;ldquo;coding faster&amp;rdquo; in an interpreted language? Computers might be &amp;ldquo;fast enough&amp;rdquo; now, but interpreted languages tend to be slower than compiled ones and may make the overall system sluggish.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>🪨 How big is your compiled app? Multi-MB apps are a problem when downloaded over the network, but they are also a problem on disk because they are slow to install and uninstall. Big apps may run fast, but they start slow. Perception matters.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>⌚ How long does your code take to compile? If it takes too long, the team suffers and features and bug fixes will be delayed. Different choices in how you write code and how you modularize it can bring big differences in productivity.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>⌚ How long do the tests take to run? If they take too long, they won&amp;rsquo;t be run on every commit, introducing friction for everyone else down the road and delaying product launches.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>That&amp;rsquo;s all I could think of for now! I&amp;rsquo;m not a performance expert at all, but I do like systems and enjoy thinking about their holistic behavior. If you have any more tips, feel free to add them to the thread and I may incorporate them into the list!&lt;/p></description><enclosure url="https://jmmv.dev/images/2023-09-08-speed-bumps-limit.jpg" length="372231" type="image/jpeg"/></item><item><title>Costs exposed: Frameworks</title><link>https://jmmv.dev/2023/08/costs-exposed-frameworks.html</link><pubDate>Thu, 31 Aug 2023 07:00:00 -0700</pubDate><guid>https://jmmv.dev/2023/08/costs-exposed-frameworks.html</guid><description>&lt;p>&lt;a href="/2023/06/fast-machines-slow-machines.html">&amp;ldquo;Fast machines, slow machines&amp;rdquo;&lt;/a>&amp;hellip; ah, the post that spawned these series. As I frantically typed that article while replying to angry tweets, the thought came to mind: software engineering as a whole is hyper-focused on lowering the costs to write new code, yet there is a disregard for the costs that these improvements bring to other disciplines in a company on even to end users.&lt;/p>
&lt;p>So, in this series finale, I want to compare how some choices that apparently lower development costs actually increase costs elsewhere. I also want to highlight how, if we made different decisions during development, we could possibly expose those extra costs early on. This is beneficial because exposing costs upfront allows us to make tough choices when there is still a chance of changing course.&lt;/p>
&lt;p>To make things specific, I will look at how the use of modern frameworks that facilitate development can end up hurting performance, reliability, and usability. So let&amp;rsquo;s start with a three-part rant first (sorry) and then let&amp;rsquo;s look at what we might do.&lt;/p>
&lt;div class="container action-highlight p-4 my-4 d-md-none">
&lt;div class="row text-center">
&lt;p>A blog on operating systems, programming languages, testing, build systems, my own software
projects and even personal productivity. Specifics include FreeBSD, Linux, Rust, Bazel and
EndBASIC.&lt;/p>
&lt;/div>
&lt;div class="row">
&lt;div class="col">
&lt;div class="form-group">
&lt;form action="https://endtracker.azurewebsites.net/api/sites/e8da9f62-b7ac-4fe9-bf20-7c527199a376/subscribers/add" method="post">
&lt;input type="text" name="email"
placeholder="Enter your email"
class="form-control input-sm text-center my-1"/>
&lt;button type="submit" class="btn btn-primary btn-block my-1">Subscribe&lt;/button>
&lt;/form>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="row px-2">
&lt;div class="col col-sm-5 text-left">
&lt;small>&lt;span class="subscriber-count">0&lt;/span> subscribers&lt;/small>
&lt;/div>
&lt;div class="col col-sm-7 text-right">
&lt;p>
&lt;a rel="me" href="https://mastodon.online/@jmmv">
&lt;img src="/images/badges/mastodon-logo.svg" width="32px" height="32px" alt="Follow @jmmv on Mastodon">
&lt;/a>
&lt;a href="https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fjmmv.dev%2F&amp;amp;screen_name=jmmv">
&lt;img src="/images/badges/Twitter_logo_blue.svg" width="32px" height="32px" alt="Follow @jmmv on Twitter">
&lt;/a>
&lt;a href="/feed.xml">&lt;img src="/images/badges/feed-icon-28x28.png" alt="RSS feed">&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;p>First, we have performance problems caused by the layers upon layers of &lt;a href="https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/">leaky abstractions&lt;/a> that frameworks add.&lt;/p>
&lt;p>Every layer of abstraction that we add to a piece of software hurts performance: each layer adds code and, with very few exceptions, more code requires more cycles to build and run. As an example, think about the ever-increasing network round trips that the simplest interaction with an app has to perform and how poorly these degrade with bad network conditions. Or think about how slowly a run-of-the-mill Electron app starts and how much disk space it takes.&lt;/p>
&lt;p>Sadly, this piling of abstraction layers has been happening for years. One possible rationale: the benefits of adding one more layer look great on paper and the incremental cost of such layer tends to be small, so the cost is easy to justify. It makes sense every time. Unfortunately, when many of these seemingly-small costs compound, systems become sluggish.&lt;/p>
&lt;p>&amp;ldquo;But the developers saved some time!&amp;rdquo; I hear&amp;hellip; while these savings in coding costs transform into &lt;em>everyone else&lt;/em> requiring more powerful machines over time. End users have to upgrade their phones and laptops periodically just to keep up with the software bloat treadmill, and what they can do with their newer hardware isn&amp;rsquo;t massively different from what they could do with the iteration that came right before.&lt;/p>
&lt;p>Plus these slowdowns impact production servers as well, not just end users, and the extra costs in the datacenter are orders of magnitude larger than what a single user will experience. I&amp;rsquo;m still shocked by how, for example, Google has insanely-fast internal infrastructure&amp;hellip; yet those incredible systems exist to support huge binaries and highly-coupled micro-services that maybe shouldn&amp;rsquo;t have existed in their current form. For example, we did have discussions in the Bazel team about adding limits to what a build should support, and we did start &lt;a href="/2021/03/build-time-slis-slos.html">measuring costs&lt;/a> to try to address those&amp;hellip; but it was too late to tame the beast.&lt;/p>
&lt;hr>
&lt;p>Second, we have &amp;ldquo;DevOps problems&amp;rdquo; caused by the &amp;ldquo;easy-to-use&amp;rdquo; frameworks and their tooling.&lt;/p>
&lt;p>The fact that writing code is easier than before does not necessarily mean that deploying and maintaining the resulting systems is easier too. In fact, the opposite tends to happen: these days it sounds inconceivable to launch a service on just one machine, while it was the norm not so long ago. &amp;ldquo;How will it scale to billions of users? How will it have 100 9s of reliability?&amp;rdquo; everyone asks, without facing the reality that scaling needs may never arise or that occasional downtime is acceptable.&lt;/p>
&lt;p>Instead, we adopt languages with complex runtimes and fragile and dog-slow tooling, and we push micro-service architectures from the get go. We end up with systems that require cluster orchestrators like Kubernetes, distributed storage, messaging queues, complex monitoring systems, containers&amp;hellip; or, in other words, a myriad of dependencies, each needing a different language runtime, deployment practices, and operational checklists. Running these systems now requires multiple large SRE teams.&lt;/p>
&lt;p>Paradoxically, I would even say that the risk of downtime in these often-over-engineered systems is higher than the simpler alternatives. Operating a single machine exposed the cost of needing reliable hardware, power, and a few sysadmins, while operating large distributed systems hides such cost behind &amp;ldquo;unavoidable&amp;rdquo; cloud bills, confusing reporting structures, and a bunch of &lt;a href="/2023/08/costs-exposed-on-call-ticket-handling.html">poorly-run support rotations&lt;/a>. But hey, these problems are so detached from the initial coding activities&amp;mdash;and sometimes from the developers themselves!&amp;mdash;that it&amp;rsquo;s hard to think about the consequences of favoring certain languages or frameworks.&lt;/p>
&lt;hr>
&lt;p>And third, we have extra usability costs caused by unification where unification wasn&amp;rsquo;t asked for.&lt;/p>
&lt;p>The obvious example here is the push towards single codebases that can run on the web, iOS, and Android, ranging from large wide-screen monitors to tiny portrait phone screens. Developers rejoice in their ability to share code&amp;mdash;they can ship faster!&amp;mdash;but&amp;hellip; are users happy? Apps are now their own silos that behave differently from all others and don&amp;rsquo;t integrate with the platforms their run on. &amp;ldquo;Too much whitespace&amp;rdquo; is a common cry.&lt;/p>
&lt;p>Now, don&amp;rsquo;t get me wrong. I am a developer too, and &lt;em>of course&lt;/em> I like frameworks that allow me to avoid code duplication. In fact, code duplication is a problem from a usability perspective too because bugs and features will differ in different versions of the same app. But why should we, the users, pay for a loss of platform uniformity and usability so that companies can ship a product faster?&lt;/p>
&lt;hr>
&lt;p>Anyhow, enough for the rant.&lt;/p>
&lt;p>What can we do about this? I&amp;rsquo;m not sure if there is much we &lt;em>can&lt;/em> do. The incentives just aren&amp;rsquo;t there as Luke Plant claims in &lt;a href="https://lukeplant.me.uk/blog/posts/no-one-actually-wants-simplicity/">&amp;ldquo;No one actually wants simplicity&amp;rdquo;&lt;/a>. And even if we &lt;em>could&lt;/em> do something, we may not be able to like Yossi Kreinin describes in &lt;a href="https://yosefk.com/blog/dont-ask-if-a-monorepo-is-good-for-you-ask-if-youre-good-enough-for-a-monorepo.html">&amp;ldquo;Don&amp;rsquo;t ask if a monorepo is good for you&amp;mdash;ask if you&amp;rsquo;re good enough for a monorepo&amp;rdquo;&lt;/a>.&lt;/p>
&lt;p>But here is the thing: it is &lt;em>good&lt;/em> that building prototypes for new apps and features is cheaper and faster than ever before. Companies can quickly try and validate new products and features. Solo developers can launch apps in just a few days and have them reach thousands or millions of people. Yet&amp;hellip; do the benefits really last? These initial cost-saving measures end up hiding bigger costs down the road. Initial prototypes are never thrown away in favor of a rewrite&amp;mdash;as everyone says you should really do&amp;mdash;and once the ball of mud grows, it&amp;rsquo;s too expensive and too late to tame it.&lt;/p>
&lt;p>Another problem is that most engineers haven&amp;rsquo;t done any performance work. It is common, based on my observations in dozens of interviews, to believe that performance is about big-O notation. But, usually, that doesn&amp;rsquo;t matter. What matters to deliver a great user experience lies in other dimensions like minimizing I/O operations, tuning indexes in a database, caring about cache locality, or keeping binary sizes under control. There is a real need for mentoring&amp;hellip; but these activities are rarely rewarded organizationally.&lt;/p>
&lt;p>I would ask that, if you happen to do project planning or headcount allocation, do not treat coding as special. Yes, coding is important, but the cost of writing &lt;em>new&lt;/em> code is only a small fraction of delivering a product. Once a product is past a certain size, all other costs like refactoring or servicing become more important, and the costs that were saved by easing coding come to smear everything else. And, please, remember about the impact that these choices have on end user performance.&lt;/p>
&lt;hr>
&lt;p>Let&amp;rsquo;s end on a positive tone because we do have some nice things.&lt;/p>
&lt;p>I&amp;rsquo;m happy that Go has brought back the idea that trivial deployments and software distribution are beneficial thanks to its push for static binaries. Developers have lost some of their freedom by how opinionated Go is, but everyone else has gained something.&lt;/p>
&lt;p>I&amp;rsquo;m happy that some companies push for homogenization to reduce operational costs at the expense of limiting development choices. See how Google is famous for only allowing certain programming languages in production services, or how Snowflake is adopting Bazel to remove moving parts from the build process. These actions reduce developer choice (a cost to them) but bring savings elsewhere.&lt;/p>
&lt;p>And I&amp;rsquo;m happy that Rust&amp;rsquo;s memory safety and zero-cost abstractions increase initial development cost at the expense of faster and more reliable apps for end users. Oh, and it simplifies future maintenance costs for developers too! Refactorings are a joy to execute in a Rust code base.&lt;/p>
&lt;p>Now pardon me while I go back to work unironically on &lt;a href="/software/iii-iv.html">my framework&lt;/a>.&lt;/p></description><enclosure url="https://jmmv.dev/images/2023-08-31-dirt-pile.jpg" length="773447" type="image/jpeg"/></item><item><title>Costs exposed: On-call ticket handling</title><link>https://jmmv.dev/2023/08/costs-exposed-on-call-ticket-handling.html</link><pubDate>Sat, 26 Aug 2023 07:20:00 -0700</pubDate><guid>https://jmmv.dev/2023/08/costs-exposed-on-call-ticket-handling.html</guid><description>&lt;p>In the previous post, I proposed that certain engineering practices expose systemic costs and help with planning while other practices hide those same costs and disturb ongoing plans.&lt;/p>
&lt;p>The idea I&amp;rsquo;m trying to convey is hard to communicate in the abstract so, in that post, I used the differences between a monorepo and a multirepo setup as an example. Today, I&amp;rsquo;ll expore a different scenario to support the same idea. I&amp;rsquo;m going to talk about how certain ticket assignment practices during on-call operations can expose service support costs vs. how other practices hide them.&lt;/p>
&lt;p>Keep in mind that, just like in the previous post, I do not want to compare the general merits of one approach vs. the other. The &lt;em>only&lt;/em> thing I want to compare is whether one approach centralizes toil and allows management to quantify its cost vs. how another approach hides toil by smearing it over the whole team in hard-to-quantify ways. Whether management &lt;em>actually does something&lt;/em> to correct the situation once the costs are exposed is a different story.&lt;/p>
&lt;div class="container action-highlight p-4 my-4 d-md-none">
&lt;div class="row text-center">
&lt;p>A blog on operating systems, programming languages, testing, build systems, my own software
projects and even personal productivity. Specifics include FreeBSD, Linux, Rust, Bazel and
EndBASIC.&lt;/p>
&lt;/div>
&lt;div class="row">
&lt;div class="col">
&lt;div class="form-group">
&lt;form action="https://endtracker.azurewebsites.net/api/sites/e8da9f62-b7ac-4fe9-bf20-7c527199a376/subscribers/add" method="post">
&lt;input type="text" name="email"
placeholder="Enter your email"
class="form-control input-sm text-center my-1"/>
&lt;button type="submit" class="btn btn-primary btn-block my-1">Subscribe&lt;/button>
&lt;/form>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="row px-2">
&lt;div class="col col-sm-5 text-left">
&lt;small>&lt;span class="subscriber-count">0&lt;/span> subscribers&lt;/small>
&lt;/div>
&lt;div class="col col-sm-7 text-right">
&lt;p>
&lt;a rel="me" href="https://mastodon.online/@jmmv">
&lt;img src="/images/badges/mastodon-logo.svg" width="32px" height="32px" alt="Follow @jmmv on Mastodon">
&lt;/a>
&lt;a href="https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fjmmv.dev%2F&amp;amp;screen_name=jmmv">
&lt;img src="/images/badges/Twitter_logo_blue.svg" width="32px" height="32px" alt="Follow @jmmv on Twitter">
&lt;/a>
&lt;a href="/feed.xml">&lt;img src="/images/badges/feed-icon-28x28.png" alt="RSS feed">&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Let&amp;rsquo;s begin.&lt;/p>
&lt;hr>
&lt;p>On-call shifts are common in software development teams, yet I think it&amp;rsquo;s fair to say that most developers hate and fear them. Which is a natural reaction because, in general, on-call rotations are haphazardly run.&lt;/p>
&lt;p>In a well-functional on-call rotation, individuals are either &amp;ldquo;on&amp;rdquo; or &amp;ldquo;off&amp;rdquo;. When they are &amp;ldquo;on&amp;rdquo;, their only responsibility is to attend to incoming tickets: they are not expected to work on their deliverables. When they are &amp;ldquo;off&amp;rdquo;, their only responsibility is to attend to their deliverables: they can rest assured that the current on-call will shield them from production fires.&lt;/p>
&lt;p>Now, it &lt;em>is&lt;/em> possible that the team&amp;rsquo;s deliverables will have to change &lt;em>because of&lt;/em> production incidents, but those changes in the plan will be factored into the schedule, say, in the following sprint or quarterly planning meeting. Until that happens, the &amp;ldquo;off&amp;rdquo; people don&amp;rsquo;t have to be distracted by ongoing fires. I know, I know, this is an extremely hard-to-achieve ideal, but I&amp;rsquo;ve seen it work in mature SRE teams and being on-call for those was a reasonable experience. I highly recommend watching the &lt;a href="https://www.usenix.org/conference/srecon15europe/program/presentation/oconnor">&amp;ldquo;Bad Machinery - Managing Interrupts Under Load&amp;rdquo;&lt;/a> presentation by Dave O&amp;rsquo;Connor on this topic.&lt;/p>
&lt;p>Unfortunately, while most on-call rotations are well-intentioned, they are &lt;em>not&lt;/em> well-functioning. This is particularly true of large teams (30+ people) divided in subteams (4-10 people each). In such a large organization, no single individual can realistically be on-call for the whole service due to its scope&amp;mdash;yet teams insist on putting a single person on-call. But is that person the only one that&amp;rsquo;s &amp;ldquo;on&amp;rdquo;? Nope. In reality, many more team members are busy with past incidents.&lt;/p>
&lt;hr>
&lt;p>Here is how that happens: the policy for incoming tickets is to assign them to the current on-call individual in a sticky manner: said individual &amp;ldquo;owns&amp;rdquo; those tickets until they are either resolved or are transferred to a Subject Matter Expert (SME)&amp;mdash;no matter if they are on-call or not. This fire-hose approach &lt;em>seems&lt;/em> to work&amp;hellip; but it has a draining cost on the individual team members and impacts overall team productivity, leading to delayed deliverables and production issues that are never fixed.&lt;/p>
&lt;p>These are the reasons that are often cited to justify this fire-hose approach&amp;hellip; along with why they aren&amp;rsquo;t a great idea:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;em>&amp;ldquo;The process is &lt;strong>fair&lt;/strong> from a time-sharing perspective!&amp;rdquo;&lt;/em>&lt;/p>
&lt;p>Well, no, it just &lt;em>looks&lt;/em> fair on paper. What this practice does is push operations under the rug. Incoming issues are randomly spread across team members. It is very likely that those issues will &lt;em>not&lt;/em> be resolved during the on-call&amp;rsquo;s scheduled shift. As a result, every individual continues to own incidents well-past their &amp;ldquo;on&amp;rdquo; time, and because those are production incidents, the assignees are obviously expected to work and resolve &amp;ldquo;their&amp;rdquo; incidents &amp;ldquo;with priority&amp;rdquo;, preempting their project work.&lt;/p>
&lt;p>Now, the counter-argument to this is to say that these individuals should transfer incidents to the SME as soon as their &amp;ldquo;on&amp;rdquo; shift ends. But there are two problems with this. The first is that an SME may not even exist in the team anymore. The second is that this assignment process is adversarial: junior folks will almost-never transfer an incident to a senior person because&amp;hellip; of the next point.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&amp;ldquo;Everyone should be able to be on-call for the whole service!&amp;rdquo;&lt;/em>&lt;/p>
&lt;p>Yeah, that&amp;rsquo;s a great ideal: it&amp;rsquo;d be awesome if everyone in the team were able to handle any incoming incident, but that is not what happens. Large teams tend to grow to cover too many responsibilities too fast, so it ends up being impossible for any one individual to know everything about the system.&lt;/p>
&lt;p>There are select exceptions though: the leads that &lt;em>created&lt;/em> the product. These folks&amp;mdash;if they are still around&amp;mdash;have grown with the product and have sufficient knowledge to troubleshoot most problems under the pressure of a production outage. Unfortunately, these outlier folks tend to be the ones with the power to change the status quo. In turn, this makes change harder because they don&amp;rsquo;t realize that there is a problem.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>As a result of these two attitudes, on-call operations seem &lt;em>cheap&lt;/em> from the management&amp;rsquo;s perspective: there is only one person on-call at any given time for the whole team who, somehow, manages to resolve all issues assigned to them. There are often delays in resolving incidents and there are repeats of those outages, sure, but they aren&amp;rsquo;t large enough or frequent enough to be concerning. (Narrator voice: until they are.)&lt;/p>
&lt;p>What&amp;rsquo;s not so clear is that &lt;em>every other team member&lt;/em> that is not on-call is also wasting time to resolve incidents because they are keeping an eye on past and ongoing issues. First, previous on-call individuals carry past issues well into their &amp;ldquo;off&amp;rdquo; periods, disturbing their deliverables. Remember that context switches are harmful to productivity, and those switches are even worse if they require talking to customers. And, second, past and new incidents pull random engineers from the team to help, preempting their assigned work.&lt;/p>
&lt;p>Under this model, it is really difficult to quantify how much time is spent caring for production, so it is impossible to properly budget such time against feature work. &amp;ldquo;Just put one person on-call&amp;rdquo; should not be a convincing argument without data. It is also hard to identify recurring issues and follow up on them with long-term fixes, so the service&amp;rsquo;s quality degrades over time.&lt;/p>
&lt;hr>
&lt;p>What&amp;rsquo;s the alternative, assuming there is one? It turns out that there is, and it is what I mentioned at the beginning of the post:&lt;/p>
&lt;ol>
&lt;li>a clear &amp;ldquo;on&amp;rdquo; / &amp;ldquo;off&amp;rdquo; split for operational support;&lt;/li>
&lt;li>a clear process to transfer ongoing incidents to the following on-call person, along with an expectation that this is the normal thing to do; and&lt;/li>
&lt;li>a clear distinction between mitigation practices and resolution efforts.&lt;/li>
&lt;/ol>
&lt;p>Simply put: whenever a person is on-call, all incidents come to this person and this person owns them until they are mitigated &lt;em>or&lt;/em> until their shift ends, whatever happens first. Once mitigated, the on-call files follow-up repair tasks, and these tasks are assessed against other priorities in the following planning meeting. The main difference from the fire-hose approach is that, once a person&amp;rsquo;s &amp;ldquo;on&amp;rdquo; shift ends, they can get back to their past-assigned and pre-planned work.&lt;/p>
&lt;p>If these practices are strictly followed, it quickly becomes clear whether a single on-call person can sustain the health of the service or not. If a single person cannot, incidents will backlog or they will not be mitigated correctly. At that point, management will have to allocate additional people to handle incidents. And if they assign extra people to on-call operations, they can also choose to invest in root cause resolution to reduce overall service load, reducing the total number of people assigned to operations at any given time. (But yes, whether this extra investment happens or not is orthogonal to &lt;em>exposing costs&lt;/em> and I don&amp;rsquo;t want to get into that. Sometimes management will simply not want to invest in extra reliability and on-call health will be terrible. Run if you can?)&lt;/p>
&lt;hr>
&lt;p>To summarize: this is yet another case where the practice of doing &amp;ldquo;the right thing&amp;rdquo; (in SRE terms) by forcing a strict &amp;ldquo;on&amp;rdquo; / &amp;ldquo;off&amp;rdquo; division exposes the reality that a system may be more expensive to operate than previously believed, whereas the common practice of assigning tickets in a sticky manner is equally expensive, if not more so, while also causing dissatisfaction.&lt;/p>
&lt;p>In the next post, I&amp;rsquo;ll conclude this series by looking at how fancy software frameworks hide non-programming costs and how those costs are often eaten by people that may not have a choice.&lt;/p></description><enclosure url="https://jmmv.dev/images/2023-08-26-tickets-phone.jpg" length="539252" type="image/jpeg"/></item><item><title>Costs exposed: Monorepo vs. multirepo</title><link>https://jmmv.dev/2023/08/costs-exposed-monorepo-multirepo.html</link><pubDate>Wed, 23 Aug 2023 06:00:00 -0700</pubDate><guid>https://jmmv.dev/2023/08/costs-exposed-monorepo-multirepo.html</guid><description>&lt;p>In software engineering organizations, there are certain practices that keep costs under control even if those &lt;em>seem&lt;/em> more expensive at first. Unfortunately, because such practices &lt;em>feel&lt;/em> more expensive, teams choose to keep their status quo even when they know it is suboptimal. This choice ends up hurting productivity and morale because planned work is continuously interrupted, which in turn drags project completion.&lt;/p>
&lt;p>The reason I say &lt;em>seem&lt;/em> and not &lt;em>are&lt;/em> is because the alternatives to these cost-exposing practices also suffer from costs. The difference is that, while the former surface costs, leading to the need to allocate time and people to infrastructure work, the latter keeps the costs smeared over teams and individuals in ways that are difficult to account and plan for.&lt;/p>
&lt;p>To illustrate what I&amp;rsquo;m trying to say, I&amp;rsquo;ll present three different scenarios in which this opinion applies. All of these case studies come from past personal experiences while working in different teams and projects. The first one covered in this post is about the adoption of a monorepo vs. the use of multiple different repositories. The other two will come in follow-up articles.&lt;/p>
&lt;div class="container action-highlight p-4 my-4 d-md-none">
&lt;div class="row text-center">
&lt;p>A blog on operating systems, programming languages, testing, build systems, my own software
projects and even personal productivity. Specifics include FreeBSD, Linux, Rust, Bazel and
EndBASIC.&lt;/p>
&lt;/div>
&lt;div class="row">
&lt;div class="col">
&lt;div class="form-group">
&lt;form action="https://endtracker.azurewebsites.net/api/sites/e8da9f62-b7ac-4fe9-bf20-7c527199a376/subscribers/add" method="post">
&lt;input type="text" name="email"
placeholder="Enter your email"
class="form-control input-sm text-center my-1"/>
&lt;button type="submit" class="btn btn-primary btn-block my-1">Subscribe&lt;/button>
&lt;/form>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="row px-2">
&lt;div class="col col-sm-5 text-left">
&lt;small>&lt;span class="subscriber-count">0&lt;/span> subscribers&lt;/small>
&lt;/div>
&lt;div class="col col-sm-7 text-right">
&lt;p>
&lt;a rel="me" href="https://mastodon.online/@jmmv">
&lt;img src="/images/badges/mastodon-logo.svg" width="32px" height="32px" alt="Follow @jmmv on Mastodon">
&lt;/a>
&lt;a href="https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fjmmv.dev%2F&amp;amp;screen_name=jmmv">
&lt;img src="/images/badges/Twitter_logo_blue.svg" width="32px" height="32px" alt="Follow @jmmv on Twitter">
&lt;/a>
&lt;a href="/feed.xml">&lt;img src="/images/badges/feed-icon-28x28.png" alt="RSS feed">&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;p>Monorepos are in fashion. In fact, I like to think that they have been a good idea for large organizations since before Google made them popular: the BSDs have followed this model from their inception in the 1970s even if the &amp;ldquo;monorepo&amp;rdquo; term wasn&amp;rsquo;t coined yet. But I&amp;rsquo;m not writing about this topic just because of the BSDs. I&amp;rsquo;m writing about this topic because I previously worked at Google, and Google made the conscious choice to fund a monorepo for the benefit of everyone in the company. I&amp;rsquo;m writing about this because I also worked in the Azure Storage team, which ran a monorepo and a bunch of ancillary repos but with a small team to support them. And I&amp;rsquo;m writing about this because I&amp;rsquo;m now at Snowflake, helping with the adoption of monorepo tooling with a well-staffed team.&lt;/p>
&lt;p>Adopting a monorepo can bring advantages such as code sharing, unified tooling, and a standardized development experience. However, monorepos are also &lt;em>&lt;strong>visibly expensive&lt;/strong>&lt;/em>. And because they seem expensive, cost is often an objection to adopting one. And for good reason: if you decide to migrate to a monorepo without proper funding to maintain the build system, the language toolchains, the CI system, the release process, the practices to follow, etc. the monorepo will eventually collapse under its own weight.&lt;/p>
&lt;p>What&amp;rsquo;s not so obvious&amp;mdash;and what the objectors are missing&amp;mdash;is that these maintenance costs exist in multirepo environments too. The difference is that, in multirepo setups, these costs fly under the radar because they are smeared across &lt;em>every&lt;/em> repo. When taken individually, the costs seem insignificant, but in unison, they make a taxing impact on every team member.&lt;/p>
&lt;hr>
&lt;p>Here is what happens in the typical multirepo scenario: different teams own different repos and are responsible for their maintenance. Two arguments that arise in their favor when proposing a switch to a monorepo are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;em>&amp;ldquo;Repo maintenance is a shared responsibility. We should all care about their health!&amp;rdquo;&lt;/em>&lt;/p>
&lt;p>When ownership is shared&amp;hellip; nobody owns anything. When the repos are small and the teams are small, there is no designated individual to mend them. Build breakages will arise, modernization changes will be necessary, flaky tests will grow out of control&amp;hellip; and at some point, when things have gotten so bad that productivity grinds to a halt, &amp;ldquo;someone&amp;rdquo; will have to do something.&lt;/p>
&lt;p>Who will? In the best case, the &amp;ldquo;person or people that care&amp;rdquo; will take it upon themselves to resolve these issues in their &amp;ldquo;free time&amp;rdquo;. But because maintaining the repository is not their primary job, these issues will be preempting their assigned tasks. In the worst case&amp;hellip; well, there is nobody that cares or nobody with the expertise to do anything, thus the problems may go unfixed or they may be &amp;ldquo;fixed&amp;rdquo; in a haphazard way, causing toil for everyone else.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&amp;ldquo;These side repos are not that important&amp;hellip; don&amp;rsquo;t waste time on them!&amp;rdquo;&lt;/em>&lt;/p>
&lt;p>Eventually, though, some repos become more important than others: maybe because they are used more, maybe because they contain the majority of the company&amp;rsquo;s product code, or maybe because your ongoing migration to the monorepo stops halfway through.&lt;/p>
&lt;p>The important repos see more care in their tooling&amp;mdash;they probably have a dedicated team to maintain them&amp;mdash;but the others lag behind. Maybe these side repos get stuck with an old version of the compiler because upgrading them wasn&amp;rsquo;t done in the past and doing so now is difficult. Maybe they do not have the right PR validation checks set up, which causes their tests to rot. Maybe there are no enforced coding standards, so their contents are a mess. Maybe they just are &lt;em>different&lt;/em> than the main repo&amp;mdash;different build system, different language&amp;mdash;requiring a different skillset to interact with them.&lt;/p>
&lt;p>Whatever the reasons are, these side repos are full of sharp corners that slow down any activities to change them. People dread doing such changes or they do the wrong thing because there is no incentive to keep things tidy.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>While these arguments in defense of monorepos sound reasonable, they end up causing a continuous drag on team productivity and morale. When engineers work with suboptimal tooling day in and day out without any clear path to make things better, they grow disillusioned with the engineering practices and will eventually want to jump ship.&lt;/p>
&lt;hr>
&lt;p>Compare these issues to a monorepo setup: when the infrastructure breaks, it is clear which team to call; after all, it is their mandate to budget time to fix problems and to plan and execute major quality-of-life improvements. And when the infrastructure team performs a change, the change benefits &lt;em>everyone&lt;/em> without requiring all of the smaller teams to do anything on their own. As an engineer, it is much easier to feel accomplished due to the larger-scope task and it is easier to justify impact at performance review time.&lt;/p>
&lt;p>The costs that the monorepo brings to light are clear, while the costs of the multirepo approach are pushed under the rug and slowly become a source of toil paid by all teams. This toil usually falls under the radar because there is no single front-line manager that can assess the systemic problems company-wide, so the problems never get resolved. And because every team is only impacted &amp;ldquo;a little bit&amp;rdquo;, it is difficult to quantify how much this type of toil costs in terms of productivity in the organization.&lt;/p>
&lt;p>So, while adopting a monorepo isn&amp;rsquo;t the right choice for everyone, do not glance over the option to migrate to one just because you think it&amp;rsquo;s more expensive to run. Look at your current practices and see how much effort your engineers waste dealing with suboptimal tooling because nobody has the chance to make things better in a significant manner.&lt;/p>
&lt;p>And if you &lt;em>do&lt;/em> decide to migrate to a monorepo without knowing any of this upfront, know that these cost issues become obvious really quickly because the monorepo helps expose them. Once that happens, you&amp;rsquo;ll have to staff teams to manage these problems. And if done right, those teams will have well-defined charters and full responsibility for their part of the monorepo experience. As you move towards the monorepo, you&amp;rsquo;ll see time freed from everyone not directly responsible for the monorepo maintenance.&lt;/p>
&lt;p>Still not convinced? Stay tuned for the next part, in which I will look into the costs that different ticket assignment practices have in on-call rotations.&lt;/p></description><enclosure url="https://jmmv.dev/images/2023-08-23-freebsd-gnome-repos.png" length="162711" type="image/jpeg"/></item><item><title>Raspberry Pi 3, rfkill, and real root causing</title><link>https://jmmv.dev/2023/08/rpi3-rfkill-root-causing.html</link><pubDate>Wed, 16 Aug 2023 06:20:00 -0700</pubDate><guid>https://jmmv.dev/2023/08/rpi3-rfkill-root-causing.html</guid><description>&lt;p>I&amp;rsquo;ve had a Raspberry Pi 3 in the garage running Raspbian so it was attached to Ethernet for a long time. A few weeks ago, however, I wanted to bring the Pi into the house so that my kid, who was showing interest in robotics, and I could play with it. That required having the ability to place the device onto the dining table, next to a laptop, which meant connecting it to WiFi. Easy peasy, right?&lt;/p>
&lt;p>Well&amp;hellip; while that should have been trivial, it did not work right away and the solutions I found online back then were all nonsensical. I gave up in desperation because I did not have enough time to find the root cause, and all interest was lost. Until last weekend when I gave this ordeal another try. At this point, I found once again the same nonsensical solutions online, got equally frustrated about the fact that they even existed, and decided to find the real answer to my problem on my own.&lt;/p>
&lt;p>Yes, this is mostly a rant about the Internet being littered with misleading answers of the kind &amp;ldquo;I reinstalled glibc and my problem is gone!&amp;rdquo;. But this is also the tale of a troubleshooting session&amp;mdash;and you know I like to blog about those.&lt;/p>
&lt;div class="container action-highlight p-4 my-4 d-md-none">
&lt;div class="row text-center">
&lt;p>A blog on operating systems, programming languages, testing, build systems, my own software
projects and even personal productivity. Specifics include FreeBSD, Linux, Rust, Bazel and
EndBASIC.&lt;/p>
&lt;/div>
&lt;div class="row">
&lt;div class="col">
&lt;div class="form-group">
&lt;form action="https://endtracker.azurewebsites.net/api/sites/e8da9f62-b7ac-4fe9-bf20-7c527199a376/subscribers/add" method="post">
&lt;input type="text" name="email"
placeholder="Enter your email"
class="form-control input-sm text-center my-1"/>
&lt;button type="submit" class="btn btn-primary btn-block my-1">Subscribe&lt;/button>
&lt;/form>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="row px-2">
&lt;div class="col col-sm-5 text-left">
&lt;small>&lt;span class="subscriber-count">0&lt;/span> subscribers&lt;/small>
&lt;/div>
&lt;div class="col col-sm-7 text-right">
&lt;p>
&lt;a rel="me" href="https://mastodon.online/@jmmv">
&lt;img src="/images/badges/mastodon-logo.svg" width="32px" height="32px" alt="Follow @jmmv on Mastodon">
&lt;/a>
&lt;a href="https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fjmmv.dev%2F&amp;amp;screen_name=jmmv">
&lt;img src="/images/badges/Twitter_logo_blue.svg" width="32px" height="32px" alt="Follow @jmmv on Twitter">
&lt;/a>
&lt;a href="/feed.xml">&lt;img src="/images/badges/feed-icon-28x28.png" alt="RSS feed">&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h1 id="first-steps">First steps&lt;/h1>
&lt;p>Before even unplugging the Pi from its physical network link, I had to configure its WiFi connection so that I could use it on the dining table. To do so, I was going to need to run more than one command as root so, in preparation for that, I started a root shell. I was helpfully greeted by the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">jmmv@rpi3:~$ sudo su -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Wi-Fi is currently blocked by rfkill.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Use raspi-config to set the country before use.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jmmv@rpi3:~#
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nice. Somehow Raspbian expects that what one most likely wants to do after becoming root is to configure the WiFi and it points us in the right direction. That&amp;rsquo;s&amp;hellip; a bold assumption, but hey, it was pretty accurate.&lt;/p>
&lt;p>In any case, this was the first time I heard of rfkill. From the name, I assumed that this controlled some kind of kill switch for all radio devices in the system&amp;mdash;the kind of switch you would need to implement an &amp;ldquo;airplane mode&amp;rdquo; feature. I further assumed, based on this message, that rfkill was active because one needs to know the location of the device to decide which radio frequencies can be used.&lt;/p>
&lt;p>I did as told: I ran &lt;code>raspi-config&lt;/code>, went into the network configuration options to set up the WiFi, selected the right country, joined a WiFi network, and dropped back into the shell. As I did that, the WiFi connection was up and running and &lt;code>rfkill&lt;/code> reported the right thing:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">root@rpi3:~# ifconfig | grep wlan0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wlan0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@rpi3:~# rfkill
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ID TYPE DEVICE SOFT HARD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0 wlan phy0 unblocked unblocked
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1 bluetooth hci0 blocked unblocked
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Seeing this and knowing from past experience that the &lt;code>raspi-config&lt;/code> setting changes are permanent, I tried to SSH into the Pi over the WiFi adapter, confirmed that it was working, shut the system down, unplugged the Raspberry Pi from the network, brought it into the house from the garage, turned it on and&amp;hellip; it wasn&amp;rsquo;t reachable over WiFi anymore. What the&amp;hellip;!?&lt;/p>
&lt;h1 id="thinking-about-the-problem">Thinking about the problem&lt;/h1>
&lt;p>This did not make any sense. The instructions told me to configure a country and I had set one up, but somehow that was insufficient. Interestingly, though, logging back in as &lt;code>root&lt;/code> showed me the same warning about having to configure a country&amp;hellip; so I double-checked things.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">jmmv@rpi3:~$ sudo su -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Wi-Fi is currently blocked by rfkill.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Use raspi-config to set the country before use.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@rpi3:~# rg country /etc/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/etc/wpa_supplicant/wpa_supplicant.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3:country=US
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">... and more matches ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The country seemed to be configured properly in persistent storage in a place that made sense but:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">root@rpi3:~# rfkill
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ID TYPE DEVICE SOFT HARD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0 wlan phy0 blocked unblocked
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1 bluetooth hci0 blocked unblocked
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The WiFi adapter was indeed back to the blocked state. Why? As you might imagine, running the Raspberry Pi in a headless state and with a WiFi connection &lt;em>surely&lt;/em> has to be a well-anticipated scenario, which explains why logging in as root has, of all things, a check for the WiFi state and a pointer to configure it. The WiFi should work without extra effort.&lt;/p>
&lt;h1 id="initial-research">Initial research&lt;/h1>
&lt;p>I don&amp;rsquo;t remember how exactly I came across this, but I ended up noticing the following files:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">jmmv@rpi3:~# fd rfkill /lib/systemd/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/lib/systemd/system/systemd-rfkill.service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/lib/systemd/system/systemd-rfkill.socket
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/lib/systemd/systemd-rfkill
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As it turns out, there is a systemd service to manage the rfkill state. Looking at its manual page (while shocked that one even existed):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">SYSTEMD-RFKILL.SERVICE(8) systemd-rfkill.service SYSTEMD-RFKILL.SERVICE(8)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> systemd-rfkill.service, systemd-rfkill.socket, systemd-rfkill – Load
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> and save the RF kill switch state at boot and change
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>systemd-rfkill&lt;/code> is a shutdown service that saves the blocked/unblocked state of rfkill and restores it at system startup time. It seems that this whole rfkill thing was well-thought after all. But this finding meant that rfkill should have remained unblocked after the reboot. And it didn&amp;rsquo;t. So &lt;em>this&lt;/em> is the question that had to be answered.&lt;/p>
&lt;h1 id="trying-to-find-an-answer-online">Trying to find an answer online&lt;/h1>
&lt;p>Searching online for a solution, using obvious queries like &lt;code>raspberry pi enable wifi boot rfkill&lt;/code>, resulted in me finding the following &amp;ldquo;solutions&amp;rdquo;:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Disable rfkill via a kernel command line setting and ask systemd to not restore state.&lt;/strong> Sure, that&amp;rsquo;ll work. But it&amp;rsquo;s&amp;hellip; drastic? Why would I have to do that when the system seems to be prepared to &amp;ldquo;just work&amp;rdquo; after a &lt;code>raspi-config&lt;/code>? Why should I disable a core feature that&amp;rsquo;s installed by default to make headless WiFi work? This will &amp;ldquo;break&amp;rdquo; whatever thing is using rfkill during the boot process to disable the network, and it will possibly break any &amp;ldquo;airplane mode&amp;rdquo;-like toggles that might exist in the UI. Not that I care about the UI, but still.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Add a systemd startup script to force rfkill to the unblocked state.&lt;/strong> Another thing that will work. But why should I do that? This will just paper over whatever exists in the boot process that disables the network after &lt;code>systemd-rfkill&lt;/code> has done its thing. It does not address the root cause.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create a WiFi configuration file in the boot partition.&lt;/strong> OK, maybe this one makes sense. Maybe if the system knows to configure the WiFi early enough during the boot process, it knows that the WiFi must remain enabled later on. A bit of research proved this solution wrong too though. I stumbled upon &lt;code>/lib/systemd/system/raspberrypi-net-mods.service&lt;/code>, which is the boot code that handles this feature, and it reads like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Unit]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Description&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">Copy user wpa_supplicant.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">ConditionPathExists&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/boot/wpa_supplicant.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Before&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">dhcpcd.service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">After&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">systemd-rfkill.service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Service]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">oneshot&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">RemainAfterExit&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">yes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">ExecStart&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/bin/mv /boot/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">ExecStartPost&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/bin/chmod 600 /etc/wpa_supplicant/wpa_supplicant.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">ExecStartPost&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/usr/sbin/rfkill unblock wifi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Install]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">WantedBy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">multi-user.target&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This snippet runs when &lt;code>/boot/wpa_supplicant.conf&lt;/code> is present (&lt;code>ConditionPathExists&lt;/code>), but all it does is move that file to the right place and unblocks the WiFi using the &lt;code>rfkill unblock wifi&lt;/code> command&amp;mdash;the same one that &lt;code>raspi-config&lt;/code> invokes and the command I had already tried to run by hand. The key insight is that because this unit moves the file, &lt;em>it only runs once&lt;/em>. That makes sense if you look at this unit as a first-time setup action for headless installations, but it had no chance of fixing my problem.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>So no. None of these &amp;ldquo;solutions&amp;rdquo; address the root cause. They are hacks and workarounds that may achieve the desired outcome, but they don&amp;rsquo;t explain &lt;em>why&lt;/em> the &lt;code>systemd-rfkill&lt;/code> automation, which is built into the system and should restore the changes made by &lt;code>raspbi-config&lt;/code>, isn&amp;rsquo;t working as designed.&lt;/p>
&lt;h1 id="proper-troubleshooting">Proper troubleshooting&lt;/h1>
&lt;p>Given that these answers were all misguided, I had to do some extra work to reach the true solution.&lt;/p>
&lt;p>The first question to answer was: did the &lt;code>systemd-rfkill&lt;/code> service even work fine? It took me a bit of fiddling to discover how to enable debug logging in systemd, but once I did that, I could confirm that this service was indeed working fine. The service correctly persisted the disabled state to a file and restored it on the next boot.&lt;/p>
&lt;p>This meant that there had to be &lt;em>something else&lt;/em> in the boot process that disabled the WiFi after &lt;code>systemd-rfkill&lt;/code> had run. The question was finding what that was, and having this knowledge meant I could better scope my next searches a bit more accurately.&lt;/p>
&lt;p>My next thought took me to NetworkManager. I have had my previous fights with this service in the past, so I thought that maybe this was installed on the system to handle the state of network connections in the UI. I do have the standard Raspbian desktop installed but I had no easy way to log into it&amp;hellip; so verifying this wasn&amp;rsquo;t exactly trivial. (In retrospect, I think that if I had gone through the hassle of logging into the UI and clicked on whichever button exists to enable the WiFi, my problems would have been resolved immediately. But then I wouldn&amp;rsquo;t have gained all of this knowledge.)&lt;/p>
&lt;p>Fear not though. NetworkManager has a CLI to manipulate its state so I could use that. Except for the fact that NetworkManager was nowhere to be seen on the system. Dead end.&lt;/p>
&lt;p>My next step was to look into the standard Debian configuration under &lt;code>/etc/network/&lt;/code>, but I couldn&amp;rsquo;t find anything obvious either. Actually, I couldn&amp;rsquo;t find &lt;em>anything&lt;/em> because the interfaces aren&amp;rsquo;t apparently configured there at all anymore. Yay for modern Linux?&lt;/p>
&lt;p>It is then that I reverted to searching online (I don&amp;rsquo;t remember the right search terms though) and I ended in yet another forum that talked about connman. And bingo! I did have connman installed and it sounded like the same NetworkManager thing I had seen before. Running a &lt;code>connman enable wifi&lt;/code> was all it took to mark the WiFi link enabled and get the right fix in place. And by &amp;ldquo;right fix&amp;rdquo; I mean a fix that works in conjuction with the way the whole system is expected to run, not in spite of it.&lt;/p>
&lt;p>In other words: it was connman that was kicking in after the &lt;code>systemd-rfkill&lt;/code> startup script, and it was connman the one that was re-disabling the WiFi because connman thought that it had to be disabled. Now, as to why I have connman installed and whether it should be there or not&amp;hellip; I do not know. This Raspbian installation has been in place for years now and has been upgraded a few times, so my guess is that &lt;code>connman&lt;/code> is there to support the lightweight Raspbian desktop, and at some point in the past I logged into it and clicked on the button to disable the WiFi.&lt;/p>
&lt;h1 id="the-ai-future">The AI future&lt;/h1>
&lt;p>The Internet being polluted by wrong answers obviously impacts everyone, from beginner engineers and sysadmins that will not know/care enough to find the true root causes behind problems, to our new AI overlords which will outright lie to us.&lt;/p>
&lt;p>Or will they? Let&amp;rsquo;s try to get an answer from Bing&amp;rsquo;s AI-powered new search engine:&lt;/p>
&lt;blockquote>
&lt;p>Q: I enabled the WiFi on the Raspberry Pi with raspi-config but, after a reboot, rfkill reports that the WiFi is blocked. How do I fix it?&lt;/p>
&lt;p>A: You can try running the command sudo rfkill unblock wifi to unblock the wifi. If that doesn’t work, you can try adding the command rfkill unblock all to /etc/rc.local file before the line that says exit 0. This will ensure that the command is run at boot time and should unblock the wifi.&lt;/p>
&lt;/blockquote>
&lt;p>Yeah, no. While that might have the right effect as described earlier, it&amp;rsquo;s not the correct answer. But I &lt;em>know&lt;/em> the answer, so I can cheat and prompt the question towards what I think the problem really is:&lt;/p>
&lt;blockquote>
&lt;p>Q: But why doesn&amp;rsquo;t the rfkill unblocked state persist after the reboot? The systemd unit says it should.&lt;/p>
&lt;p>A: The reason why the rfkill unblocked state doesn&amp;rsquo;t persist after reboot is because the Network Manager is blocking it back¹. You can try creating a service to unblock the wifi devices at boot time. Here&amp;rsquo;s how you can do it:
&amp;hellip; snippet to modify systemd &amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>Oh wow, I&amp;rsquo;m actually surprised. This answer was pretty close!&lt;/p>
&lt;blockquote>
&lt;p>Q: But I do not have NetworkManager installed. What else could it be?&lt;/p>
&lt;p>A: If you don&amp;rsquo;t have NetworkManager installed, then it could be that the wifi is being blocked by the kernel. You can try adding the following line to &lt;code>/etc/modprobe.d/raspi-blacklist.conf&lt;/code> file:
&amp;hellip; more steps &amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>Back to the wrong heavy-handed solution of fully disabling rfkill. Bing&amp;hellip; you were soooo close, but yet so far. Finally:&lt;/p>
&lt;blockquote>
&lt;p>Q: Could it be connman?&lt;/p>
&lt;p>A: Yes, it could be connman. You can try disabling connman by running the following command:
&amp;hellip; steps to fully disable &amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>Of course it could obviously be connman&amp;rsquo;s fault, but the answer is wrong. I might want to have connman installed and the system ought to work with it (it was there by default after all). Uninstalling random system components isn&amp;rsquo;t usually the answer.&lt;/p>
&lt;hr>
&lt;p>Is there any moral to this story? Sure there is, the usual one: in order to solve a problem, you must always understand what the root cause really is. This typically requires understanding how the system works top-to-bottom and reasoning about what the behavior should be end-to-end. Only then you can come up with the right fix. Asking &amp;ldquo;why&amp;rdquo; several times in a row tends to work well in discovering what you might be missing. Oh, and this all applies to software bugs as well: the next time you find yourself adding a nullness check to fix a crash&amp;hellip; keep digging.&lt;/p>
&lt;p>It would be pretty funny if &lt;em>my&lt;/em> root-causing in this post was &lt;em>also&lt;/em> wrong. If that&amp;rsquo;s the case, don&amp;rsquo;t hesitate to say so!&lt;/p></description><enclosure url="https://jmmv.dev/images/2023-08-16-rpi3-go2-gpio.jpg" length="346217" type="image/jpeg"/></item><item><title>A failed experiment with Rust static dispatch</title><link>https://jmmv.dev/2023/08/rust-static-dispatch-failed-experiment.html</link><pubDate>Sun, 06 Aug 2023 05:30:00 -0700</pubDate><guid>https://jmmv.dev/2023/08/rust-static-dispatch-failed-experiment.html</guid><description>&lt;p>Initial versions of the EndBASIC Service, and therefore initial versions of EndTRACKER, used dynamic dispatch to support abstract definitions of system services such as the database they talk to and the clock they use. This looked like a bunch of &lt;code>Arc&amp;lt;dyn Foo&amp;gt;&lt;/code> objects passed around and was done to &lt;a href="/2023/07/unit-testing-a-web-service.html">support extremely fast unit testing&lt;/a>.&lt;/p>
&lt;p>When I generalized the core logic of these services into the &lt;a href="/2023/03/introducing-iii-iv.html">III-IV framework&lt;/a>, I decided to experiment with a switch to static dispatch. The rationale was that using static dispatch better aligns with the design of well-regarded crates in the Rust ecosystem, and also because I wanted to avoid unnecessary runtime costs in the foundational pieces of my web services.&lt;/p>
&lt;p>Let me tell you that this decision was a huge mistake and that the experiment has utterly failed. Using static dispatch has been a constant source of frustration due to the difficulty in passing types around and reasoning about trait bounds. The situation had gotten so bad that I dreaded adding new functionality to my services whenever a change to a statically-typed &lt;code>struct&lt;/code> was needed, because that meant adding yet another type parameter and plumbing it through tens of source files.&lt;/p>
&lt;p>In lieu of the difficulties, which eventually turned into blockers to implementing new features, I made the choice of going back to dynamic dispatch. The goal was to gain ergonomics at the expense of a supposedly-negligible runtime cost. Let me tell you about the problems I faced, the refactoring journey, and some measurements I gathered after the rewrite.&lt;/p>
&lt;div class="container action-highlight p-4 my-4 d-md-none">
&lt;div class="row text-center">
&lt;p>A blog on operating systems, programming languages, testing, build systems, my own software
projects and even personal productivity. Specifics include FreeBSD, Linux, Rust, Bazel and
EndBASIC.&lt;/p>
&lt;/div>
&lt;div class="row">
&lt;div class="col">
&lt;div class="form-group">
&lt;form action="https://endtracker.azurewebsites.net/api/sites/e8da9f62-b7ac-4fe9-bf20-7c527199a376/subscribers/add" method="post">
&lt;input type="text" name="email"
placeholder="Enter your email"
class="form-control input-sm text-center my-1"/>
&lt;button type="submit" class="btn btn-primary btn-block my-1">Subscribe&lt;/button>
&lt;/form>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="row px-2">
&lt;div class="col col-sm-5 text-left">
&lt;small>&lt;span class="subscriber-count">0&lt;/span> subscribers&lt;/small>
&lt;/div>
&lt;div class="col col-sm-7 text-right">
&lt;p>
&lt;a rel="me" href="https://mastodon.online/@jmmv">
&lt;img src="/images/badges/mastodon-logo.svg" width="32px" height="32px" alt="Follow @jmmv on Mastodon">
&lt;/a>
&lt;a href="https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fjmmv.dev%2F&amp;amp;screen_name=jmmv">
&lt;img src="/images/badges/Twitter_logo_blue.svg" width="32px" height="32px" alt="Follow @jmmv on Twitter">
&lt;/a>
&lt;a href="/feed.xml">&lt;img src="/images/badges/feed-icon-28x28.png" alt="RSS feed">&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h1 id="initial-impressions">Initial impressions&lt;/h1>
&lt;p>The adoption of static dispatch in III-IV started pretty simple and it did the job well. Even though it took me days of fighting with the Rust type system, I eventually got it to work. The production binary was statically bound to the PostgreSQL database backend and the unit tests were bound to SQLite, all while respecting the type safety offered by &lt;code>sqlx&lt;/code> and without having virtual function calls anywhere.&lt;/p>
&lt;p>Let&amp;rsquo;s take a peek at what the &lt;a href="https://github.com/jmmv/iii-iv/tree/cba6775e489d2e015a5919b086278ee486589ee5/example/src">sample key/value store&lt;/a> core pieces looked like by going through the architectural layers described in &lt;a href="/2023/06/mvc-non-ui-apps.html">MVC but for non-UI apps&lt;/a>.&lt;/p>
&lt;p>At the bottom layer, the database, there was a transaction trait to supply the operations required by the business logic layer:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#[async_trait]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">BareTx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">get_keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">DbResult&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BTreeSet&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... more database operations ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This trait was separately implemented for PostgreSQL and SQLite by providing separate &lt;code>PostgresTx&lt;/code> and &lt;code>SqliteTx&lt;/code> specific types, and both the specific transaction type and the database backing it were chosen at build time where the database connection was established.&lt;/p>
&lt;p>Moving up to the business-logic layer, the &lt;code>Driver&lt;/code> was parameterized on the domain-specific &lt;code>Tx&lt;/code> so that it could have access to those operations (and only those):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#[derive(Clone)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Driver&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">Tx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>: &lt;span class="nc">D&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Driver&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">Tx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">get_keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">DriverResult&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BTreeSet&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get_keys&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commit&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// ... more impl blocks for different driver operations ...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note how, in the above, the &lt;code>db.begin()&lt;/code> method call returns an instance of a &lt;code>Tx&lt;/code> right away, ensuring that callers always issue database operations as part of a transaction. This had been a deliberate decision from the very beginning to prevent issuing standalone database calls that could compromise the correctness of the data, because there was no scenario in which a transaction was &lt;em>not&lt;/em> necessary.&lt;/p>
&lt;p>Finally, the upper REST layer took a &lt;code>Driver&lt;/code> as the engine to run the API requests through and, as a consequence, the REST handlers all had to be parameterized like the underlying &lt;code>Driver&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">handler&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">driver&lt;/span>&lt;span class="p">)&lt;/span>: &lt;span class="nc">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Driver&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">IntoResponse&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RestError&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">Tx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">driver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get_keys&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Json&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is where things started to look finicky because the REST layer now had to spell out the internals of the &lt;code>Driver&lt;/code>&amp;hellip; but it didn&amp;rsquo;t look so bad at the beginning. Combining this, the &lt;a href="https://en.wikipedia.org/wiki/Sunk_cost">sunken cost fallacy&lt;/a>&amp;mdash;it had taken me days to devise how to make the above work&amp;mdash;and the idea of avoiding an unnecessary abstraction at runtime made me plough ahead with this implementation.&lt;/p>
&lt;h1 id="the-problems">The problems&lt;/h1>
&lt;p>It soon wasn&amp;rsquo;t all roses. What you could see above was an extremely simplified view of how things ended looking like in a real service with more than just the database dependency. Without further ado, let me present to you the monstrosity that I ended up with in EndTRACKER. Here is the &lt;code>Driver&lt;/code> definition for the data plane microservice:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#[derive(Derivative)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[derivative(Clone(bound = &lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="cp">))]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Driver&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>: &lt;span class="nc">AbusePolicy&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>: &lt;span class="nc">Clock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">DataTx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">From&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">SqlxTx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">G&lt;/span>: &lt;span class="nc">GeoLocator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">ClientTx&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">BatchTask&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">From&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="no">QD&lt;/span>::&lt;span class="n">SqlxTx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>: &lt;span class="nc">D&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">clock&lt;/span>: &lt;span class="nc">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... more fields ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But that&amp;rsquo;s not all, oh no. This chunk also infected the REST layer, which in theory should not care about the specifics of the driver layer. Here, look at this &lt;code>RestState&lt;/code> type, which is a wrapper over the data that the REST API handlers need to operate:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#[derive(Derivative)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[derivative(Clone(bound = &lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="cp">))]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">RestState&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>: &lt;span class="nc">AbusePolicy&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>: &lt;span class="nc">Clock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">DataTx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">From&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">SqlxTx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">G&lt;/span>: &lt;span class="nc">GeoLocator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">ClientTx&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">BatchTask&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">From&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="no">QD&lt;/span>::&lt;span class="n">SqlxTx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">driver&lt;/span>: &lt;span class="nc">Driver&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... more fields ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are several problems with the above:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>It is Super Ugly (TM). There is no other way to put it. As much as I like Rust, things like this are painful and scary&amp;mdash;but not as painful as deranged modern C++.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>These &lt;code>where&lt;/code> declarations where repeated 44 times in 37 different files (that is, almost &lt;em>all&lt;/em> files). This polluted source files with details they don&amp;rsquo;t care about. Any small change to the &lt;code>Driver&lt;/code> required updating all these repeated chunks in sync. I&amp;rsquo;m not even sure why Rust requires the duplication and why it&amp;rsquo;s sometimes OK for the trait bounds to diverge among the various &lt;code>impl&lt;/code> blocks, but the duplication is necessary.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It poisoned the REST layer. As mentioned above, the REST layer wants to pass around a &lt;code>RestState&lt;/code> object that contains the &lt;code>Driver&lt;/code> and other data fields that are only necessary at that level. Yet&amp;hellip; to achieve this the &lt;code>REST&lt;/code> layer had to replicate all of the internal details of the &lt;code>Driver&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I had to use &lt;code>derivative&lt;/code> to remove unnecessary (?) clone trait bounds. The need to have a cloneable &lt;code>Driver&lt;/code> and &lt;code>RestState&lt;/code> comes from how the &lt;code>axum&lt;/code> HTTP framework dispatches route execution, and figuring this out took quite a while. Furthermore&amp;hellip; the way this &amp;ldquo;works&amp;rdquo; is still obscure to me.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It became impossible to compose transaction types. This is a problem with my design and not an inherent issue with static dispatch, but the use of static dispatch guided me towards this design. Note that, in the above, there are two database instances: &lt;code>D&lt;/code> and &lt;code>QD&lt;/code>, each with a different associated &lt;code>Tx&lt;/code> type. While I wrote some contortions to support sharing the same underlying database connection between them, I never got to replicating those to also share an open transaction. The complexity was already at unmanageable levels to push this design any further. But I needed a solution to this problem.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>All in all, the use of static dispatch was slowing me down in building new features as these constructs made me dread modifying certain aspects of the code. And what&amp;rsquo;s worse: certain initial design choices started showing up as true inefficiencies in production like the inability to issue standalone database calls outside of a transaction. The original goal of minimizing runtime costs was made significantly &lt;em>worse&lt;/em>. Fixing these issues required a redesign so it was time for a change.&lt;/p>
&lt;h1 id="switching-to-dynamic-dispatch">Switching to dynamic dispatch&lt;/h1>
&lt;p>The goal with the redesign was to drop all static type parameters and replace them with &lt;code>dyn&lt;/code> trait objects. In this way, the &lt;code>Driver&lt;/code> would encapsulate these details in just one place and all other code would not have to care about the specific field definitions within this type.&lt;/p>
&lt;p>It is easier said than done, but the results speak for themselves. Here is how the new &lt;code>Driver&lt;/code> for the &lt;a href="https://github.com/jmmv/iii-iv/tree/ba7aaf151fab3ff7aa1defde2454eab1550bda32/example/src">simplified key/value store&lt;/a> looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#[derive(Clone)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Driver&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>: &lt;span class="nc">Arc&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Driver&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">get_keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">DriverResult&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BTreeSet&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>::&lt;span class="n">get_keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="p">()).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commit&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And, similarly, this is how one of the REST API handlers looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">driver&lt;/span>&lt;span class="p">)&lt;/span>: &lt;span class="nc">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Driver&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">IntoResponse&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RestError&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">driver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get_keys&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Json&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s it. This is the way to declare the &lt;code>Driver&lt;/code> over a generic database, the way to write a business-logic operation on top of this database, and the way to write a REST API handler that calls into this operation. The &lt;code>Arc&lt;/code>s and the &lt;code>Send + Sync&lt;/code> annotations are somewhat ugly but they are nowhere as ugly as the previous disaster. In this version, there is no noise.&lt;/p>
&lt;p>What&amp;rsquo;s more: as part of the redesign, I could throw away the &amp;ldquo;everything behind a transaction&amp;rdquo; idea and allow the caller to choose the best execution mode for its needs. Note the &lt;code>tx.ex()&lt;/code> call above, which obtains an &amp;ldquo;executor&amp;rdquo; from the database and that can be used to talk to the database. This specific call obtains an executor from a transaction, but the same &lt;code>db.ex()&lt;/code> method also exists to obtain a standalone executor. Describing how this works is out of the scope of this post though.&lt;/p>
&lt;h1 id="show-me-the-metrics">Show me the metrics&lt;/h1>
&lt;p>The pervasiveness of static dispatch in the Rust ecosystem helps leverage &amp;ldquo;zero-cost abstractions&amp;rdquo;, but it &lt;em>does&lt;/em> come with a cost. Namely: programming time cost. It is great to have a choice, and it is great that many general-purpose Rust crates use static dispatch so that you don&amp;rsquo;t have to pay unnecessary taxes&amp;hellip; but it was not the right choice for me. I might have done things really wrong in my original design and these measurements may not be sustained for other projects, but let&amp;rsquo;s look at some numbers anyway.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Code size.&lt;/strong> This is how the refactoring looks like according to a &lt;code>git diff --stat&lt;/code>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Project&lt;/th>
&lt;th style="text-align:right">Files changed&lt;/th>
&lt;th style="text-align:right">Lines added&lt;/th>
&lt;th style="text-align:right">Lines deleted&lt;/th>
&lt;th style="text-align:right">Diff&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>iii-iv&lt;/td>
&lt;td style="text-align:right">32&lt;/td>
&lt;td style="text-align:right">1691&lt;/td>
&lt;td style="text-align:right">2115&lt;/td>
&lt;td style="text-align:right">-242 (-3%)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>endtracker&lt;/td>
&lt;td style="text-align:right">74&lt;/td>
&lt;td style="text-align:right">3751&lt;/td>
&lt;td style="text-align:right">4963&lt;/td>
&lt;td style="text-align:right">-1212 (-11%)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The changes to the III-IV framework are small because the use of static typing within the framework itself wasn&amp;rsquo;t pervasive: after all, the framework was just exposing the building blocks and not using them on its own. But the 11% code reduction in EndTRACKER alone is &lt;em>very&lt;/em> significant.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Binary size.&lt;/strong> Looking at the sizes of the main EndTRACKER binary and the supporting unit testing binaries, both under the &lt;code>release&lt;/code> and &lt;code>debug&lt;/code> configurations, we observe:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Binary&lt;/th>
&lt;th>Mode&lt;/th>
&lt;th style="text-align:right">Before (MBs)&lt;/th>
&lt;th style="text-align:right">After (MBs)&lt;/th>
&lt;th style="text-align:right">Diff&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>main binary&lt;/strong>&lt;/td>
&lt;td>release&lt;/td>
&lt;td style="text-align:right">23.30&lt;/td>
&lt;td style="text-align:right">26.47&lt;/td>
&lt;td style="text-align:right">+3.17&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>common tests&lt;/td>
&lt;td>release&lt;/td>
&lt;td style="text-align:right">16.75&lt;/td>
&lt;td style="text-align:right">17.11&lt;/td>
&lt;td style="text-align:right">+0.36&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>batch tests&lt;/td>
&lt;td>release&lt;/td>
&lt;td style="text-align:right">25.45&lt;/td>
&lt;td style="text-align:right">24.96&lt;/td>
&lt;td style="text-align:right">-0.49&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>control tests&lt;/td>
&lt;td>release&lt;/td>
&lt;td style="text-align:right">19.10&lt;/td>
&lt;td style="text-align:right">18.77&lt;/td>
&lt;td style="text-align:right">-0.33&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>data tests&lt;/td>
&lt;td>release&lt;/td>
&lt;td style="text-align:right">20.90&lt;/td>
&lt;td style="text-align:right">20.89&lt;/td>
&lt;td style="text-align:right">-0.01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>main binary&lt;/strong>&lt;/td>
&lt;td>debug&lt;/td>
&lt;td style="text-align:right">261.14&lt;/td>
&lt;td style="text-align:right">280.62&lt;/td>
&lt;td style="text-align:right">+19.48&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>common tests&lt;/td>
&lt;td>debug&lt;/td>
&lt;td style="text-align:right">169.27&lt;/td>
&lt;td style="text-align:right">171.62&lt;/td>
&lt;td style="text-align:right">+2.35&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>batch tests&lt;/td>
&lt;td>debug&lt;/td>
&lt;td style="text-align:right">239.72&lt;/td>
&lt;td style="text-align:right">238.07&lt;/td>
&lt;td style="text-align:right">-1.65&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>control tests&lt;/td>
&lt;td>debug&lt;/td>
&lt;td style="text-align:right">192.06&lt;/td>
&lt;td style="text-align:right">192.21&lt;/td>
&lt;td style="text-align:right">+0.15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>data tests&lt;/td>
&lt;td>debug&lt;/td>
&lt;td style="text-align:right">208.40&lt;/td>
&lt;td style="text-align:right">207.93&lt;/td>
&lt;td style="text-align:right">-0.47&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>I was expecting a slight increase in binary size with the move to dynamic dispatch because the compiler and linker don&amp;rsquo;t have as many opportunities for inlining and optimizing code. While the results seem to be all over the place, they seem to agree with my expectations: the binary sizes are larger when using dynamic dispatch. Some test binaries are smaller indeed, but this is most likely due to how the tests changed and not necessarily because of the switch from static to dynamic dispatch.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Compilation time.&lt;/strong> I measured an incremental build after modifying a core type in the EndTRACKER codebase to change its internal layout, starting from a &lt;code>cargo clean&lt;/code> slate and using the mold linker. With static dispatch, the incremental build times of the binary and tests were somewhere between 12 to 13 seconds, and with dynamic dispatch they dropped to just below 12 seconds. The difference is minimal, and the codebase isn&amp;rsquo;t large enough to obtain a good signal out of this metric.&lt;/p>
&lt;p>To be honest, I was hoping for a much larger improvement in incremental compilation times. My reasoning was that dealing with the type constraints that existed before must have been expensive, so removing them should reduce compiler execution times. My measurements did not prove this true, unfortunately. Or if they did, the improvements are negligible in this small codebase.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Refactoring effort.&lt;/strong> I spent a couple of days figuring out what the best abstraction was and then I spent many hours during a recent long flight doing all of the mostly-mechanical changes to the EndTRACKER codebase. As usual, updating the tests was the most painful part of all&amp;mdash;but also the one that gave me confidence to deploy a new build to production with ease.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Runtime cost.&lt;/strong> This one&amp;hellip; well, I haven&amp;rsquo;t been able to measure it. None of my web services are CPU-bound so the cost of the virtual function dispatch is negligible.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>To summarize: not much seems to have changed with this rewrite. Binaries are slightly larger indeed, but not by a lot. However&amp;hellip; the benefits in productivity are massive already.&lt;/p>
&lt;h1 id="productivity-benefits">Productivity benefits&lt;/h1>
&lt;p>One of the benefits of this rewrite is that I&amp;rsquo;ve been able to finally resolve a long-standing deficiency in test coverage, which I briefly mentioned it in the conclusion of the &lt;a href="/2023/07/unit-testing-a-web-service.html">Unit testing a web service&lt;/a> post. This deficiency was that the test suites for the driver and the REST layer ran against SQLite unconditionally and I did not have a way to run them against a real PostgreSQL instance. Well, I have an answer now. All it took after the switch to dynamic dispatch was to introduce a helper function like this one:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">connect_to_test_db&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Arc&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>: &lt;span class="nc">Arc&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">get_optional_var&lt;/span>::&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;TEST&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;DB&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;TEST_DB must be a string&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">as_deref&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;postgres&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Arc&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">postgres&lt;/span>::&lt;span class="n">testutils&lt;/span>::&lt;span class="n">setup&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sqlite&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Arc&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sqlite&lt;/span>::&lt;span class="n">testutils&lt;/span>::&lt;span class="n">setup&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">panic!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Invalid TEST_DB &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">super&lt;/span>::&lt;span class="n">init_schema&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="p">()).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip; use it to connect to the database in all tests, and configure a GitHub Actions job with &lt;code>TEST_DB=postgres&lt;/code> to run the test suites against the production database.&lt;/p>
&lt;p>Another benefit is that I have finally unstuck something I&amp;rsquo;ve been working on-and-off for months and that I had been procrastinating on due to its difficulty. That is: I&amp;rsquo;ve been trying to generalize the account creation and session management pieces of the EndBASIC Service into III-IV so that I can reuse those in EndTRACKER. This was made &lt;em>really&lt;/em> difficult due to static dispatch, but now it&amp;rsquo;s a piece of cake. Which means I should be able to add user accounts in EndTRACKER really soon now and maybe finally open it up to the public.&lt;/p>
&lt;p>All in all, I&amp;rsquo;m satisfied with the change. The code is much simpler now and I do not foresee the small costs at runtime nor in binary size to be problematic &lt;em>at all&lt;/em> for my specific use cases.&lt;/p></description></item><item><title>Unit-testing a web service in Rust</title><link>https://jmmv.dev/2023/07/unit-testing-a-web-service.html</link><pubDate>Fri, 07 Jul 2023 06:30:00 -0700</pubDate><guid>https://jmmv.dev/2023/07/unit-testing-a-web-service.html</guid><description>&lt;p>One of the things I&amp;rsquo;m most proud of the Rust web services I have written is how I can run their tests with zero setup and within milliseconds, all while making me confident that &lt;code>main&lt;/code> can always be shipped to production. I&amp;rsquo;ve previously touched upon how this all works in other articles, but it&amp;rsquo;s time for a deep dive.&lt;/p>
&lt;p>To make things specific, I&amp;rsquo;ll be describing the testing infrastructure of &lt;a href="/software/endtracker.html">EndTRACKER&lt;/a>, the &lt;a href="/2021/07/endbasic-0.7.html">EndBASIC Service&lt;/a>, and the &lt;a href="https://github.com/jmmv/iii-iv/tree/eec320cd02149f223d8a9c7f8d697845ec2114d8/example/">sample key/value store app of III-IV&lt;/a>. These services are all structured in three separate layers, and I&amp;rsquo;ll be covering the testing strategy for each of them.&lt;/p>
&lt;p>But before getting into how each layer is exercised on its way to production, let&amp;rsquo;s talk about external dependencies&amp;hellip; because dependencies are the root of all evil when it comes to the usual poor testing strategies you may encounter.&lt;/p>
&lt;div class="container action-highlight p-4 my-4 d-md-none">
&lt;div class="row text-center">
&lt;p>A blog on operating systems, programming languages, testing, build systems, my own software
projects and even personal productivity. Specifics include FreeBSD, Linux, Rust, Bazel and
EndBASIC.&lt;/p>
&lt;/div>
&lt;div class="row">
&lt;div class="col">
&lt;div class="form-group">
&lt;form action="https://endtracker.azurewebsites.net/api/sites/e8da9f62-b7ac-4fe9-bf20-7c527199a376/subscribers/add" method="post">
&lt;input type="text" name="email"
placeholder="Enter your email"
class="form-control input-sm text-center my-1"/>
&lt;button type="submit" class="btn btn-primary btn-block my-1">Subscribe&lt;/button>
&lt;/form>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="row px-2">
&lt;div class="col col-sm-5 text-left">
&lt;small>&lt;span class="subscriber-count">0&lt;/span> subscribers&lt;/small>
&lt;/div>
&lt;div class="col col-sm-7 text-right">
&lt;p>
&lt;a rel="me" href="https://mastodon.online/@jmmv">
&lt;img src="/images/badges/mastodon-logo.svg" width="32px" height="32px" alt="Follow @jmmv on Mastodon">
&lt;/a>
&lt;a href="https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fjmmv.dev%2F&amp;amp;screen_name=jmmv">
&lt;img src="/images/badges/Twitter_logo_blue.svg" width="32px" height="32px" alt="Follow @jmmv on Twitter">
&lt;/a>
&lt;a href="/feed.xml">&lt;img src="/images/badges/feed-icon-28x28.png" alt="RSS feed">&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h1 id="interacting-with-dependencies">Interacting with dependencies&lt;/h1>
&lt;p>Pretty much any web service relies on other services, which I&amp;rsquo;ll call &lt;em>dependencies&lt;/em>. These include databases, queuing systems, distributed storage, remote logging&amp;hellip; you name it. The list of dependencies may be long, and their direct use in tests is typically where the friction in testing comes from: most service implementations are unable to stub their dependencies out, so the developers end up having to run the real dependencies to execute any test.&lt;/p>
&lt;p>If you have worked on the development of any modern web service, particularly in a corporate environment, you&amp;rsquo;ve witnessed the issues that running real dependencies causes:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>You have had to carefully set up your development environment with the right versions of tools and services, wasting hours (or days!) of productive time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You have had to troubleshoot test failures caused by problems in your development environment. Any small deviation from the blessed configuration can lead to mysterious problems and you are on your own to figure them out. &amp;ldquo;Works on my machine!&amp;rdquo; is a common excuse to not get involved in solving a coworker&amp;rsquo;s issue.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You have had to rely on overly powerful machines to run the tests because all the dependencies are huge and consume large amounts of RAM and CPU. After all, each dependency assumes it will be running on its own server(s) and is likely written in a language different from all other dependencies, thus requiring its own heavy runtime. &lt;a href="/2023/06/fast-machines-slow-machines.html">Talk about waste, huh.&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You have had to patiently wait for many minutes every time you run tests while Docker downloads multi-GB images, starts the dependencies, and waits for them to be ready to serve requests after (re)starting from scratch.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You have had to suffer from flaky tests because the connections to the dependent services sometimes fail or the state of the dependent services has somehow been polluted by other tests.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You have had to witness entire teams being spun up and funded to deal with slow CI runs and flaky tests, all while spending countless machines to support these resource-hungry tests.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>These issues are all avoidable with proper &lt;em>upfront care&lt;/em>. I&amp;rsquo;m convinced that most developers want to do the right thing, but: one, many times they don&amp;rsquo;t &lt;em>know&lt;/em> what the right thing &lt;em>even is&lt;/em>; and, two, the pressure to &amp;ldquo;launch and iterate&amp;rdquo; often comes with an empty promise that there will be time &amp;ldquo;later&amp;rdquo; to address past cut corners. And you well know that automated tests are often ignored until they become truly necessary&amp;mdash;that is, when the product is crashing left and right and customers are threatening to leave&amp;mdash;at which point a solid testing infrastructure is non-existent and cannot be easily retrofit.&lt;/p>
&lt;p>A key foundation to avoid these problems is to architect the system in a way that puts all external dependencies behind interfaces from the ground up. These interfaces then let you plug in different implementations of the dependencies such that most tests can skip using the real dependencies. In other words, the key foundation is &lt;strong>Dependency Injection (DI)&lt;/strong>. And no, I&amp;rsquo;m not talking about fancy DI frameworks: all I&amp;rsquo;m talking about is the very basics of defining interfaces or traits and passing instances of those to constructors and functions.&lt;/p>
&lt;p>Now, of course, there is a balance between A) fast and deterministic tests that rely on fake services and B) slow and accurate tests that rely on real services: the more you stub out real dependencies, the less accurate tests become. The idea, though, is to have the &lt;em>choice&lt;/em> to pick one or the other on a test by test basis depending on the scenario to validate. And to make that choice, the system architecture must be in place to support it from the very beginning. With that in place, you can come up with the best testing strategy for each scenario, and you can choose how much of test collateral has to run every time you run tests and how much of it can be postponed to PR merge time or nightly runs.&lt;/p>
&lt;p>In my services, my goal is to make the vast majority of tests run with a simple &lt;code>cargo test&lt;/code> after a &lt;code>git clone&lt;/code>. No configuration necessary. A small subset of tests &lt;em>do&lt;/em> talk to the real dependencies and require configuration but, while these can run locally, I rarely need to do so because they are automated to run in CI at PR merge time.&lt;/p>
&lt;p>Let&amp;rsquo;s dive into the different layers of the architecture to see how these ideas play out. The layers are one for database access, one for business logic, and one for REST handling. You may want to read &lt;a href="/2023/03/introducing-iii-iv.html">&amp;ldquo;Introducing III-IV&amp;rdquo;&lt;/a> and &lt;a href="/2023/06/mvc-non-ui-apps.html">&amp;ldquo;MVC but for non-UI apps&amp;rdquo;&lt;/a> beforehand, both of which describe the general architecture of these services.&lt;/p>
&lt;h1 id="database-layer-testing">Database layer testing&lt;/h1>
&lt;p>My services use PostgreSQL in production. While setting up a local instance of this database is not difficult and it doesn&amp;rsquo;t consume any meaningful resources when idle, it&amp;rsquo;s still far from the zero setup experience I strive to achieve. So the first thing I had to do was hide the database queries behind an interface. The basic building blocks look like this and can be found in the &lt;a href="https://github.com/jmmv/iii-iv/blob/eec320cd02149f223d8a9c7f8d697845ec2114d8/core/src/db.rs">&lt;code>iii_iv_core::db&lt;/code>&lt;/a> module:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="sd">/// Abstraction over the database connection.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="cp">#[async_trait]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Type of the transaction wrapper type to generate.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">type&lt;/span> &lt;span class="nc">Tx&lt;/span>: &lt;span class="nc">BareTx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Begins a transaction.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">begin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">DbResult&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="bp">Self&lt;/span>::&lt;span class="n">Tx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="sd">/// Common operations for all transactions.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="cp">#[async_trait]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">BareTx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Commits the transaction.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">commit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">DbResult&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>Db&lt;/code> trait exposes a generic mechanism to open a transaction against a database via its &lt;code>begin&lt;/code> method. The returned transaction type is parameterized on &lt;code>Db::Tx&lt;/code>, which has to be a subtrait of &lt;code>BareTx&lt;/code>. In turn, &lt;code>BareTx&lt;/code> represents the common operations one can do with a generic transaction but does not have any domain-specific knowledge.&lt;/p>
&lt;p>Each web service is responsible for supplying its own transaction trait that extends &lt;code>BareTx&lt;/code> with the operations that make sense in its domain. For example, here is how the sample key/value store service that ships with III-IV exposes the database operations needed to implement the key retrieval and storage operations. Note that the upstream code uses the name &lt;code>Tx&lt;/code> for this trait, but I&amp;rsquo;ve renamed it to &lt;code>KVStoreTx&lt;/code> in this text for clarity:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#[async_trait]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">KVStoreTx&lt;/span>: &lt;span class="nc">BareTx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Gets the current value of the given `key`.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">get_key&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">key&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">Key&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">DbResult&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sd">/// Sets `key` to `entry`, which includes its value and version.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">set_key&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">key&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">Key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">entry&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">Entry&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">DbResult&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... and several more ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There is nothing in these interfaces that points to database-specific behavior, which is intentional. The only thing that client code is allowed to do is create a transaction and call the business-specific methods on it, without knowing what the transaction is talking to. Going back to the example above, this snippet would fetch the value of a key from the key/value store:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get_key&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commit&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With the service-specific transaction type in place (&lt;code>KVStoreTx&lt;/code>), the service is also responsible for supplying separate implementations of it for all databases the service wishes to support. As mentioned earlier, this means providing a variant for PostgreSQL for production usage. But what about tests? Tests could use their own database-less implementation&amp;mdash;for this trivial example, a &lt;code>HashMap&lt;/code> would suffice&amp;mdash;but going this route becomes tricky once you want to reproduce more realistic OLTP database behavior, especially when concurrent operations take place. The other obvious alternative is to use SQLite: a real database that requires zero configuration, which fits the perfect bill for unit tests.&lt;/p>
&lt;p>As a result, I end up with the following types in the system:&lt;/p>
&lt;ul>
&lt;li>A generic &lt;code>PostgresDb&lt;/code> (provided by &lt;a href="https://github.com/jmmv/iii-iv/tree/eec320cd02149f223d8a9c7f8d697845ec2114d8/postgres/">&lt;code>iii_iv_postgres&lt;/code>&lt;/a>) and a service-specific &lt;code>PostgresKVStoreTx&lt;/code> for production.&lt;/li>
&lt;li>A generic &lt;code>SqliteDb&lt;/code> (provided by &lt;a href="https://github.com/jmmv/iii-iv/tree/eec320cd02149f223d8a9c7f8d697845ec2114d8/sqlite/">&lt;code>iii_iv_sqlite&lt;/code>&lt;/a>) and service-specific &lt;code>SqliteKVStoreTx&lt;/code> for tests.&lt;/li>
&lt;/ul>
&lt;p>Implementing the same database queries against two different database systems is annoying indeed, but forcing myself to do this keeps me honest in maintaining true abstractions. However, it is critical that these implementations behave as similarly as possible and, to guarantee this, I write extensive unit tests in a separate &lt;code>db/tests.rs&lt;/code> file. These tests look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">test_simplified_get_after_set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">db&lt;/span>: &lt;span class="nc">D&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">KVStoreTx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Key&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;the-key&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_owned&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Entry&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;insert&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_owned&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Version&lt;/span>::&lt;span class="n">from_u32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">set_key&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">assert_eq!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get_key&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">commit&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, each tests is parameterized on a &lt;code>D&lt;/code> type. The &lt;code>D&lt;/code> type is an implementation of the &lt;code>Db&lt;/code> trait presented earlier, whose only purpose is to yield new transactions of its inner &lt;code>D::Tx&lt;/code> type based on a pre-established connection. The &lt;code>D::Tx&lt;/code> type is mapped to the domain-specific &lt;code>KVStoreTx&lt;/code> type so that tests have access to the primitives to be tested. Notably, though, the tests have no way of knowing which database they are talking to.&lt;/p>
&lt;p>With these generic tests in place, the question is: how are they executed against the individual database implementations? The &lt;code>db/postgres.rs&lt;/code> and &lt;code>db/sqlite.rs&lt;/code> modules of each service define &lt;code>#[test]&lt;/code> entry points for each test. These entry points are thin wrappers for the common test code in &lt;code>db/tests.rs&lt;/code> and their sole purpose is to establish a connection to the database and then delegate to the test implementation. Basically, each wrapper looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="sd">/// This is the specialization of a test for SQLite.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="cp">#[tokio::test]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">test_simplified_get_after_set&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Create a connection to the SQLite in-memory database.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">iii_iv_sqlite&lt;/span>::&lt;span class="n">testutils&lt;/span>::&lt;span class="n">setup&lt;/span>::&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">SqliteKVStoreTX&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Delegate to the common test code.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">crate&lt;/span>::&lt;span class="n">db&lt;/span>::&lt;span class="n">tests&lt;/span>::&lt;span class="n">test_simplified_get_after_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="sd">/// This is the specialization of a test for PostgreSQL.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">///
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">/// Note how the test is marked `ignore`. We&amp;#39;ll see why that is later on.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd">&lt;/span>&lt;span class="cp">#[tokio::test]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[ignore = &lt;/span>&lt;span class="s">&amp;#34;Requires environment configuration and is expensive&amp;#34;&lt;/span>&lt;span class="cp">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">test_simplified_get_after_set&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Create a connection to PostgreSQL using the configuration specified via
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// environment variables. The connection is set up to use a temporary
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// schema so that tests are isolated from each other and don&amp;#39;t leave garbage
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// behind.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">iii_iv_postgres&lt;/span>::&lt;span class="n">testutils&lt;/span>::&lt;span class="n">setup&lt;/span>::&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PostgresKVStoreTx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Delegate to the common test code.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">crate&lt;/span>::&lt;span class="n">db&lt;/span>::&lt;span class="n">tests&lt;/span>::&lt;span class="n">test_simplified_get_after_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For a long while, this is actually how the test wrappers looked like and&amp;hellip; they were written by hand. At some point, I grew tired of copy/pasting these snippets over and over again and invested a wee bit of time learning how to leverage macros to cut down the repetition. It wasn&amp;rsquo;t as difficult as I imagined. You can see how this works in practice in the sample key/value store &lt;a href="https://github.com/jmmv/iii-iv/blob/eec320cd02149f223d8a9c7f8d697845ec2114d8/example/src/db/tests.rs">tests&lt;/a> and their &lt;a href="https://github.com/jmmv/iii-iv/blob/eec320cd02149f223d8a9c7f8d697845ec2114d8/example/src/db/sqlite.rs#L150">instantiation for SQLite&lt;/a>.&lt;/p>
&lt;h1 id="driver-layer-testing">Driver layer testing&lt;/h1>
&lt;p>Let&amp;rsquo;s jump one level up and look at the testing approach for the driver layer.&lt;/p>
&lt;p>The driver layer of each service typically exposes a single &lt;code>Driver&lt;/code> type. The &lt;code>Driver&lt;/code> maintains the state of the application and provides entry points for all REST operations, usually with a 1:1 mapping between REST API and driver method.&lt;/p>
&lt;p>To instantiate a &lt;code>Driver&lt;/code>, all service dependencies are injected at creation time. Here is an example of how the &lt;code>Driver&lt;/code> constructor looks like for the EndTRACKER data plane service, which is more interesting to analyze than the driver for the sample key/value store:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">pub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">crate&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>: &lt;span class="nc">D&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">clock&lt;/span>: &lt;span class="nc">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">geolocator&lt;/span>: &lt;span class="nc">G&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">abuse_policy&lt;/span>: &lt;span class="nc">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">queue_client&lt;/span>: &lt;span class="nc">Client&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BatchTask&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">clock&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">geolocator&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">abuse_policy&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">queue_client&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>See? A trivial constructor that &lt;em>does no work&lt;/em>, as it shall be done. Neat&amp;hellip; but what are all these type parameters? These type parameters are what allow injecting the different implementations of each dependency into the service for testing purposes.&lt;/p>
&lt;p>Now, why are they are type parameters? Simply because I wanted to &lt;em>try&lt;/em> using static dispatch, and&amp;hellip; things have gotten unwieldy. All references to the &lt;code>Driver&lt;/code> type in &lt;code>impl&lt;/code> blocks look like this awful chunk:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Driver&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>: &lt;span class="nc">AbusePolicy&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">C&lt;/span>: &lt;span class="nc">Clock&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">DataTx&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">From&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D&lt;/span>::&lt;span class="n">SqlxTx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">G&lt;/span>: &lt;span class="nc">GeoLocator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>: &lt;span class="nc">Db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">QD&lt;/span>::&lt;span class="n">Tx&lt;/span>: &lt;span class="nc">ClientTx&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">BatchTask&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">From&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="no">QD&lt;/span>::&lt;span class="n">SqlxTx&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Send&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Sync&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If I had to write this monstrosity &lt;em>just once&lt;/em>, it could be tolerable. But because I split the implementation of the &lt;code>Driver&lt;/code> across different files to keep them short&amp;hellip; this chunk is repeated across many files and keeping them in sync is a humongous hassle. I&amp;rsquo;m&amp;hellip; not happy. Fear not though: the alternative is to use &lt;code>Arc&amp;lt;Mutex&amp;lt;T&amp;gt;&amp;gt;&lt;/code> everywhere with &lt;code>T&lt;/code> being a type alias over the trait, which keeps the noise down significantly. Mind you, I used to do this and I&amp;rsquo;m not sure the switch to static dispatch was worth it. But I digress&amp;hellip;&lt;/p>
&lt;p>Because all these types are parameterized, it means I can instantiate a &lt;code>Driver&lt;/code> and back it by different implementations of each dependency. For example:&lt;/p>
&lt;ul>
&lt;li>The &lt;code>db&lt;/code> can be backed by PostgreSQL in production and SQLite in tests as I have already covered in the database layer section.&lt;/li>
&lt;li>The &lt;code>clock&lt;/code> can be backed by a &lt;code>SystemClock&lt;/code> that returns the system time, and also by a &lt;code>MonotonicClock&lt;/code> that exposes fake (and deterministic!) time.&lt;/li>
&lt;li>The &lt;code>geolocator&lt;/code> can be backed by an &lt;code>AzureGeoLocator&lt;/code> that talks to Azure Maps, and also by a &lt;code>MockGeoLocator&lt;/code> that returns pre-configured results and errors.&lt;/li>
&lt;/ul>
&lt;p>&amp;hellip; and similarly for any other resource needed by the &lt;code>Driver&lt;/code>.&lt;/p>
&lt;p>This, once again, allows: writing super-fast non-flaky unit tests because they do not reach out to real resources; running the tests with zero configuration; and avoiding the need to spawn resource-hungry dependencies on the local machine.&lt;/p>
&lt;p>So what do tests in the driver layer actually test? These tests are mostly responsible for validating the business logic. They cover all happy paths but, critically, they &lt;em>also&lt;/em> cover all error paths I can think about&amp;mdash;something that&amp;rsquo;s made trivial by the use of fake dependencies. These tests do not cover any HTTP interactions though; for those, we have to move up one layer.&lt;/p>
&lt;h1 id="rest-layer-testing">REST layer testing&lt;/h1>
&lt;p>The REST layer is the one interfacing with the user of the web services via the network. This is the layer where requests are deserialized, validated, routed to the driver, and where responses or errors are serialized back to the user with the correct HTTP status codes.&lt;/p>
&lt;p>This layer is currently written using the &lt;code>axum&lt;/code> web framework, whose fundamental building block is the &lt;code>Router&lt;/code>. Each web service creates a new &lt;code>Router&lt;/code> and registers all API endpoints plus an instance of the &lt;code>Driver&lt;/code> that gets passed to the API handlers as a state parameter. Take a look at the &lt;a href="https://github.com/jmmv/iii-iv/blob/eec320cd02149f223d8a9c7f8d697845ec2114d8/example/src/rest/mod.rs#L37">sample key/value store router creation&lt;/a>.&lt;/p>
&lt;p>Because the &lt;code>Driver&lt;/code> is injected into the REST &lt;code>Router&lt;/code>, it can be parameterized with all the non-production dependencies as described earlier&amp;mdash;and it is. Now, the question is: what do the tests of the REST layer look like and what do they do?&lt;/p>
&lt;p>For these, I used to spawn a local instance of the HTTP server, listening on a random unused port, and then made the tests call HTTP endpoints over the loopback interface with the &lt;code>reqwest&lt;/code> crate. Once I moved to &lt;code>axum&lt;/code> from &lt;code>warp&lt;/code>, things improved. I could start relying on the one-shot testing feature exposed by this framework, which allows calling the router endpoints without going through the network. Not a revolutionary change, but a nice improvement for simplicity indeed.&lt;/p>
&lt;p>To test this layer, I apply the &lt;a href="/2020/12/builder-pattern-for-tests.html">builder pattern to define test scenarios&lt;/a>. With this idiom, I can capture the parameters to an API call and the expectations of what it should return in a declarative manner. Here is one example of a test for the &amp;ldquo;put key&amp;rdquo; operation of the sample key/value store:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">route&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="p">(&lt;/span>&lt;span class="n">http&lt;/span>::&lt;span class="n">Method&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">http&lt;/span>::&lt;span class="n">Method&lt;/span>::&lt;span class="no">PUT&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">format!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/api/v1/keys/&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[tokio::test]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">test_create&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TestContext&lt;/span>::&lt;span class="n">setup&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OneShotBuilder&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">route&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;first&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">send_text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;new value&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">expect_status&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">http&lt;/span>::&lt;span class="n">StatusCode&lt;/span>::&lt;span class="no">CREATED&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">expect_json&lt;/span>::&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Entry&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">exp_response&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Entry&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;new value&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_owned&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Version&lt;/span>::&lt;span class="n">initial&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">assert_eq!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exp_response&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">assert_eq!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exp_response&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get_key&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;first&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this test, &lt;code>TestContext&lt;/code> is a container that helps set up the &lt;code>Driver&lt;/code> with fake dependencies and instantiates the &lt;code>Router&lt;/code> around it. The most interesting part is the use of my own &lt;a href="https://github.com/jmmv/iii-iv/blob/eec320cd02149f223d8a9c7f8d697845ec2114d8/core/src/rest.rs#L223">&lt;code>OneShotBuilder&lt;/code>&lt;/a>, which implements the builder pattern for one-shot calls. With this at hand, the test says that it has to send a specific text document to a specific &lt;code>PUT&lt;/code> endpoint and then expects that the HTTP API call returns a &lt;code>CREATED&lt;/code> status code with a valid JSON response of type &lt;code>Entry&lt;/code>. Finally, the &lt;code>context.get_key&lt;/code> call is a helper method that &lt;em>pokes directly into the database&lt;/em> to see if the key is set, which validates the side-effects of the API call on persistent storage.&lt;/p>
&lt;p>The tests in this layer are responsible for validating anything that&amp;rsquo;s specific to the interactions with the user over HTTP, but these tests assume that both the driver and database layers work correctly. This is why these tests do not validate in excruciating detail all the possible corner cases that we can face in the driver or its interactions with external dependencies: the driver tests have that responsibility.&lt;/p>
&lt;h1 id="fidelity-problems">Fidelity problems&lt;/h1>
&lt;p>Alright, so that&amp;rsquo;s the majority of the current testing approach. We have seen how the foundational database layer is architected to support dual implementations via PostgreSQL and SQLite, how other supporting services are modeled with the same duality, and how the driver and REST layers leverage the in-memory / fake implementations to provide logical test coverage at all layers. As is, these provide very good coverage of the functionality of the web services and give me almost full confidence that &lt;code>main&lt;/code> is release-quality at any given time.&lt;/p>
&lt;p>But there are still some risks.&lt;/p>
&lt;p>The major risk in using SQLite for tests vs. PostgreSQL for production is that they are very different databases. Sure, they are both OLTP SQL databases, but their SQL languages are distinct dialects and SQLite is in-process whereas PostgreSQL runs on a server. Dealing with slightly-different SQL queries is easy because the differences are obvious, but there are subtle differences in behavior that influence how calls behave, especially in error conditions. For example: you will never experience a &amp;ldquo;maximum connections reached&amp;rdquo; error with SQLite, but you surely will with PostgreSQL. Similarly, SQLite might give you trouble with concurrent writes while PostgreSQL won&amp;rsquo;t. There are also risks when replacing the clock with a fake one, or when replacing other services such as the Azure Maps or SMTP clients with stub implementations.&lt;/p>
&lt;p>Now, you&amp;rsquo;d say: &lt;em>&amp;ldquo;Well, you are facing these fidelity issues because you don&amp;rsquo;t test against the real thing, duh. If all your tests used the real dependencies, then you&amp;rsquo;d be fine!&amp;rdquo;&lt;/em> Except&amp;hellip; that&amp;rsquo;s not how testing works. When writing a test, you can do two things:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>You can write tests for the &amp;ldquo;known knowns&amp;rdquo;: the happy and failure paths that you know can happen.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can write tests for the &amp;ldquo;known unknowns&amp;rdquo;: the scenarios you think might happen but for which you have no good answers and you need to discover what their behavior is.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>These are easy to model in tests, and if you are writing these tests, then you can make sure your real and fake dependencies behave in the same way.&lt;/p>
&lt;p>But there is another class of failures that you cannot test for with unit tests: the &amp;ldquo;unknown unknowns&amp;rdquo;. These are the situations you do not anticipate, and because you do not anticipate them, you cannot write tests for them. It doesn&amp;rsquo;t matter that you are using the real dependencies or fake dependencies. If you cannot imagine these scenarios, no test will cover them. And this is where I have encountered interesting bugs in production before.&lt;/p>
&lt;h1 id="real-system-testing">Real system testing&lt;/h1>
&lt;p>Thus, even though most of the testing I do in the web services is fast and requires no setup, there is still a need to validate &amp;ldquo;the real thing&amp;rdquo;: that is, the service talking to the real dependencies under real world conditions and usage.&lt;/p>
&lt;p>To accomplish this, I do two things.&lt;/p>
&lt;p>The first is I write tests that actually talk to the real services (oops). These tests all require manual configuration and are marked with &lt;code>#[ignore]&lt;/code> as we saw earlier so that a &lt;code>cargo test&lt;/code> won&amp;rsquo;t pick them up by default. The CI jobs are configured to supply the right settings for these tests, and the PR merge checks forcibly run these ignored tests. It is also possible to run these tests locally by manually configuring the environment in a &lt;code>config.env&lt;/code> file and using a trivial &lt;code>test.sh&lt;/code> script that hooks things up with &lt;code>cargo test&lt;/code>, but as said earlier, I rarely have to do so.&lt;/p>
&lt;p>The second is I deploy to a staging environment and do manual testing on it. Every commit merged into &lt;code>main&lt;/code> gets automatically deployed to a staging instance of the service (which is made easy by Azure Functions&amp;rsquo; slot feature), and I do some manual validation that things work. I could automate this testing, of course, but it is something that can still wait.&lt;/p>
&lt;h1 id="is-this-enough">Is this enough?&lt;/h1>
&lt;p>I know this is an overly simplistic view of the world, and that this testing approach can let some subtle bugs slip through. It has actually happened before. But thanks to this testing approach&amp;mdash;and Rust&amp;rsquo;s type system, whose help cannot be overstated&amp;mdash;every new feature I have launched &lt;em>has worked on the first try&lt;/em> and the web services have kept happily chugging along the years. This is critical to me because these web services are just side projects of mine, so I must ensure they cause me the least trouble possible in production.&lt;/p>
&lt;p>Finally, let me clarify one thing: I&amp;rsquo;ve been talking about &amp;ldquo;unit tests&amp;rdquo; throughout this post, but if we want to be pedantic, almost nothing of what I described are pure unit tests. Every test at every layer relies on the layers below it to behave correctly: the service&amp;rsquo;s own code is never stubbed out so, for example, a test for the REST layer will run code in the driver and database layers. The only thing that&amp;rsquo;s stubbed out are the connections to external services. I believe this style of testing provides much more realistic scenarios at the expense of making them more subtle to breakage when code changes.&lt;/p>
&lt;p>And that&amp;rsquo;s it for today. If you liked this post, you may also enjoy &lt;a href="/2020/12/unit-testing-a-console-app.html">&amp;ldquo;Unit-testing a console app (a text editor)&amp;rdquo;&lt;/a> from over 2 years ago. It is then that I came up with the idea of using the builder pattern to define tests, and that idea still proves very useful to this day.&lt;/p></description></item><item><title>ldd(1) and untrusted binaries</title><link>https://jmmv.dev/2023/07/ldd-untrusted-binaries.html</link><pubDate>Sat, 01 Jul 2023 16:30:00 -0700</pubDate><guid>https://jmmv.dev/2023/07/ldd-untrusted-binaries.html</guid><description>&lt;p>While diagnosing a non-determinism Bazel issue at work, I had to compare the dynamic libraries used by two builds of the same binary. To do so, I used &lt;code>ldd(1)&lt;/code>. The list of libraries printed by the tool was the same between the two builds, but the numbers next to them were different. Which numbers, you ask? Well, take a look at this sample output:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ldd /bin/ls
linux-vdso.so.1 (0x00007fff5bbed000)
libselinux.so.1 =&amp;gt; /lib64/libselinux.so.1 (0x00007f7786f48000)
libcap.so.2 =&amp;gt; /lib64/libcap.so.2 (0x00007f7786f3e000)
libc.so.6 =&amp;gt; /lib64/libc.so.6 (0x00007f7786d60000)
libpcre2-8.so.0 =&amp;gt; /lib64/libpcre2-8.so.0 (0x00007f7786cc6000)
/lib64/ld-linux-x86-64.so.2 (0x00007f7786fad000)
&lt;/code>&lt;/pre>&lt;p>Without prior knowledge, the numbers next to each library seemed to be the base addresses of the libraries once loaded into memory, and they probably differed across builds because of &lt;a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">ASLR&lt;/a>. If this was true, it meant that the differences were irrelevant from a build determinism perspective, but I had to confirm this claim because I had never given these numbers a second thought.&lt;/p>
&lt;div class="container action-highlight p-4 my-4 d-md-none">
&lt;div class="row text-center">
&lt;p>A blog on operating systems, programming languages, testing, build systems, my own software
projects and even personal productivity. Specifics include FreeBSD, Linux, Rust, Bazel and
EndBASIC.&lt;/p>
&lt;/div>
&lt;div class="row">
&lt;div class="col">
&lt;div class="form-group">
&lt;form action="https://endtracker.azurewebsites.net/api/sites/e8da9f62-b7ac-4fe9-bf20-7c527199a376/subscribers/add" method="post">
&lt;input type="text" name="email"
placeholder="Enter your email"
class="form-control input-sm text-center my-1"/>
&lt;button type="submit" class="btn btn-primary btn-block my-1">Subscribe&lt;/button>
&lt;/form>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="row px-2">
&lt;div class="col col-sm-5 text-left">
&lt;small>&lt;span class="subscriber-count">0&lt;/span> subscribers&lt;/small>
&lt;/div>
&lt;div class="col col-sm-7 text-right">
&lt;p>
&lt;a rel="me" href="https://mastodon.online/@jmmv">
&lt;img src="/images/badges/mastodon-logo.svg" width="32px" height="32px" alt="Follow @jmmv on Mastodon">
&lt;/a>
&lt;a href="https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fjmmv.dev%2F&amp;amp;screen_name=jmmv">
&lt;img src="/images/badges/Twitter_logo_blue.svg" width="32px" height="32px" alt="Follow @jmmv on Twitter">
&lt;/a>
&lt;a href="/feed.xml">&lt;img src="/images/badges/feed-icon-28x28.png" alt="RSS feed">&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>To answer the question, I did what one should always do: read the official documentation. I typed &lt;code>man ldd&lt;/code> and was greeted by the following on the CentOS 7 machine I was working on:&lt;/p>
&lt;figure>
&lt;img src="/images/2023-07-01-ldd-manpage.png" width="100%">
&lt;figcaption>Screenshot of the beginning of the &lt;tt>ldd(1)&lt;/tt> manual page on CentOS 7 with the following text highlighted by me: "&lt;i>Be aware, however, that in some circumestances, some versions of &lt;tt>ldd&lt;/tt> may attempt to obtain the dependency information by directly executing the program. Thus, you should &lt;b>never&lt;/b> employ &lt;tt>ldd&lt;/tt> on an untrusted executable&lt;/i>."&lt;/figcaption>
&lt;/figure>
&lt;p>Wait, what? Under some circumstances (which ones?) and with some versions of &lt;code>ldd&lt;/code> (which ones again?&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>), &lt;code>ldd&lt;/code> may &lt;em>execute&lt;/em> the given binary to determine the libraries it uses. Which means that running &lt;code>ldd&lt;/code> on an untrusted binary could compromise your system. The manual page goes on to say that you should never run &lt;code>ldd&lt;/code> against untrusted binaries.&lt;/p>
&lt;p>Needless to say, this was really surprising to see. Why would &lt;code>ldd&lt;/code> execute &lt;em>anything&lt;/em> to print details about a file? I quickly posted this on &lt;a href="https://twitter.com/jmmv/status/1674889696294621184">Twitter&lt;/a> and &lt;a href="https://mastodon.online/@jmmv/110635380384812322">Mastodon&lt;/a>, and the higher-than-usual engagement made me think that many more people than I weren&amp;rsquo;t aware of this behavior&amp;hellip; so I had to investigate a bit more.&lt;/p>
&lt;hr>
&lt;p>This behavior was originally reported as a security vulnerability in &lt;a href="https://www.cvedetails.com/cve/CVE-2009-5064/">CVE-2009-5064&lt;/a> and the report was closed with the rationale: &lt;em>&amp;ldquo;not a security vulnerability because &lt;code>ldd&lt;/code> must not be run on untrusted binaries&amp;rdquo;&lt;/em>. While this may be literally true, I find the answer quite dismissive: how does one &lt;em>know&lt;/em> that, say, &lt;code>readelf&lt;/code> or &lt;code>objdump&lt;/code> can be run against untrusted binaries but &lt;code>ldd&lt;/code> cannot? When giving a file to a tool, the common expectation is that the tool will read and parse the file&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, not &lt;em>run&lt;/em> it. This violates the &lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment">Principle of least astonishment (POLA)&lt;/a>, for me at least.&lt;/p>
&lt;p>Even though upstream did not agree to the security vulnerability report, various people thought there was a real problem, so some Linux distributions &lt;em>did&lt;/em> patch &lt;code>ldd&lt;/code> to not execute binaries directly. I do not have access to an old-enough unpatched Linux system to verify this surprising behavior, but there is a trivial repro in the &lt;a href="https://www.openwall.com/lists/oss-security/2011/03/07/13">&amp;ldquo;ldd can execute an app unexpectedly&amp;rdquo;&lt;/a> email thread along with a simple fix.&lt;/p>
&lt;p>And if my reading is correct, this surprising behavior was removed from the upstream sources back in 2017 (eight years after the original report) in commit &lt;a href="https://sourceware.org/git/?p=glibc.git;a=commit;h=eedca9772e99c72ab4c3c34e43cc764250aa3e3c">&lt;code>eedca9772e&lt;/code>&lt;/a>. It&amp;rsquo;s quite hard to tell if this change was addressing the reported security issue because the commit has no written rationale nor reference to the CVE. Which makes the whole thing feel worse: what I sense is a security-fix-in-disguise begrudgingly accepted after many years of saying this was not a problem&amp;hellip; which is never great. But that&amp;rsquo;s just my read of the whole thing and I&amp;rsquo;m probably wrong.&lt;/p>
&lt;p>In any case, even if &lt;em>this&lt;/em> particular issue is fixed, &lt;strong>it is still unsafe to run &lt;code>ldd&lt;/code> against untrusted binaries&lt;/strong>. &lt;code>ldd&lt;/code> uses the dynamic linker to &lt;em>load&lt;/em> the binary and its dependencies into memory, and then relies on the dynamic linker itself to print details to the console. And because of this, this process can be abused in other working-as-intended ways to trigger code injection as explained in &lt;a href="https://www.cvedetails.com/cve/CVE-2019-1010023">CVE-2019-1010023&lt;/a>. All of these require social engineering though&amp;hellip; but we all know that humans are often the weakest link in security.&lt;/p>
&lt;hr>
&lt;p>So why does &lt;code>ldd&lt;/code> look so problematic anyway? Let&amp;rsquo;s look at the internals of this tool.&lt;/p>
&lt;p>My first surprise was to see that, on Linux, &lt;code>ldd&lt;/code> is a shell script&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&amp;mdash;and a very simple one at that. Poking through &lt;a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=elf/ldd.bash.in;h=e45dec5894fe561585da01ea64b651663128e8d5;hb=HEAD">the contents of &lt;code>/usr/bin/ldd&lt;/code>&lt;/a>, you&amp;rsquo;ll notice that all this script does is pass the given binary to a collection of built-in dynamic linkers (stored in &lt;code>RTLDLIST&lt;/code>) and, once it finds a dynamic linker that can process the binary, it runs the linker against the binary with the &lt;code>LD_TRACE_LOADED_OBJECTS=1&lt;/code> setting. The linker then lays out the binary inside a new process along &lt;em>all&lt;/em> the direct and indirect libraries it requires, dumps information to the console, and exits.&lt;/p>
&lt;p>We can do the same by hand:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ /lib64/ld-linux-x86-64.so.2 --verify /bin/ls &amp;amp;&amp;amp; echo &amp;#39;Supported!&amp;#39;
Supported!
$ LD_TRACE_LOADED_OBJECTS=1 /lib64/ld-linux-x86-64.so.2 /bin/ls
linux-vdso.so.1 (0x00007ffd28dc4000)
libselinux.so.1 =&amp;gt; /lib64/libselinux.so.1 (0x00007feb357d8000)
libcap.so.2 =&amp;gt; /lib64/libcap.so.2 (0x00007feb357ce000)
libc.so.6 =&amp;gt; /lib64/libc.so.6 (0x00007feb355f0000)
libpcre2-8.so.0 =&amp;gt; /lib64/libpcre2-8.so.0 (0x00007feb35556000)
/lib64/ld-linux-x86-64.so.2 (0x00007feb3583d000)
&lt;/code>&lt;/pre>&lt;p>Voila! We get the exact same output that &lt;code>ldd&lt;/code> would produce modulo differences in the addresses across different executions.&lt;/p>
&lt;hr>
&lt;p>I&amp;rsquo;ll probably continue to use &lt;code>ldd&lt;/code> because it is very convenient and I rarely face situations where I have to analyze untrusted binaries. But if those situations ever arise, here are some alternatives:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/haampie/libtree">&lt;code>libtree the-binary&lt;/code>&lt;/a>, which displays the direct and indirect libraries required by a binary as a tree.&lt;/li>
&lt;li>&lt;code>objdump -p the-binary | grep NEEDED&lt;/code>, which is the solution provided in the &lt;code>ldd(1)&lt;/code> manual page I quoted earlier but is not equivalent to &lt;code>ldd&lt;/code> because it can only handle direct dependencies.&lt;/li>
&lt;li>&lt;code>readelf -d the-binary | grep NEEDED&lt;/code>, which is a similar solution to the previous one with the same caveats.&lt;/li>
&lt;/ul>
&lt;p>Before parting, the question I have is: why doesn&amp;rsquo;t &lt;code>ldd&lt;/code> walk the library tree by inspecting ELF headers instead of loading the libraries into a process? The answer might be in the name: I&amp;rsquo;m guessing that &lt;code>ldd&lt;/code> stands for &amp;ldquo;&lt;code>ld&lt;/code> dump&amp;rdquo; and thus it is &lt;em>supposed&lt;/em> to run the dynamic linker.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>This type of unspecific language is what you get when the manual pages are written by a different set of people than those that write the code and when the manual pages are shipped separately from the tools they document. Thanks Linux. This type of nonsense does not happen on the BSDs.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>There is always the risk that the parser has bugs that can be exploited by a malicious file, resulting in untrusted code execution, but that&amp;rsquo;s a different class of issue than &amp;ldquo;let&amp;rsquo;s just run the binary!&amp;rdquo;.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>This might help explain my long-standing question on why macOS does not ship with &lt;code>ldd&lt;/code> and why I always had to use &lt;code>otool&lt;/code>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>