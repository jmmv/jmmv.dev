<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bazel Dynamic Execution on Julio Merino (jmmv.dev)</title><link>https://jmmv.dev/series/bazel-dynamic-execution/index.html</link><description>Recent content in Bazel Dynamic Execution on Julio Merino (jmmv.dev)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>julio@meroh.net (Julio Merino)</managingEditor><webMaster>julio@meroh.net (Julio Merino)</webMaster><copyright>Copyright 2004&ndash;2024 Julio Merino</copyright><lastBuildDate>Tue, 31 Dec 2019 13:20:00 +0000</lastBuildDate><atom:link href="https://jmmv.dev/series/bazel-dynamic-execution/index/feed.xml" rel="self" type="application/rss+xml"/><item><title>Tree artifacts and transient files</title><link>https://jmmv.dev/2019/12/bazel-dynamic-execution-tree-artifacts.html</link><pubDate>Tue, 31 Dec 2019 13:20:00 +0000</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2019/12/bazel-dynamic-execution-tree-artifacts.html</guid><description>&lt;p>To conclude the deep dive into Bazel&amp;rsquo;s dynamic spawn strategy, let&amp;rsquo;s look at the nightmare that tree artifacts have been with the &lt;a href="https://jmmv.dev/2019/12/bazel-dynamic-execution-local-lockfree.html">local lock-free feature&lt;/a>. And, yes, I&amp;rsquo;m double-posting today because I really want to finish these series before the end of the decade&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>!&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Tree artifacts&lt;/strong> are a fancy name for action outputs that are directories, not files. What&amp;rsquo;s special about them is that Bazel does not know &lt;em>a priori&lt;/em> what the directory &lt;em>contents&lt;/em> are: the rule behind the action just specifies that there will be a directory with files, and Bazel has to treat that as the unit of output from the action. Other than that, tree artifacts are &amp;ldquo;just&amp;rdquo; a different kind of output&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p></description></item><item><title>Lifting the local lock for dynamic execution</title><link>https://jmmv.dev/2019/12/bazel-dynamic-execution-local-lockfree.html</link><pubDate>Tue, 31 Dec 2019 07:00:00 +0000</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2019/12/bazel-dynamic-execution-local-lockfree.html</guid><description>&lt;p>In the &lt;a href="https://jmmv.dev/2019/12/bazel-dynamic-execution-download-times.html">previous post&lt;/a>, we saw how accounting for artifact download times makes the dynamic strategy live to its promise of delivering the best of local and remote build times.&lt;/p>
&lt;p>Or does it? If you think about it closely, that change made it so that builds that were purely local couldn&amp;rsquo;t be made worse by enabling the dynamic scheduler: the dynamic strategy would always favor the local branch of a spawn if the remote one took a long time. But for builds that were better off when they were fully remote (think of a fully-cached build with great networking), this is not true: the dynamic strategy might hurt them because because we may discard some of those remote cache hits.&lt;/p></description></item><item><title>Artifact downloads and dynamic execution</title><link>https://jmmv.dev/2019/12/bazel-dynamic-execution-download-times.html</link><pubDate>Mon, 30 Dec 2019 11:00:00 +0000</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2019/12/bazel-dynamic-execution-download-times.html</guid><description>&lt;p>In the &lt;a href="https://jmmv.dev/2019/12/bazel-dynamic-execution-output-locking.html">previous post&lt;/a> of this series, we looked at how the now-legacy implementation of the dynamic strategy uses a per-spawn lock to guard accesses to the output tree. This lock is problematic for a variety of reasons and we are going to peek into one of those here.&lt;/p>
&lt;p>To recap, the remote strategy does the following:&lt;/p>
&lt;ol>
&lt;li>Send spawn execution RPC to the remote service.&lt;/li>
&lt;li>Wait for successful execution (which can come quickly from a cache hit).&lt;/li>
&lt;li>&lt;strong>Lock the output tree&lt;/strong> (only when run within the dynamic strategy).&lt;/li>
&lt;li>Download the spawn&amp;rsquo;s outputs directly into the output tree.&lt;/li>
&lt;/ol>
&lt;p>Note how we lock the output tree &lt;em>before&lt;/em> we have downloaded any outputs, and taking the lock means that the local branch of the same spawn cannot start or complete &lt;em>even if there are plenty of local resources available to run it&lt;/em>.&lt;/p></description></item><item><title>Output conflicts and dynamic execution</title><link>https://jmmv.dev/2019/12/bazel-dynamic-execution-output-locking.html</link><pubDate>Fri, 27 Dec 2019 10:10:00 +0000</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2019/12/bazel-dynamic-execution-output-locking.html</guid><description>&lt;p>When the dynamic scheduler is active, Bazel runs the same &lt;em>spawn&lt;/em> (aka command line) remotely and locally at the same time via &lt;a href="https://jmmv.dev/2019/12/bazel-dynamic-execution-strategy.html">two separate strategies&lt;/a>. These two strategies want to write to the same output files (e.g. object files, archives, or final binaries) on the local disk. In computing, two things trying to affect the same thing require some kind of coÃ¶rdination.&lt;/p>
&lt;p>You might think, however, that because we assume that both strategies are equivalent and will write the same contents to disk&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, this is not problematic. But, in fact, it &lt;em>can&lt;/em> be, because file creations/writes are not atomic. So we need some form of mutual exclusion in place to avoid races.&lt;/p></description></item><item><title>Bazel's dynamic strategy</title><link>https://jmmv.dev/2019/12/bazel-dynamic-execution-strategy.html</link><pubDate>Thu, 26 Dec 2019 10:30:00 +0000</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2019/12/bazel-dynamic-execution-strategy.html</guid><description>&lt;p>After &lt;a href="https://jmmv.dev/2019/12/bazel-dynamic-execution-introduction.html">introducing Bazel&amp;rsquo;s dynamic execution&lt;/a> a couple of posts ago, it&amp;rsquo;s time to dive into its actual implementation details as promised. But pardon for the interruption in the last post, as I had to take a little detour to cover a necessary topic (&lt;a href="https://jmmv.dev/2019/12/bazel-local-resources.html">local resources&lt;/a>) for today&amp;rsquo;s article.&lt;/p>
&lt;p>Simply put, dynamic execution is implemented as &amp;ldquo;just&amp;rdquo; one more &lt;a href="https://jmmv.dev/2019/12/bazel-strategies.html">strategy&lt;/a> called &lt;code>dynamic&lt;/code>. The dynamic strategy, however, is different from all others because it does &lt;em>not&lt;/em> have a corresponding spawn runner. Instead, the &lt;code>dynamic&lt;/code> strategy &lt;em>wraps&lt;/em> two different strategies: one for local execution and one for remote execution.&lt;/p></description></item><item><title>Introduction to Bazel's dynamic execution</title><link>https://jmmv.dev/2019/12/bazel-dynamic-execution-introduction.html</link><pubDate>Fri, 20 Dec 2019 15:00:00 +0000</pubDate><author>julio@meroh.net (Julio Merino)</author><guid>https://jmmv.dev/2019/12/bazel-dynamic-execution-introduction.html</guid><description>&lt;p>Bazel&amp;rsquo;s &lt;strong>dynamic execution&lt;/strong> is a feature that makes your builds faster by using remote &lt;em>and&lt;/em> local resources, transparently and at the same time. We launched this feature in Bazel 0.21 back in February 2019 along an &lt;a href="https://blog.bazel.build/2019/02/01/dynamic-spawn-scheduler.html">introductory blog post&lt;/a> and have been hard at work since then to improve it.&lt;/p>
&lt;p>The reason dynamic execution makes builds faster is two-fold:&lt;/p>
&lt;ul>
&lt;li>first, because we can hide hiccups in the connectivity to the remote build service; and,&lt;/li>
&lt;li>second, because we can take advantage of things like &lt;a href="https://blog.bazel.build/2015/12/10/java-workers.html">persistent workers&lt;/a>, which are designed to offer super-fast edit/build/test cycles.&lt;/li>
&lt;/ul>
&lt;p>Put in numbers, here is what dynamic execution looks like for a relatively large iOS build I measured at Google a few months ago:&lt;/p></description></item></channel></rss>