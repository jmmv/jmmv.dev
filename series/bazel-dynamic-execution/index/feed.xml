<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bazel dynamic execution on jmmv.dev</title>
    <link>https://jmmv.dev/series/bazel-dynamic-execution/index/</link>
    <description>Recent content in Bazel dynamic execution on jmmv.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Dec 2019 13:20:00 +0000</lastBuildDate><atom:link href="https://jmmv.dev/series/bazel-dynamic-execution/index/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tree artifacts and transient files</title>
      <link>https://jmmv.dev/2019/12/bazel-dynamic-execution-tree-artifacts.html</link>
      <pubDate>Tue, 31 Dec 2019 13:20:00 +0000</pubDate>
      
      <guid>https://jmmv.dev/2019/12/bazel-dynamic-execution-tree-artifacts.html</guid>
      <description>To conclude the deep dive into Bazel&amp;rsquo;s dynamic spawn strategy, let&amp;rsquo;s look at the nightmare that tree artifacts have been with the local lock-free feature. And, yes, I&amp;rsquo;m double-posting today because I really want to finish these series before the end of the decade1!
 Tree artifacts are a fancy name for action outputs that are directories, not files. What&amp;rsquo;s special about them is that Bazel does not know a priori what the directory contents are: the rule behind the action just specifies that there will be a directory with files, and Bazel has to treat that as the unit of output from the action.</description>
    </item>
    
    <item>
      <title>Lifting the local lock for dynamic execution</title>
      <link>https://jmmv.dev/2019/12/bazel-dynamic-execution-local-lockfree.html</link>
      <pubDate>Tue, 31 Dec 2019 07:00:00 +0000</pubDate>
      
      <guid>https://jmmv.dev/2019/12/bazel-dynamic-execution-local-lockfree.html</guid>
      <description>In the previous post, we saw how accounting for artifact download times makes the dynamic strategy live to its promise of delivering the best of local and remote build times.
Or does it? If you think about it closely, that change made it so that builds that were purely local couldn&amp;rsquo;t be made worse by enabling the dynamic scheduler: the dynamic strategy would always favor the local branch of a spawn if the remote one took a long time.</description>
    </item>
    
    <item>
      <title>Artifact downloads and dynamic execution</title>
      <link>https://jmmv.dev/2019/12/bazel-dynamic-execution-download-times.html</link>
      <pubDate>Mon, 30 Dec 2019 11:00:00 +0000</pubDate>
      
      <guid>https://jmmv.dev/2019/12/bazel-dynamic-execution-download-times.html</guid>
      <description>In the previous post of this series, we looked at how the now-legacy implementation of the dynamic strategy uses a per-spawn lock to guard accesses to the output tree. This lock is problematic for a variety of reasons and we are going to peek into one of those here.
To recap, the remote strategy does the following:
 Send spawn execution RPC to the remote service. Wait for successful execution (which can come quickly from a cache hit).</description>
    </item>
    
    <item>
      <title>Output conflicts and dynamic execution</title>
      <link>https://jmmv.dev/2019/12/bazel-dynamic-execution-output-locking.html</link>
      <pubDate>Fri, 27 Dec 2019 10:10:00 +0000</pubDate>
      
      <guid>https://jmmv.dev/2019/12/bazel-dynamic-execution-output-locking.html</guid>
      <description>When the dynamic scheduler is active, Bazel runs the same spawn (aka command line) remotely and locally at the same time via two separate strategies. These two strategies want to write to the same output files (e.g. object files, archives, or final binaries) on the local disk. In computing, two things trying to affect the same thing require some kind of co√∂rdination.
You might think, however, that because we assume that both strategies are equivalent and will write the same contents to disk1, this is not problematic.</description>
    </item>
    
    <item>
      <title>Bazel&#39;s dynamic strategy</title>
      <link>https://jmmv.dev/2019/12/bazel-dynamic-execution-strategy.html</link>
      <pubDate>Thu, 26 Dec 2019 10:30:00 +0000</pubDate>
      
      <guid>https://jmmv.dev/2019/12/bazel-dynamic-execution-strategy.html</guid>
      <description>After introducing Bazel&amp;rsquo;s dynamic execution a couple of posts ago, it&amp;rsquo;s time to dive into its actual implementation details as promised. But pardon for the interruption in the last post, as I had to take a little detour to cover a necessary topic (local resources) for today&amp;rsquo;s article.
Simply put, dynamic execution is implemented as &amp;ldquo;just&amp;rdquo; one more strategy called dynamic. The dynamic strategy, however, is different from all others because it does not have a corresponding spawn runner.</description>
    </item>
    
    <item>
      <title>Introduction to Bazel&#39;s dynamic execution</title>
      <link>https://jmmv.dev/2019/12/bazel-dynamic-execution-introduction.html</link>
      <pubDate>Fri, 20 Dec 2019 15:00:00 +0000</pubDate>
      
      <guid>https://jmmv.dev/2019/12/bazel-dynamic-execution-introduction.html</guid>
      <description>Bazel&amp;rsquo;s dynamic execution is a feature that makes your builds faster by using remote and local resources, transparently and at the same time. We launched this feature in Bazel 0.21 back in February 2019 along an introductory blog post and have been hard at work since then to improve it.
The reason dynamic execution makes builds faster is two-fold:
 first, because we can hide hiccups in the connectivity to the remote build service; and, second, because we can take advantage of things like persistent workers, which are designed to offer super-fast edit/build/test cycles.</description>
    </item>
    
  </channel>
</rss>
